{
  CmsXmlLanguageFile lang=new CmsXmlLanguageFile(cms);
  String[] filenames;
  String[] nicenames;
  String[] positions;
  Hashtable storage=new Hashtable();
  CmsFolder folder=null;
  CmsFile file=null;
  String nicename=null;
  String currentFilelist=null;
  int count=1;
  float max=0;
  currentFilelist=CmsWorkplaceAction.getCurrentFolder(cms);
  if (currentFilelist == null) {
    currentFilelist=cms.readAbsolutePath(cms.rootFolder());
  }
  List files=cms.getFilesInFolder(currentFilelist);
  List folders=cms.getSubFolders(currentFilelist);
  Vector filefolders=new Vector();
  Iterator enum=folders.iterator();
  while (enum.hasNext()) {
    folder=(CmsFolder)enum.next();
    filefolders.addElement(folder);
  }
  enum=files.iterator();
  while (enum.hasNext()) {
    file=(CmsFile)enum.next();
    filefolders.addElement(file);
  }
  if (filefolders.size() > 0) {
    filenames=new String[filefolders.size() + 2];
    nicenames=new String[filefolders.size() + 2];
    positions=new String[filefolders.size() + 2];
    enum=filefolders.iterator();
    while (enum.hasNext()) {
      CmsResource res=(CmsResource)enum.next();
      if (res.getState() != C_STATE_DELETED) {
        String navpos=cms.readProperty(cms.readAbsolutePath(res),C_PROPERTY_NAVPOS);
        if (navpos != null) {
          nicename=cms.readProperty(cms.readAbsolutePath(res),C_PROPERTY_NAVTEXT);
          if (nicename == null) {
            nicename=res.getResourceName();
          }
          filenames[count]=cms.readAbsolutePath(res);
          nicenames[count]=nicename;
          positions[count]=navpos;
          if (new Float(navpos).floatValue() > max) {
            max=new Float(navpos).floatValue();
          }
          count++;
        }
      }
    }
  }
 else {
    filenames=new String[2];
    nicenames=new String[2];
    positions=new String[2];
  }
  filenames[0]="FIRSTENTRY";
  nicenames[0]=lang.getLanguageValue("input.firstelement");
  positions[0]="0";
  filenames[count]="LASTENTRY";
  nicenames[count]=lang.getLanguageValue("input.lastelement");
  positions[count]=new Float(max + 1).toString();
  sort(cms,filenames,nicenames,positions,count);
  storage.put("FILENAMES",filenames);
  storage.put("NICENAMES",nicenames);
  storage.put("POSITIONS",positions);
  storage.put("COUNT",new Integer(count));
  return storage;
}
