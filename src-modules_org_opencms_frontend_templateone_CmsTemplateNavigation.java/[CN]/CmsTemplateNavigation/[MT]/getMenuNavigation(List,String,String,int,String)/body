{
  StringBuffer result=new StringBuffer(64);
  String showItemProperty;
  int navSize=curNav.size();
  if (navSize > 0) {
    Map subNav=new HashMap();
    Map subIndex=new HashMap();
    boolean entryPresent=false;
    boolean manualConfig=CmsStringUtil.isNotEmpty(menuIndexes);
    for (int i=0; i < navSize; i++) {
      CmsJspNavElement ne=(CmsJspNavElement)curNav.get(i);
      String resName=ne.getResourceName();
      String link=resName;
      if (link.startsWith("/")) {
        link=link(link);
      }
      showItemProperty=property(PROPERTY_HEADNAV_USE,resName,getHeadNavItemDefaultStringValue());
      boolean showEntry=manualConfig || Boolean.valueOf(showItemProperty).booleanValue();
      if (showEntry) {
        entryPresent=true;
        List navEntries=new ArrayList();
        if (currentDepth < getMenuDepth()) {
          if (manualConfig) {
            navEntries=getHeadNavItemsFromConfig(currentDepth + 1,menuIndexes + String.valueOf(i));
          }
 else           if (ne.isFolderLink()) {
            navEntries=getNavigation().getNavigationForFolder(resName);
          }
        }
        String target=ne.getInfo();
        if (CmsStringUtil.isEmpty(target)) {
          target="_self";
        }
        result.append(" <a class=\"mI\" href=\"");
        result.append(link);
        result.append("\"");
        result.append("\" target=\"");
        result.append(target);
        result.append("\"");
        if ((ne.isFolderLink() && hasSubMenuEntries(navEntries)) || (manualConfig && navEntries.size() > 0)) {
          result.append(" onmouseover=\"menuItemMouseover(event, '");
          result.append(prefix);
          result.append("_");
          result.append(resName.hashCode());
          result.append("');\">");
          result.append("<span class=\"mIText\">");
          result.append(ne.getNavText());
          result.append("</span><span class=\"mIArrow\">&#9654;</span></a>");
          subNav.put(resName,navEntries);
          if (manualConfig) {
            subIndex.put(resName,menuIndexes + String.valueOf(i));
          }
        }
 else {
          result.append(">");
          result.append(ne.getNavText());
          result.append("</a>");
        }
      }
    }
    result.append("</div>\n");
    StringBuffer openTag=new StringBuffer(8);
    if ("menu0".equals(prefix) && showAccessibleVersion()) {
      CmsMessages messages=new CmsMessages(CmsTemplateBean.MESSAGE_BUNDLE,getRequestContext().getLocale());
      openTag.append("<div style=\"visibility: hidden; display:none;\">");
      openTag.append("<h3>").append(messages.key("headline.accessible.nav.headline")).append("</h3>");
      openTag.append("<p>").append(messages.key("headline.accessible.nav.text")).append("</p>");
      openTag.append("</div>");
    }
    if (entryPresent) {
      openTag.append("<div class=\"");
      openTag.append(styleClass);
      openTag.append("\" id=\"");
      openTag.append(prefix);
      openTag.append("\" onmouseover=\"menuMouseover(event);\">");
    }
 else {
      openTag.append("<div style=\"visibility: hidden;\" id=\"");
      openTag.append(prefix);
      openTag.append("\">");
    }
    result.insert(0,openTag);
    Iterator i=subNav.keySet().iterator();
    while (i.hasNext()) {
      String resName=(String)i.next();
      List navEntries=(List)subNav.get(resName);
      String newIndex=menuIndexes;
      if (manualConfig) {
        newIndex=(String)subIndex.get(resName);
      }
      result.append(getMenuNavigation(navEntries,styleClass,prefix + "_" + resName.hashCode(),currentDepth + 1,newIndex));
    }
  }
  return result;
}
