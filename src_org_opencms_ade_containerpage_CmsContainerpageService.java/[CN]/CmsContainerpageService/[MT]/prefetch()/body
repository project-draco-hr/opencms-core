{
  CmsCntPageData data=null;
  CmsObject cms=getCmsObject();
  HttpServletRequest request=getRequest();
  try {
    CmsTemplateContextInfo info=OpenCms.getTemplateContextManager().getContextInfoBean(cms,request);
    CmsResource containerPage=getContainerpage(cms);
    boolean isModelPage=isModelPage(cms,containerPage);
    if (isModelPage) {
      getRequest().getSession().setAttribute(CmsVfsSitemapService.ATTR_SHOW_MODEL_EDIT_CONFIRM,Boolean.FALSE);
    }
    TemplateBean templateBean=(TemplateBean)getRequest().getAttribute(CmsTemplateContextManager.ATTR_TEMPLATE_BEAN);
    CmsADESessionCache sessionCache=CmsADESessionCache.getCache(getRequest(),cms);
    sessionCache.setTemplateBean(containerPage.getRootPath(),templateBean);
    long lastModified=containerPage.getDateLastModified();
    String editorUri=OpenCms.getWorkplaceManager().getEditorHandler().getEditorUri(cms,"xmlcontent","User agent",false);
    boolean useClassicEditor=(editorUri == null) || !editorUri.contains("acacia");
    CmsResource detailResource=CmsDetailPageResourceHandler.getDetailResource(request);
    String noEditReason;
    String detailContainerPage=null;
    CmsQuickLaunchLocationCache locationCache=CmsQuickLaunchLocationCache.getLocationCache(request.getSession());
    if (detailResource != null) {
      locationCache.setPageEditorLocation(cms.getRequestContext().getSiteRoot(),cms.getSitePath(detailResource));
      CmsObject rootCms=OpenCms.initCmsObject(cms);
      rootCms.getRequestContext().setSiteRoot("");
      detailContainerPage=CmsJspTagContainer.getDetailOnlyPageName(detailResource.getRootPath());
      if (rootCms.existsResource(detailContainerPage)) {
        noEditReason=getNoEditReason(rootCms,rootCms.readResource(detailContainerPage));
      }
 else {
        String permissionFolder=CmsResource.getFolderPath(detailContainerPage);
        if (!rootCms.existsResource(permissionFolder)) {
          permissionFolder=CmsResource.getParentFolder(permissionFolder);
        }
        noEditReason=getNoEditReason(rootCms,rootCms.readResource(permissionFolder));
      }
    }
 else {
      locationCache.setPageEditorLocation(cms.getRequestContext().getSiteRoot(),cms.getSitePath(containerPage));
      noEditReason=getNoEditReason(cms,containerPage);
    }
    String sitemapPath="";
    boolean sitemapManager=OpenCms.getRoleManager().hasRole(cms,CmsRole.EDITOR);
    if (sitemapManager) {
      sitemapPath=CmsADEManager.PATH_SITEMAP_EDITOR_JSP;
    }
    CmsCntPageData.ElementReuseMode reuseMode=ElementReuseMode.reuse;
    String reuseModeString=getWorkplaceSettings().getUserSettings().getAdditionalPreference("elementReuseMode",true);
    try {
      reuseMode=ElementReuseMode.valueOf(reuseModeString);
    }
 catch (    Exception e) {
      LOG.info("Invalid reuse mode : " + reuseModeString,e);
    }
    InitialElementViewProvider viewHelper=new InitialElementViewProvider();
    viewHelper.init(getSessionCache().getElementView(),containerPage);
    data=new CmsCntPageData(noEditReason,CmsRequestUtil.encodeParams(request),sitemapPath,sitemapManager,detailResource != null ? detailResource.getStructureId() : null,detailContainerPage,lastModified,getLockInfo(containerPage),cms.getRequestContext().getLocale().toString(),useClassicEditor,info,isEditSmallElements(request,cms),Lists.newArrayList(viewHelper.getViewMap().values()),viewHelper.getDefaultView(),reuseMode,isModelPage,isEditingModelGroups(cms,containerPage));
  }
 catch (  Throwable e) {
    error(e);
  }
  return data;
}
