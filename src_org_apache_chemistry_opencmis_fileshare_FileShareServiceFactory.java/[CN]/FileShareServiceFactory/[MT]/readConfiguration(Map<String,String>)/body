{
  List<String> keys=new ArrayList<String>(parameters.keySet());
  Collections.sort(keys);
  for (  String key : keys) {
    if (key.startsWith(PREFIX_LOGIN)) {
      String usernameAndPassword=replaceSystemProperties(parameters.get(key));
      if (usernameAndPassword == null) {
        continue;
      }
      String username=usernameAndPassword;
      String password="";
      int x=usernameAndPassword.indexOf(':');
      if (x > -1) {
        username=usernameAndPassword.substring(0,x);
        password=usernameAndPassword.substring(x + 1);
      }
      repositoryMap.addLogin(username,password);
      log.info("Added login '" + username + "'.");
    }
 else     if (key.startsWith(PREFIX_TYPE)) {
      TypeDefinition type=loadType(replaceSystemProperties(parameters.get(key)));
      if (type != null) {
        typeManager.addType(type);
      }
    }
 else     if (key.startsWith(PREFIX_REPOSITORY)) {
      String repositoryId=key.substring(PREFIX_REPOSITORY.length()).trim();
      int x=repositoryId.lastIndexOf('.');
      if (x > 0) {
        repositoryId=repositoryId.substring(0,x);
      }
      if (repositoryId.length() == 0) {
        throw new IllegalArgumentException("No repository id!");
      }
      if (key.endsWith(SUFFIX_READWRITE)) {
        FileShareRepository fsr=repositoryMap.getRepository(repositoryId);
        for (        String user : split(parameters.get(key))) {
          fsr.addUser(replaceSystemProperties(user),false);
        }
      }
 else       if (key.endsWith(SUFFIX_READONLY)) {
        FileShareRepository fsr=repositoryMap.getRepository(repositoryId);
        for (        String user : split(parameters.get(key))) {
          fsr.addUser(replaceSystemProperties(user),true);
        }
      }
 else {
        String root=replaceSystemProperties(parameters.get(key));
        FileShareRepository fsr=new FileShareRepository(repositoryId,root,typeManager);
        repositoryMap.addRepository(fsr);
        log.info("Added repository '" + fsr.getRepositoryId() + "': "+ root);
      }
    }
  }
}
