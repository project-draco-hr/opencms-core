{
  try {
    CmsResource targetFolder=m_targetFolder.getValue();
    if (targetFolder.isFile()) {
      throw new CmsVfsException(Messages.get().container(org.opencms.workplace.commons.Messages.ERR_COPY_MULTI_TARGET_NOFOLDER_1,m_targetFolder.getValue()));
    }
    overwrite=overwrite || isOverwriteExisting();
    if (!overwrite) {
      List<CmsResource> collidingResources=getExistingFileCollisions(targetFolder);
      if (collidingResources != null) {
        showConfirmOverwrite(collidingResources);
        return;
      }
    }
    Action action=(Action)m_actionCombo.getValue();
    if (action == Action.automatic) {
      if (m_hasContainerPageDefaultFile) {
        action=Action.container_page_automatic;
      }
 else       if (m_context.getResources().size() == 1) {
        if (CmsResourceTypeFolderSubSitemap.isSubSitemap(m_context.getResources().get(0))) {
          action=Action.sub_sitemap;
        }
 else         if (m_context.getResources().get(0).isFile()) {
          action=Action.copy_all;
        }
      }
 else {
        action=Action.copy_sibling_mixed;
      }
    }
    Map<CmsResource,CmsException> errors=new HashMap<CmsResource,CmsException>();
    for (    CmsResource source : m_context.getResources()) {
      try {
        performSingleOperation(source,targetFolder,action,overwrite);
      }
 catch (      CmsException e) {
        errors.put(source,e);
        LOG.error("Error while executing " + m_actionCombo.getValue().toString() + " on resource "+ source.getRootPath(),e);
      }
    }
    if (!errors.isEmpty()) {
      m_context.finish(m_updateResources);
      m_context.error(errors.values().iterator().next());
    }
 else {
      m_context.finish(m_updateResources);
    }
  }
 catch (  CmsException e) {
    m_context.error(e);
  }
}
