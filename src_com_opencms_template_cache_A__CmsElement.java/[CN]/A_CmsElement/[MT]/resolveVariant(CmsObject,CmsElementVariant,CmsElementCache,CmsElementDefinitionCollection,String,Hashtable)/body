{
  boolean resolveDebug=false;
  if (resolveDebug)   System.err.println("= Start resolving variant " + variant);
  int len=variant.size();
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    for (int i=0; i < len; i++) {
      if (resolveDebug)       System.err.print("= Part " + i + " is a ");
      Object o=variant.get(i);
      if (o instanceof String) {
        if (resolveDebug)         System.err.println("String");
        baos.write(((String)o).getBytes());
      }
 else       if (o instanceof byte[]) {
        if (resolveDebug)         System.err.println("byte array");
        baos.write((byte[])o);
      }
 else       if (o instanceof CmsElementLink) {
        if (resolveDebug)         System.err.println("Element Link");
        String lookupName=((CmsElementLink)o).getElementName();
        if (resolveDebug)         System.err.println("= Trying to resolve link \"" + lookupName + "\".");
        CmsElementDefinition elDef=elDefs.get(lookupName);
        if (elDef != null) {
          elDef.joinParameters(parameters);
          parameters.put("_ELEMENT_",elDef.getName());
          A_CmsElement subEl=elementCache.getElementLocator().get(cms,elDef.getDescriptor(),parameters);
          if (resolveDebug)           System.err.println("= Element defintion for \"" + lookupName + "\" says: ");
          if (resolveDebug)           System.err.println("= -> Class    : " + elDef.getClassName());
          if (resolveDebug)           System.err.println("= -> Template : " + elDef.getTemplateName());
          String errorMessage="";
          if (subEl != null) {
            if (resolveDebug)             System.err.println("= Element object found for \"" + lookupName + "\". Calling getContent on this object. ");
            byte[] buffer=null;
            try {
              buffer=subEl.getContent(elementCache,cms,elDefs,lookupName,parameters,null);
            }
 catch (            Exception e) {
              subEl=null;
              buffer=null;
              if (e instanceof CmsException) {
                CmsException ce=(CmsException)e;
                if (ce.getType() == ce.C_ACCESS_DENIED) {
                  if (cms.getRequestContext().isStreaming()) {
                    if (com.opencms.core.I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
                      A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + " Access denied in element " + lookupName);
                      A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + " Streaming is active, so authentication box cannot be requested.");
                    }
                    errorMessage="Access denied";
                  }
 else {
                    if (com.opencms.core.I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
                      A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + " Access denied in element " + lookupName);
                    }
                    throw ce;
                  }
                }
 else {
                  if (com.opencms.core.I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
                    A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + " Error in element " + lookupName);
                    A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + e);
                  }
                }
              }
 else {
                if (com.opencms.core.I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
                  A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + " Non-CmsException in element " + lookupName);
                  A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + e);
                }
              }
            }
            if (buffer != null) {
              baos.write(buffer);
            }
          }
 else {
            if (resolveDebug)             System.err.println("= Cannot find Element object for \"" + lookupName + "\". Ignoring this link. ");
            if (com.opencms.core.I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
              A_OpenCms.log(C_OPENCMS_ELEMENTCACHE,toString() + " Cannot find Element object for \"" + lookupName+ "\". Ignoring this link. ");
            }
          }
          if (subEl == null) {
            baos.write(("[" + lookupName + "] ??? ").getBytes());
            baos.write(errorMessage.getBytes());
          }
        }
 else {
          baos.write(("[" + lookupName + "] Element not defined.").getBytes());
          if (com.opencms.core.I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
            A_OpenCms.log(C_OPENCMS_ELEMENTCACHE,toString() + " No element definition found for \"" + lookupName+ "\". Ignoring this link. ");
          }
          if (resolveDebug) {
            System.err.println("= No element definition found for \"" + lookupName + "\". Ignoring this link. ");
            System.err.println(elDefs.toString());
          }
        }
      }
 else       if (o instanceof CmsMethodLink) {
        if (resolveDebug)         System.err.println("Method Link");
        String methodName=((CmsMethodLink)o).getMethodeName();
        String methodParameter=((CmsMethodLink)o).getMethodParameter();
        A_CmsElement metEle=elementCache.getElementLocator().get(cms,new CmsElementDescriptor(m_className + "." + methodName,"METHOD"),parameters);
        byte[] buffer=null;
        if (metEle != null) {
          try {
            buffer=metEle.getContent(elementCache,cms,elDefs,null,parameters,methodParameter);
          }
 catch (          Exception e) {
            if (e instanceof CmsException) {
              if (com.opencms.core.I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
                A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + " Error in method " + methodName);
                A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + e);
              }
            }
 else {
              if (com.opencms.core.I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
                A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + " Non-CmsException in method " + methodName);
                A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + e);
              }
            }
          }
        }
 else {
          if (resolveDebug)           System.err.println("= Cannot find methodElemtn object for \"" + methodName + "\". Ignoring this link. ");
          if (com.opencms.core.I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
            A_OpenCms.log(C_OPENCMS_ELEMENTCACHE,toString() + " Cannot find method Element object for \"" + methodName+ "\". Ignoring this link. ");
          }
        }
        if (buffer != null) {
          baos.write(buffer);
        }
      }
    }
    return baos.toByteArray();
  }
 catch (  IOException e) {
    if (com.opencms.core.I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(C_OPENCMS_CRITICAL,toString() + " Critical: IOException while writing to OutputStream. ");
    }
    throw new CmsException(CmsException.C_UNKNOWN_EXCEPTION,e);
  }
}
