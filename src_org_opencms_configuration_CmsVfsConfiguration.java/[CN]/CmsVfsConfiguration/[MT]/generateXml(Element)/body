{
  if (OpenCms.getRunLevel() > 1) {
    m_resourceManager=OpenCms.getResourceManager();
    m_xmlContentTypeManager=OpenCms.getXmlContentTypeManager();
    m_defaultFiles=OpenCms.getDefaultFiles();
  }
  Element vfs=parent.addElement(N_VFS);
  Element resources=vfs.addElement(N_RESOURCES);
  Element resourceloadersElement=resources.addElement(N_RESOURCELOADERS);
  List loaders=m_resourceManager.getLoaders();
  for (int i=0; i < loaders.size(); i++) {
    I_CmsResourceLoader loader=(I_CmsResourceLoader)loaders.get(i);
    Element loaderNode=resourceloadersElement.addElement(N_LOADER);
    loaderNode.addAttribute(A_CLASS,loader.getClass().getName());
    ExtendedProperties loaderConfiguratrion=loader.getConfiguration();
    if (loaderConfiguratrion != null) {
      Iterator it=loaderConfiguratrion.getKeys();
      while (it.hasNext()) {
        String name=(String)it.next();
        String value=loaderConfiguratrion.get(name).toString();
        Element paramNode=loaderNode.addElement(N_PARAM);
        paramNode.addAttribute(A_NAME,name);
        paramNode.addText(value);
      }
    }
  }
  Element resourcetypesElement=resources.addElement(N_RESOURCETYPES);
  List resourceTypes=m_resourceManager.getResourceTypes();
  generateResourceTypeXml(resourcetypesElement,resourceTypes,false);
  Element collectorsElement=resources.addElement(N_COLLECTORS);
  Iterator it=m_resourceManager.getRegisteredContentCollectors().iterator();
  while (it.hasNext()) {
    I_CmsResourceCollector collector=(I_CmsResourceCollector)it.next();
    collectorsElement.addElement(N_COLLECTOR).addAttribute(A_CLASS,collector.getClass().getName()).addAttribute(A_ORDER,String.valueOf(collector.getOrder()));
  }
  Element defaultFileElement=vfs.addElement(N_DEFAULTFILES);
  it=m_defaultFiles.iterator();
  while (it.hasNext()) {
    defaultFileElement.addElement(N_DEFAULTFILE).addAttribute(A_NAME,(String)it.next());
  }
  Element translationsElement=vfs.addElement(N_TRANSLATIONS);
  Element fileTransElement=translationsElement.addElement(N_FILETRANSLATIONS).addAttribute(A_ENABLED,new Boolean(m_fileTranslationEnabled).toString());
  it=m_fileTranslations.iterator();
  while (it.hasNext()) {
    fileTransElement.addElement(N_TRANSLATION).setText(it.next().toString());
  }
  Element folderTransElement=translationsElement.addElement(N_FOLDERTRANSLATIONS).addAttribute(A_ENABLED,new Boolean(m_folderTranslationEnabled).toString());
  it=m_folderTranslations.iterator();
  while (it.hasNext()) {
    folderTransElement.addElement(N_TRANSLATION).setText(it.next().toString());
  }
  Element xmlContentsElement=vfs.addElement(N_XMLCONTENT);
  Element xmlWidgetsElement=xmlContentsElement.addElement(N_WIDGETS);
  it=m_xmlContentTypeManager.getRegisteredWidgetNames().iterator();
  while (it.hasNext()) {
    String widget=(String)it.next();
    xmlWidgetsElement.addElement(N_WIDGET).addAttribute(A_CLASS,widget);
  }
  Element xmlSchemaTypesElement=xmlContentsElement.addElement(N_SCHEMATYPES);
  it=m_xmlContentTypeManager.getRegisteredSchemaTypes().iterator();
  while (it.hasNext()) {
    I_CmsXmlSchemaType type=(I_CmsXmlSchemaType)it.next();
    I_CmsXmlWidget widget=m_xmlContentTypeManager.getDefaultWidget(type.getTypeName());
    xmlSchemaTypesElement.addElement(N_SCHEMATYPE).addAttribute(A_CLASS,type.getClass().getName()).addAttribute(A_DEFAULTWIDGET,widget.getClass().getName());
  }
  return vfs;
}
