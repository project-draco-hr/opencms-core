{
  Element vfs=parent.addElement(N_VFS);
  Element resources=vfs.addElement(N_RESOURCES);
  Element resourceloadersElement=resources.addElement(N_RESOURCELOADERS);
  List loaders=m_resourceManager.getLoaders();
  for (int i=0; i < loaders.size(); i++) {
    I_CmsResourceLoader loader=(I_CmsResourceLoader)loaders.get(i);
    Element loaderNode=resourceloadersElement.addElement(N_LOADER);
    loaderNode.addAttribute(A_CLASS,loader.getClass().getName());
    ExtendedProperties loaderConfiguratrion=loader.getConfiguration();
    if (loaderConfiguratrion != null) {
      Iterator it=loaderConfiguratrion.getKeys();
      while (it.hasNext()) {
        String name=(String)it.next();
        String value=loaderConfiguratrion.get(name).toString();
        Element paramNode=loaderNode.addElement(N_PARAM);
        paramNode.addAttribute(A_NAME,name);
        paramNode.addText(value);
      }
    }
  }
  Element resourcetypesElement=resources.addElement(N_RESOURCETYPES);
  List resourceTypes=m_resourceManager.getResourceTypes();
  for (int i=0; i < resourceTypes.size(); i++) {
    resourcetypesElement.addElement(N_TYPE).addAttribute(A_CLASS,resourceTypes.get(i).getClass().getName());
  }
  Element translationsElement=vfs.addElement(N_TRANSLATIONS);
  Element fileTransElement=translationsElement.addElement(N_FILETRANSLATIONS).addAttribute(A_ENABLED,new Boolean(m_fileTranslationEnabled).toString());
  Iterator it=m_fileTranslations.iterator();
  while (it.hasNext()) {
    fileTransElement.addElement(N_TRANSLATION).setText(it.next().toString());
  }
  Element folderTransElement=translationsElement.addElement(N_FOLDERTRANSLATIONS).addAttribute(A_ENABLED,new Boolean(m_folderTranslationEnabled).toString());
  it=m_folderTranslations.iterator();
  while (it.hasNext()) {
    folderTransElement.addElement(N_TRANSLATION).setText(it.next().toString());
  }
  return vfs;
}
