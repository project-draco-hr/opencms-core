{
  if (OpenCms.getRunLevel() >= OpenCms.RUNLEVEL_3_SHELL_ACCESS) {
    m_resourceManager=OpenCms.getResourceManager();
    m_xmlContentTypeManager=OpenCms.getXmlContentTypeManager();
    m_defaultFiles=OpenCms.getDefaultFiles();
  }
  Element vfs=parent.addElement(N_VFS);
  Element resources=vfs.addElement(N_RESOURCES);
  Element resourceloadersElement=resources.addElement(N_RESOURCELOADERS);
  List loaders=m_resourceManager.getLoaders();
  for (int i=0; i < loaders.size(); i++) {
    I_CmsResourceLoader loader=(I_CmsResourceLoader)loaders.get(i);
    Element loaderNode=resourceloadersElement.addElement(N_LOADER);
    loaderNode.addAttribute(A_CLASS,loader.getClass().getName());
    Map loaderConfiguration=loader.getConfiguration();
    if (loaderConfiguration != null) {
      Iterator it=loaderConfiguration.entrySet().iterator();
      while (it.hasNext()) {
        Map.Entry entry=(Map.Entry)it.next();
        String name=(String)entry.getKey();
        String value=(String)entry.getValue();
        Element paramNode=loaderNode.addElement(N_PARAM);
        paramNode.addAttribute(A_NAME,name);
        paramNode.addText(value);
      }
    }
  }
  Element resourcetypesElement=resources.addElement(N_RESOURCETYPES);
  List resourceTypes=new ArrayList();
  if (m_resourceManager.getResTypeUnknownFolder() != null) {
    resourceTypes.add(m_resourceManager.getResTypeUnknownFolder());
  }
  if (m_resourceManager.getResTypeUnknownFile() != null) {
    resourceTypes.add(m_resourceManager.getResTypeUnknownFile());
  }
  resourceTypes.addAll(m_resourceManager.getResourceTypes());
  generateResourceTypeXml(resourcetypesElement,resourceTypes,false);
  Element collectorsElement=resources.addElement(N_COLLECTORS);
  Iterator it=m_resourceManager.getRegisteredContentCollectors().iterator();
  while (it.hasNext()) {
    I_CmsResourceCollector collector=(I_CmsResourceCollector)it.next();
    collectorsElement.addElement(N_COLLECTOR).addAttribute(A_CLASS,collector.getClass().getName()).addAttribute(A_ORDER,String.valueOf(collector.getOrder()));
  }
  Element namegeneratorElement=resources.addElement(N_NAMEGENERATOR);
  String nameGeneratorClass=m_resourceManager.getNameGenerator().getClass().getName();
  namegeneratorElement.addAttribute(A_CLASS,nameGeneratorClass);
  Element mimeTypesElement=resources.addElement(N_MIMETYPES);
  it=m_resourceManager.getMimeTypes().iterator();
  while (it.hasNext()) {
    CmsMimeType type=(CmsMimeType)it.next();
    mimeTypesElement.addElement(N_MIMETYPE).addAttribute(A_EXTENSION,type.getExtension()).addAttribute(A_TYPE,type.getType());
  }
  Element relationTypesElement=resources.addElement(N_RELATIONTYPES);
  it=m_resourceManager.getRelationTypes().iterator();
  while (it.hasNext()) {
    CmsRelationType type=(CmsRelationType)it.next();
    relationTypesElement.addElement(N_RELATIONTYPE).addAttribute(A_NAME,type.getName()).addAttribute(A_TYPE,type.getType());
  }
  boolean writeConfig=false;
  for (it=m_resourceManager.getHtmlConverters().iterator(); it.hasNext(); ) {
    CmsHtmlConverterOption converter=(CmsHtmlConverterOption)it.next();
    if (!converter.isDefault()) {
      writeConfig=true;
      break;
    }
  }
  if (writeConfig) {
    Element htmlConvertersElement=resources.addElement(N_HTML_CONVERTERS);
    for (it=m_resourceManager.getHtmlConverters().iterator(); it.hasNext(); ) {
      CmsHtmlConverterOption converter=(CmsHtmlConverterOption)it.next();
      Element converterElement=htmlConvertersElement.addElement(N_HTML_CONVERTER).addAttribute(A_NAME,converter.getName());
      converterElement.addAttribute(A_CLASS,converter.getClassName());
    }
  }
  Element defaultFileElement=vfs.addElement(N_DEFAULTFILES);
  it=m_defaultFiles.iterator();
  while (it.hasNext()) {
    defaultFileElement.addElement(N_DEFAULTFILE).addAttribute(A_NAME,(String)it.next());
  }
  Element translationsElement=vfs.addElement(N_TRANSLATIONS);
  Element fileTransElement=translationsElement.addElement(N_FILETRANSLATIONS).addAttribute(A_ENABLED,String.valueOf(m_fileTranslationEnabled));
  it=m_fileTranslations.iterator();
  while (it.hasNext()) {
    fileTransElement.addElement(N_TRANSLATION).setText(it.next().toString());
  }
  Element folderTransElement=translationsElement.addElement(N_FOLDERTRANSLATIONS).addAttribute(A_ENABLED,String.valueOf(m_folderTranslationEnabled));
  it=m_folderTranslations.iterator();
  while (it.hasNext()) {
    folderTransElement.addElement(N_TRANSLATION).setText(it.next().toString());
  }
  Element xmlContentsElement=vfs.addElement(N_XMLCONTENT);
  Element xmlWidgetsElement=xmlContentsElement.addElement(N_WIDGETS);
  it=m_xmlContentTypeManager.getRegisteredWidgetNames().iterator();
  while (it.hasNext()) {
    String widget=(String)it.next();
    Element widgetElement=xmlWidgetsElement.addElement(N_WIDGET).addAttribute(A_CLASS,widget);
    String alias=m_xmlContentTypeManager.getRegisteredWidgetAlias(widget);
    if (alias != null) {
      widgetElement.addAttribute(A_ALIAS,alias);
    }
    String defaultConfiguration=m_xmlContentTypeManager.getWidgetDefaultConfiguration(widget);
    if (CmsStringUtil.isNotEmpty(defaultConfiguration)) {
      widgetElement.addAttribute(A_CONFIGURATION,defaultConfiguration);
    }
  }
  Element xmlSchemaTypesElement=xmlContentsElement.addElement(N_SCHEMATYPES);
  it=m_xmlContentTypeManager.getRegisteredSchemaTypes().iterator();
  while (it.hasNext()) {
    I_CmsXmlSchemaType type=(I_CmsXmlSchemaType)it.next();
    I_CmsWidget widget=m_xmlContentTypeManager.getWidgetDefault(type.getTypeName());
    xmlSchemaTypesElement.addElement(N_SCHEMATYPE).addAttribute(A_CLASS,type.getClass().getName()).addAttribute(A_DEFAULTWIDGET,widget.getClass().getName());
  }
  return vfs;
}
