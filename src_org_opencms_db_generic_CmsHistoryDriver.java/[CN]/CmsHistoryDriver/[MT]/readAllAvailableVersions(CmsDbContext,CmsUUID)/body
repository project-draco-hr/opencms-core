{
  ResultSet res=null;
  List result=new ArrayList();
  PreparedStatement stmt=null;
  Connection conn=null;
  try {
    conn=m_sqlManager.getConnection(dbc);
    List historyResources=new ArrayList();
    stmt=m_sqlManager.getPreparedStatement(conn,"C_RESOURCES_HISTORY_READ_ALL_VERSIONS");
    stmt.setString(1,structureId.toString());
    res=stmt.executeQuery();
    while (res.next()) {
      historyResources.add(internalCreateResource(res));
    }
    m_sqlManager.closeAll(dbc,null,stmt,res);
    if (!historyResources.isEmpty()) {
      I_CmsHistoryResource histRes=(I_CmsHistoryResource)historyResources.get(0);
      stmt=m_sqlManager.getPreparedStatement(conn,"C_RESOURCES_HISTORY_READ_NEW_VERSIONS");
      stmt.setString(1,histRes.getResourceId().toString());
      stmt.setInt(2,histRes.getPublishTag());
      res=stmt.executeQuery();
      I_CmsHistoryResource lastHistRes=histRes;
      while (res.next()) {
        int pubTag=res.getInt(1);
        I_CmsHistoryResource newHistRes=internalReadMergedResource(dbc,histRes,pubTag);
        if (newHistRes.getVersion() == lastHistRes.getVersion()) {
          lastHistRes=newHistRes;
          continue;
        }
        lastHistRes=newHistRes;
        result.add(0,lastHistRes);
      }
      m_sqlManager.closeAll(dbc,null,stmt,res);
    }
    for (int i=0; i < historyResources.size(); i++) {
      I_CmsHistoryResource histRes=(I_CmsHistoryResource)historyResources.get(i);
      result.add(histRes);
      if (i < historyResources.size() - 1) {
        I_CmsHistoryResource histRes2=(I_CmsHistoryResource)historyResources.get(i + 1);
        stmt=m_sqlManager.getPreparedStatement(conn,"C_RESOURCES_HISTORY_READ_BTW_VERSIONS");
        stmt.setString(1,histRes.getResourceId().toString());
        stmt.setInt(2,histRes.getPublishTag());
        stmt.setInt(3,histRes2.getPublishTag());
        res=stmt.executeQuery();
        I_CmsHistoryResource lastHistRes=histRes;
        while (res.next()) {
          int pubTag=res.getInt(1);
          I_CmsHistoryResource newHistRes=internalReadMergedResource(dbc,histRes,pubTag);
          if (newHistRes.getVersion() == lastHistRes.getVersion()) {
            lastHistRes=newHistRes;
            continue;
          }
          lastHistRes=newHistRes;
          result.add(lastHistRes);
        }
        m_sqlManager.closeAll(dbc,null,stmt,res);
      }
    }
    if (!result.isEmpty()) {
      I_CmsHistoryResource histRes=(I_CmsHistoryResource)result.get(result.size() - 1);
      if (histRes.getVersion() > 1) {
        stmt=m_sqlManager.getPreparedStatement(conn,"C_RESOURCES_HISTORY_READ_OLD_VERSIONS");
        stmt.setString(1,histRes.getResourceId().toString());
        stmt.setInt(2,histRes.getPublishTag());
        res=stmt.executeQuery();
        I_CmsHistoryResource lastHistRes=histRes;
        while (res.next()) {
          int pubTag=res.getInt(1);
          I_CmsHistoryResource newHistRes=internalReadMergedResource(dbc,histRes,pubTag);
          if (newHistRes.getVersion() == lastHistRes.getVersion()) {
            lastHistRes=newHistRes;
            continue;
          }
          lastHistRes=newHistRes;
          result.add(lastHistRes);
        }
        m_sqlManager.closeAll(dbc,null,stmt,res);
      }
    }
  }
 catch (  SQLException e) {
    throw new CmsDbSqlException(Messages.get().container(Messages.ERR_GENERIC_SQL_1,CmsDbSqlException.getErrorQuery(stmt)),e);
  }
 finally {
    m_sqlManager.closeAll(dbc,conn,stmt,res);
  }
  return result;
}
