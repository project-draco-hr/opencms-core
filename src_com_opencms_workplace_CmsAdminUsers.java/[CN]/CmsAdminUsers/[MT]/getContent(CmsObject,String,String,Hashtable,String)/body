{
  if (OpenCms.isLogging(CmsLog.CHANNEL_WORKPLACE_XML,CmsLog.LEVEL_WARN) && C_DEBUG) {
    OpenCms.log(CmsLog.CHANNEL_WORKPLACE_XML,CmsLog.LEVEL_WARN,this.getClassName() + "getting content of element " + ((elementName == null) ? "<root>" : elementName));
    OpenCms.log(CmsLog.CHANNEL_WORKPLACE_XML,CmsLog.LEVEL_WARN,this.getClassName() + "template file is: " + templateFile);
    OpenCms.log(CmsLog.CHANNEL_WORKPLACE_XML,CmsLog.LEVEL_WARN,this.getClassName() + "selected template section is: " + ((templateSelector == null) ? "<default>" : templateSelector));
  }
  I_CmsSession session=cms.getRequestContext().getSession(true);
  CmsRequestContext reqCont=cms.getRequestContext();
  CmsXmlWpTemplateFile xmlTemplateDocument=new CmsXmlWpTemplateFile(cms,templateFile);
  boolean userYetChanged=true;
  boolean userYetEstablished=true;
  String perspective=(String)parameters.get("perspective");
  if (perspective != null && perspective.equals("user")) {
    session.removeValue("ERROR");
    if (reqCont.getRequest().getParameter("CHANGE") != null) {
      perspective="changeuser";
      userYetChanged=false;
    }
 else {
      if (reqCont.getRequest().getParameter("DELETE") != null) {
        perspective="deleteuser";
      }
 else {
        if (reqCont.getRequest().getParameter("NEW") != null) {
          perspective="newuser";
          userYetEstablished=false;
        }
      }
    }
  }
  if (perspective == null) {
    perspective=new String("user");
  }
  if (perspective.equals("newuser") || perspective.equals("changeuser")) {
    String firstname, desc, street, pwd, pwd2, user, userLastname, town, zipcode, email, defaultGroup;
    if (session.getValue("ERROR") == null) {
      firstname=(String)parameters.get("USERFIRSTNAME");
      desc=(String)parameters.get("USERDESC");
      street=(String)parameters.get("USERSTREET");
      pwd=(String)parameters.get("PWD");
      pwd2=(String)parameters.get("PWD2");
      user=(String)parameters.get("USER");
      userLastname=(String)parameters.get("USERNAME");
      town=(String)parameters.get("TOWN");
      zipcode=(String)parameters.get("ZIP");
      email=(String)parameters.get("USEREMAIL");
      defaultGroup=(String)parameters.get("DEFAULTGROUP");
    }
 else {
      firstname=(String)session.getValue("USERFIRSTNAME");
      desc=(String)session.getValue("USERDESC");
      street=(String)session.getValue("USERSTREET");
      pwd=(String)session.getValue("PWD");
      pwd2=(String)session.getValue("PWD2");
      user=(String)session.getValue("USER");
      userLastname=(String)session.getValue("USERNAME");
      town=(String)session.getValue("TOWN");
      zipcode=(String)session.getValue("ZIP");
      email=(String)session.getValue("USEREMAIL");
      defaultGroup=(String)session.getValue("DEFAULTGROUP");
      session.removeValue("ERROR");
    }
    if (firstname == null) {
      firstname="";
    }
    if (desc == null) {
      desc="";
    }
    if (street == null) {
      street="";
    }
    if (pwd == null) {
      pwd="";
    }
    if (pwd2 == null) {
      pwd2="";
    }
    if (user == null) {
      user="";
    }
    if (userLastname == null) {
      userLastname="";
    }
    if (town == null) {
      town="";
    }
    if (zipcode == null) {
      zipcode="";
    }
    if (email == null) {
      email="";
    }
    if (defaultGroup == null) {
      defaultGroup="";
    }
    Vector selectedGroups=(Vector)session.getValue("selectedGroups");
    Vector notSelectedGroups=(Vector)session.getValue("notSelectedGroups");
    if (perspective.equals("newuser")) {
      templateSelector="newuser";
      if (!userYetEstablished) {
        user="";
        selectedGroups=new Vector();
        notSelectedGroups=new Vector();
        selectedGroups.addElement(OpenCms.getDefaultUsers().getGroupUsers());
        Vector groups=cms.getGroups();
        for (int z=0; z < groups.size(); z++) {
          String aName=((CmsGroup)groups.elementAt(z)).getName();
          if (!OpenCms.getDefaultUsers().getGroupUsers().equals(aName)) {
            notSelectedGroups.addElement(aName);
          }
        }
        session.putValue("selectedGroups",selectedGroups);
        session.putValue("notSelectedGroups",notSelectedGroups);
      }
      if (reqCont.getRequest().getParameter("ADD") != null) {
        String groupname=(String)parameters.get("notselectgroup");
        if (groupname != null) {
          selectedGroups.addElement(groupname);
          notSelectedGroups.removeElement(groupname);
        }
        session.putValue("selectedGroups",selectedGroups);
        session.putValue("notSelectedGroups",notSelectedGroups);
      }
 else {
        if (reqCont.getRequest().getParameter("REMOVE") != null) {
          String groupname=(String)parameters.get("selectgroup");
          if (groupname != null) {
            notSelectedGroups.addElement(groupname);
            selectedGroups.removeElement(groupname);
            if (groupname.equals(defaultGroup)) {
              defaultGroup="";
            }
          }
          session.putValue("selectedGroups",selectedGroups);
          session.putValue("notSelectedGroups",notSelectedGroups);
        }
 else {
          if (reqCont.getRequest().getParameter("OK") != null) {
            try {
              if (email.equals("") || userLastname.equals("") || user.equals("")) {
                throw new CmsException("user data missing",CmsException.C_NO_USER);
              }
              if (!pwd.equals(pwd2)) {
                throw new CmsException("unequal passwords",CmsException.C_INVALID_PASSWORD);
              }
              cms.validatePassword(pwd);
              Hashtable additionalInfo=new Hashtable();
              CmsUser newUser=cms.addUser(user,pwd,defaultGroup,desc,additionalInfo,C_FLAG_ENABLED);
              newUser.setEmail(email);
              newUser.setFirstname(firstname);
              newUser.setLastname(userLastname);
              newUser.setAddress(street);
              newUser.setAdditionalInfo(C_ADDITIONAL_INFO_ZIPCODE,zipcode);
              newUser.setAdditionalInfo(C_ADDITIONAL_INFO_TOWN,town);
              for (int z=0; z < selectedGroups.size(); z++) {
                String groupname=(String)selectedGroups.elementAt(z);
                if (!groupname.equals(defaultGroup)) {
                  cms.addUserToGroup(user,groupname);
                }
              }
              cms.writeUser(newUser);
              session.removeValue("selectedGroups");
              session.removeValue("notSelectedGroups");
              session.removeValue("ERROR");
              templateSelector="";
            }
 catch (            CmsException e) {
              session.putValue("ERROR",new String("yes"));
              session.putValue("USERFIRSTNAME",firstname);
              session.putValue("USERDESC",desc);
              session.putValue("USERSTREET",street);
              session.putValue("PWD",pwd);
              session.putValue("PWD2",pwd2);
              session.putValue("USER",user);
              session.putValue("USERNAME",userLastname);
              session.putValue("ZIP",zipcode);
              session.putValue("TOWN",town);
              session.putValue("USEREMAIL",email);
              session.putValue("DEFAULTGROUP",defaultGroup);
              if (e.getType() == CmsException.C_INVALID_PASSWORD) {
                if (e.getMessage().equals("unequal passwords")) {
                  templateSelector="passworderror1";
                }
 else {
                  if (e.getMessage().equals("password too short")) {
                    templateSelector="passworderror2";
                  }
 else {
                    xmlTemplateDocument.setData("reasonOfError",e.getMessage());
                    xmlTemplateDocument.setData("perspective","newuser");
                    templateSelector="passworderror5";
                  }
                }
              }
 else {
                if (e.getType() == CmsException.C_NO_GROUP) {
                  templateSelector="errornogroup1";
                }
 else {
                  if (e.getType() == CmsException.C_NO_USER && e.getMessage().equals("user data missing")) {
                    templateSelector="errordatamissing1";
                  }
 else {
                    xmlTemplateDocument.setData("details",Utils.getStackTrace(e));
                    templateSelector="error";
                  }
                }
              }
            }
          }
        }
      }
    }
 else {
      templateSelector="changeuser";
      boolean disabled=false;
      if (!userYetChanged) {
        CmsUser theUser=cms.readUser(user);
        if (theUser == null) {
          throw new CmsException("user does not exist");
        }
        firstname=theUser.getFirstname();
        desc=theUser.getDescription();
        street=theUser.getAddress();
        userLastname=theUser.getLastname();
        email=theUser.getEmail();
        disabled=theUser.getDisabled();
        zipcode=(String)theUser.getAdditionalInfo(C_ADDITIONAL_INFO_ZIPCODE);
        town=(String)theUser.getAdditionalInfo(C_ADDITIONAL_INFO_TOWN);
        defaultGroup=theUser.getDefaultGroup().getName();
        Vector groups=cms.getDirectGroupsOfUser(user);
        if (groups != null) {
          selectedGroups=new Vector();
          for (int z=0; z < groups.size(); z++) {
            selectedGroups.addElement(((CmsGroup)groups.elementAt(z)).getName());
          }
        }
 else {
          throw new CmsException(CmsException.C_NO_GROUP);
        }
        groups=cms.getGroups();
        if (groups != null) {
          notSelectedGroups=new Vector();
          for (int z=0; z < groups.size(); z++) {
            String name=((CmsGroup)groups.elementAt(z)).getName();
            if (!selectedGroups.contains(name)) {
              notSelectedGroups.addElement(name);
            }
          }
        }
      }
 else {
        if ((String)parameters.get("LOCK") != null) {
          disabled=true;
        }
        if (reqCont.getRequest().getParameter("ADD") != null) {
          String groupname=(String)parameters.get("notselectgroup");
          if (groupname != null) {
            if (!selectedGroups.contains(groupname)) {
              selectedGroups.addElement(groupname);
            }
            notSelectedGroups.removeElement(groupname);
          }
        }
 else {
          if (reqCont.getRequest().getParameter("REMOVE") != null) {
            String groupname=(String)parameters.get("selectgroup");
            if (groupname != null) {
              if (!notSelectedGroups.contains(groupname)) {
                notSelectedGroups.addElement(groupname);
                if (groupname.equals(defaultGroup)) {
                  defaultGroup="";
                }
              }
              selectedGroups.removeElement(groupname);
            }
          }
 else {
            if (reqCont.getRequest().getParameter("OK") != null) {
              try {
                if (email.equals("") || userLastname.equals("") || user.equals("")) {
                  throw new CmsException("user data missing",CmsException.C_NO_USER);
                }
                if (!pwd.equals(pwd2)) {
                  throw new CmsException("unequal passwords",CmsException.C_INVALID_PASSWORD);
                }
                if (!pwd.equals("")) {
                  cms.setPassword(user,pwd);
                }
                CmsUser theUser=cms.readUser(user);
                theUser.setEmail(email);
                theUser.setDescription(desc);
                theUser.setFirstname(firstname);
                theUser.setLastname(userLastname);
                theUser.setAddress(street);
                theUser.setAdditionalInfo(C_ADDITIONAL_INFO_ZIPCODE,zipcode);
                theUser.setAdditionalInfo(C_ADDITIONAL_INFO_TOWN,town);
                if ((OpenCms.getDefaultUsers().getUserAdmin().equals(theUser.getName())) && (!selectedGroups.contains(OpenCms.getDefaultUsers().getGroupAdministrators()))) {
                  throw new CmsException("cant remove Admin from " + OpenCms.getDefaultUsers().getGroupAdministrators(),CmsException.C_NOT_ADMIN);
                }
                if (disabled && selectedGroups.contains(OpenCms.getDefaultUsers().getGroupAdministrators())) {
                  throw new CmsException("disabled admin",CmsException.C_NOT_ADMIN);
                }
                if (disabled == true) {
                  theUser.setDisabled();
                }
 else {
                  theUser.setEnabled();
                }
                changeGroups(cms,theUser,defaultGroup,selectedGroups);
                session.removeValue("selectedGroups");
                session.removeValue("notSelectedGroups");
                session.removeValue("DEFAULTGROUP");
                session.removeValue("ERROR");
                templateSelector="";
              }
 catch (              CmsException e) {
                session.putValue("ERROR",new String("yes"));
                session.putValue("USERFIRSTNAME",firstname);
                session.putValue("USERDESC",desc);
                session.putValue("USERSTREET",street);
                session.putValue("PWD",pwd);
                session.putValue("PWD2",pwd2);
                session.putValue("USER",user);
                session.putValue("USERNAME",userLastname);
                session.putValue("ZIP",zipcode);
                session.putValue("TOWN",town);
                session.putValue("USEREMAIL",email);
                session.putValue("DEFAULTGROUP",defaultGroup);
                if (e.getType() == CmsException.C_INVALID_PASSWORD) {
                  if (e.getMessage().equals("unequal passwords")) {
                    templateSelector="passworderror3";
                  }
 else {
                    if (e.getMessage().equals("password too short")) {
                      templateSelector="passworderror4";
                    }
 else {
                      xmlTemplateDocument.setData("reasonOfError",e.getMessage());
                      xmlTemplateDocument.setData("perspective","changeuser");
                      templateSelector="passworderror5";
                    }
                  }
                }
 else {
                  if (e.getType() == CmsException.C_NO_GROUP) {
                    templateSelector="errornogroup2";
                  }
 else {
                    if (e.getType() == CmsException.C_NO_USER && e.getMessage().equals("user data missing")) {
                      templateSelector="errordatamissing2";
                    }
 else {
                      if (e.getType() == CmsException.C_NOT_ADMIN && e.getMessage().equals("disabled admin")) {
                        templateSelector="errordisabledadmin";
                      }
 else {
                        session.putValue("ERROR",new String("yes"));
                        throw e;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      session.putValue("selectedGroups",selectedGroups);
      session.putValue("notSelectedGroups",notSelectedGroups);
      session.putValue("DEFAULTGROUP",defaultGroup);
      xmlTemplateDocument.setData("DISABLED",disabled ? "checked" : "");
    }
    if (firstname == null) {
      firstname="";
    }
    if (desc == null) {
      desc="";
    }
    if (street == null) {
      street="";
    }
    if (pwd == null) {
      pwd="";
    }
    if (pwd2 == null) {
      pwd2="";
    }
    if (user == null) {
      user="";
    }
    if (userLastname == null) {
      userLastname="";
    }
    if (town == null) {
      town="";
    }
    if (zipcode == null) {
      zipcode="";
    }
    if (email == null) {
      email="";
    }
    xmlTemplateDocument.setData("USERFIRSTNAME",firstname);
    xmlTemplateDocument.setData("USERDESC",desc);
    xmlTemplateDocument.setData("USERSTREET",street);
    xmlTemplateDocument.setData("PWD",pwd);
    xmlTemplateDocument.setData("PWD2",pwd2);
    xmlTemplateDocument.setData("USER",user);
    xmlTemplateDocument.setData("USERNAME",userLastname);
    xmlTemplateDocument.setData("TOWN",town);
    xmlTemplateDocument.setData("ZIP",zipcode);
    xmlTemplateDocument.setData("EMAIL",email);
  }
 else {
    if (perspective.equals("deleteuser")) {
      String user=(String)parameters.get("USER");
      xmlTemplateDocument.setData("USER",user);
      templateSelector="RUsureDelete";
    }
 else {
      if (perspective.equals("reallydeleteuser")) {
        String user=(String)parameters.get("USER");
        try {
          cms.deleteUser(user);
          templateSelector="";
        }
 catch (        Exception e) {
          xmlTemplateDocument.setData("DELETEDETAILS",Utils.getStackTrace(e));
          templateSelector="deleteerror";
        }
      }
    }
  }
  return startProcessing(cms,xmlTemplateDocument,elementName,parameters,templateSelector);
}
