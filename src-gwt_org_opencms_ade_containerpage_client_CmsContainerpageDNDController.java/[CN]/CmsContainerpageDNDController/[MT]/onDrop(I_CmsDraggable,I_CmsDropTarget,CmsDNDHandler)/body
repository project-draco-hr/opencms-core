{
  if (m_imageDndController != null) {
    m_imageDndController.onDrop(draggable,target,handler);
    removeDragOverlay();
    m_imageDndController=null;
    return;
  }
  boolean changedContainerpage=false;
  boolean isListItem=draggable instanceof CmsListItem;
  CmsContainerPageElementPanel listContainerElement=null;
  final boolean[] triggerReload={false};
  boolean hasWritePermissions=true;
  if (target != m_initialDropTarget) {
    if (target instanceof I_CmsDropContainer) {
      I_CmsDropContainer container=(I_CmsDropContainer)target;
      try {
        CmsContainerPageElementPanel containerElement=null;
        CmsContainerElementData elementData=null;
        if (m_isNew) {
          elementData=m_controller.getCachedElement(m_draggableId);
          containerElement=m_controller.getContainerpageUtil().createElement(elementData,container);
          containerElement.setNewType(CmsContainerpageController.getServerId(m_draggableId));
        }
 else {
          elementData=m_controller.getCachedElement(m_draggableId);
          hasWritePermissions=elementData.hasWritePermission();
          if ((elementData.getDndId() != null) && (null != m_controller.getCachedElement(elementData.getDndId()))) {
            elementData=m_controller.getCachedElement(elementData.getDndId());
          }
          containerElement=m_controller.getContainerpageUtil().createElement(elementData,container);
          if (isListItem) {
            listContainerElement=containerElement;
          }
          m_controller.addToRecentList(elementData.getClientId(),null);
        }
        handler.getPlaceholder().getStyle().setDisplay(Display.NONE);
        if (container.getPlaceholderIndex() >= container.getWidgetCount()) {
          container.add(containerElement);
        }
 else {
          container.insert(containerElement,container.getPlaceholderIndex());
        }
        if (container instanceof CmsContainerPageContainer) {
          String copyModelReplaceId=((CmsContainerPageContainer)container).getCopyModelReplaceId();
          if (copyModelReplaceId != null) {
            m_controller.executeCopyModelReplace(copyModelReplaceId,((CmsContainerPageContainer)container).getFormerModelGroupParent(),elementData);
          }
        }
        changedContainerpage=!m_controller.isGroupcontainerEditing();
        triggerReload[0]=containerElement.getElement().getInnerHTML().contains(CmsGwtConstants.FORMATTER_RELOAD_MARKER) && changedContainerpage && !m_isNew;
        if (draggable instanceof CmsContainerPageElementPanel) {
          ((CmsContainerPageElementPanel)draggable).removeFromParent();
        }
        m_controller.initializeSubContainers(containerElement);
      }
 catch (      Exception e) {
        CmsDebugLog.getInstance().printLine(e.getMessage());
      }
      if (m_controller.isGroupcontainerEditing()) {
        container.getElement().removeClassName(I_CmsLayoutBundle.INSTANCE.containerpageCss().emptyGroupContainer());
      }
    }
 else     if (target instanceof CmsList<?>) {
      m_controller.addToFavoriteList(m_draggableId);
    }
  }
 else   if ((target instanceof I_CmsDropContainer) && (draggable instanceof CmsContainerPageElementPanel) && isChangedPosition(target)) {
    CmsDomUtil.showOverlay(draggable.getElement(),false);
    I_CmsDropContainer container=(I_CmsDropContainer)target;
    int count=container.getWidgetCount();
    handler.getPlaceholder().getStyle().setDisplay(Display.NONE);
    if (container.getPlaceholderIndex() >= count) {
      container.add((CmsContainerPageElementPanel)draggable);
    }
 else {
      container.insert((CmsContainerPageElementPanel)draggable,container.getPlaceholderIndex());
    }
    m_controller.addToRecentList(m_draggableId,null);
    changedContainerpage=!m_controller.isGroupcontainerEditing();
  }
 else   if (draggable instanceof CmsContainerPageElementPanel) {
    CmsDomUtil.showOverlay(draggable.getElement(),false);
    CmsContainerPageElementPanel containerElement=(CmsContainerPageElementPanel)draggable;
    CmsElementOptionBar optionBar=containerElement.getElementOptionBar();
    optionBar.removeFromParent();
    containerElement.setElementOptionBar(optionBar);
  }
  final Runnable checkReload=new Runnable(){
    public void run(){
      if (triggerReload[0]) {
        CmsContainerpageController.get().reloadPage();
      }
    }
  }
;
  if (listContainerElement != null) {
    final CmsContainerPageElementPanel finalListContainerElement=listContainerElement;
    final String serverIdStr=CmsContainerpageController.getServerId(m_draggableId);
    CmsUUID structureId=new CmsUUID(serverIdStr);
    AsyncCallback<String> modeCallback=new AsyncCallback<String>(){
      public void onFailure(      Throwable caught){
        finalListContainerElement.removeFromParent();
      }
      public void onSuccess(      String result){
        if (Objects.equal(result,CmsEditorConstants.MODE_COPY)) {
          final CmsContainerpageController controller=CmsContainerpageController.get();
          CmsContainerElementData data=controller.getCachedElement(finalListContainerElement.getId());
          final Map<String,String> settings=data.getSettings();
          controller.copyElement(serverIdStr,new AsyncCallback<CmsUUID>(){
            public void onFailure(            Throwable caught){
            }
            public void onSuccess(            CmsUUID resultId){
              controller.getElementWithSettings("" + resultId,settings,new I_CmsSimpleCallback<CmsContainerElementData>(){
                public void execute(                CmsContainerElementData newData){
                  try {
                    controller.replaceContainerElement(finalListContainerElement,newData);
                    controller.setPageChanged(checkReload);
                  }
 catch (                  Exception e) {
                    throw new RuntimeException(e);
                  }
                }
              }
);
            }
          }
);
        }
 else         if (Objects.equal(result,CmsEditorConstants.MODE_REUSE)) {
          m_controller.setPageChanged(checkReload);
        }
      }
    }
;
    ElementReuseMode reuseMode=CmsContainerpageController.get().getData().getElementReuseMode();
    if (!hasWritePermissions) {
      reuseMode=ElementReuseMode.reuse;
    }
switch (reuseMode) {
case ask:
      CmsDroppedElementModeSelectionDialog.showDialog(structureId,modeCallback);
    break;
case copy:
  modeCallback.onSuccess(CmsEditorConstants.MODE_COPY);
break;
case reuse:
default :
modeCallback.onSuccess(CmsEditorConstants.MODE_REUSE);
break;
}
}
 else {
if (changedContainerpage) {
m_controller.setPageChanged(checkReload);
}
}
stopDrag(handler);
}
