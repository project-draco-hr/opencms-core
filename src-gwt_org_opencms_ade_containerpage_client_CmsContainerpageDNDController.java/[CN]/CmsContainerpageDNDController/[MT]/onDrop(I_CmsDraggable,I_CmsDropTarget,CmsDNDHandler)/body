{
  if (m_imageDndController != null) {
    m_imageDndController.onDrop(draggable,target,handler);
    removeDragOverlay();
    m_imageDndController=null;
    return;
  }
  if (target != m_initialDropTarget) {
    if (target instanceof I_CmsDropContainer) {
      final I_CmsDropContainer container=(I_CmsDropContainer)target;
      final int index=container.getPlaceholderIndex();
      final String modelReplaceId=container instanceof CmsContainerPageContainer ? ((CmsContainerPageContainer)container).getCopyModelReplaceId() : null;
      if (!m_isNew && (draggable instanceof CmsListItem)) {
        final String copyGroupId=m_copyGroupId;
        AsyncCallback<String> modeCallback=new AsyncCallback<String>(){
          public void onFailure(          Throwable caught){
            if (caught != null) {
              CmsErrorDialog.handleException(caught);
            }
          }
          public void onSuccess(          String result){
            if (Objects.equal(result,CmsEditorConstants.MODE_COPY)) {
              final CmsContainerpageController controller=CmsContainerpageController.get();
              if (copyGroupId == null) {
                CmsContainerElementData data=controller.getCachedElement(m_draggableId);
                final Map<String,String> settings=data.getSettings();
                controller.copyElement(CmsContainerpageController.getServerId(m_draggableId),new I_CmsSimpleCallback<CmsUUID>(){
                  public void execute(                  CmsUUID resultId){
                    controller.getElementWithSettings("" + resultId,settings,new I_CmsSimpleCallback<CmsContainerElementData>(){
                      public void execute(                      CmsContainerElementData newData){
                        insertDropElement(newData,container,index,draggable instanceof CmsContainerPageElementPanel ? (CmsContainerPageElementPanel)draggable : null,modelReplaceId);
                        container.removePlaceholder();
                      }
                    }
);
                  }
                }
);
              }
 else {
                controller.getElementForDragAndDropFromContainer(copyGroupId,m_originalContainerId,true,new I_CmsSimpleCallback<CmsContainerElementData>(){
                  public void execute(                  CmsContainerElementData arg){
                    insertDropElement(arg,container,index,draggable instanceof CmsContainerPageElementPanel ? (CmsContainerPageElementPanel)draggable : null,modelReplaceId);
                  }
                }
);
              }
            }
 else             if (Objects.equal(result,CmsEditorConstants.MODE_REUSE)) {
              insertDropElement(m_controller.getCachedElement(m_draggableId),container,index,draggable instanceof CmsContainerPageElementPanel ? (CmsContainerPageElementPanel)draggable : null,modelReplaceId);
            }
          }
        }
;
        CmsUUID structureId=new CmsUUID(CmsContainerpageController.getServerId(m_draggableId));
        ElementReuseMode reuseMode=isCopyModel(draggable) ? ElementReuseMode.copy : CmsContainerpageController.get().getData().getElementReuseMode();
        if (handler.hasModifierCTRL()) {
          reuseMode=ElementReuseMode.ask;
        }
        if (reuseMode != ElementReuseMode.reuse) {
          CmsContainerElementData cachedElementData=m_controller.getCachedElement(m_draggableId);
          if ((cachedElementData != null) && (!cachedElementData.hasWritePermission() || cachedElementData.isModelGroup() || cachedElementData.isWasModelGroup())) {
            reuseMode=ElementReuseMode.reuse;
          }
        }
switch (reuseMode) {
case ask:
          CmsDroppedElementModeSelectionDialog.showDialog(structureId,modeCallback);
        break;
case copy:
      modeCallback.onSuccess(CmsEditorConstants.MODE_COPY);
    break;
case reuse:
default :
  modeCallback.onSuccess(CmsEditorConstants.MODE_REUSE);
break;
}
}
 else {
insertDropElement(m_controller.getCachedElement(m_draggableId),container,index,draggable instanceof CmsContainerPageElementPanel ? (CmsContainerPageElementPanel)draggable : null,null);
}
}
 else if (target instanceof CmsList<?>) {
m_controller.addToFavoriteList(m_draggableId);
}
}
 else if ((target instanceof I_CmsDropContainer) && (draggable instanceof CmsContainerPageElementPanel) && isChangedPosition(target)) {
CmsDomUtil.showOverlay(draggable.getElement(),false);
I_CmsDropContainer container=(I_CmsDropContainer)target;
int count=container.getWidgetCount();
handler.getPlaceholder().getStyle().setDisplay(Display.NONE);
if (container.getPlaceholderIndex() >= count) {
container.add((CmsContainerPageElementPanel)draggable);
}
 else {
container.insert((CmsContainerPageElementPanel)draggable,container.getPlaceholderIndex());
}
m_controller.addToRecentList(m_draggableId,null);
if (!m_controller.isGroupcontainerEditing()) {
m_controller.setPageChanged();
}
}
 else if (draggable instanceof CmsContainerPageElementPanel) {
CmsDomUtil.showOverlay(draggable.getElement(),false);
CmsContainerPageElementPanel containerElement=(CmsContainerPageElementPanel)draggable;
CmsElementOptionBar optionBar=containerElement.getElementOptionBar();
optionBar.removeFromParent();
containerElement.setElementOptionBar(optionBar);
}
stopDrag(handler);
}
