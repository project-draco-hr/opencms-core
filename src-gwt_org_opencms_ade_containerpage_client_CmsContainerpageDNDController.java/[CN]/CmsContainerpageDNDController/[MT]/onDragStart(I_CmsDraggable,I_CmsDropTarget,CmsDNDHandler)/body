{
  installDragOverlay();
  m_currentTarget=null;
  m_currentIndex=-1;
  m_draggableId=draggable.getId();
  m_isNew=false;
  m_originalIndex=-1;
  m_initialDropTarget=target;
  handler.setOrientation(Orientation.ALL);
  m_controller.hideEditableListButtons();
  if (isImage(draggable)) {
    if (m_controller.isGroupcontainerEditing()) {
      return false;
    }
    m_imageDndController=new CmsImageDndController(CmsContainerpageController.get());
    return m_imageDndController.onDragStart(draggable,target,handler);
  }
  if (!m_controller.isGroupcontainerEditing()) {
    boolean locked=m_controller.lockContainerpage();
    if (!locked) {
      return false;
    }
  }
  String containerId=null;
  if (target instanceof CmsContainerPageContainer) {
    containerId=((CmsContainerPageContainer)target).getContainerId();
  }
  m_originalContainerId=containerId;
  if (target != null) {
    handler.addTarget(target);
    if (target instanceof I_CmsDropContainer) {
      prepareTargetContainer((I_CmsDropContainer)target,draggable,handler.getPlaceholder());
      Element helper=handler.getDragHelper();
      handler.setCursorOffsetX(helper.getOffsetWidth() - 15);
      handler.setCursorOffsetY(20);
    }
  }
  m_dragInfos.put(target,handler.getPlaceholder());
  m_controller.getHandler().hideMenu();
  String clientId=draggable.getId();
  if (CmsStringUtil.isEmptyOrWhitespaceOnly(clientId)) {
    CmsDebugLog.getInstance().printLine("draggable has no id, canceling drop");
    return false;
  }
  final I_CmsSimpleCallback<CmsContainerElementData> callback=new I_CmsSimpleCallback<CmsContainerElementData>(){
    /** 
 * Execute on success.<p>
 * @param arg the container element data
 */
    public void execute(    CmsContainerElementData arg){
      prepareHelperElements(arg,handler,draggable);
    }
  }
;
  if (isNewId(clientId)) {
    m_isNew=true;
    m_controller.getNewElement(clientId,callback);
  }
 else {
    if (isCopyModel(draggable)) {
      m_controller.copyElement(draggable.getId(),new AsyncCallback<CmsUUID>(){
        public void onFailure(        Throwable caught){
        }
        @SuppressWarnings("synthetic-access") public void onSuccess(        CmsUUID result){
          String idString=result.toString();
          m_draggableId=idString;
          m_controller.getElementForDragAndDropFromContainer(idString,m_originalContainerId,callback);
        }
      }
);
    }
 else {
      CmsDebugLog.consoleLog("getElementForDragAndDropFromContainer");
      m_controller.getElementForDragAndDropFromContainer(clientId,m_originalContainerId,callback);
    }
  }
  if (target instanceof CmsContainerPageContainer) {
    CmsContainerpageEditor.getZIndexManager().start(containerId);
  }
 else {
    handler.setStartPosition(-1,0);
  }
  return true;
}
