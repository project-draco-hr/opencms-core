{
  try {
    setStyleName(org.opencms.gwt.client.ui.css.I_CmsLayoutBundle.INSTANCE.directEditCss().directEditButtons());
    addStyleName(org.opencms.gwt.client.ui.css.I_CmsLayoutBundle.INSTANCE.directEditCss().optionBar());
    addStyleName(org.opencms.gwt.client.ui.css.I_CmsLayoutBundle.INSTANCE.generalCss().cornerAll());
    m_markerTag=editable;
    m_parentResourceId=parentId;
    String jsonText=editable.getAttribute("rel");
    m_editableData=CmsEditableDataJSO.parseEditableData(jsonText);
    CmsNewLinkFunctionTable.INSTANCE.setHandler(m_editableData.getContextId(),new Runnable(){
      public void run(){
        A_CmsDirectEditButtons.this.onClickNew(false);
      }
    }
);
    MouseHandler handler=new MouseHandler();
    addMouseOutHandler(handler);
    addMouseOverHandler(handler);
    TreeMap<Integer,CmsPushButton> buttonMap=Maps.newTreeMap();
    if (m_editableData.hasDelete() && CmsStringUtil.isEmptyOrWhitespaceOnly(m_editableData.getNoEditReason())) {
      m_delete=new CmsPushButton();
      m_delete.setImageClass(I_CmsButton.ButtonData.DELETE.getIconClass());
      m_delete.addStyleName(I_CmsButton.ButtonData.DELETE.getIconClass());
      m_delete.setTitle(I_CmsButton.ButtonData.DELETE.getTitle());
      m_delete.setButtonStyle(I_CmsButton.ButtonStyle.TRANSPARENT,null);
      buttonMap.put(Integer.valueOf(100),m_delete);
      m_delete.addClickHandler(handler);
    }
    if (m_editableData.hasNew()) {
      m_new=new CmsPushButton();
      m_new.setImageClass(I_CmsButton.ButtonData.NEW.getIconClass());
      m_new.addStyleName(I_CmsButton.ButtonData.NEW.getIconClass());
      m_new.setTitle(I_CmsButton.ButtonData.NEW.getTitle());
      m_new.setButtonStyle(I_CmsButton.ButtonStyle.TRANSPARENT,null);
      buttonMap.put(Integer.valueOf(200),m_new);
      m_new.addClickHandler(handler);
    }
    if ((this.getWidgetCount() > 0) || m_editableData.hasEdit()) {
      m_edit=new CmsPushButton();
      m_edit.setImageClass(I_CmsButton.ButtonData.SELECTION.getIconClass());
      m_edit.addStyleName(I_CmsButton.ButtonData.SELECTION.getIconClass());
      m_edit.setButtonStyle(I_CmsButton.ButtonStyle.TRANSPARENT,null);
      buttonMap.put(Integer.valueOf(300),m_edit);
      if (m_editableData.hasEdit()) {
        m_edit.addStyleName(I_CmsButton.ButtonData.EDIT.getIconClass());
        m_edit.setTitle(I_CmsButton.ButtonData.EDIT.getTitle());
        m_edit.addClickHandler(handler);
        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(m_editableData.getNoEditReason())) {
          m_edit.disable(m_editableData.getNoEditReason());
        }
      }
    }
    buttonMap.putAll(getAdditionalButtons());
    for (    CmsPushButton button : buttonMap.values()) {
      add(button);
      button.addClickHandler(new ClickHandler(){
        public void onClick(        ClickEvent e){
          CmsCoreProvider.get().getFlyoutMenuContainer().clearIfMatches(A_CmsDirectEditButtons.this);
        }
      }
);
    }
    if (m_editableData.isUnreleasedOrExpired()) {
      m_expiredOverlay=DOM.createDiv();
      m_expiredOverlay.setClassName(org.opencms.gwt.client.ui.css.I_CmsLayoutBundle.INSTANCE.directEditCss().expiredListElementOverlay());
      m_markerTag.getParentElement().insertBefore(m_expiredOverlay,m_markerTag);
    }
  }
 catch (  Exception e) {
    throw new UnsupportedOperationException("Error while parsing editable tag information: " + e.getMessage());
  }
}
