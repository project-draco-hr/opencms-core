{
  if (CmsFormatterBean.isDefaultPreviewType(type)) {
    return CmsFormatterBean.PREVIEW_FORMATTER;
  }
  try {
    String formatter=cms.readPropertyObject(resource,PROPERTY_FORMATTER,true).getValue();
    List<String> types=Collections.emptyList();
    if (CmsStringUtil.isEmptyOrWhitespaceOnly(formatter)) {
      I_CmsResourceType resType=OpenCms.getResourceManager().getResourceType(resource);
      if (resType.isAdditionalModuleResourceType()) {
        String moduleName=resType.getModuleName();
        CmsModule module=OpenCms.getModuleManager().getModule(moduleName);
        formatter=module.getParameter(resType.getTypeName() + MODULE_PARAM_SUFFIX_FORMATTER);
        String typesStr=module.getParameter(resType.getTypeName() + MODULE_PARAM_SUFFIX_CONTAINERTYPES);
        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(typesStr)) {
          types=CmsStringUtil.splitAsList(typesStr,CmsProperty.VALUE_LIST_DELIMITER);
        }
      }
    }
    if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(formatter)) {
      CmsMacroResolver resolver=CmsMacroResolver.newInstance().setKeepEmptyMacros(true);
      resolver.addMacro(MACRO_CONTAINERTYPE,type);
      formatter=resolver.resolveMacros(formatter);
      if (types.isEmpty()) {
        types=cms.readPropertyObject(resource,PROPERTY_CONTAINERTYPES,true).getValueList();
      }
      if ((types == null) || types.isEmpty() || types.contains(type)) {
        return new CmsFormatterBean(formatter,type);
      }
      return null;
    }
  }
 catch (  CmsException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(Messages.get().getBundle().key(Messages.ERR_READING_FORMATTER_CONFIGURATION_1,cms.getSitePath(resource)),e);
    }
  }
  return super.getFormatterForContainer(cms,resource,type,width);
}
