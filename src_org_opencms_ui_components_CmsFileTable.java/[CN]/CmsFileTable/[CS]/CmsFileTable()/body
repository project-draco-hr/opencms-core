{
  super();
  m_container=new IndexedContainer();
  m_container.addContainerProperty(PROPERTY_TYPE_ICON,Resource.class,null);
  m_container.addContainerProperty(PROPERTY_RESOURCE_NAME,String.class,null);
  m_container.addContainerProperty(PROPERTY_TITLE,String.class,null);
  m_container.addContainerProperty(PROPERTY_NAVIGATION_TEXT,String.class,null);
  m_container.addContainerProperty(PROPERTY_RESOURCE_TYPE,String.class,null);
  m_container.addContainerProperty(PROPERTY_SIZE,Integer.class,null);
  m_container.addContainerProperty(PROPERTY_PERMISSIONS,String.class,null);
  m_container.addContainerProperty(PROPERTY_DATE_MODIFIED,String.class,null);
  m_container.addContainerProperty(PROPERTY_USER_MODIFIED,String.class,null);
  m_container.addContainerProperty(PROPERTY_DATE_CREATED,String.class,null);
  m_container.addContainerProperty(PROPERTY_USER_CREATED,String.class,null);
  m_container.addContainerProperty(PROPERTY_DATE_RELEASED,String.class,"-");
  m_container.addContainerProperty(PROPERTY_DATE_EXPIRED,String.class,"-");
  m_container.addContainerProperty(PROPERTY_STATE,String.class,null);
  m_container.addContainerProperty(PROPERTY_USER_LOCKED,String.class,null);
  m_fileTable=new Table();
  setCompositionRoot(m_fileTable);
  m_fileTable.addStyleName("borderless");
  m_fileTable.setSizeFull();
  m_fileTable.setColumnCollapsingAllowed(true);
  m_fileTable.setSelectable(true);
  m_fileTable.setMultiSelect(true);
  m_fileTable.setContainerDataSource(m_container);
  m_fileTable.setVisibleColumns(PROPERTY_RESOURCE_NAME,PROPERTY_TITLE,PROPERTY_NAVIGATION_TEXT,PROPERTY_RESOURCE_TYPE,PROPERTY_SIZE,PROPERTY_PERMISSIONS,PROPERTY_DATE_MODIFIED,PROPERTY_USER_MODIFIED,PROPERTY_DATE_CREATED,PROPERTY_USER_CREATED,PROPERTY_DATE_RELEASED,PROPERTY_DATE_EXPIRED,PROPERTY_STATE,PROPERTY_USER_LOCKED);
  messages=org.opencms.workplace.explorer.Messages.get().getBundle(CmsAppWorkplaceUi.get().getLocale());
  m_fileTable.setColumnHeaders(messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_NAME_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_TITLE_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_NAVTEXT_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_TYPE_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_SIZE_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_PERMISSIONS_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_DATELASTMODIFIED_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_USERLASTMODIFIED_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_DATECREATED_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_USERCREATED_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_DATERELEASED_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_DATEEXPIRED_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_STATE_0),messages.key(org.opencms.workplace.explorer.Messages.GUI_INPUT_LOCKEDBY_0));
  m_fileTable.setRowHeaderMode(RowHeaderMode.ICON_ONLY);
  m_fileTable.setItemIconPropertyId(PROPERTY_TYPE_ICON);
  m_fileTable.setColumnCollapsed(PROPERTY_NAVIGATION_TEXT,true);
  m_fileTable.setColumnCollapsed(PROPERTY_PERMISSIONS,true);
  m_fileTable.setColumnCollapsed(PROPERTY_USER_MODIFIED,true);
  m_fileTable.setColumnCollapsed(PROPERTY_DATE_CREATED,true);
  m_fileTable.setColumnCollapsed(PROPERTY_USER_CREATED,true);
  m_fileTable.setColumnCollapsed(PROPERTY_STATE,true);
  m_fileTable.setColumnCollapsed(PROPERTY_USER_LOCKED,true);
  m_fileTable.addItemClickListener(new ItemClickListener(){
    public void itemClick(    ItemClickEvent event){
      System.out.println("hallo!");
      if (event.getButton().equals(MouseButton.RIGHT)) {
        Set<CmsUUID> selection=(Set<CmsUUID>)m_fileTable.getValue();
        if (selection == null) {
          m_fileTable.select(event.getItemId());
        }
 else         if (!selection.contains(event.getItemId())) {
          m_fileTable.setValue(null);
          m_fileTable.select(event.getItemId());
        }
      }
    }
  }
);
  m_menu=new ContextMenu();
  m_fileTable.addValueChangeListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      Set<CmsUUID> selectedIds=(Set<CmsUUID>)event.getProperty().getValue();
      if ((selectedIds != null) && !selectedIds.isEmpty()) {
        m_menu.removeAllItems();
        m_menuBuilder.buildContextMenu(selectedIds,m_menu);
      }
    }
  }
);
  m_menu.setAsTableContextMenu(m_fileTable);
}
