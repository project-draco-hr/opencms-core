{
  String file=getParamResource();
  String name=getParamName();
  String type=getParamType();
  String inherit=request.getParameter(PARAM_INHERIT);
  String overWriteInherited=request.getParameter(PARAM_OVERWRITEINHERITED);
  String responsible=request.getParameter(PARAM_RESPONSIBLE);
  Set permissionKeys=CmsPermissionSet.getPermissionKeys();
  int allowValue=0;
  int denyValue=0;
  String key, param;
  int value, paramInt;
  Iterator i=permissionKeys.iterator();
  while (i.hasNext()) {
    key=(String)i.next();
    value=CmsPermissionSet.getPermissionValue(key);
    try {
      param=request.getParameter(value + PERMISSION_ALLOW);
      paramInt=Integer.parseInt(param);
      allowValue|=paramInt;
    }
 catch (    Exception e) {
      if (LOG.isInfoEnabled()) {
        LOG.info(e.getLocalizedMessage());
      }
    }
    try {
      param=request.getParameter(value + PERMISSION_DENY);
      paramInt=Integer.parseInt(param);
      denyValue|=paramInt;
    }
 catch (    Exception e) {
      if (LOG.isInfoEnabled()) {
        LOG.info(e.getLocalizedMessage());
      }
    }
  }
  try {
    List allEntries=getCms().getAccessControlEntries(file,false);
    int flags=0;
    for (int k=0; k < allEntries.size(); k++) {
      CmsAccessControlEntry curEntry=(CmsAccessControlEntry)allEntries.get(k);
      String curType=getEntryType(curEntry.getFlags());
      String curName=getCms().lookupPrincipal(curEntry.getPrincipal()).getName();
      if (curName.equals(name) && curType.equals(type)) {
        flags=curEntry.getFlags();
        break;
      }
    }
    if (Boolean.valueOf(inherit).booleanValue()) {
      flags|=CmsAccessControlEntry.ACCESS_FLAGS_INHERIT;
    }
 else {
      flags&=~CmsAccessControlEntry.ACCESS_FLAGS_INHERIT;
    }
    if (Boolean.valueOf(overWriteInherited).booleanValue()) {
      flags|=CmsAccessControlEntry.ACCESS_FLAGS_OVERWRITE;
    }
 else {
      flags&=~CmsAccessControlEntry.ACCESS_FLAGS_OVERWRITE;
    }
    if (Boolean.valueOf(responsible).booleanValue()) {
      flags|=CmsAccessControlEntry.ACCESS_FLAGS_RESPONSIBLE;
    }
 else {
      flags&=~CmsAccessControlEntry.ACCESS_FLAGS_RESPONSIBLE;
    }
    checkLock(getParamResource());
    getCms().chacc(file,type,name,allowValue,denyValue,flags);
    return true;
  }
 catch (  CmsException e) {
    m_errorMessages.add(key(Messages.ERR_CHACC_MODIFY_ENTRY_0));
    return false;
  }
}
