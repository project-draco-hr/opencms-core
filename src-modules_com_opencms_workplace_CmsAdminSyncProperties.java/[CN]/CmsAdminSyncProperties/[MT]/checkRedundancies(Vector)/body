{
  int i, j;
  if (resources == null) {
    return;
  }
  Vector redundant=new Vector();
  int n=resources.size();
  if (n < 2) {
    return;
  }
  for (i=0; i < n; i++) {
    redundant.addElement(new Boolean(false));
  }
  for (i=0; i < n - 1; i++) {
    for (j=i + 1; j < n; j++) {
      if (((String)resources.elementAt(i)).length() < ((String)resources.elementAt(j)).length()) {
        if (((String)resources.elementAt(j)).startsWith((String)resources.elementAt(i))) {
          redundant.setElementAt(new Boolean(true),j);
        }
      }
 else {
        if (((String)resources.elementAt(i)).startsWith((String)resources.elementAt(j))) {
          redundant.setElementAt(new Boolean(true),i);
        }
      }
    }
  }
  for (i=n - 1; i >= 0; i--) {
    if (((Boolean)redundant.elementAt(i)).booleanValue()) {
      resources.removeElementAt(i);
    }
  }
}
