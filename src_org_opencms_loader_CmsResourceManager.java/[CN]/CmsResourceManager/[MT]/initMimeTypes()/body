{
  Properties mimeTypes=new Properties();
  try {
    mimeTypes.load(getClass().getClassLoader().getResourceAsStream("mimetypes.properties"));
  }
 catch (  Throwable t) {
    try {
      mimeTypes.load(getClass().getClassLoader().getResourceAsStream("org/opencms/loader/mimetypes.properties"));
    }
 catch (    Throwable t2) {
      if (LOG.isInfoEnabled()) {
        LOG.info(Messages.get().getBundle().key(Messages.LOG_READ_MIMETYPES_FAILED_2,"mimetypes.properties","org/opencms/loader/mimetypes.properties"));
      }
    }
  }
  List<CmsMimeType> combinedMimeTypes=new ArrayList<CmsMimeType>(mimeTypes.size() + m_configuredMimeTypes.size());
  combinedMimeTypes.addAll(m_configuredMimeTypes);
  Iterator<Map.Entry<Object,Object>> i=mimeTypes.entrySet().iterator();
  while (i.hasNext()) {
    Map.Entry<Object,Object> entry=i.next();
    CmsMimeType mimeType=new CmsMimeType(entry.getKey().toString(),entry.getValue().toString(),false);
    if (!combinedMimeTypes.contains(mimeType)) {
      combinedMimeTypes.add(mimeType);
    }
  }
  m_mimeTypes=new HashMap<String,String>(mimeTypes.size());
  Iterator<CmsMimeType> j=combinedMimeTypes.iterator();
  while (j.hasNext()) {
    CmsMimeType mimeType=j.next();
    m_mimeTypes.put(mimeType.getExtension(),mimeType.getType());
  }
  if (CmsLog.INIT.isInfoEnabled()) {
    CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_NUM_MIMETYPES_1,new Integer(m_mimeTypes.size())));
  }
}
