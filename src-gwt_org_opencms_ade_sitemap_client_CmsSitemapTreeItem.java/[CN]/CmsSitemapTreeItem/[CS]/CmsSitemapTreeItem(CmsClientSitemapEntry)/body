{
  super(generateItemWidget(entry),false);
  m_entryId=entry.getId();
  m_decoratedPanel.addDecorationBoxStyle(CSS.sitemapEntryDecoration());
  m_detailPageLabelTitleGenerator=new DetailPageLabelTitleGenerator();
  getListItemWidget().setUnselectable();
  getListItemWidget().addOpenHandler(new OpenHandler<CmsListItemWidget>(){
    public void onOpen(    OpenEvent<CmsListItemWidget> event){
      CmsSitemapView.getInstance().getController().updateSingleEntry(m_entryId);
    }
  }
);
  getListItemWidget().addIconClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      CmsSitemapController controller=CmsSitemapView.getInstance().getController();
      CmsClientSitemapEntry sitemapEntry=controller.getEntryById(m_entryId);
      if (sitemapEntry != null) {
        if (sitemapEntry.isSubSitemapType()) {
          controller.openSiteMap(sitemapEntry.getSitePath());
        }
 else         if (sitemapEntry.isNavigationLevelType()) {
          if (!sitemapEntry.getSubEntries().isEmpty()) {
            CmsClientSitemapEntry subEntry=sitemapEntry.getSubEntries().get(0);
            if (!subEntry.isNavigationLevelType()) {
              controller.leaveEditor(subEntry.getSitePath());
              return;
            }
          }
          getListItemWidget().setIconTitle(Messages.get().key(Messages.GUI_NAVIGATION_LEVEL_UNKOWN_TARGET_0));
        }
 else {
          controller.leaveEditor(sitemapEntry.getSitePath());
        }
      }
    }
  }
);
  m_inNavigationStyle=new CmsStyleVariable(this);
  m_openerForNonNavigationStyle=new CmsStyleVariable(m_opener);
  getListItemWidget().addTitleStyleName(CSS.itemTitle());
  updateInNavigation(entry);
  m_itemsById.put(m_entryId,this);
  setId(getName(entry.getSitePath()));
  updateSitePath(entry.getSitePath());
  updateDetailPageStatus();
  updateLock(entry);
  if (!entry.isFolderType()) {
    hideOpeners();
  }
  setDropEnabled(entry.isFolderType() && !entry.hasForeignFolderLock());
  getListItemWidget().setTitleEditHandler(new I_CmsTitleEditHandler(){
    /** 
 * @see org.opencms.gwt.client.ui.CmsListItemWidget.I_CmsTitleEditHandler#handleEdit(org.opencms.gwt.client.ui.input.CmsLabel,com.google.gwt.user.client.ui.TextBox)
 */
    public void handleEdit(    CmsLabel titleLabel,    TextBox box){
      CmsClientSitemapEntry editEntry=getSitemapEntry();
      final String newTitle=box.getText();
      box.removeFromParent();
      if (CmsStringUtil.isEmpty(newTitle)) {
        titleLabel.setVisible(true);
        String dialogTitle=Messages.get().key(Messages.GUI_EDIT_TITLE_ERROR_DIALOG_TITLE_0);
        String dialogText=Messages.get().key(Messages.GUI_TITLE_CANT_BE_EMPTY_0);
        CmsAlertDialog alert=new CmsAlertDialog(dialogTitle,dialogText);
        alert.center();
        return;
      }
      String oldTitle=editEntry.getTitle();
      if (!oldTitle.equals(newTitle)) {
        CmsPropertyModification propMod=new CmsPropertyModification(editEntry.getId(),CmsClientProperty.PROPERTY_NAVTEXT,newTitle,true);
        final List<CmsPropertyModification> propChanges=new ArrayList<CmsPropertyModification>();
        propChanges.add(propMod);
        CmsSitemapController controller=CmsSitemapView.getInstance().getController();
        if (editEntry.isNew() && !editEntry.isRoot()) {
          String urlName=controller.ensureUniqueName(CmsResource.getParentFolder(editEntry.getSitePath()),newTitle);
          if (oldTitle.equals(editEntry.getPropertyValue(CmsClientProperty.PROPERTY_TITLE))) {
            CmsPropertyModification titleMod=new CmsPropertyModification(editEntry.getId(),CmsClientProperty.PROPERTY_TITLE,newTitle,true);
            propChanges.add(titleMod);
          }
          controller.editAndChangeName(editEntry,urlName,propChanges,true,CmsReloadMode.none);
        }
 else {
          controller.edit(editEntry,propChanges,CmsReloadMode.none);
        }
      }
      titleLabel.setVisible(true);
    }
  }
);
}
