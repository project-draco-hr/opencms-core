{
  if (config.contains(CONFIGURATION_REQUIRES_ACTIVATION)) {
    config=config.replace(CONFIGURATION_REQUIRES_ACTIVATION,"");
    m_requiresactivation=true;
  }
  Map<String,CmsPair<String,Boolean>> result=new LinkedHashMap<String,CmsPair<String,Boolean>>();
  CmsPair<String,Boolean> pair=new CmsPair<String,Boolean>();
  String[] labels=config.split("\\" + INPUT_DELIMITER);
  boolean selected=false;
  String[] value=new String[labels.length];
  String[] options=new String[labels.length];
  String[] help=new String[labels.length];
  for (int i=0; i < labels.length; i++) {
    boolean parameter=false;
    boolean test_default=(labels[i].indexOf(KEY_DEFAULT) >= 0);
    boolean test_value=labels[i].indexOf(KEY_VALUE) >= 0;
    boolean test_option=labels[i].indexOf(KEY_OPTION) >= 0;
    boolean test_short_option=labels[i].indexOf(KEY_SHORT_OPTION) >= 0;
    boolean test_help=labels[i].indexOf(KEY_HELP) >= 0;
    boolean test_length=labels[i].indexOf(KEY_LENGTH) >= 0;
    try {
      if (test_length) {
        String sub=KEY_EMPTY;
        sub=labels[i].substring(labels[i].indexOf(KEY_LENGTH),labels[i].length());
        try {
          m_rowsToShow=Integer.parseInt(sub.replace(KEY_LENGTH,KEY_EMPTY));
        }
 catch (        Exception e) {
        }
        labels[i]=labels[i].replace(KEY_LENGTH + m_rowsToShow,KEY_EMPTY);
        parameter=true;
      }
      selected=false;
      if ((labels[i].indexOf(DEFAULT_MARKER) >= 0) || test_default) {
        labels[i]=labels[i].replace(DEFAULT_MARKER,KEY_EMPTY);
        labels[i]=labels[i].replace(KEY_DEFAULT,KEY_EMPTY);
        selected=true;
      }
      if (test_value) {
        String sub=KEY_EMPTY;
        if (labels[i].indexOf(KEY_SUFFIX) >= 0) {
          sub=labels[i].substring(labels[i].indexOf(KEY_VALUE),labels[i].indexOf(KEY_SUFFIX));
        }
 else {
          sub=labels[i].substring(labels[i].indexOf(KEY_VALUE),labels[i].length() - 1);
        }
        value[i]=sub.replace(KEY_VALUE,KEY_EMPTY);
        labels[i]=labels[i].replace(KEY_VALUE + value[i] + KEY_SUFFIX_SHORT,KEY_EMPTY);
      }
 else {
        if (test_short_option) {
          value[i]=labels[i].substring(0,labels[i].indexOf(KEY_SHORT_OPTION));
        }
 else {
          value[i]=labels[i];
        }
      }
      if (test_option) {
        String sub=KEY_EMPTY;
        if (labels[i].indexOf(KEY_SUFFIX) >= 0) {
          sub=labels[i].substring(labels[i].indexOf(KEY_OPTION),labels[i].indexOf(KEY_SUFFIX));
        }
 else {
          sub=labels[i].substring(labels[i].indexOf(KEY_OPTION),labels[i].lastIndexOf(KEY_SUFFIX_SHORT));
        }
        options[i]=sub.replace(KEY_OPTION,KEY_EMPTY);
        labels[i]=labels[i].replace(KEY_OPTION + options[i] + KEY_SUFFIX_SHORT,KEY_EMPTY);
      }
 else       if (test_short_option) {
        options[i]=labels[i].substring(labels[i].indexOf(KEY_SHORT_OPTION) + 1);
      }
 else {
        options[i]=value[i];
      }
      if (test_help) {
        String sub=KEY_EMPTY;
        if (labels[i].indexOf(KEY_SUFFIX) >= 0) {
          sub=labels[i].substring(labels[i].indexOf(KEY_HELP),labels[i].indexOf(KEY_SUFFIX));
        }
 else {
          sub=labels[i].substring(labels[i].indexOf(KEY_HELP),labels[i].indexOf(KEY_SUFFIX_SHORT));
        }
        help[i]=sub.replace(KEY_HELP,KEY_EMPTY);
        labels[i]=labels[i].replace(KEY_HELP + help[i] + KEY_SUFFIX_SHORT,KEY_EMPTY);
      }
      if (!parameter) {
        pair=new CmsPair<String,Boolean>(value[i],Boolean.valueOf(selected));
        result.put(options[i],pair);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return result;
}
