{
  Vector parameter=new Vector();
  String[] temp=new String[6];
  int i=0;
  String select_method=cms.getRegistry().getModuleParameter(C_PARAM_MODULE_NAME,"method");
  String select_format=cms.getRegistry().getModuleParameter(C_PARAM_MODULE_NAME,"format");
  String select_sort=cms.getRegistry().getModuleParameter(C_PARAM_MODULE_NAME,"sort");
  if (debug) {
    System.err.println("selection=" + selection);
    System.err.println("select_method =" + select_method + " select_format ="+ select_format+ " select_sort ="+ select_sort);
  }
  if (selection.equals("method")) {
    if ((select_method != "") && (select_method != null)) {
      StringTokenizer st=new StringTokenizer(select_method,";");
      try {
        while (st.hasMoreTokens() && i < 3) {
          temp[i]=st.nextToken();
          i++;
        }
        parameter.addElement(C_PARAM_METHOD_BOOLEAN);
        parameter.addElement(temp[0]);
        parameter.addElement(C_PARAM_METHOD_AND);
        parameter.addElement(temp[1]);
      }
 catch (      Exception e) {
        e.printStackTrace();
        System.err.println(e.toString());
      }
    }
 else {
      parameter.addElement(C_PARAM_METHOD_AND);
      parameter.addElement("All");
      parameter.addElement(C_PARAM_METHOD_BOOLEAN);
      parameter.addElement("Boolean");
    }
  }
  if (selection.equals("format")) {
    if ((select_format != "") && (select_format != null)) {
      StringTokenizer st=new StringTokenizer(select_format,";");
      try {
        while (st.hasMoreTokens() && i < 2) {
          temp[i]=st.nextToken();
          i++;
        }
        parameter.addElement(C_PARAM_FORMAT_LONG);
        parameter.addElement(temp[0]);
        parameter.addElement(C_PARAM_FORMAT_SHORT);
        parameter.addElement(temp[1]);
      }
 catch (      Exception e) {
        e.printStackTrace();
        System.err.println(e.toString());
      }
    }
 else {
      parameter.addElement(C_PARAM_FORMAT_LONG);
      parameter.addElement("Long");
      parameter.addElement(C_PARAM_FORMAT_SHORT);
      parameter.addElement("Short");
    }
  }
  if (selection.equals("sort")) {
    if ((select_sort != "") && (select_sort != null)) {
      StringTokenizer st=new StringTokenizer(select_sort,";");
      try {
        if (st.hasMoreTokens()) {
          parameter.addElement("nolimit");
          parameter.addElement(st.nextToken());
        }
        if (st.hasMoreTokens()) {
          parameter.addElement("hour");
          parameter.addElement(st.nextToken());
        }
        if (st.hasMoreTokens()) {
          parameter.addElement("day");
          parameter.addElement(st.nextToken());
        }
        if (st.hasMoreTokens()) {
          parameter.addElement("week");
          parameter.addElement(st.nextToken());
        }
        if (st.hasMoreTokens()) {
          parameter.addElement("month");
          parameter.addElement(st.nextToken());
        }
        if (st.hasMoreTokens()) {
          parameter.addElement("year");
          parameter.addElement(st.nextToken());
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        System.err.println(e.toString());
      }
    }
  }
  return parameter;
}
