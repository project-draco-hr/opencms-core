{
  if (debug) {
    System.err.println("word=" + word + " method="+ method+ " sort="+ sort+ " page="+ page+ " conf="+ conf+ " restrict="+ restrict+ " matchPage="+ matchPage+ " cms="+ cms);
  }
  if (conf.equals("default")) {
    conf="Lucene";
  }
  if (sort == null) {
    sort="nolimit";
  }
  if (method == null) {
    method=C_PARAM_METHOD_BOOLEAN;
  }
  int x=0;
  int i=0;
  int size;
  int score;
  int last;
  int matches=0;
  int first;
  int setMatch;
  int pageNr;
  String url;
  String title;
  String description;
  String modified;
  long lmodified;
  String excerpt="";
  m_searchword=word;
  int from=0;
  SearchLucene search=new SearchLucene();
  if (!sort.equalsIgnoreCase("nolimit")) {
    Calendar cal=Calendar.getInstance();
    cal.setTimeZone(TimeZone.getTimeZone("ECT"));
    if (sort.equalsIgnoreCase("hour")) {
      cal.roll(Calendar.HOUR,-1);
    }
 else     if (sort.equalsIgnoreCase("day")) {
      cal.roll(Calendar.DAY_OF_YEAR,-1);
    }
 else     if (sort.equalsIgnoreCase("week")) {
      cal.roll(Calendar.DAY_OF_YEAR,-7);
    }
 else     if (sort.equalsIgnoreCase("month")) {
      cal.roll(Calendar.MONTH,-1);
    }
 else     if (sort.equalsIgnoreCase("year")) {
      cal.roll(Calendar.YEAR,-1);
    }
    search.setFrom(cal.getTime().getTime());
    if (debug) {
      System.err.println("cal=" + m_format.format(new Date(cal.getTime().getTime())));
    }
  }
  Vector results=search.performSearch(m_url,m_searchword,m_analyzer,method);
  if (results != null) {
    matches=results.size();
  }
  Vector result=new Vector();
  ControlLucene cdh;
  setMatch=Integer.valueOf(matchPage).intValue();
  if (debug) {
    System.err.println("setMatch=" + setMatch);
  }
  if (matches < 1) {
    String nomatch="nomatch";
    result.addElement(nomatch);
  }
 else {
    if (page == null) {
      pageNr=1;
    }
 else {
      pageNr=Integer.valueOf(page).intValue();
    }
    first=(pageNr - 1) * setMatch + 1;
    last=setMatch * pageNr;
    if (matches < last) {
      last=matches;
    }
    cdh=new ControlLucene(m_searchword,matches / setMatch + 1,first,last,matches);
    result.addElement(cdh);
    Hashtable oneHit=null;
    if (debug) {
      showSearchResults(results);
    }
    for (int j=first - 1; j <= last - 1; j++) {
      oneHit=(Hashtable)results.elementAt(j);
      url=(String)oneHit.get("url");
      title=(String)oneHit.get("title");
      description=(String)oneHit.get("description");
      excerpt=(String)oneHit.get("excerpt");
      lmodified=((Long)oneHit.get("modified")).longValue();
      modified=m_format.format(new Date(lmodified));
      size=Integer.valueOf((String)oneHit.get("length")).intValue();
      if (size != 0) {
        size=size / 1024;
      }
      if (size == 0) {
        size=1;
      }
      score=((Integer)oneHit.get("score")).intValue();
      cdh=new ControlLucene(url,title,excerpt,size,score,modified);
      result.addElement(cdh);
    }
  }
  return result;
}
