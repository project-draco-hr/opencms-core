{
  String headerValue=request.getHeader(HEADER_IFRANGE);
  if (headerValue != null) {
    long headerValueTime=(-1L);
    try {
      headerValueTime=request.getDateHeader(HEADER_IFRANGE);
    }
 catch (    Exception e) {
    }
    String eTag=getETag(item);
    long lastModified=item.getLastModifiedDate();
    if (headerValueTime == (-1L)) {
      if (!eTag.equals(headerValue.trim())) {
        return FULL_RANGE;
      }
    }
 else {
      if (lastModified > (headerValueTime + 1000)) {
        return FULL_RANGE;
      }
    }
  }
  long fileLength=item.getContentLength();
  if (fileLength == 0) {
    return null;
  }
  String rangeHeader=request.getHeader(HEADER_RANGE);
  if (rangeHeader == null) {
    return null;
  }
  if (!rangeHeader.startsWith("bytes")) {
    response.addHeader(HEADER_CONTENTRANGE,"bytes */" + fileLength);
    response.setStatus(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);
    return null;
  }
  rangeHeader=rangeHeader.substring(6);
  ArrayList<CmsWebdavRange> result=new ArrayList<CmsWebdavRange>();
  StringTokenizer commaTokenizer=new StringTokenizer(rangeHeader,",");
  while (commaTokenizer.hasMoreTokens()) {
    String rangeDefinition=commaTokenizer.nextToken().trim();
    CmsWebdavRange currentRange=new CmsWebdavRange();
    currentRange.setLength(fileLength);
    int dashPos=rangeDefinition.indexOf('-');
    if (dashPos == -1) {
      response.addHeader(HEADER_CONTENTRANGE,"bytes */" + fileLength);
      response.setStatus(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);
      return null;
    }
    if (dashPos == 0) {
      try {
        long offset=Long.parseLong(rangeDefinition);
        currentRange.setStart(fileLength + offset);
        currentRange.setEnd(fileLength - 1);
      }
 catch (      NumberFormatException e) {
        response.addHeader(HEADER_CONTENTRANGE,"bytes */" + fileLength);
        response.setStatus(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);
        return null;
      }
    }
 else {
      try {
        currentRange.setStart(Long.parseLong(rangeDefinition.substring(0,dashPos)));
        if (dashPos < (rangeDefinition.length() - 1)) {
          currentRange.setEnd(Long.parseLong(rangeDefinition.substring(dashPos + 1,rangeDefinition.length())));
        }
 else {
          currentRange.setEnd(fileLength - 1);
        }
      }
 catch (      NumberFormatException e) {
        response.addHeader(HEADER_CONTENTRANGE,"bytes */" + fileLength);
        response.setStatus(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);
        return null;
      }
    }
    if (!currentRange.validate()) {
      response.addHeader(HEADER_CONTENTRANGE,"bytes */" + fileLength);
      response.setStatus(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);
      return null;
    }
    result.add(currentRange);
  }
  return result;
}
