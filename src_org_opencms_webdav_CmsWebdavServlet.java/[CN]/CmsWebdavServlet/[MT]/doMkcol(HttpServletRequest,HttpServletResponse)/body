{
  String path=getRelativePath(req);
  if (m_readOnly) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_WEBDAV_READ_ONLY_0));
    }
    resp.setStatus(CmsWebdavStatus.SC_FORBIDDEN);
    return;
  }
  if (isLocked(req)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_ITEM_LOCKED_1,path));
    }
    resp.setStatus(CmsWebdavStatus.SC_LOCKED);
    return;
  }
  boolean exists=m_session.exists(path);
  if (exists) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_ITEM_EXISTS_1,path));
    }
    StringBuffer methodsAllowed=determineMethodsAllowed(getRelativePath(req));
    resp.addHeader(HEADER_ALLOW,methodsAllowed.toString());
    resp.setStatus(CmsWebdavStatus.SC_METHOD_NOT_ALLOWED);
    return;
  }
  if (req.getInputStream().available() > 0) {
    try {
      new SAXReader().read(req.getInputStream());
      resp.setStatus(CmsWebdavStatus.SC_NOT_IMPLEMENTED);
      return;
    }
 catch (    DocumentException de) {
      resp.setStatus(CmsWebdavStatus.SC_BAD_REQUEST);
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_INVALID_CONTENT_0));
      }
      return;
    }
  }
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_CREATE_COLLECTION_0));
    }
    m_session.create(path);
  }
 catch (  CmsVfsResourceAlreadyExistsException raeex) {
    resp.setStatus(CmsWebdavStatus.SC_PRECONDITION_FAILED);
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_ITEM_EXISTS_1,path));
    }
    return;
  }
catch (  CmsSecurityException sex) {
    resp.setStatus(CmsWebdavStatus.SC_FORBIDDEN);
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_NO_PERMISSION_0));
    }
    return;
  }
catch (  CmsException ex) {
    resp.setStatus(CmsWebdavStatus.SC_INTERNAL_SERVER_ERROR);
    if (LOG.isErrorEnabled()) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_REPOSITORY_ERROR_2,"MKCOL",path),ex);
    }
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().getBundle().key(Messages.LOG_CREATE_SUCCESS_0));
  }
  resp.setStatus(CmsWebdavStatus.SC_CREATED);
}
