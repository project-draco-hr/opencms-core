{
  String path=getRelativePath(req);
  if (m_readOnly) {
    resp.setStatus(CmsWebdavStatus.SC_FORBIDDEN);
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_WEBDAV_READ_ONLY_0));
    }
    return;
  }
  boolean exists=m_session.exists(path);
  if (!exists) {
    resp.setStatus(CmsWebdavStatus.SC_NOT_FOUND);
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_ITEM_NOT_FOUND_1,path));
    }
    return;
  }
  if (isLocked(req)) {
    resp.setStatus(CmsWebdavStatus.SC_LOCKED);
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_ITEM_LOCKED_1,path));
    }
    return;
  }
  Hashtable errorList=new Hashtable();
  checkChildLocks(req,path,errorList);
  if (!errorList.isEmpty()) {
    sendReport(req,resp,errorList);
    if (LOG.isDebugEnabled()) {
      Iterator iter=errorList.keySet().iterator();
      while (iter.hasNext()) {
        String errorPath=(String)iter.next();
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_CHILD_LOCKED_1,errorPath));
      }
    }
    return;
  }
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_DELETE_ITEM_0));
    }
    m_session.delete(path);
  }
 catch (  CmsVfsResourceNotFoundException rnfex) {
    resp.setStatus(CmsWebdavStatus.SC_NOT_FOUND);
    return;
  }
catch (  CmsSecurityException sex) {
    resp.setStatus(CmsWebdavStatus.SC_FORBIDDEN);
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_NO_PERMISSION_0));
    }
    return;
  }
catch (  CmsException ex) {
    resp.setStatus(CmsWebdavStatus.SC_INTERNAL_SERVER_ERROR);
    if (LOG.isErrorEnabled()) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_REPOSITORY_ERROR_2,"DELETE",path),ex);
    }
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().getBundle().key(Messages.LOG_DELETE_SUCCESS_0));
  }
  resp.setStatus(CmsWebdavStatus.SC_NO_CONTENT);
}
