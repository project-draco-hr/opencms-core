{
  String method=req.getMethod();
  if (LOG.isDebugEnabled()) {
    String path=getRelativePath(req);
    LOG.debug("[" + method + "] "+ path);
  }
  String auth=req.getHeader(HEADER_AUTHORIZATION);
  if (auth == null || !auth.toUpperCase().startsWith(AUTHORIZATION_BASIC_PREFIX)) {
    requestAuthorization(resp);
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_NO_AUTHORIZATION_0));
    }
    return;
  }
  String base64Token=auth.substring(6);
  String token=new String(Base64.decodeBase64(base64Token.getBytes()));
  String password=null;
  int pos=token.indexOf(SEPARATOR_CREDENTIALS);
  if (pos != -1) {
    m_username=token.substring(0,pos);
    password=token.substring(pos + 1);
  }
  try {
    m_session=m_repository.login(m_username,password);
  }
 catch (  CmsException ex) {
    m_session=null;
  }
  if (m_session == null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_LOGIN_FAILED_1,m_username));
    }
    resp.setStatus(HttpServletResponse.SC_FORBIDDEN);
    return;
  }
  if (method.equals(METHOD_PROPFIND)) {
    doPropfind(req,resp);
  }
 else   if (method.equals(METHOD_PROPPATCH)) {
    doProppatch(req,resp);
  }
 else   if (method.equals(METHOD_MKCOL)) {
    doMkcol(req,resp);
  }
 else   if (method.equals(METHOD_COPY)) {
    doCopy(req,resp);
  }
 else   if (method.equals(METHOD_MOVE)) {
    doMove(req,resp);
  }
 else   if (method.equals(METHOD_LOCK)) {
    doLock(req,resp);
  }
 else   if (method.equals(METHOD_UNLOCK)) {
    doUnlock(req,resp);
  }
 else {
    super.service(req,resp);
  }
}
