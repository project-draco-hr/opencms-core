{
  if (LOG.isInfoEnabled()) {
    LOG.info(Messages.get().getBundle().key(Messages.LOG_INIT_WEBDAV_SERVLET_0));
  }
  String value=null;
  try {
    value=getServletConfig().getInitParameter(INIT_PARAM_LIST);
    if (value != null) {
      m_listings=Boolean.valueOf(value).booleanValue();
    }
  }
 catch (  Exception e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_READ_INIT_PARAM_ERROR_2,INIT_PARAM_LIST,value),e);
    }
  }
  if (LOG.isInfoEnabled()) {
    LOG.info(Messages.get().getBundle().key(Messages.LOG_READ_INIT_PARAM_2,INIT_PARAM_LIST,Boolean.valueOf(m_listings)));
  }
  try {
    value=getServletConfig().getInitParameter(INIT_PARAM_READONLY);
    if (value != null) {
      m_readOnly=Boolean.valueOf(value).booleanValue();
    }
  }
 catch (  Exception e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_READ_INIT_PARAM_ERROR_2,INIT_PARAM_READONLY,value),e);
    }
  }
  if (LOG.isInfoEnabled()) {
    LOG.info(Messages.get().getBundle().key(Messages.LOG_READ_INIT_PARAM_2,INIT_PARAM_READONLY,Boolean.valueOf(m_readOnly)));
  }
  try {
    m_md5Helper=MessageDigest.getInstance("MD5");
  }
 catch (  NoSuchAlgorithmException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(Messages.get().getBundle().key(Messages.ERR_MD5_NOT_AVAILABLE_0),e);
    }
    throw new UnavailableException(Messages.get().getBundle().key(Messages.ERR_MD5_NOT_AVAILABLE_0));
  }
  String repositoryName=getInitParameter(INIT_PARAM_REPOSITORY);
  if (repositoryName == null) {
    if (LOG.isErrorEnabled()) {
      LOG.error(Messages.get().getBundle().key(Messages.ERR_INIT_PARAM_MISSING_1,INIT_PARAM_REPOSITORY));
    }
    throw new ServletException(Messages.get().getBundle().key(Messages.ERR_INIT_PARAM_MISSING_1,INIT_PARAM_REPOSITORY));
  }
  m_repository=OpenCms.getRepositoryManager().getRepository(repositoryName);
  if (m_repository == null) {
    if (LOG.isErrorEnabled()) {
      LOG.error(Messages.get().getBundle().key(Messages.ERR_REPOSITORY_NOT_FOUND_1,repositoryName));
    }
    throw new ServletException(Messages.get().getBundle().key(Messages.ERR_REPOSITORY_NOT_FOUND_1,repositoryName));
  }
  if (LOG.isInfoEnabled()) {
    LOG.info(Messages.get().getBundle().key(Messages.LOG_USE_REPOSITORY_1,repositoryName));
  }
}
