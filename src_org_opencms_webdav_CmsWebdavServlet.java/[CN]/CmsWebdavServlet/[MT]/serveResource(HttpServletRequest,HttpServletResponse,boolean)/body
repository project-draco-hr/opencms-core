{
  String path=getRelativePath(request);
  if (LOG.isDebugEnabled()) {
    if (content) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_SERVE_ITEM_1,path));
    }
 else {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_SERVE_ITEM_HEADER_1,path));
    }
  }
  I_CmsRepositoryItem item=null;
  try {
    item=m_session.getItem(path);
  }
 catch (  CmsException ex) {
    response.setStatus(HttpServletResponse.SC_NOT_FOUND);
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_ITEM_NOT_FOUND_1,path));
    }
    return;
  }
  if (!item.isCollection()) {
    if (path.endsWith("/") || (path.endsWith("\\"))) {
      response.setStatus(HttpServletResponse.SC_NOT_FOUND);
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_ITEM_NOT_FOUND_1,path));
      }
      return;
    }
  }
  String contentType=item.getMimeType();
  if (contentType == null) {
    contentType=getServletContext().getMimeType(item.getName());
  }
  ArrayList<CmsWebdavRange> ranges=null;
  long contentLength=-1L;
  if (item.isCollection()) {
    if (!m_listings) {
      response.setStatus(HttpServletResponse.SC_NOT_FOUND);
      return;
    }
    contentType="text/html;charset=UTF-8";
  }
 else {
    ranges=parseRange(request,response,item);
    response.setHeader(HEADER_ETAG,getETag(item));
    response.setHeader(HEADER_LASTMODIFIED,HTTP_DATE_FORMAT.format(new Date(item.getLastModifiedDate())));
    contentLength=item.getContentLength();
    if (contentLength == 0L) {
      content=false;
    }
  }
  ServletOutputStream ostream=null;
  PrintWriter writer=null;
  if (content) {
    try {
      ostream=response.getOutputStream();
    }
 catch (    IllegalStateException e) {
      if ((contentType == null) || (contentType.startsWith("text")) || (contentType.endsWith("xml"))) {
        writer=response.getWriter();
      }
 else {
        throw e;
      }
    }
  }
  if ((item.isCollection()) || (((ranges == null) || (ranges.isEmpty())) && (request.getHeader(HEADER_RANGE) == null)) || (ranges == FULL_RANGE)) {
    if (contentType != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_SERVE_ITEM_CONTENT_TYPE_1,contentType));
      }
      response.setContentType(contentType);
    }
    if ((!item.isCollection()) && (contentLength >= 0)) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_SERVE_ITEM_CONTENT_LENGTH_1,new Long(contentLength)));
      }
      if (contentLength < Integer.MAX_VALUE) {
        response.setContentLength((int)contentLength);
      }
 else {
        response.setHeader(HEADER_CONTENTLENGTH,"" + contentLength);
      }
    }
    InputStream renderResult=null;
    if (item.isCollection()) {
      if (content) {
        renderResult=renderHtml(request.getContextPath() + request.getServletPath(),item.getName());
      }
    }
    if (content) {
      try {
        response.setBufferSize(m_output);
      }
 catch (      IllegalStateException e) {
      }
      if (ostream != null) {
        copy(item,renderResult,ostream);
      }
 else {
        copy(item,renderResult,writer);
      }
    }
  }
 else {
    if ((ranges == null) || (ranges.isEmpty())) {
      return;
    }
    response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);
    if (ranges.size() == 1) {
      CmsWebdavRange range=ranges.get(0);
      response.addHeader(HEADER_CONTENTRANGE,"bytes " + range.getStart() + "-"+ range.getEnd()+ "/"+ range.getLength());
      long length=(range.getEnd() - range.getStart()) + 1;
      if (length < Integer.MAX_VALUE) {
        response.setContentLength((int)length);
      }
 else {
        response.setHeader(HEADER_CONTENTLENGTH,"" + length);
      }
      if (contentType != null) {
        if (LOG.isDebugEnabled()) {
          LOG.debug(Messages.get().getBundle().key(Messages.LOG_SERVE_ITEM_CONTENT_TYPE_1,contentType));
        }
        response.setContentType(contentType);
      }
      if (content) {
        try {
          response.setBufferSize(m_output);
        }
 catch (        IllegalStateException e) {
        }
        if (ostream != null) {
          copy(item,ostream,range);
        }
 else {
          copy(item,writer,range);
        }
      }
    }
 else {
      response.setContentType("multipart/byteranges; boundary=" + MIME_SEPARATION);
      if (content) {
        try {
          response.setBufferSize(m_output);
        }
 catch (        IllegalStateException e) {
        }
        if (ostream != null) {
          copy(item,ostream,ranges.iterator(),contentType);
        }
 else {
          copy(item,writer,ranges.iterator(),contentType);
        }
      }
    }
  }
}
