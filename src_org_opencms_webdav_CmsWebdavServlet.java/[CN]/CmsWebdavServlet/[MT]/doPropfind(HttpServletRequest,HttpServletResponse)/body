{
  String path=getRelativePath(req);
  if (!m_listings) {
    StringBuffer methodsAllowed=determineMethodsAllowed(getRelativePath(req));
    resp.addHeader(HEADER_ALLOW,methodsAllowed.toString());
    resp.setStatus(CmsWebdavStatus.SC_METHOD_NOT_ALLOWED);
    return;
  }
  List properties=new Vector();
  int depth=CmsRepositoryLockInfo.DEPTH_INFINITY_VALUE;
  int type=FIND_ALL_PROP;
  String depthStr=req.getHeader(HEADER_DEPTH);
  if (depthStr == null) {
    depth=CmsRepositoryLockInfo.DEPTH_INFINITY_VALUE;
  }
 else {
    if (depthStr.equals("0")) {
      depth=0;
    }
 else     if (depthStr.equals("1")) {
      depth=1;
    }
 else     if (depthStr.equalsIgnoreCase(DEPTH_INFINITY)) {
      depth=CmsRepositoryLockInfo.DEPTH_INFINITY_VALUE;
    }
  }
  Element propNode=null;
  try {
    SAXReader saxReader=new SAXReader();
    Document document=saxReader.read(req.getInputStream());
    Element rootElement=document.getRootElement();
    Iterator iter=rootElement.elementIterator();
    while (iter.hasNext()) {
      Element currentElem=(Element)iter.next();
switch (currentElem.getNodeType()) {
case Node.TEXT_NODE:
        break;
case Node.ELEMENT_NODE:
      if (currentElem.getName().endsWith("prop")) {
        type=FIND_BY_PROPERTY;
        propNode=currentElem;
      }
    if (currentElem.getName().endsWith("propname")) {
      type=FIND_PROPERTY_NAMES;
    }
  if (currentElem.getName().endsWith("allprop")) {
    type=FIND_ALL_PROP;
  }
break;
default :
break;
}
}
}
 catch (Exception e) {
}
if (propNode != null) {
if (type == FIND_BY_PROPERTY) {
Iterator iter=propNode.elementIterator();
while (iter.hasNext()) {
Element currentElem=(Element)iter.next();
switch (currentElem.getNodeType()) {
case Node.TEXT_NODE:
break;
case Node.ELEMENT_NODE:
String nodeName=currentElem.getName();
String propertyName=null;
if (nodeName.indexOf(':') != -1) {
propertyName=nodeName.substring(nodeName.indexOf(':') + 1);
}
 else {
propertyName=nodeName;
}
properties.add(propertyName);
break;
default :
break;
}
}
}
}
boolean exists=m_session.exists(path);
if (!exists) {
resp.setStatus(CmsWebdavStatus.SC_NOT_FOUND);
if (LOG.isDebugEnabled()) {
LOG.debug(Messages.get().getBundle().key(Messages.LOG_ITEM_NOT_FOUND_1,path));
}
return;
}
I_CmsRepositoryItem item=null;
try {
item=m_session.getItem(path);
}
 catch (CmsException e) {
resp.setStatus(CmsWebdavStatus.SC_NOT_FOUND);
return;
}
resp.setStatus(CmsWebdavStatus.SC_MULTI_STATUS);
resp.setContentType("text/xml; charset=UTF-8");
Document doc=DocumentHelper.createDocument();
Element multiStatusElem=doc.addElement(new QName(TAG_MULTISTATUS,Namespace.get("D",DEFAULT_NAMESPACE)));
if (depth == 0) {
parseProperties(req,multiStatusElem,item,type,properties);
}
 else {
Stack stack=new Stack();
stack.push(item);
Stack stackBelow=new Stack();
while ((!stack.isEmpty()) && (depth >= 0)) {
I_CmsRepositoryItem currentItem=(I_CmsRepositoryItem)stack.pop();
parseProperties(req,multiStatusElem,currentItem,type,properties);
if ((currentItem.isCollection()) && (depth > 0)) {
try {
List list=m_session.list(currentItem.getName());
Iterator iter=list.iterator();
while (iter.hasNext()) {
I_CmsRepositoryItem element=(I_CmsRepositoryItem)iter.next();
stackBelow.push(element);
}
}
 catch (CmsException e) {
resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
if (LOG.isErrorEnabled()) {
LOG.error(Messages.get().getBundle().key(Messages.LOG_LIST_ITEMS_ERROR_1,currentItem.getName()),e);
}
return;
}
}
if (stack.isEmpty()) {
depth--;
stack=stackBelow;
stackBelow=new Stack();
}
}
}
Writer writer=resp.getWriter();
doc.write(writer);
writer.close();
}
