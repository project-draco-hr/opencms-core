{
  if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_STATICEXPORT,"[CmsStaticExport] exporting " + link);
  }
  String deleteFileOnError=null;
  OutputStream outStream=null;
  CmsExportLink dbLink=new CmsExportLink(link,System.currentTimeMillis(),null);
  try {
    CmsExportRequest dReq=new CmsExportRequest(m_cms.getRequestContext().getRequest().getWebAppUrl(),m_cms.getRequestContext().getRequest().getServletUrl());
    int paraStart=link.indexOf("?");
    String externLink=getExternLinkName(link);
    boolean writeFile=true;
    if (externLink == null || externLink.equals("")) {
      writeFile=false;
    }
    if (C_EXPORT_FALSE.equals(externLink)) {
      return;
    }
    if (paraStart >= 0) {
      Hashtable parameter=javax.servlet.http.HttpUtils.parseQueryString(link.substring(paraStart + 1));
      link=link.substring(0,paraStart);
      dReq.setParameters(parameter);
    }
    CmsExportResponse dRes=new CmsExportResponse();
    if (writeFile) {
      String folder="";
      int folderIndex=externLink.lastIndexOf('/');
      if (folderIndex != -1) {
        folder=externLink.substring(0,externLink.lastIndexOf('/'));
      }
      String correctur="";
      if (!externLink.startsWith("/")) {
        correctur="/";
        boolean linkIsExtern=true;
        try {
          URL test=new URL(externLink);
        }
 catch (        MalformedURLException e) {
          linkIsExtern=false;
        }
        if (linkIsExtern) {
          throw new CmsException(" This is a extern link.");
        }
      }
      File discFolder=new File(m_exportPath + correctur + folder);
      if (!discFolder.exists()) {
        if (!discFolder.mkdirs()) {
          throw new CmsException("[" + this.getClass().getName() + "] "+ "could't create all folders for "+ folder+ ".");
        }
      }
      File discFile=new File(m_exportPath + correctur + externLink);
      deleteFileOnError=m_exportPath + correctur + externLink;
      try {
        outStream=new FileOutputStream(discFile);
        dRes.putOutputStream(outStream);
      }
 catch (      Exception e) {
        throw new CmsException("[" + this.getClass().getName() + "] "+ "could't open file "+ m_exportPath+ correctur+ externLink+ ": "+ e.getMessage());
      }
    }
 else {
      dRes.putOutputStream(new ByteArrayOutputStream());
    }
    CmsObject cmsForStaticExport=m_cms.getCmsObjectForStaticExport(dReq,dRes);
    cmsForStaticExport.setMode(C_MODUS_EXPORT);
    CmsFile file=m_cms.readFile(link);
    int launcherId=file.getLauncherType();
    String startTemplateClass=file.getLauncherClassname();
    I_CmsLauncher launcher=cmsForStaticExport.getLauncherManager().getLauncher(launcherId);
    if (launcher == null) {
      throw new CmsException("Could not launch file " + link + ". Launcher for requested launcher ID "+ launcherId+ " could not be found.");
    }
    ((CmsExportRequest)cmsForStaticExport.getRequestContext().getRequest()).setRequestedResource(link);
    cmsForStaticExport.getRequestContext().addDependency(file.getResourceName());
    launcher.initlaunch(cmsForStaticExport,file,startTemplateClass,null);
    Vector linksToAdd=cmsForStaticExport.getRequestContext().getLinkVector();
    for (int i=0; i < linksToAdd.size(); i++) {
      if (!allLinks.contains(linksToAdd.elementAt(i))) {
        if (!m_afterPublish || (m_cms.readExportLinkHeader((String)linksToAdd.elementAt(i)) == null)) {
          allLinks.add(linksToAdd.elementAt(i));
        }
      }
    }
    Vector depsToAdd=cmsForStaticExport.getRequestContext().getDependencies();
    for (int i=0; i < depsToAdd.size(); i++) {
      dbLink.addDependency((String)depsToAdd.elementAt(i));
    }
    try {
      dbLink.setProcessedState(true);
      m_cms.writeExportLink(dbLink);
    }
 catch (    CmsException e) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_STATICEXPORT,"[CmsStaticExport] write ExportLink " + dbLink.getLink() + " failed: "+ e.toString());
      }
    }
    if (outStream != null) {
      outStream.close();
    }
  }
 catch (  CmsException exc) {
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_STATICEXPORT,"[CmsStaticExport] " + deleteFileOnError + " export "+ link+ " failed: "+ exc.toString());
    }
    if (deleteFileOnError != null) {
      try {
        File deleteMe=new File(deleteFileOnError);
        if (deleteMe.exists()) {
          if (outStream != null) {
            outStream.close();
          }
          deleteMe.delete();
          m_cms.deleteExportLink(link);
        }
      }
 catch (      Exception e) {
      }
    }
  }
catch (  Exception e) {
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_STATICEXPORT,"[CmsStaticExport]  export " + link + " failed : "+ Utils.getStackTrace(e));
    }
  }
}
