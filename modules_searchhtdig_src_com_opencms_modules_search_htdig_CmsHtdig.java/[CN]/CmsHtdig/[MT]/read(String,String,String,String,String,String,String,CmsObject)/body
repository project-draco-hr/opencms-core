{
  int x=0;
  int i=0;
  int itemp1;
  int itemp2;
  int itemp3;
  int itemp4;
  int itemp5;
  int setMatch=10;
  String query;
  String temp1;
  String temp2;
  String temp3;
  String temp4;
  Vector result=new Vector();
  Reader reader=null;
  CmsHtdig cdh;
  if (method == null) {
    method="and";
  }
  if (sort == null) {
    sort="score";
  }
  if (conf.equals("default")) {
    conf="htdig";
  }
  if (restrict == null || restrict.equals("ALL")) {
    restrict="";
  }
  if (matchpp != null) {
    setMatch=Integer.parseInt(matchpp);
  }
  String[] output=new String[((setMatch * C_PARAM_HTDIG_BODY_SIZE) + C_PARAM_HTDIG_ADD)];
  if (page == null) {
    query="restrict=" + restrict + "&config="+ conf+ "&method="+ method+ "&format=long&sort="+ sort+ "&matchesperpage="+ setMatch+ "&words="+ word;
  }
 else {
    query="restrict=" + restrict + "&config="+ conf+ "&method="+ method+ "&format=long&sort="+ sort+ "&matchesperpage="+ setMatch+ "&words="+ word+ "&page="+ page;
  }
  URL url=new URL(c_serverpath);
  URLConnection connection=url.openConnection();
  connection.setDoOutput(true);
  OutputStream connectionOutput=connection.getOutputStream();
  Writer writer=new OutputStreamWriter(connectionOutput,"latin1");
  writer.write(query);
  writer.close();
  InputStream in=connection.getInputStream();
  reader=new InputStreamReader(in,"latin1");
  BufferedReader bufferedReader=new BufferedReader(reader);
  String line=new String();
  while ((line=bufferedReader.readLine()) != null) {
    output[i]=line;
    i++;
  }
  bufferedReader.close();
  if (i <= 1) {
    if (output[0].equals("syntax")) {
      result.addElement(output[0]);
    }
 else {
      String nomatch="nomatch";
      result.addElement(nomatch);
    }
  }
 else {
    temp1=output[x];
    itemp1=Integer.parseInt(output[x + 1]);
    itemp2=Integer.parseInt(output[x + 2]);
    itemp3=Integer.parseInt(output[x + 3]);
    itemp4=Integer.parseInt(output[x + 4]);
    cdh=new CmsHtdig(temp1,itemp1,itemp2,itemp3,itemp4);
    result.addElement(cdh);
    for (x=C_PARAM_HTDIG_ADD; x < i; x+=C_PARAM_HTDIG_BODY_SIZE) {
      temp1=output[x];
      temp2=output[x + 1];
      temp3=output[x + 2];
      itemp1=Integer.parseInt(output[x + 3]);
      itemp2=Integer.parseInt(output[x + 4]);
      temp4=output[x + 5];
      cdh=new CmsHtdig(temp1,temp2,temp3,itemp1,itemp2,temp4);
      result.addElement(cdh);
    }
  }
  return result;
}
