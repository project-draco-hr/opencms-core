{
  Element systemElement=parent.addElement(N_SYSTEM);
  if (OpenCms.getRunLevel() >= OpenCms.RUNLEVEL_3_SHELL_ACCESS) {
    m_localeManager=OpenCms.getLocaleManager();
    m_mailSettings=OpenCms.getSystemInfo().getMailSettings();
    m_configuredJobs=OpenCms.getScheduleManager().getJobs();
    m_historyEnabled=OpenCms.getSystemInfo().isHistoryEnabled();
    m_historyVersions=OpenCms.getSystemInfo().getHistoryVersions();
    m_historyVersionsAfterDeletion=OpenCms.getSystemInfo().getHistoryVersionsAfterDeletion();
    m_siteManager=OpenCms.getSiteManager();
    m_loginManager=OpenCms.getLoginManager();
    m_loginMessage=OpenCms.getLoginManager().getLoginMessage();
  }
  Element i18nElement=systemElement.addElement(N_I18N);
  i18nElement.addElement(N_LOCALEHANDLER).addAttribute(A_CLASS,m_localeManager.getLocaleHandler().getClass().getName());
  Iterator<Locale> loc;
  Element localesElement;
  localesElement=i18nElement.addElement(N_LOCALESCONFIGURED);
  loc=m_localeManager.getAvailableLocales().iterator();
  while (loc.hasNext()) {
    localesElement.addElement(N_LOCALE).addText(loc.next().toString());
  }
  localesElement=i18nElement.addElement(N_LOCALESDEFAULT);
  loc=m_localeManager.getDefaultLocales().iterator();
  while (loc.hasNext()) {
    localesElement.addElement(N_LOCALE).setText(loc.next().toString());
  }
  i18nElement.addElement(N_TIMEZONE).setText(m_localeManager.getTimeZone().getID());
  Element mailElement=systemElement.addElement(N_MAIL);
  mailElement.addElement(N_MAILFROM).setText(m_mailSettings.getMailFromDefault());
  Iterator<CmsMailHost> hosts=m_mailSettings.getMailHosts().iterator();
  while (hosts.hasNext()) {
    CmsMailHost host=hosts.next();
    Element hostElement=mailElement.addElement(N_MAILHOST).addAttribute(A_NAME,host.getHostname()).addAttribute(A_PORT,Integer.toString(host.getPort())).addAttribute(A_ORDER,host.getOrder().toString()).addAttribute(A_PROTOCOL,host.getProtocol());
    if (host.isAuthenticating()) {
      hostElement.addAttribute(A_USER,host.getUsername()).addAttribute(A_PASSWORD,host.getPassword());
    }
  }
  Element schedulerElement=systemElement.addElement(N_SCHEDULER);
  Iterator<CmsScheduledJobInfo> jobs=m_configuredJobs.iterator();
  while (jobs.hasNext()) {
    CmsScheduledJobInfo jobInfo=jobs.next();
    Element jobElement=schedulerElement.addElement(N_JOB);
    jobElement.addElement(N_NAME).addText(jobInfo.getJobName());
    jobElement.addElement(N_CLASS).addText(jobInfo.getClassName());
    jobElement.addElement(N_REUSEINSTANCE).addText(String.valueOf(jobInfo.isReuseInstance()));
    jobElement.addElement(N_ACTIVE).addText(String.valueOf(jobInfo.isActive()));
    jobElement.addElement(N_CRONEXPRESSION).addCDATA(jobInfo.getCronExpression());
    Element contextElement=jobElement.addElement(N_CONTEXT);
    contextElement.addElement(N_USERNAME).setText(jobInfo.getContextInfo().getUserName());
    contextElement.addElement(N_PROJECT).setText(jobInfo.getContextInfo().getProjectName());
    contextElement.addElement(N_SITEROOT).setText(jobInfo.getContextInfo().getSiteRoot());
    contextElement.addElement(N_REQUESTEDURI).setText(jobInfo.getContextInfo().getRequestedUri());
    contextElement.addElement(N_LOCALE).setText(jobInfo.getContextInfo().getLocaleName());
    contextElement.addElement(N_ENCODING).setText(jobInfo.getContextInfo().getEncoding());
    contextElement.addElement(N_REMOTEADDR).setText(jobInfo.getContextInfo().getRemoteAddr());
    CmsParameterConfiguration jobParameters=jobInfo.getConfiguration();
    if ((jobParameters != null) && (jobParameters.size() > 0)) {
      Element parameterElement=jobElement.addElement(N_PARAMETERS);
      jobParameters.appendToXml(parameterElement);
    }
  }
  Element eventsElement=systemElement.addElement(N_EVENTS);
  Element eventManagerElement=eventsElement.addElement(N_EVENTMANAGER);
  eventManagerElement.addAttribute(A_CLASS,m_eventManager.getClass().getName());
  Element historyElement=systemElement.addElement(N_VERSIONHISTORY);
  historyElement.addAttribute(A_ENABLED,String.valueOf(m_historyEnabled));
  historyElement.addAttribute(A_COUNT,new Integer(m_historyVersions).toString());
  historyElement.addAttribute(A_DELETED,new Integer(m_historyVersionsAfterDeletion).toString());
  Element resourceinitElement=systemElement.addElement(N_RESOURCEINIT);
  Iterator<I_CmsResourceInit> resHandlers=m_resourceInitHandlers.iterator();
  while (resHandlers.hasNext()) {
    I_CmsResourceInit clazz=resHandlers.next();
    Element handlerElement=resourceinitElement.addElement(N_RESOURCEINITHANDLER);
    handlerElement.addAttribute(A_CLASS,clazz.getClass().getName());
  }
  Element requesthandlersElement=systemElement.addElement(N_REQUESTHANDLERS);
  Iterator<I_CmsRequestHandler> reqHandlers=m_requestHandlers.iterator();
  while (reqHandlers.hasNext()) {
    I_CmsRequestHandler clazz=reqHandlers.next();
    Element handlerElement=requesthandlersElement.addElement(N_REQUESTHANDLER);
    handlerElement.addAttribute(A_CLASS,clazz.getClass().getName());
  }
  Element passwordhandlerElement=systemElement.addElement(N_PASSWORDHANDLER).addAttribute(A_CLASS,m_passwordHandler.getClass().getName());
  passwordhandlerElement.addElement(N_PASSWORDENCODING).addText(m_passwordHandler.getInputEncoding());
  passwordhandlerElement.addElement(N_DIGESTTYPE).addText(m_passwordHandler.getDigestType());
  CmsParameterConfiguration handlerParameters=m_passwordHandler.getConfiguration();
  if (handlerParameters != null) {
    handlerParameters.appendToXml(passwordhandlerElement);
  }
  if (m_validationHandler != null) {
    Element valHandlerElem=systemElement.addElement(N_VALIDATIONHANDLER);
    valHandlerElem.addAttribute(A_CLASS,m_validationHandler);
  }
  if (m_loginManager != null) {
    Element managerElement=systemElement.addElement(N_LOGINMANAGER);
    managerElement.addElement(N_DISABLEMINUTES).addText(String.valueOf(m_loginManager.getDisableMinutes()));
    managerElement.addElement(N_MAXBADATTEMPTS).addText(String.valueOf(m_loginManager.getMaxBadAttempts()));
    managerElement.addElement(N_ENABLESCURITY).addText(String.valueOf(m_loginManager.isEnableSecurity()));
    String tokenLifetimeStr=m_loginManager.getTokenLifetimeStr();
    if (tokenLifetimeStr != null) {
      managerElement.addElement(N_TOKEN_LIFETIME).addText(tokenLifetimeStr);
    }
  }
  if (m_loginMessage != null) {
    Element messageElement=systemElement.addElement(N_LOGINMESSAGE);
    messageElement.addElement(N_ENABLED).addText(String.valueOf(m_loginMessage.isEnabled()));
    messageElement.addElement(N_MESSAGE).addCDATA(m_loginMessage.getMessage());
    messageElement.addElement(N_LOGINFORBIDDEN).addText(String.valueOf(m_loginMessage.isLoginForbidden()));
    if (m_loginMessage.getTimeStart() != CmsLoginMessage.DEFAULT_TIME_START) {
      messageElement.addElement(N_TIMESTART).addText(String.valueOf(m_loginMessage.getTimeStart()));
    }
    if (m_loginMessage.getTimeEnd() != CmsLoginMessage.DEFAULT_TIME_END) {
      messageElement.addElement(N_TIMEEND).addText(String.valueOf(m_loginMessage.getTimeEnd()));
    }
  }
  Element sitesElement=systemElement.addElement(N_SITES);
  sitesElement.addElement(N_WORKPLACE_SERVER).addText(m_siteManager.getWorkplaceServer());
  sitesElement.addElement(N_DEFAULT_URI).addText(m_siteManager.getDefaultUri());
  String sharedFolder=m_siteManager.getSharedFolder();
  if (sharedFolder != null) {
    sitesElement.addElement(N_SHARED_FOLDER).addText(sharedFolder);
  }
  Iterator<CmsSite> siteIterator=new HashSet<CmsSite>(m_siteManager.getSites().values()).iterator();
  while (siteIterator.hasNext()) {
    CmsSite site=siteIterator.next();
    Element siteElement=sitesElement.addElement(N_SITE);
    siteElement.addAttribute(A_SERVER,site.getSiteMatcher().toString());
    siteElement.addAttribute(A_URI,site.getSiteRoot().concat("/"));
    siteElement.addAttribute(A_TITLE,site.getTitle());
    siteElement.addAttribute(A_POSITION,Float.toString(site.getPosition()));
    siteElement.addAttribute(A_ERROR_PAGE,site.getErrorPage());
    siteElement.addAttribute(A_WEBSERVER,String.valueOf(site.isWebserver()));
    if (site.hasSecureServer()) {
      Element secureElem=siteElement.addElement(N_SECURE);
      secureElem.addAttribute(A_SERVER,site.getSecureUrl());
      secureElem.addAttribute(A_EXCLUSIVE,String.valueOf(site.isExclusiveUrl()));
      secureElem.addAttribute(A_ERROR,String.valueOf(site.isExclusiveError()));
      if (site.usesPermanentRedirects()) {
        secureElem.addAttribute(A_USE_PERMANENT_REDIRECTS,Boolean.TRUE.toString());
      }
    }
    Iterator<CmsSiteMatcher> aliasIterator=site.getAliases().iterator();
    while (aliasIterator.hasNext()) {
      CmsSiteMatcher matcher=aliasIterator.next();
      Element aliasElement=siteElement.addElement(N_ALIAS);
      aliasElement.addAttribute(A_SERVER,matcher.getUrl());
      if (matcher.getTimeOffset() != 0) {
        aliasElement.addAttribute(A_OFFSET,"" + matcher.getTimeOffset());
      }
    }
  }
  Element runtimepropertiesElement=systemElement.addElement(N_RUNTIMEPROPERTIES);
  if (m_runtimeProperties != null) {
    List<String> sortedRuntimeProperties=new ArrayList<String>(m_runtimeProperties.keySet());
    Collections.sort(sortedRuntimeProperties);
    Iterator<String> it=sortedRuntimeProperties.iterator();
    while (it.hasNext()) {
      String key=it.next();
      runtimepropertiesElement.addElement(N_PARAM).addAttribute(A_NAME,key).addText(m_runtimeProperties.get(key));
    }
  }
  Element runtimeinfoElement=systemElement.addElement(N_RUNTIMECLASSES);
  Element runtimeinfofactoryElement=runtimeinfoElement.addElement(N_RUNTIMEINFO);
  runtimeinfofactoryElement.addAttribute(A_CLASS,getRuntimeInfoFactory().getClass().getName());
  Element defaultusersElement=systemElement.addElement(N_DEFAULTUSERS);
  defaultusersElement.addElement(N_USER_ADMIN).addText(m_cmsDefaultUsers.getUserAdmin());
  defaultusersElement.addElement(N_USER_GUEST).addText(m_cmsDefaultUsers.getUserGuest());
  defaultusersElement.addElement(N_USER_EXPORT).addText(m_cmsDefaultUsers.getUserExport());
  if (!m_cmsDefaultUsers.getUserDeletedResource().equals(m_cmsDefaultUsers.getUserAdmin())) {
    defaultusersElement.addElement(N_USER_DELETEDRESOURCE).addText(m_cmsDefaultUsers.getUserDeletedResource());
  }
  defaultusersElement.addElement(N_GROUP_ADMINISTRATORS).addText(m_cmsDefaultUsers.getGroupAdministrators());
  defaultusersElement.addElement(N_GROUP_USERS).addText(m_cmsDefaultUsers.getGroupUsers());
  defaultusersElement.addElement(N_GROUP_GUESTS).addText(m_cmsDefaultUsers.getGroupGuests());
  systemElement.addElement(N_DEFAULT_CONTENT_ENCODING).addText(getDefaultContentEncoding());
  if (m_cmsMemoryMonitorConfiguration != null) {
    Element memorymonitorElement=systemElement.addElement(N_MEMORYMONITOR);
    if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(m_cmsMemoryMonitorConfiguration.getClassName())) {
      memorymonitorElement.addAttribute(A_CLASS,m_cmsMemoryMonitorConfiguration.getClassName());
    }
    memorymonitorElement.addElement(N_MAXUSAGE_PERCENT).addText(String.valueOf(m_cmsMemoryMonitorConfiguration.getMaxUsagePercent()));
    memorymonitorElement.addElement(N_LOG_INTERVAL).addText(String.valueOf(m_cmsMemoryMonitorConfiguration.getLogInterval()));
    if (m_cmsMemoryMonitorConfiguration.getEmailInterval() >= 0) {
      memorymonitorElement.addElement(N_EMAIL_INTERVAL).addText(String.valueOf(m_cmsMemoryMonitorConfiguration.getEmailInterval()));
    }
    memorymonitorElement.addElement(N_WARNING_INTERVAL).addText(String.valueOf(m_cmsMemoryMonitorConfiguration.getWarningInterval()));
    if (m_cmsMemoryMonitorConfiguration.getEmailSender() != null) {
      memorymonitorElement.addElement(N_EMAIL_SENDER).addText(m_cmsMemoryMonitorConfiguration.getEmailSender());
    }
    List<String> emailReceiver=m_cmsMemoryMonitorConfiguration.getEmailReceiver();
    if (!emailReceiver.isEmpty()) {
      Element emailreceiverElement=memorymonitorElement.addElement(N_EMAIL_RECEIVER);
      Iterator<String> iter=emailReceiver.iterator();
      while (iter.hasNext()) {
        emailreceiverElement.addElement(N_RECEIVER).addText(iter.next());
      }
    }
  }
  Element flexcacheElement=systemElement.addElement(N_FLEXCACHE);
  flexcacheElement.addElement(N_CACHE_ENABLED).addText(String.valueOf(m_cmsFlexCacheConfiguration.isCacheEnabled()));
  flexcacheElement.addElement(N_CACHE_OFFLINE).addText(String.valueOf(m_cmsFlexCacheConfiguration.isCacheOffline()));
  flexcacheElement.addElement(N_MAXCACHEBYTES).addText(String.valueOf(m_cmsFlexCacheConfiguration.getMaxCacheBytes()));
  flexcacheElement.addElement(N_AVGCACHEBYTES).addText(String.valueOf(m_cmsFlexCacheConfiguration.getAvgCacheBytes()));
  flexcacheElement.addElement(N_MAXENTRYBYTES).addText(String.valueOf(m_cmsFlexCacheConfiguration.getMaxEntryBytes()));
  flexcacheElement.addElement(N_MAXKEYS).addText(String.valueOf(m_cmsFlexCacheConfiguration.getMaxKeys()));
  if (m_cmsFlexCacheConfiguration.getDeviceSelectorConfiguration() != null) {
    Element flexcacheDeviceSelectorElement=flexcacheElement.addElement(N_DEVICESELECTOR);
    flexcacheDeviceSelectorElement.addAttribute(A_CLASS,m_cmsFlexCacheConfiguration.getDeviceSelectorConfiguration());
  }
  Element httpAuthenticationElement=systemElement.addElement(N_HTTP_AUTHENTICATION);
  httpAuthenticationElement.addElement(N_BROWSER_BASED).setText(m_httpAuthenticationSettings.getConfigBrowserBasedAuthentication());
  if (m_httpAuthenticationSettings.getFormBasedHttpAuthenticationUri() != null) {
    httpAuthenticationElement.addElement(N_FORM_BASED).setText(m_httpAuthenticationSettings.getFormBasedHttpAuthenticationUri());
  }
  Element cacheElement=systemElement.addElement(N_RESULTCACHE);
  cacheElement.addElement(N_KEYGENERATOR).setText(m_cacheSettings.getCacheKeyGenerator());
  cacheElement.addElement(N_SIZE_USERS).setText(Integer.toString(m_cacheSettings.getUserCacheSize()));
  cacheElement.addElement(N_SIZE_GROUPS).setText(Integer.toString(m_cacheSettings.getGroupCacheSize()));
  if (m_cacheSettings.getConfiguredOrgUnitCacheSize() > -1) {
    cacheElement.addElement(N_SIZE_ORGUNITS).setText(Integer.toString(m_cacheSettings.getConfiguredOrgUnitCacheSize()));
  }
  cacheElement.addElement(N_SIZE_USERGROUPS).setText(Integer.toString(m_cacheSettings.getUserGroupsCacheSize()));
  cacheElement.addElement(N_SIZE_PROJECTS).setText(Integer.toString(m_cacheSettings.getProjectCacheSize()));
  if (m_cacheSettings.getConfiguredProjectResourcesCacheSize() > -1) {
    cacheElement.addElement(N_SIZE_PROJECTRESOURCES).setText(Integer.toString(m_cacheSettings.getConfiguredProjectResourcesCacheSize()));
  }
  cacheElement.addElement(N_SIZE_RESOURCES).setText(Integer.toString(m_cacheSettings.getResourceCacheSize()));
  if (m_cacheSettings.getConfiguredRolesCacheSize() > -1) {
    cacheElement.addElement(N_SIZE_ROLES).setText(Integer.toString(m_cacheSettings.getConfiguredRolesCacheSize()));
  }
  cacheElement.addElement(N_SIZE_RESOURCELISTS).setText(Integer.toString(m_cacheSettings.getResourcelistCacheSize()));
  cacheElement.addElement(N_SIZE_PROPERTIES).setText(Integer.toString(m_cacheSettings.getPropertyCacheSize()));
  if (m_cacheSettings.getConfiguredPropertyListsCacheSize() > -1) {
    cacheElement.addElement(N_SIZE_PROPERTYLISTS).setText(Integer.toString(m_cacheSettings.getConfiguredPropertyListsCacheSize()));
  }
  cacheElement.addElement(N_SIZE_ACLS).setText(Integer.toString(m_cacheSettings.getAclCacheSize()));
  cacheElement.addElement(N_SIZE_PERMISSIONS).setText(Integer.toString(m_cacheSettings.getPermissionCacheSize()));
  if ((m_notificationTime != null) || (m_notificationProject != null)) {
    Element notificationElement=systemElement.addElement(N_CONTENT_NOTIFICATION);
    if (m_notificationTime != null) {
      notificationElement.addElement(N_NOTIFICATION_TIME).setText(m_notificationTime.toString());
    }
    if (m_notificationProject != null) {
      notificationElement.addElement(N_NOTIFICATION_PROJECT).setText(m_notificationProject);
    }
  }
  if (m_authorizationHandler != null) {
    Element authorizationHandlerElem=systemElement.addElement(N_AUTHORIZATIONHANDLER);
    authorizationHandlerElem.addAttribute(A_CLASS,m_authorizationHandler);
  }
  if (m_publishManager != null) {
    Element pubHistElement=systemElement.addElement(N_PUBLISHMANAGER);
    pubHistElement.addElement(N_HISTORYSIZE).setText(String.valueOf(m_publishManager.getPublishHistorySize()));
    pubHistElement.addElement(N_QUEUEPERSISTANCE).setText(String.valueOf(m_publishManager.isPublishQueuePersistanceEnabled()));
    pubHistElement.addElement(N_QUEUESHUTDOWNTIME).setText(String.valueOf(m_publishManager.getPublishQueueShutdowntime()));
  }
  if (m_sessionStorageProvider != null) {
    Element sessionStorageProviderElem=systemElement.addElement(N_SESSION_STORAGEPROVIDER);
    sessionStorageProviderElem.addAttribute(A_CLASS,m_sessionStorageProvider);
  }
  if (m_permissionHandler != null) {
    Element permissionHandlerElem=systemElement.addElement(N_PERMISSIONHANDLER);
    permissionHandlerElem.addAttribute(A_CLASS,m_permissionHandler);
  }
  CmsServletContainerSettings servletContainerSettings=OpenCms.getSystemInfo().getServletContainerSettings();
  if (!servletContainerSettings.getMode().isNone()) {
    Element servletContainerSettingsElem=systemElement.addElement(N_SERVLETCONTAINERSETTINGS);
    servletContainerSettingsElem.addAttribute(A_MODE,servletContainerSettings.getMode().getMode());
    if (!servletContainerSettings.getMode().isAuto()) {
      servletContainerSettingsElem.addElement(N_PREVENTRESPONSEFLUSH).addText("" + servletContainerSettings.isPreventResponseFlush());
      servletContainerSettingsElem.addElement(N_RELEASETAGSAFTEREND).addText("" + servletContainerSettings.isReleaseTagsAfterEnd());
    }
    if (servletContainerSettings.getRequestErrorPageAttribute() != null) {
      servletContainerSettingsElem.addElement(N_REQUESTERRORPAGEATTRIBUTE).addText(servletContainerSettings.getRequestErrorPageAttribute());
    }
  }
  if ((getAdeConfiguration() != null) || (getAdeCacheSettings() != null) || !m_adeParameters.isEmpty()) {
    Element adeElem=systemElement.addElement(N_ADE);
    if (getAdeConfiguration() != null) {
      adeElem.addElement(N_CONFIGURATION).addAttribute(A_CLASS,getAdeConfiguration());
    }
    if (!m_adeParameters.isEmpty()) {
      Element paramsElement=adeElem.addElement(N_PARAMETERS);
      for (      Map.Entry<String,String> entry : m_adeParameters.entrySet()) {
        String name=entry.getKey();
        String value=entry.getValue();
        Element paramElement=paramsElement.addElement(N_PARAM);
        paramElement.addAttribute(N_NAME,name);
        paramElement.setText(value);
      }
    }
    if (getAdeCacheSettings() != null) {
      Element cacheElem=adeElem.addElement(N_ADE_CACHE);
      Element cntPageCacheElem=cacheElem.addElement(N_CONTAINERPAGES);
      cntPageCacheElem.addAttribute(A_OFFLINE,"" + getAdeCacheSettings().getContainerPageOfflineSize());
      cntPageCacheElem.addAttribute(A_ONLINE,"" + getAdeCacheSettings().getContainerPageOnlineSize());
      Element groupContainerCacheElem=cacheElem.addElement(N_GROUPCONTAINERS);
      groupContainerCacheElem.addAttribute(A_OFFLINE,"" + getAdeCacheSettings().getGroupContainerOfflineSize());
      groupContainerCacheElem.addAttribute(A_ONLINE,"" + getAdeCacheSettings().getGroupContainerOnlineSize());
    }
  }
  if (getSubscriptionManager() != null) {
    Element subscrManElem=systemElement.addElement(N_SUBSCRIPTIONMANAGER);
    subscrManElem.addAttribute(A_ENABLED,Boolean.toString(getSubscriptionManager().isEnabled()));
    subscrManElem.addAttribute(A_POOLNAME,getSubscriptionManager().getPoolName());
    subscrManElem.addAttribute(A_MAXVISITED,String.valueOf(getSubscriptionManager().getMaxVisitedCount()));
  }
  I_CmsWorkflowManager workflowMan=getWorkflowManager();
  if (workflowMan != null) {
    Element workflowElem=systemElement.addElement(N_WORKFLOW);
    workflowElem.addAttribute(A_CLASS,workflowMan.getClass().getName());
    Map<String,String> parameters=workflowMan.getParameters();
    Element parametersElem=workflowElem.addElement(N_PARAMETERS);
    for (    Map.Entry<String,String> entry : parameters.entrySet()) {
      Element paramElem=parametersElem.addElement(N_PARAM);
      paramElem.addAttribute(A_NAME,entry.getKey());
      paramElem.addText(entry.getValue());
    }
  }
  if (m_userSessionMode != null) {
    Element userSessionElem=systemElement.addElement(N_USER_SESSION_MODE);
    userSessionElem.setText(m_userSessionMode.toString());
  }
  if (m_credentialsResolverClass != null) {
    systemElement.addElement(N_CREDENTIALS_RESOLVER).setText(m_credentialsResolverClass);
  }
  if (m_publishListRemoveMode != null) {
    systemElement.addElement(N_PUBLISH_LIST_REMOVE_MODE).addAttribute(A_MODE,m_publishListRemoveMode);
  }
  if (m_restrictDetailContents != null) {
    Element restrictDetailContentsElem=systemElement.addElement(N_RESTRICT_DETAIL_CONTENTS);
    restrictDetailContentsElem.addText(m_restrictDetailContents);
  }
  return systemElement;
}
