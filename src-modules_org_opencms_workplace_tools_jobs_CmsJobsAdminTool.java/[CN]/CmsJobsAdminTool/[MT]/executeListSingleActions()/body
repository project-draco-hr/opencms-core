{
  if (getParamListAction().equals(LIST_ACTION_EDIT)) {
    String jobId=getSelectedItem().getId();
    try {
      Map params=new HashMap();
      params.put("jobId",jobId);
      getToolManager().jspRedirectTool(this,"/jobs/edit",params);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (getParamListAction().equals(LIST_ACTION_COPY)) {
    String jobId=getSelectedItem().getId();
    CmsScheduledJobInfo job=(CmsScheduledJobInfo)OpenCms.getScheduleManager().getJob(jobId).clone();
    job.setActive(true);
    int warn=0;
  }
 else   if (getParamListAction().equals(LIST_ACTION_ACTIVATE)) {
    String jobId=getSelectedItem().getId();
    CmsScheduledJobInfo job=(CmsScheduledJobInfo)OpenCms.getScheduleManager().getJob(jobId).clone();
    job.setActive(true);
    try {
      OpenCms.getScheduleManager().scheduleJob(getCms(),job);
      writeConfiguration(true);
    }
 catch (    CmsSchedulerException e) {
    }
catch (    CmsRoleViolationException e) {
    }
  }
 else   if (getParamListAction().equals(LIST_ACTION_DEACTIVATE)) {
    String jobId=getSelectedItem().getId();
    CmsScheduledJobInfo job=(CmsScheduledJobInfo)OpenCms.getScheduleManager().getJob(jobId).clone();
    job.setActive(false);
    try {
      OpenCms.getScheduleManager().scheduleJob(getCms(),job);
      writeConfiguration(true);
    }
 catch (    CmsSchedulerException e) {
    }
catch (    CmsRoleViolationException e) {
    }
  }
 else   if (getParamListAction().equals(LIST_ACTION_DELETE)) {
    String jobId=getSelectedItem().getId();
    try {
      OpenCms.getScheduleManager().unscheduleJob(getCms(),jobId);
      writeConfiguration(false);
      getList().removeItem(jobId);
    }
 catch (    CmsRoleViolationException e) {
    }
  }
 else {
    throwListUnsupportedActionException();
  }
  listSave();
}
