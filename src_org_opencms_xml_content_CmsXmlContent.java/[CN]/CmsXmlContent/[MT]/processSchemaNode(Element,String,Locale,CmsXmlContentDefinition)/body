{
  int count=0;
  String previousName=null;
  List content=root.content();
  for (int i=content.size() - 1; i >= 0; i--) {
    Node node=(Node)content.get(i);
    if (!(node instanceof Element)) {
      content.remove(i);
    }
  }
  for (Iterator i=root.content().iterator(); i.hasNext(); ) {
    Element element=(Element)i.next();
    String name=element.getName();
    if ((previousName == null) || !previousName.equals(name)) {
      previousName=name;
      count=0;
    }
    String path;
    if (rootPath != null) {
      StringBuffer b=new StringBuffer(rootPath.length() + name.length() + 6);
      b.append(rootPath);
      b.append('/');
      b.append(createXpathElement(name,count));
      path=b.toString();
    }
 else {
      path=createXpathElement(name,count);
    }
    I_CmsXmlSchemaType schemaType=definition.getSchemaType(name);
    if (schemaType.isSimpleType()) {
      I_CmsXmlContentValue value=schemaType.createValue(element,name,count);
      addBookmark(path,locale,true,value);
    }
 else {
      CmsXmlCascadedContentDefinition cascadedSchema=(CmsXmlCascadedContentDefinition)schemaType;
      processSchemaNode(element,path,locale,cascadedSchema.getContentDefinition());
    }
    count++;
  }
}
