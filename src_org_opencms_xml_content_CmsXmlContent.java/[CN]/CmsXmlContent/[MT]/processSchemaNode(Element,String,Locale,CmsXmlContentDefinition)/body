{
  int count=1;
  String previousName=null;
  List content=root.content();
  for (int i=content.size() - 1; i >= 0; i--) {
    Node node=(Node)content.get(i);
    if (!(node instanceof Element)) {
      content.remove(i);
    }
  }
  for (Iterator i=root.content().iterator(); i.hasNext(); ) {
    Element element=(Element)i.next();
    String name=element.getName();
    if ((previousName == null) || !previousName.equals(name)) {
      previousName=name;
      count=1;
    }
    String path;
    if (rootPath != null) {
      StringBuffer b=new StringBuffer(rootPath.length() + name.length() + 6);
      b.append(rootPath);
      b.append('/');
      b.append(CmsXmlUtils.createXpathElement(name,count));
      path=b.toString();
    }
 else {
      path=CmsXmlUtils.createXpathElement(name,count);
    }
    I_CmsXmlSchemaType schemaType=definition.getSchemaType(name);
    if (schemaType != null) {
      I_CmsXmlContentValue value=schemaType.createValue(this,element,locale);
      addBookmark(path,locale,true,value);
      if (!schemaType.isSimpleType()) {
        CmsXmlNestedContentDefinition nestedSchema=(CmsXmlNestedContentDefinition)schemaType;
        processSchemaNode(element,path,locale,nestedSchema.getNestedContentDefinition());
      }
    }
 else {
      if (LOG.isWarnEnabled()) {
        LOG.warn(Messages.get().getBundle().key(Messages.LOG_XMLCONTENT_INVALID_ELEM_2,name,definition.getSchemaLocation()));
      }
    }
    count++;
  }
}
