{
  List resources=(List)new ArrayList();
  CmsResource currentResource=null;
  CmsLock currentLock=null;
  CmsResource resource=null;
  Iterator i=null;
  boolean existsOnline=false;
  List properties=null;
  CmsProperty currentProperty=null;
  resource=readFileHeader(context,filename,CmsResourceFilter.ALL);
  currentLock=getLock(context,filename);
  if (currentLock.getType() == CmsLock.C_TYPE_INHERITED) {
    lockResource(context,filename);
  }
  resources.add(resource);
  if (deleteOption == I_CmsConstants.C_DELETE_OPTION_DELETE_SIBLINGS) {
    resources.addAll(readSiblings(context,filename,false,CmsResourceFilter.DEFAULT));
  }
  i=resources.iterator();
  while (i.hasNext()) {
    currentResource=(CmsResource)i.next();
    currentLock=getLock(context,currentResource);
    if (!currentLock.equals(CmsLock.getNullLock()) && !currentLock.getUserId().equals(context.currentUser().getId())) {
      int exceptionType=currentLock.getUserId().equals(context.currentUser().getId()) ? CmsLockException.C_RESOURCE_LOCKED_BY_CURRENT_USER : CmsLockException.C_RESOURCE_LOCKED_BY_OTHER_USER;
      throw new CmsLockException("VFS link " + currentResource.getRootPath() + " pointing to "+ filename+ " is locked by another user!",exceptionType);
    }
  }
  i=resources.iterator();
  while (i.hasNext()) {
    existsOnline=false;
    currentResource=(CmsResource)i.next();
    if (hasPermissions(context,currentResource,I_CmsConstants.C_WRITE_ACCESS,false)) {
      try {
        readFileHeaderInProject(I_CmsConstants.C_PROJECT_ONLINE_ID,currentResource.getRootPath(),CmsResourceFilter.DEFAULT);
        existsOnline=true;
      }
 catch (      CmsException exc) {
        existsOnline=false;
      }
      m_lockManager.removeResource(this,context,currentResource.getRootPath(),true);
      if (!existsOnline) {
        if (deleteOption == I_CmsConstants.C_DELETE_OPTION_DELETE_SIBLINGS) {
          deleteAllProperties(context,currentResource.getRootPath());
        }
 else {
          properties=readPropertyObjects(context,currentResource.getRootPath(),null,false);
          for (int j=0, n=properties.size(); j < n; j++) {
            currentProperty=(CmsProperty)properties.get(j);
            currentProperty.setStructureValue(CmsProperty.C_DELETE_VALUE);
            currentProperty.setResourceValue(null);
          }
          writePropertyObjects(context,currentResource.getRootPath(),properties);
        }
        m_userDriver.removeAccessControlEntries(context.currentProject(),currentResource.getResourceId());
        if (currentResource.isLabeled() && !labelResource(context,currentResource,null,2)) {
          int flags=currentResource.getFlags();
          flags&=~I_CmsConstants.C_RESOURCEFLAG_LABELLINK;
          currentResource.setFlags(flags);
        }
        m_vfsDriver.removeFile(context.currentProject(),currentResource,true);
      }
 else {
        deleteAllAccessControlEntries(context,currentResource);
        currentResource.setState(I_CmsConstants.C_STATE_DELETED);
        m_vfsDriver.writeResourceState(context.currentProject(),currentResource,C_UPDATE_STRUCTURE_STATE);
        CmsProperty property=new CmsProperty();
        property.setKey(I_CmsConstants.C_PROPERTY_INTERNAL);
        property.setStructureValue("" + context.currentProject().getId());
        m_vfsDriver.writePropertyObject(context.currentProject(),currentResource,property);
        m_vfsDriver.writeLastModifiedProjectId(context.currentProject(),context.currentProject().getId(),currentResource);
      }
    }
  }
  clearAccessControlListCache();
  clearResourceCache();
  OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_RESOURCE_DELETED,Collections.singletonMap("resources",resources)));
}
