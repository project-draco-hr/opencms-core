{
  CmsGroup replacementGroup=null;
  if (replacementId != null) {
    replacementGroup=readGroup(dbc,replacementId);
  }
  List children=getChildren(dbc,group,false);
  List users=getUsersOfGroup(dbc,group.getName(),true,false,group.isRole());
  CmsProject onlineProject=readProject(dbc,CmsProject.ONLINE_PROJECT_ID);
  if (replacementGroup == null) {
    Iterator itUsers=users.iterator();
    while (itUsers.hasNext()) {
      CmsUser user=(CmsUser)itUsers.next();
      if (userInGroup(dbc,user.getName(),group.getName(),group.isRole())) {
        removeUserFromGroup(dbc,user.getName(),group.getName(),group.isRole());
      }
    }
    CmsUUID parentId=group.getParentId();
    if (parentId == null) {
      parentId=CmsUUID.getNullUUID();
    }
    Iterator itChildren=children.iterator();
    while (itChildren.hasNext()) {
      CmsGroup child=(CmsGroup)itChildren.next();
      child.setParentId(parentId);
      writeGroup(dbc,child);
    }
  }
 else {
    Iterator itChildren=children.iterator();
    while (itChildren.hasNext()) {
      CmsGroup child=(CmsGroup)itChildren.next();
      child.setParentId(replacementId);
      writeGroup(dbc,child);
    }
    Iterator itUsers=users.iterator();
    while (itUsers.hasNext()) {
      CmsUser user=(CmsUser)itUsers.next();
      addUserToGroup(dbc,user.getName(),replacementGroup.getName(),group.isRole());
      removeUserFromGroup(dbc,user.getName(),group.getName(),group.isRole());
    }
    transferPrincipalResources(dbc,dbc.currentProject(),group.getId(),replacementId,true);
    transferPrincipalResources(dbc,onlineProject,group.getId(),replacementId,true);
  }
  m_userDriver.removeAccessControlEntriesForPrincipal(dbc,dbc.currentProject(),onlineProject,group.getId());
  m_userDriver.deleteGroup(dbc,group.getName());
  m_historyDriver.writePrincipal(dbc,group);
  m_monitor.uncacheGroup(group);
  m_monitor.flushUserGroups();
  m_monitor.flushACLs();
}
