{
  CmsFolder destinationFolder=readFolder(dbc,CmsResource.getParentFolder(destination),CmsResourceFilter.IGNORE_EXPIRATION);
  m_securityManager.checkPermissions(dbc,destinationFolder,CmsPermissionSet.ACCESS_WRITE,false,CmsResourceFilter.IGNORE_EXPIRATION);
  if (source.isFolder()) {
    m_monitor.flushCache(CmsMemoryMonitor.CacheType.HAS_ROLE,CmsMemoryMonitor.CacheType.ROLE_LIST);
  }
  m_vfsDriver.moveResource(dbc,dbc.getRequestContext().currentProject().getUuid(),source,destination);
  if (!internal) {
    CmsResourceState newState=CmsResource.STATE_CHANGED;
    if (source.getState().isNew()) {
      newState=CmsResource.STATE_NEW;
    }
 else     if (source.getState().isDeleted()) {
      newState=CmsResource.STATE_DELETED;
    }
    source.setState(newState);
    m_vfsDriver.writeResourceState(dbc,dbc.currentProject(),source,CmsDriverManager.UPDATE_STRUCTURE_STATE,false);
    log(dbc,new CmsLogEntry(dbc,source.getStructureId(),CmsLogEntryType.RESOURCE_MOVED,new String[]{source.getRootPath(),destination}),false);
  }
  CmsResource destRes=readResource(dbc,destination,CmsResourceFilter.ALL);
  m_lockManager.moveResource(source.getRootPath(),destRes.getRootPath());
  m_monitor.clearAccessControlListCache();
  m_monitor.flushCache(CmsMemoryMonitor.CacheType.PROPERTY,CmsMemoryMonitor.CacheType.PROPERTY_LIST,CmsMemoryMonitor.CacheType.PROJECT_RESOURCES);
  List<CmsResource> resources=new ArrayList<CmsResource>(4);
  resources.add(source);
  try {
    resources.add(readFolder(dbc,CmsResource.getParentFolder(source.getRootPath()),CmsResourceFilter.ALL));
  }
 catch (  Exception e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(e);
    }
  }
  resources.add(destRes);
  resources.add(destinationFolder);
  OpenCms.fireCmsEvent(new CmsEvent(I_CmsEventListener.EVENT_RESOURCE_MOVED,Collections.<String,Object>singletonMap(I_CmsEventListener.KEY_RESOURCES,resources)));
}
