{
  try {
    if (m_projectDriver != null) {
      try {
        m_projectDriver.destroy();
      }
 catch (      Throwable t) {
        LOG.error(Messages.get().getBundle().key(Messages.ERR_CLOSE_PROJECT_DRIVER_0),t);
      }
      m_projectDriver=null;
    }
    if (m_userDriver != null) {
      try {
        m_userDriver.destroy();
      }
 catch (      Throwable t) {
        LOG.error(Messages.get().getBundle().key(Messages.ERR_CLOSE_USER_DRIVER_0),t);
      }
      m_userDriver=null;
    }
    if (m_vfsDriver != null) {
      try {
        m_vfsDriver.destroy();
      }
 catch (      Throwable t) {
        LOG.error(Messages.get().getBundle().key(Messages.ERR_CLOSE_VFS_DRIVER_0),t);
      }
      m_vfsDriver=null;
    }
    if (m_historyDriver != null) {
      try {
        m_historyDriver.destroy();
      }
 catch (      Throwable t) {
        LOG.error(Messages.get().getBundle().key(Messages.ERR_CLOSE_HISTORY_DRIVER_0),t);
      }
      m_historyDriver=null;
    }
    if (m_connectionPools != null) {
      for (int i=0; i < m_connectionPools.size(); i++) {
        PoolingDriver driver=m_connectionPools.get(i);
        String[] pools=driver.getPoolNames();
        for (        String pool : pools) {
          try {
            driver.closePool(pool);
            if (CmsLog.INIT.isDebugEnabled()) {
              CmsLog.INIT.debug(Messages.get().getBundle().key(Messages.INIT_CLOSE_CONN_POOL_1,pool));
            }
          }
 catch (          Throwable t) {
            LOG.error(Messages.get().getBundle().key(Messages.LOG_CLOSE_CONN_POOL_ERROR_1,pool),t);
          }
        }
      }
      m_connectionPools=null;
    }
    m_monitor.clearCache();
    m_lockManager=null;
    m_htmlLinkValidator=null;
  }
 catch (  Throwable t) {
  }
  if (CmsLog.INIT.isInfoEnabled()) {
    CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_DRIVER_MANAGER_DESTROY_1,getClass().getName()));
  }
  org.opencms.db.jpa.CmsSqlManager.destroy();
}
