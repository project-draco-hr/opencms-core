{
  CmsUser user=readUser(dbc,username);
  CmsUser replacementUser=null;
  if (replacementUsername != null) {
    replacementUser=readUser(dbc,replacementUsername);
  }
  CmsProject onlineProject=readProject(dbc,CmsProject.ONLINE_PROJECT_ID);
  boolean withACEs=true;
  if (replacementUser == null) {
    withACEs=false;
    replacementUser=readUser(dbc,OpenCms.getDefaultUsers().getUserDeletedResource());
  }
  boolean isVfsManager=m_securityManager.hasRole(dbc,replacementUser,CmsRole.VFS_MANAGER);
  for (boolean readRoles=false; !readRoles; readRoles=!readRoles) {
    Iterator<CmsGroup> itGroups=getGroupsOfUser(dbc,username,"",true,readRoles,true,dbc.getRequestContext().getRemoteAddress()).iterator();
    while (itGroups.hasNext()) {
      CmsGroup group=itGroups.next();
      if (!isVfsManager) {
        if (!userInGroup(dbc,replacementUser.getName(),group.getName(),readRoles)) {
          addUserToGroup(dbc,replacementUser.getName(),group.getName(),readRoles);
        }
      }
      removeUserFromGroup(dbc,username,group.getName(),readRoles);
    }
  }
  m_lockManager.removeLocks(user.getId());
  if (dbc.getProjectId().isNullUUID()) {
    transferPrincipalResources(dbc,project,user.getId(),replacementUser.getId(),withACEs);
  }
  transferPrincipalResources(dbc,onlineProject,user.getId(),replacementUser.getId(),withACEs);
  m_userDriver.removeAccessControlEntriesForPrincipal(dbc,project,onlineProject,user.getId());
  m_historyDriver.writePrincipal(dbc,user);
  m_userDriver.deleteUser(dbc,username);
  m_monitor.clearUserCache(user);
  if (!dbc.getProjectId().isNullUUID()) {
    return;
  }
  Map eventData=new HashMap();
  eventData.put(I_CmsEventListener.KEY_USER_ID,user.getId().toString());
  eventData.put(I_CmsEventListener.KEY_USER_NAME,user.getName());
  eventData.put(I_CmsEventListener.KEY_USER_ACTION,I_CmsEventListener.VALUE_USER_MODIFIED_ACTION_DELETE_USER);
  OpenCms.fireCmsEvent(new CmsEvent(I_CmsEventListener.EVENT_USER_MODIFIED,eventData));
}
