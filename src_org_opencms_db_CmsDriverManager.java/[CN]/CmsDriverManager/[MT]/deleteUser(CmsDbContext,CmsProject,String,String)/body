{
  CmsUser user=readUser(dbc,username);
  CmsUser replacementUser=null;
  if (replacementUsername != null) {
    replacementUser=readUser(dbc,replacementUsername);
  }
  CmsProject onlineProject=readProject(dbc,CmsProject.ONLINE_PROJECT_ID);
  boolean withACEs=true;
  if (replacementUser == null) {
    withACEs=false;
    replacementUser=readUser(dbc,OpenCms.getDefaultUsers().getUserDeletedResource());
  }
  boolean isVfsManager=m_securityManager.hasRole(dbc,replacementUser,CmsRole.VFS_MANAGER);
  for (int i=0; i < 2; i++) {
    boolean readRoles=false;
    Iterator itGroups=getGroupsOfUser(dbc,username,"",true,readRoles,true,dbc.getRequestContext().getRemoteAddress()).iterator();
    while (itGroups.hasNext()) {
      CmsGroup group=(CmsGroup)itGroups.next();
      if (!isVfsManager) {
        if (!userInGroup(dbc,replacementUser.getName(),group.getName(),false)) {
          addUserToGroup(dbc,replacementUser.getName(),group.getName(),false);
        }
      }
      if (userInGroup(dbc,username,group.getName(),readRoles)) {
        removeUserFromGroup(dbc,username,group.getName(),readRoles);
      }
    }
    readRoles=!readRoles;
  }
  m_lockManager.removeLocks(user.getId());
  transferPrincipalResources(dbc,project,user.getId(),replacementUser.getId(),withACEs);
  transferPrincipalResources(dbc,onlineProject,user.getId(),replacementUser.getId(),withACEs);
  m_userDriver.removeAccessControlEntriesForPrincipal(dbc,project,onlineProject,user.getId());
  m_historyDriver.writePrincipal(dbc,user);
  m_userDriver.deleteUser(dbc,username);
  clearUserCache(user);
}
