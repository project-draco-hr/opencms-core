{
  CmsGroup group=readGroup(dbc,groupname);
  if (group == null) {
    throw new CmsDbEntryNotFoundException(Messages.get().container(Messages.ERR_UNKNOWN_GROUP_1,groupname));
  }
  if (group.isVirtual() && !readRoles) {
    addUserToGroup(dbc,username,CmsRole.valueOf(group).getGroupName(),true);
    return;
  }
  if (group.isVirtual()) {
    readRoles=false;
  }
  if ((readRoles && !group.isRole()) || (!readRoles && group.isRole())) {
    throw new CmsDbEntryNotFoundException(Messages.get().container(Messages.ERR_UNKNOWN_GROUP_1,groupname));
  }
  if (userInGroup(dbc,username,groupname,readRoles)) {
    return;
  }
  CmsUser user=readUser(dbc,username);
  if (user == null) {
    throw new CmsDbEntryNotFoundException(Messages.get().container(Messages.ERR_UNKNOWN_USER_1,username));
  }
  if (readRoles) {
    CmsRole role=CmsRole.valueOf(group);
    m_securityManager.checkRole(dbc,role);
    if (m_securityManager.hasRole(dbc,user,role)) {
      return;
    }
    List<CmsRole> children=role.getChildren(true);
    Iterator<CmsGroup> itUserGroups=getGroupsOfUser(dbc,username,group.getOuFqn(),true,true,true,dbc.getRequestContext().getRemoteAddress()).iterator();
    while (itUserGroups.hasNext()) {
      CmsGroup roleGroup=itUserGroups.next();
      if (children.contains(CmsRole.valueOf(roleGroup))) {
        removeUserFromGroup(dbc,username,roleGroup.getName(),true);
      }
    }
    Iterator<CmsGroup> it=getVirtualGroupsForRole(dbc,role).iterator();
    while (it.hasNext()) {
      CmsGroup virtualGroup=it.next();
      addUserToGroup(dbc,username,virtualGroup.getName(),true);
    }
  }
  getUserDriver(dbc).createUserInGroup(dbc,user.getId(),group.getId());
  if (readRoles) {
    m_monitor.flushCache(CmsMemoryMonitor.CacheType.HAS_ROLE,CmsMemoryMonitor.CacheType.ROLE_LIST);
  }
  m_monitor.flushCache(CmsMemoryMonitor.CacheType.USERGROUPS,CmsMemoryMonitor.CacheType.USER_LIST);
  if (!dbc.getProjectId().isNullUUID() && !CmsProject.ONLINE_PROJECT_ID.equals(dbc.getProjectId())) {
    return;
  }
  Map<String,Object> eventData=new HashMap<String,Object>();
  eventData.put(I_CmsEventListener.KEY_USER_ID,user.getId().toString());
  eventData.put(I_CmsEventListener.KEY_USER_NAME,user.getName());
  eventData.put(I_CmsEventListener.KEY_USER_ID,user.getId().toString());
  eventData.put(I_CmsEventListener.KEY_GROUP_NAME,group.getName());
  eventData.put(I_CmsEventListener.KEY_USER_ACTION,I_CmsEventListener.VALUE_USER_MODIFIED_ACTION_ADD_USER_TO_GROUP);
  OpenCms.fireCmsEvent(new CmsEvent(I_CmsEventListener.EVENT_USER_MODIFIED,eventData));
}
