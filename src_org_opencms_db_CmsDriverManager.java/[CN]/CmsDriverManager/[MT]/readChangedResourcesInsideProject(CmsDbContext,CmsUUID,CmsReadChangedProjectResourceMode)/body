{
  String cacheKey=projectId + "_" + mode.toString();
  List<CmsResource> result=m_monitor.getCachedProjectResources(cacheKey);
  if (result != null) {
    return result;
  }
  List<String> projectResources=readProjectResources(dbc,readProject(dbc,projectId));
  result=new ArrayList<CmsResource>();
  String currentProjectResource=null;
  List<CmsResource> resources=new ArrayList<CmsResource>();
  CmsResource currentResource=null;
  CmsLock currentLock=null;
  for (int i=0; i < projectResources.size(); i++) {
    currentProjectResource=projectResources.get(i);
    try {
      currentResource=readResource(dbc,currentProjectResource,CmsResourceFilter.ALL);
      if (currentResource.isFolder()) {
        resources.addAll(readResources(dbc,currentResource,CmsResourceFilter.ALL,true));
      }
 else {
        resources.add(currentResource);
      }
    }
 catch (    CmsException e) {
      if (!(e instanceof CmsVfsResourceNotFoundException)) {
        throw e;
      }
    }
  }
  for (int j=0; j < resources.size(); j++) {
    currentResource=resources.get(j);
    currentLock=getLock(dbc,currentResource).getEditionLock();
    if (!currentResource.getState().isUnchanged()) {
      if ((currentLock.isNullLock() && (currentResource.getProjectLastModified().equals(projectId))) || (currentLock.isOwnedBy(dbc.currentUser()) && (currentLock.getProjectId().equals(projectId)))) {
        if ((mode == RCPRM_FILES_AND_FOLDERS_MODE) || (currentResource.isFolder() && (mode == RCPRM_FOLDERS_ONLY_MODE)) || (currentResource.isFile() && (mode == RCPRM_FILES_ONLY_MODE))) {
          result.add(currentResource);
        }
      }
    }
  }
  resources.clear();
  resources=null;
  m_monitor.cacheProjectResources(cacheKey,result);
  return result;
}
