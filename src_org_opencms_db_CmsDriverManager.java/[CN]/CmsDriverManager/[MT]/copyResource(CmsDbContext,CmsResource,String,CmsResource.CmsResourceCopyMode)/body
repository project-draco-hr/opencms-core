{
  boolean copyAsSibling=false;
  if (!source.isFolder()) {
    if (siblingMode == CmsResource.COPY_AS_SIBLING) {
      copyAsSibling=true;
    }
    if (siblingMode == CmsResource.COPY_PRESERVE_SIBLING) {
      if (source.getSiblingCount() > 1) {
        copyAsSibling=true;
      }
    }
  }
  List properties=readPropertyObjects(dbc,source,false);
  if (copyAsSibling) {
    CmsResource resource=createSibling(dbc,source,destination,properties);
    Iterator itRelations=getRelationsForResource(dbc,source,CmsRelationFilter.TARGETS.filterNotDefinedInContent()).iterator();
    while (itRelations.hasNext()) {
      CmsRelation relation=(CmsRelation)itRelations.next();
      CmsResource target=null;
      try {
        target=readResource(dbc,relation.getTargetId(),CmsResourceFilter.ALL);
      }
 catch (      CmsVfsResourceNotFoundException e) {
        try {
          target=readResource(dbc,relation.getTargetPath(),CmsResourceFilter.ALL);
        }
 catch (        CmsVfsResourceNotFoundException e1) {
          if (LOG.isWarnEnabled()) {
            LOG.warn(e1.getLocalizedMessage(),e1);
          }
          continue;
        }
      }
      addRelationToResource(dbc,resource,target,relation.getType(),true);
    }
    return;
  }
  byte[] content=null;
  if (source.isFile()) {
    if (source instanceof CmsFile) {
      content=((CmsFile)source).getContents();
    }
    if ((content == null) || (content.length < 1)) {
      content=m_vfsDriver.readContent(dbc,dbc.currentProject().getUuid(),source.getResourceId());
    }
  }
  String destinationFoldername=CmsResource.getParentFolder(destination);
  CmsFolder destinationFolder=m_securityManager.readFolder(dbc,destinationFoldername,CmsResourceFilter.IGNORE_EXPIRATION);
  long currentTime=System.currentTimeMillis();
  long dateLastModified;
  CmsUUID userLastModified;
  if (source.isFolder()) {
    dateLastModified=currentTime;
    userLastModified=dbc.currentUser().getId();
  }
 else {
    dateLastModified=source.getDateLastModified();
    userLastModified=source.getUserLastModified();
  }
  int flags=source.getFlags();
  if (source.isLabeled()) {
    flags&=~CmsResource.FLAG_LABELED;
  }
  CmsResource newResource=new CmsResource(new CmsUUID(),new CmsUUID(),destination,source.getTypeId(),source.isFolder(),flags,dbc.currentProject().getUuid(),CmsResource.STATE_NEW,currentTime,dbc.currentUser().getId(),dateLastModified,userLastModified,source.getDateReleased(),source.getDateExpired(),1,source.getLength(),source.getDateContent(),source.getVersion());
  newResource.setDateLastModified(dateLastModified);
  newResource=createResource(dbc,destination,newResource,content,properties,false);
  Iterator itRelations=getRelationsForResource(dbc,source,CmsRelationFilter.TARGETS.filterNotDefinedInContent()).iterator();
  while (itRelations.hasNext()) {
    CmsRelation relation=(CmsRelation)itRelations.next();
    CmsResource target=null;
    try {
      target=readResource(dbc,relation.getTargetId(),CmsResourceFilter.ALL);
    }
 catch (    CmsVfsResourceNotFoundException e) {
      try {
        target=readResource(dbc,relation.getTargetPath(),CmsResourceFilter.ALL);
      }
 catch (      CmsVfsResourceNotFoundException e1) {
        if (LOG.isWarnEnabled()) {
          LOG.warn(e1.getLocalizedMessage(),e1);
        }
        continue;
      }
    }
    addRelationToResource(dbc,newResource,target,relation.getType(),true);
  }
  copyAccessControlEntries(dbc,source,newResource,false);
  OpenCms.getMemoryMonitor().clearAccessControlListCache();
  List modifiedResources=new ArrayList();
  modifiedResources.add(source);
  modifiedResources.add(newResource);
  modifiedResources.add(destinationFolder);
  OpenCms.fireCmsEvent(new CmsEvent(I_CmsEventListener.EVENT_RESOURCE_COPIED,Collections.singletonMap("resources",modifiedResources)));
}
