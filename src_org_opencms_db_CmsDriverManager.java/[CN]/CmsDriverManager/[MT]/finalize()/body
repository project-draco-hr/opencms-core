{
  try {
    clearcache();
    try {
      m_projectDriver.destroy();
    }
 catch (    Throwable t) {
      LOG.error("Error closing project driver",t);
    }
    try {
      m_userDriver.destroy();
    }
 catch (    Throwable t) {
      LOG.error("Error closing user driver",t);
    }
    try {
      m_vfsDriver.destroy();
    }
 catch (    Throwable t) {
      LOG.error("Error closing VFS driver",t);
    }
    try {
      m_workflowDriver.destroy();
    }
 catch (    Throwable t) {
      LOG.error("Error closing workflow driver",t);
    }
    try {
      m_backupDriver.destroy();
    }
 catch (    Throwable t) {
      LOG.error("Error closing backup driver",t);
    }
    for (int i=0; i < m_connectionPools.size(); i++) {
      PoolingDriver driver=(PoolingDriver)m_connectionPools.get(i);
      String[] pools=driver.getPoolNames();
      for (int j=0; j < pools.length; j++) {
        try {
          driver.closePool(pools[j]);
          if (CmsLog.LOG.isDebugEnabled()) {
            CmsLog.LOG.debug(Messages.get().key(Messages.INIT_CLOSE_CONN_POOL_1,pools[j]));
          }
        }
 catch (        Throwable t) {
          LOG.error(Messages.get().key(Messages.LOG_CLOSE_CONN_POOL_ERROR_1,pools[j]),t);
        }
      }
    }
    m_userCache=null;
    m_groupCache=null;
    m_userGroupsCache=null;
    m_projectCache=null;
    m_propertyCache=null;
    m_resourceCache=null;
    m_resourceListCache=null;
    m_accessControlListCache=null;
    m_projectDriver=null;
    m_userDriver=null;
    m_vfsDriver=null;
    m_workflowDriver=null;
    m_backupDriver=null;
    m_htmlLinkValidator=null;
  }
 catch (  Throwable t) {
  }
  super.finalize();
}
