{
  if (CmsStringUtil.isEmptyOrWhitespaceOnly(password)) {
    throw new CmsDbEntryNotFoundException(Messages.get().container(Messages.ERR_UNKNOWN_USER_1,userName));
  }
  CmsUser newUser;
  try {
    newUser=getUserDriver(dbc).readUser(dbc,userName,password,remoteAddress);
  }
 catch (  CmsDbEntryNotFoundException e) {
    CmsUser user=null;
    try {
      user=readUser(dbc,userName);
    }
 catch (    CmsDataAccessException e2) {
    }
    if (user != null) {
      if (dbc.currentUser().isGuestUser()) {
        OpenCms.getLoginManager().addInvalidLogin(userName,remoteAddress);
      }
      OpenCms.getLoginManager().checkInvalidLogins(userName,remoteAddress);
      throw new CmsAuthentificationException(org.opencms.security.Messages.get().container(org.opencms.security.Messages.ERR_LOGIN_FAILED_2,userName,remoteAddress),e);
    }
 else {
      String userOu=CmsOrganizationalUnit.getParentFqn(userName);
      if (userOu != null) {
        String parentOu=CmsOrganizationalUnit.getParentFqn(userOu);
        if (parentOu != null) {
          String uName=CmsOrganizationalUnit.getSimpleName(userName);
          return loginUser(dbc,parentOu + uName,password,remoteAddress);
        }
      }
      throw new CmsAuthentificationException(org.opencms.security.Messages.get().container(org.opencms.security.Messages.ERR_LOGIN_FAILED_NO_USER_2,userName,remoteAddress),e);
    }
  }
  if (!newUser.isEnabled()) {
    throw new CmsAuthentificationException(org.opencms.security.Messages.get().container(org.opencms.security.Messages.ERR_LOGIN_FAILED_DISABLED_2,userName,remoteAddress));
  }
  if (dbc.currentUser().isGuestUser()) {
    OpenCms.getLoginManager().checkInvalidLogins(userName,remoteAddress);
    OpenCms.getLoginManager().removeInvalidLogins(userName,remoteAddress);
  }
  if (!m_securityManager.hasRole(dbc,newUser,CmsRole.ADMINISTRATOR.forOrgUnit(dbc.getRequestContext().getOuFqn()))) {
    OpenCms.getLoginManager().checkLoginAllowed();
  }
  m_monitor.clearUserCache(newUser);
  newUser.setLastlogin(System.currentTimeMillis());
  Map<String,Object> additionalInfosForRepositories=OpenCms.getRepositoryManager().getAdditionalInfoForLogin(newUser.getName(),password);
  boolean requiresAddInfoUpdate=false;
  for (  Entry<String,Object> entry : additionalInfosForRepositories.entrySet()) {
    Object value=entry.getValue();
    Object current=newUser.getAdditionalInfo(entry.getKey());
    if (((value == null) && (current != null)) || ((value != null) && !value.equals(current))) {
      requiresAddInfoUpdate=true;
      break;
    }
  }
  if (requiresAddInfoUpdate) {
    newUser.getAdditionalInfo().putAll(additionalInfosForRepositories);
  }
  String lastPasswordChange=(String)newUser.getAdditionalInfo(CmsUserSettings.ADDITIONAL_INFO_LAST_PASSWORD_CHANGE);
  if (lastPasswordChange == null) {
    requiresAddInfoUpdate=true;
    newUser.getAdditionalInfo().put(CmsUserSettings.ADDITIONAL_INFO_LAST_PASSWORD_CHANGE,"" + System.currentTimeMillis());
  }
  if (!requiresAddInfoUpdate) {
    dbc.setAttribute(ATTRIBUTE_LOGIN,newUser.getName());
  }
  getUserDriver(dbc).writeUser(dbc,newUser);
  if (!OpenCms.getPasswordHandler().checkPassword(password,newUser.getPassword(),false) && OpenCms.getPasswordHandler().checkPassword(password,newUser.getPassword(),true)) {
    getUserDriver(dbc).writePassword(dbc,userName,password,password);
  }
  m_monitor.cacheUser(newUser);
  m_monitor.flushCache(CmsMemoryMonitor.CacheType.ACL,CmsMemoryMonitor.CacheType.GROUP,CmsMemoryMonitor.CacheType.ORG_UNIT,CmsMemoryMonitor.CacheType.USERGROUPS,CmsMemoryMonitor.CacheType.USER_LIST,CmsMemoryMonitor.CacheType.PERMISSION,CmsMemoryMonitor.CacheType.RESOURCE_LIST);
  Map<String,Object> eventData=new HashMap<String,Object>();
  eventData.put(I_CmsEventListener.KEY_USER_ID,newUser.getId().toString());
  eventData.put(I_CmsEventListener.KEY_USER_NAME,newUser.getName());
  eventData.put(I_CmsEventListener.KEY_USER_ACTION,I_CmsEventListener.VALUE_USER_MODIFIED_ACTION_WRITE_USER);
  OpenCms.fireCmsEvent(new CmsEvent(I_CmsEventListener.EVENT_USER_MODIFIED,eventData));
  return newUser;
}
