{
  String destinationFileName=null;
  String destinationFolderName=null;
  CmsResource newResource=null;
  List properties=null;
  if (CmsResource.isFolder(destination)) {
    copyFolder(context,source,destination,lockCopy,false);
    return;
  }
  validFilename(destination.replace('/','a'));
  destinationFolderName=destination.substring(0,destination.lastIndexOf("/") + 1);
  destinationFileName=destination.substring(destination.lastIndexOf("/") + 1,destination.length());
  CmsFile sourceFile=readFile(context,source,CmsResourceFilter.IGNORE_EXPIRATION);
  CmsFolder destinationFolder=readFolder(context,destinationFolderName,CmsResourceFilter.IGNORE_EXPIRATION);
  if (!copyAsLink) {
    if (copyMode == I_CmsConstants.C_COPY_AS_SIBLING) {
      copyAsLink=true;
    }
    if (copyMode == I_CmsConstants.C_COPY_PRESERVE_SIBLING) {
      if (sourceFile.getLinkCount() > 1) {
        copyAsLink=true;
      }
    }
  }
  if (!isAdmin(context) && (sourceFile.getType() == CmsResourceTypeXMLTemplate.C_RESOURCE_TYPE_ID || sourceFile.getType() == CmsResourceTypeJsp.C_RESOURCE_TYPE_ID)) {
    throw new CmsSecurityException("[" + this.getClass().getName() + "] copyFile() "+ source,CmsSecurityException.C_SECURITY_NO_PERMISSIONS);
  }
  checkPermissions(context,sourceFile,I_CmsConstants.C_READ_ACCESS,CmsResourceFilter.ALL);
  checkPermissions(context,destinationFolder,I_CmsConstants.C_WRITE_ACCESS,CmsResourceFilter.ALL);
  properties=readPropertyObjects(context,source,null,false);
  if (copyAsLink) {
    newResource=createSibling(context,destination,source,properties,lockCopy);
  }
 else {
    int flags=sourceFile.getFlags();
    if (sourceFile.isLabeled()) {
      flags&=~I_CmsConstants.C_RESOURCEFLAG_LABELLINK;
    }
    newResource=m_vfsDriver.createFile(context.currentUser(),context.currentProject(),destinationFileName,flags,destinationFolder,sourceFile.getContents(),getResourceType(sourceFile.getType()),sourceFile.getDateReleased(),sourceFile.getDateExpired());
    newResource.setFullResourceName(destination);
    m_vfsDriver.writePropertyObjects(context.currentProject(),newResource,properties);
    m_propertyCache.clear();
    ListIterator aceList=m_userDriver.readAccessControlEntries(context.currentProject(),sourceFile.getResourceId(),false).listIterator();
    while (aceList.hasNext()) {
      CmsAccessControlEntry ace=(CmsAccessControlEntry)aceList.next();
      m_userDriver.createAccessControlEntry(context.currentProject(),newResource.getResourceId(),ace.getPrincipal(),ace.getPermissions().getAllowedPermissions(),ace.getPermissions().getDeniedPermissions(),ace.getFlags());
    }
    m_vfsDriver.writeResourceState(context.currentProject(),newResource,C_UPDATE_ALL);
    touch(context,destination,sourceFile.getDateLastModified(),I_CmsConstants.C_DATE_UNCHANGED,I_CmsConstants.C_DATE_UNCHANGED,sourceFile.getUserLastModified());
    if (lockCopy) {
      lockResource(context,destination);
    }
  }
  clearAccessControlListCache();
  clearResourceCache();
  List modifiedResources=new ArrayList();
  modifiedResources.add(sourceFile);
  modifiedResources.add(newResource);
  modifiedResources.add(destinationFolder);
  OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_RESOURCE_COPIED,Collections.singletonMap("resources",modifiedResources)));
}
