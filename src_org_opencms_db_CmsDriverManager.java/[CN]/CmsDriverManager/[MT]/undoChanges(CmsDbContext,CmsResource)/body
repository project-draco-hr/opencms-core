{
  if (resource.getState() == CmsResource.STATE_NEW) {
    throw new CmsVfsException(Messages.get().container(Messages.ERR_UNDO_CHANGES_FOR_RESOURCE_NEW_0));
  }
  CmsProject onlineProject=readProject(dbc,CmsProject.ONLINE_PROJECT_ID);
  if (resource.isFolder()) {
    CmsFolder onlineFolder=m_vfsDriver.readFolder(dbc,CmsProject.ONLINE_PROJECT_ID,resource.getRootPath());
    CmsFolder restoredFolder=new CmsFolder(resource.getStructureId(),resource.getResourceId(),resource.getRootPath(),onlineFolder.getTypeId(),onlineFolder.getFlags(),dbc.currentProject().getId(),CmsResource.STATE_UNCHANGED,onlineFolder.getDateCreated(),onlineFolder.getUserCreated(),onlineFolder.getDateLastModified(),onlineFolder.getUserLastModified(),resource.getSiblingCount(),onlineFolder.getDateReleased(),onlineFolder.getDateExpired());
    restoredFolder.setDateLastModified(onlineFolder.getDateLastModified());
    m_vfsDriver.writeResource(dbc,dbc.currentProject(),restoredFolder,NOTHING_CHANGED);
    m_vfsDriver.deletePropertyObjects(dbc,dbc.currentProject().getId(),restoredFolder,CmsProperty.DELETE_OPTION_DELETE_STRUCTURE_AND_RESOURCE_VALUES);
    List propertyInfos=m_vfsDriver.readPropertyObjects(dbc,onlineProject,onlineFolder);
    m_vfsDriver.writePropertyObjects(dbc,dbc.currentProject(),restoredFolder,propertyInfos);
    m_userDriver.removeAccessControlEntries(dbc,dbc.currentProject(),resource.getResourceId());
    ListIterator aceList=m_userDriver.readAccessControlEntries(dbc,onlineProject,resource.getResourceId(),false).listIterator();
    while (aceList.hasNext()) {
      CmsAccessControlEntry ace=(CmsAccessControlEntry)aceList.next();
      m_userDriver.createAccessControlEntry(dbc,dbc.currentProject(),resource.getResourceId(),ace.getPrincipal(),ace.getPermissions().getAllowedPermissions(),ace.getPermissions().getDeniedPermissions(),ace.getFlags());
    }
  }
 else {
    CmsFile onlineFile=this.m_vfsDriver.readFile(dbc,CmsProject.ONLINE_PROJECT_ID,true,resource.getStructureId());
    CmsFile restoredFile=new CmsFile(onlineFile.getStructureId(),onlineFile.getResourceId(),onlineFile.getContentId(),resource.getRootPath(),onlineFile.getTypeId(),onlineFile.getFlags(),dbc.currentProject().getId(),CmsResource.STATE_UNCHANGED,onlineFile.getDateCreated(),onlineFile.getUserCreated(),onlineFile.getDateLastModified(),onlineFile.getUserLastModified(),onlineFile.getDateReleased(),onlineFile.getDateExpired(),0,onlineFile.getLength(),onlineFile.getContents());
    restoredFile.setDateLastModified(onlineFile.getDateLastModified());
    List properties=m_vfsDriver.readPropertyObjects(dbc,onlineProject,onlineFile);
    m_vfsDriver.deletePropertyObjects(dbc,dbc.currentProject().getId(),resource,CmsProperty.DELETE_OPTION_DELETE_STRUCTURE_AND_RESOURCE_VALUES);
    deleteResource(dbc,resource,CmsResource.DELETE_PRESERVE_SIBLINGS);
    CmsResource res=createResource(dbc,restoredFile.getRootPath(),restoredFile,restoredFile.getContents(),properties,false);
    m_userDriver.removeAccessControlEntries(dbc,dbc.currentProject(),resource.getResourceId());
    ListIterator aceList=m_userDriver.readAccessControlEntries(dbc,onlineProject,onlineFile.getResourceId(),false).listIterator();
    while (aceList.hasNext()) {
      CmsAccessControlEntry ace=(CmsAccessControlEntry)aceList.next();
      m_userDriver.createAccessControlEntry(dbc,dbc.currentProject(),res.getResourceId(),ace.getPrincipal(),ace.getPermissions().getAllowedPermissions(),ace.getPermissions().getDeniedPermissions(),ace.getFlags());
    }
    res.setState(CmsResource.STATE_UNCHANGED);
    m_vfsDriver.writeResourceState(dbc,dbc.currentProject(),res,UPDATE_ALL);
  }
  clearResourceCache();
  m_propertyCache.clear();
  OpenCms.fireCmsEvent(new CmsEvent(I_CmsEventListener.EVENT_RESOURCE_AND_PROPERTIES_MODIFIED,Collections.singletonMap("resource",resource)));
}
