{
  CmsLock currentLock=getLock(dbc,resource);
  if (currentLock.getEditionLock().isUnlocked() && currentLock.getSystemLock().isUnlocked()) {
    throw new CmsLockException(Messages.get().container(Messages.ERR_CHANGE_LOCK_UNLOCKED_RESOURCE_1,dbc.getRequestContext().getSitePath(resource)));
  }
 else   if ((lockType == CmsLockType.EXCLUSIVE) && currentLock.isExclusiveOwnedInProjectBy(dbc.currentUser(),dbc.currentProject())) {
    return;
  }
  int denied=0;
  boolean canIgnorePermissions=m_securityManager.hasRoleForResource(dbc,dbc.currentUser(),CmsRole.VFS_MANAGER,resource);
  if (!canIgnorePermissions && (resource.getTypeId() == CmsResourceTypeJsp.getStaticTypeId())) {
    if (!m_securityManager.hasRoleForResource(dbc,dbc.currentUser(),CmsRole.DEVELOPER,resource)) {
      denied|=CmsPermissionSet.PERMISSION_WRITE;
    }
  }
  CmsPermissionSetCustom permissions;
  if (canIgnorePermissions) {
    permissions=new CmsPermissionSetCustom(~0);
  }
 else {
    permissions=getPermissions(dbc,resource,dbc.currentUser());
  }
  permissions.denyPermissions(denied);
  if ((CmsPermissionSet.ACCESS_WRITE.getPermissions() & permissions.getPermissions()) != CmsPermissionSet.ACCESS_WRITE.getPermissions()) {
    m_securityManager.checkPermissions(dbc.getRequestContext(),resource,CmsPermissionSet.ACCESS_WRITE,I_CmsPermissionHandler.PERM_DENIED);
  }
  m_lockManager.removeResource(dbc,resource,true,lockType.isSystem());
  lockResource(dbc,resource,lockType);
}
