{
  if (!filter.isValid(context,resource)) {
    return PERM_FILTERED;
  }
  String cacheKey=m_keyGenerator.getCacheKeyForUserPermissions(String.valueOf(filter.includeInvisible()),context,resource,requiredPermissions);
  Integer cacheResult=(Integer)m_permissionCache.get(cacheKey);
  if (cacheResult != null) {
    return cacheResult.intValue();
  }
  int denied=0;
  if (context.currentProject().isOnlineProject()) {
    denied|=I_CmsConstants.C_PERMISSION_WRITE;
  }
  boolean isAdmin=isAdmin(context);
  if (!isAdmin && (resource.getTypeId() == CmsResourceTypeJsp.C_RESOURCE_TYPE_ID)) {
    denied|=I_CmsConstants.C_PERMISSION_WRITE;
  }
  if (requiredPermissions.requiresWritePermission() || requiredPermissions.requiresControlPermission()) {
    CmsLock lock=getLock(context,resource);
    if (checkLock || !lock.isNullLock()) {
      if (!context.currentUser().getId().equals(lock.getUserId())) {
        return PERM_NOTLOCKED;
      }
    }
  }
  CmsPermissionSet permissions;
  if (isAdmin) {
    permissions=new CmsPermissionSet(~0);
  }
 else {
    permissions=getPermissions(context,resource,context.currentUser());
  }
  permissions.denyPermissions(denied);
  if (filter.includeInvisible()) {
    if ((permissions.getPermissions() & I_CmsConstants.C_PERMISSION_VIEW) == 0) {
      permissions.setPermissions(permissions.getAllowedPermissions() | I_CmsConstants.C_PERMISSION_VIEW,permissions.getDeniedPermissions() & ~I_CmsConstants.C_PERMISSION_VIEW);
    }
  }
  Integer result;
  if ((requiredPermissions.getPermissions() & (permissions.getPermissions())) > 0) {
    result=PERM_ALLOWED_INTEGER;
  }
 else {
    result=PERM_DENIED_INTEGER;
  }
  m_permissionCache.put(cacheKey,result);
  if ((result != PERM_ALLOWED_INTEGER) && OpenCms.getLog(this).isDebugEnabled()) {
    OpenCms.getLog(this).debug("Access to resource " + resource.getRootPath() + " "+ "not permitted for user "+ context.currentUser().getName()+ ", "+ "required permissions "+ requiredPermissions.getPermissionString()+ " "+ "not satisfied by "+ permissions.getPermissionString());
  }
  return result.intValue();
}
