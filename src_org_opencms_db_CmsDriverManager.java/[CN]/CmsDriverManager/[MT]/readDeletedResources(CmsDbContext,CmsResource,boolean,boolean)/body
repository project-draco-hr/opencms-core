{
  Set<I_CmsHistoryResource> result=new HashSet<I_CmsHistoryResource>();
  List<I_CmsHistoryResource> deletedResources;
  dbc.getRequestContext().setAttribute("ATTR_RESOURCE_NAME",resource.getRootPath());
  try {
    deletedResources=getHistoryDriver(dbc).readDeletedResources(dbc,resource.getStructureId(),isVfsManager ? null : dbc.currentUser().getId());
  }
  finally {
    dbc.getRequestContext().removeAttribute("ATTR_RESOURCE_NAME");
  }
  result.addAll(deletedResources);
  Set<I_CmsHistoryResource> newResult=new HashSet<I_CmsHistoryResource>(result.size());
  I_CmsVfsDriver vfsDriver=getVfsDriver(dbc);
  Iterator<I_CmsHistoryResource> it=result.iterator();
  while (it.hasNext()) {
    I_CmsHistoryResource histRes=it.next();
    try {
      if (vfsDriver.validateStructureIdExists(dbc,dbc.currentProject().getUuid(),histRes.getStructureId())) {
        newResult.add(histRes);
        continue;
      }
      String resourcePath=histRes.getRootPath();
      String resName=CmsResource.getName(resourcePath);
      String path=CmsResource.getParentFolder(resourcePath);
      CmsUUID parentId=histRes.getParentId();
      try {
        path=readResource(dbc,parentId,CmsResourceFilter.IGNORE_EXPIRATION).getRootPath();
      }
 catch (      CmsDataAccessException e) {
        try {
          parentId=readResource(dbc,path,CmsResourceFilter.IGNORE_EXPIRATION).getStructureId();
        }
 catch (        CmsDataAccessException e1) {
        }
      }
      resourcePath=path + resName;
      boolean isFolder=resourcePath.endsWith("/");
      if (isFolder) {
        newResult.add(new CmsHistoryFolder(histRes.getPublishTag(),histRes.getStructureId(),histRes.getResourceId(),resourcePath,histRes.getTypeId(),histRes.getFlags(),histRes.getProjectLastModified(),histRes.getState(),histRes.getDateCreated(),histRes.getUserCreated(),histRes.getDateLastModified(),histRes.getUserLastModified(),histRes.getDateReleased(),histRes.getDateExpired(),histRes.getVersion(),parentId,histRes.getResourceVersion(),histRes.getStructureVersion()));
      }
 else {
        newResult.add(new CmsHistoryFile(histRes.getPublishTag(),histRes.getStructureId(),histRes.getResourceId(),resourcePath,histRes.getTypeId(),histRes.getFlags(),histRes.getProjectLastModified(),histRes.getState(),histRes.getDateCreated(),histRes.getUserCreated(),histRes.getDateLastModified(),histRes.getUserLastModified(),histRes.getDateReleased(),histRes.getDateExpired(),histRes.getLength(),histRes.getDateContent(),histRes.getVersion(),parentId,null,histRes.getResourceVersion(),histRes.getStructureVersion()));
      }
    }
 catch (    CmsDataAccessException e) {
      if (LOG.isErrorEnabled()) {
        LOG.error(e.getLocalizedMessage(),e);
      }
    }
  }
  if (readTree) {
    Iterator<I_CmsHistoryResource> itDeleted=deletedResources.iterator();
    while (itDeleted.hasNext()) {
      I_CmsHistoryResource delResource=itDeleted.next();
      if (delResource.isFolder()) {
        newResult.addAll(readDeletedResources(dbc,(CmsFolder)delResource,readTree,isVfsManager));
      }
    }
    try {
      readResource(dbc,resource.getStructureId(),CmsResourceFilter.ALL);
      Iterator<CmsResource> itResources=readResources(dbc,resource,CmsResourceFilter.ALL.addRequireFolder(),readTree).iterator();
      while (itResources.hasNext()) {
        CmsResource subResource=itResources.next();
        if (subResource.isFolder()) {
          newResult.addAll(readDeletedResources(dbc,subResource,readTree,isVfsManager));
        }
      }
    }
 catch (    Exception e) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(e.getLocalizedMessage(),e);
      }
    }
  }
  List<I_CmsHistoryResource> finalRes=new ArrayList<I_CmsHistoryResource>(newResult);
  Collections.sort(finalRes,I_CmsResource.COMPARE_ROOT_PATH);
  return finalRes;
}
