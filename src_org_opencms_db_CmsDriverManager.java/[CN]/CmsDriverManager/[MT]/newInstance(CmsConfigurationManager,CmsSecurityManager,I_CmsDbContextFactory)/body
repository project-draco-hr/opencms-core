{
  Map configuration=configurationManager.getConfiguration();
  ExtendedProperties config;
  if (configuration instanceof ExtendedProperties) {
    config=(ExtendedProperties)configuration;
  }
 else {
    config=new ExtendedProperties();
    config.putAll(configuration);
  }
  CmsDbUtil.init();
  List drivers=null;
  String driverName=null;
  I_CmsVfsDriver vfsDriver=null;
  I_CmsUserDriver userDriver=null;
  I_CmsProjectDriver projectDriver=null;
  I_CmsWorkflowDriver workflowDriver=null;
  I_CmsBackupDriver backupDriver=null;
  CmsDriverManager driverManager=null;
  try {
    driverManager=new CmsDriverManager();
    if (CmsLog.INIT.isInfoEnabled()) {
      CmsLog.INIT.info(Messages.get().key(Messages.INIT_DRIVER_MANAGER_START_PHASE1_0));
    }
    if ((runtimeInfoFactory == null) && CmsLog.INIT.isDebugEnabled()) {
      CmsLog.INIT.debug(Messages.get().key(Messages.INIT_DRIVER_MANAGER_START_RT_0));
    }
  }
 catch (  Exception exc) {
    CmsMessageContainer message=Messages.get().container(Messages.LOG_ERR_DRIVER_MANAGER_START_0);
    if (LOG.isFatalEnabled()) {
      LOG.fatal(message.key(),exc);
    }
    throw new CmsInitException(message,exc);
  }
  driverManager.m_securityManager=securityManager;
  driverManager.m_sqlManager=new CmsSqlManager(driverManager);
  if (CmsLog.INIT.isInfoEnabled()) {
    CmsLog.INIT.info(Messages.get().key(Messages.INIT_DRIVER_MANAGER_START_PHASE2_0));
  }
  String[] driverPoolNames=config.getStringArray(CmsDriverManager.CONFIGURATION_DB + ".pools");
  if (CmsLog.INIT.isInfoEnabled()) {
    String names="";
    for (int p=0; p < driverPoolNames.length; p++) {
      names+=driverPoolNames[p] + " ";
    }
    CmsLog.INIT.info(Messages.get().key(Messages.INIT_DRIVER_MANAGER_START_POOLS_1,names));
  }
  for (int p=0; p < driverPoolNames.length; p++) {
    driverManager.newPoolInstance(config,driverPoolNames[p]);
  }
  if (runtimeInfoFactory != null) {
    runtimeInfoFactory.initialize(driverManager);
  }
  if (CmsLog.INIT.isInfoEnabled()) {
    CmsLog.INIT.info(Messages.get().key(Messages.INIT_DRIVER_MANAGER_START_PHASE3_0));
  }
  drivers=Arrays.asList(config.getStringArray(CmsDriverManager.CONFIGURATION_VFS));
  driverName=config.getString((String)drivers.get(0) + ".vfs.driver");
  drivers=(drivers.size() > 1) ? drivers.subList(1,drivers.size()) : null;
  vfsDriver=(I_CmsVfsDriver)driverManager.newDriverInstance(configurationManager,driverName,drivers);
  drivers=Arrays.asList(config.getStringArray(CmsDriverManager.CONFIGURATION_USER));
  driverName=config.getString((String)drivers.get(0) + ".user.driver");
  drivers=(drivers.size() > 1) ? drivers.subList(1,drivers.size()) : null;
  userDriver=(I_CmsUserDriver)driverManager.newDriverInstance(configurationManager,driverName,drivers);
  drivers=Arrays.asList(config.getStringArray(CmsDriverManager.CONFIGURATION_PROJECT));
  driverName=config.getString((String)drivers.get(0) + ".project.driver");
  drivers=(drivers.size() > 1) ? drivers.subList(1,drivers.size()) : null;
  projectDriver=(I_CmsProjectDriver)driverManager.newDriverInstance(configurationManager,driverName,drivers);
  drivers=Arrays.asList(config.getStringArray(CmsDriverManager.CONFIGURATION_WORKFLOW));
  driverName=config.getString((String)drivers.get(0) + ".workflow.driver");
  drivers=(drivers.size() > 1) ? drivers.subList(1,drivers.size()) : null;
  workflowDriver=(I_CmsWorkflowDriver)driverManager.newDriverInstance(configurationManager,driverName,drivers);
  drivers=Arrays.asList(config.getStringArray(CmsDriverManager.CONFIGURATION_BACKUP));
  driverName=config.getString((String)drivers.get(0) + ".backup.driver");
  drivers=(drivers.size() > 1) ? drivers.subList(1,drivers.size()) : null;
  backupDriver=(I_CmsBackupDriver)driverManager.newDriverInstance(configurationManager,driverName,drivers);
  try {
    driverManager.init(configurationManager,config,vfsDriver,userDriver,projectDriver,workflowDriver,backupDriver);
    if (CmsLog.INIT.isInfoEnabled()) {
      CmsLog.INIT.info(Messages.get().key(Messages.INIT_DRIVER_MANAGER_START_PHASE4_OK_0));
    }
  }
 catch (  Exception exc) {
    CmsMessageContainer message=Messages.get().container(Messages.LOG_ERR_DRIVER_MANAGER_START_0);
    if (LOG.isFatalEnabled()) {
      LOG.fatal(message.key(),exc);
    }
    throw new CmsInitException(message,exc);
  }
  org.opencms.main.OpenCms.addCmsEventListener(driverManager,new int[]{I_CmsEventListener.EVENT_UPDATE_EXPORTS,I_CmsEventListener.EVENT_CLEAR_CACHES,I_CmsEventListener.EVENT_PUBLISH_PROJECT});
  return driverManager;
}
