{
  if (context.currentProject().isOnlineProject()) {
    throw new CmsSecurityException("Can't undo changes to the online project",CmsSecurityException.C_SECURITY_NO_MODIFY_IN_ONLINE_PROJECT);
  }
  CmsProject onlineProject=readProject(context,I_CmsConstants.C_PROJECT_ONLINE_ID);
  CmsResource resource=readFileHeader(context,resourceName,true);
  checkPermissions(context,resource,I_CmsConstants.C_WRITE_ACCESS);
  if (resource.isFolder()) {
    CmsFolder onlineFolder=readFolderInProject(context,I_CmsConstants.C_PROJECT_ONLINE_ID,resourceName);
    readPath(context,onlineFolder,true);
    CmsFolder restoredFolder=new CmsFolder(resource.getId(),resource.getResourceId(),resource.getParentId(),resource.getFileId(),resource.getResourceName(),onlineFolder.getType(),onlineFolder.getFlags(),context.currentProject().getId(),I_CmsConstants.C_STATE_UNCHANGED,onlineFolder.getDateCreated(),onlineFolder.getUserCreated(),onlineFolder.getDateLastModified(),onlineFolder.getUserLastModified(),resource.getLinkCount());
    restoredFolder.setDateLastModified(onlineFolder.getDateLastModified());
    m_vfsDriver.writeFolder(context.currentProject(),restoredFolder,C_NOTHING_CHANGED,context.currentUser().getId());
    readPath(context,restoredFolder,true);
    m_vfsDriver.deleteAllProperties(context.currentProject().getId(),restoredFolder);
    Map propertyInfos=m_vfsDriver.readProperties(onlineProject.getId(),onlineFolder,onlineFolder.getType());
    m_vfsDriver.writeProperties(propertyInfos,context.currentProject().getId(),restoredFolder,restoredFolder.getType());
  }
 else {
    CmsFile onlineFile=readFileInProject(context,I_CmsConstants.C_PROJECT_ONLINE_ID,resource.getId(),false);
    readPath(context,onlineFile,true);
    CmsFile restoredFile=new CmsFile(resource.getId(),resource.getResourceId(),resource.getParentId(),resource.getFileId(),resource.getResourceName(),onlineFile.getType(),onlineFile.getFlags(),context.currentProject().getId(),I_CmsConstants.C_STATE_UNCHANGED,onlineFile.getLoaderId(),onlineFile.getDateCreated(),onlineFile.getUserCreated(),onlineFile.getDateLastModified(),onlineFile.getUserLastModified(),onlineFile.getContents(),onlineFile.getLength(),resource.getLinkCount());
    restoredFile.setDateLastModified(onlineFile.getDateLastModified());
    m_vfsDriver.writeFile(context.currentProject(),restoredFile,C_NOTHING_CHANGED);
    readPath(context,restoredFile,true);
    m_vfsDriver.deleteAllProperties(context.currentProject().getId(),restoredFile);
    Map propertyInfos=m_vfsDriver.readProperties(onlineProject.getId(),onlineFile,onlineFile.getType());
    m_vfsDriver.writeProperties(propertyInfos,context.currentProject().getId(),restoredFile,restoredFile.getType());
  }
  m_userDriver.removeAllAccessControlEntries(context.currentProject(),resource.getResourceAceId());
  ListIterator aceList=m_userDriver.getAccessControlEntries(onlineProject,resource.getResourceAceId(),false).listIterator();
  while (aceList.hasNext()) {
    CmsAccessControlEntry ace=(CmsAccessControlEntry)aceList.next();
    m_userDriver.createAccessControlEntry(context.currentProject(),resource.getResourceAceId(),ace.getPrincipal(),ace.getPermissions().getAllowedPermissions(),ace.getPermissions().getDeniedPermissions(),ace.getFlags());
  }
  OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_RESOURCE_MODIFIED,Collections.singletonMap("resource",resource)));
  clearResourceCache();
  m_propertyCache.clear();
  m_accessCache.clear();
}
