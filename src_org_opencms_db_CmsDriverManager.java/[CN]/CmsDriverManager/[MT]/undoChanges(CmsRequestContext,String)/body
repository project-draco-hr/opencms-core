{
  if (context.currentProject().isOnlineProject()) {
    throw new CmsSecurityException("Can't undo changes to the online project",CmsSecurityException.C_SECURITY_NO_MODIFY_IN_ONLINE_PROJECT);
  }
  CmsProject onlineProject=readProject(I_CmsConstants.C_PROJECT_ONLINE_ID);
  CmsResource resource=readFileHeader(context,resourceName,true);
  checkPermissions(context,resource,I_CmsConstants.C_WRITE_ACCESS);
  if (resource.isFolder()) {
    CmsFolder onlineFolder=readFolderInProject(I_CmsConstants.C_PROJECT_ONLINE_ID,resourceName);
    readPath(context,onlineFolder,true);
    CmsFolder restoredFolder=new CmsFolder(resource.getStructureId(),resource.getResourceId(),resource.getParentStructureId(),resource.getFileId(),resource.getName(),onlineFolder.getType(),onlineFolder.getFlags(),context.currentProject().getId(),I_CmsConstants.C_STATE_UNCHANGED,onlineFolder.getDateCreated(),onlineFolder.getUserCreated(),onlineFolder.getDateLastModified(),onlineFolder.getUserLastModified(),resource.getLinkCount());
    restoredFolder.setDateLastModified(onlineFolder.getDateLastModified());
    m_vfsDriver.writeFolder(context.currentProject(),restoredFolder,C_NOTHING_CHANGED,restoredFolder.getUserLastModified());
    readPath(context,restoredFolder,true);
    m_vfsDriver.deleteProperties(context.currentProject().getId(),restoredFolder);
    List propertyInfos=m_vfsDriver.readPropertyObjects(onlineProject,onlineFolder);
    m_vfsDriver.writePropertyObjects(context.currentProject(),restoredFolder,propertyInfos);
  }
 else {
    CmsFile onlineFile=readFileInProject(context,I_CmsConstants.C_PROJECT_ONLINE_ID,resource.getStructureId(),false);
    readPath(context,onlineFile,true);
    int flags=onlineFile.getFlags();
    if (resource.isLabeled()) {
      flags|=I_CmsConstants.C_RESOURCEFLAG_LABELLINK;
    }
    CmsFile restoredFile=new CmsFile(resource.getStructureId(),resource.getResourceId(),resource.getParentStructureId(),resource.getFileId(),resource.getName(),onlineFile.getType(),flags,context.currentProject().getId(),I_CmsConstants.C_STATE_UNCHANGED,onlineFile.getLoaderId(),onlineFile.getDateCreated(),onlineFile.getUserCreated(),onlineFile.getDateLastModified(),onlineFile.getUserLastModified(),onlineFile.getLength(),resource.getLinkCount(),onlineFile.getContents());
    restoredFile.setDateLastModified(onlineFile.getDateLastModified());
    m_vfsDriver.writeFileHeader(context.currentProject(),restoredFile,C_NOTHING_CHANGED,restoredFile.getUserLastModified());
    m_vfsDriver.writeFileContent(restoredFile.getFileId(),restoredFile.getContents(),context.currentProject().getId(),false);
    readPath(context,restoredFile,true);
    m_vfsDriver.deleteProperties(context.currentProject().getId(),restoredFile);
    List propertyInfos=m_vfsDriver.readPropertyObjects(onlineProject,onlineFile);
    m_vfsDriver.writePropertyObjects(context.currentProject(),restoredFile,propertyInfos);
  }
  m_userDriver.removeAccessControlEntries(context.currentProject(),resource.getResourceId());
  ListIterator aceList=m_userDriver.readAccessControlEntries(onlineProject,resource.getResourceId(),false).listIterator();
  while (aceList.hasNext()) {
    CmsAccessControlEntry ace=(CmsAccessControlEntry)aceList.next();
    m_userDriver.createAccessControlEntry(context.currentProject(),resource.getResourceId(),ace.getPrincipal(),ace.getPermissions().getAllowedPermissions(),ace.getPermissions().getDeniedPermissions(),ace.getFlags());
  }
  clearResourceCache();
  m_propertyCache.clear();
  OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_RESOURCE_AND_PROPERTIES_MODIFIED,Collections.singletonMap("resource",resource)));
}
