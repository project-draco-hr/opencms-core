{
  String cacheKey=getCacheKey(new String[]{dbc.currentUser().getName(),filter.getCacheId(),readTree ? "+" : "-",parent.getRootPath()},dbc.currentProject());
  List subResources=(List)m_resourceListCache.get(cacheKey);
  if (subResources != null && subResources.size() > 0) {
    return updateContextDates(dbc,subResources,filter);
  }
  subResources=m_vfsDriver.readResourceTree(dbc,dbc.currentProject().getId(),(readTree ? parent.getRootPath() : parent.getStructureId().toString()),filter.getType(),filter.getState(),filter.getModifiedAfter(),filter.getModifiedBefore(),filter.getReleaseAfter(),filter.getReleaseBefore(),filter.getExpireAfter(),filter.getExpireBefore(),(readTree ? CmsDriverManager.READMODE_INCLUDE_TREE : CmsDriverManager.READMODE_EXCLUDE_TREE) | (filter.excludeType() ? CmsDriverManager.READMODE_EXCLUDE_TYPE : 0) | (filter.excludeState() ? CmsDriverManager.READMODE_EXCLUDE_STATE : 0)| ((filter.getOnlyFolders() != null) ? (filter.getOnlyFolders().booleanValue() ? CmsDriverManager.READMODE_ONLY_FOLDERS : CmsDriverManager.READMODE_ONLY_FILES) : 0));
  for (int i=0; i < subResources.size(); i++) {
    CmsResource currentResource=(CmsResource)subResources.get(i);
    int perms=m_securityManager.hasPermissions(dbc,currentResource,CmsPermissionSet.ACCESS_READ,true,filter);
    if (perms != CmsSecurityManager.PERM_ALLOWED) {
      subResources.remove(i--);
    }
  }
  m_resourceListCache.put(cacheKey,subResources);
  return updateContextDates(dbc,subResources,filter);
}
