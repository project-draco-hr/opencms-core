{
  CmsPublishedResources allChanged=new CmsPublishedResources(context.currentProject());
  Vector changedResources=new Vector();
  Vector changedModuleMasters=new Vector();
  int publishProjectId=context.currentProject().getId();
  boolean backupEnabled=isHistoryEnabled(cms);
  int versionId=0;
  if ((isAdmin(context) || isManagerOfProject(context)) && (context.currentProject().getFlags() == I_CmsConstants.C_PROJECT_STATE_UNLOCKED) && (publishProjectId != I_CmsConstants.C_PROJECT_ONLINE_ID)) {
    try {
      if (backupEnabled) {
        versionId=getBackupVersionId();
      }
 else {
        versionId=0;
      }
      changedResources=m_projectDriver.publishProject(context,readProject(I_CmsConstants.C_PROJECT_ONLINE_ID),isHistoryEnabled(cms),versionId,report,m_registry.getExportpoints());
      Vector publishModules=new Vector();
      cms.getRegistry().getModulePublishables(publishModules,null);
      long publishDate=System.currentTimeMillis();
      if (backupEnabled) {
        try {
          publishDate=m_backupDriver.readBackupProject(versionId).getPublishingDate();
        }
 catch (        CmsException e) {
        }
        if (publishDate == 0) {
          publishDate=System.currentTimeMillis();
        }
      }
      for (int i=0; i < publishModules.size(); i++) {
        try {
          Class.forName((String)publishModules.elementAt(i)).getMethod("publishProject",new Class[]{CmsObject.class,Boolean.class,Integer.class,Integer.class,Long.class,Vector.class,Vector.class}).invoke(null,new Object[]{cms,new Boolean(isHistoryEnabled(cms)),new Integer(publishProjectId),new Integer(versionId),new Long(publishDate),changedResources,changedModuleMasters});
        }
 catch (        ClassNotFoundException ec) {
          report.println(report.key("report.publish_class_for_module_does_not_exist_1") + (String)publishModules.elementAt(i) + report.key("report.publish_class_for_module_does_not_exist_2"),I_CmsReport.C_FORMAT_WARNING);
          if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INFO)) {
            OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"Error calling publish class of module " + (String)publishModules.elementAt(i) + "!: "+ ec.getMessage());
          }
        }
catch (        Exception ex) {
          report.println(ex);
          if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INFO)) {
            OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"Error when publish data of module " + (String)publishModules.elementAt(i) + "!: "+ ex.getMessage());
          }
        }
      }
    }
 catch (    CmsException e) {
      throw e;
    }
 finally {
      this.clearResourceCache();
      if (context.currentProject().getType() == I_CmsConstants.C_PROJECT_TYPE_TEMPORARY) {
        m_projectDriver.deleteProject(context.currentProject());
        try {
          m_projectCache.remove(new Integer(publishProjectId));
        }
 catch (        Exception e) {
          if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CACHE)) {
            OpenCms.log(I_CmsLogChannels.C_OPENCMS_CACHE,"Could not remove project " + publishProjectId + " from cache");
          }
        }
        if (publishProjectId == context.currentProject().getId()) {
          cms.getRequestContext().setCurrentProject(I_CmsConstants.C_PROJECT_ONLINE_ID);
        }
      }
      if (m_refresh.length() > 0) {
        try {
          URL url=new URL(m_refresh);
          URLConnection con=url.openConnection();
          con.connect();
          InputStream in=con.getInputStream();
          in.close();
        }
 catch (        Exception ex) {
          throw new CmsException(0,ex);
        }
      }
    }
  }
 else   if (publishProjectId == I_CmsConstants.C_PROJECT_ONLINE_ID) {
    throw new CmsSecurityException("[" + getClass().getName() + "] could not publish project "+ publishProjectId,CmsSecurityException.C_SECURITY_NO_MODIFY_IN_ONLINE_PROJECT);
  }
 else   if (!isAdmin(context) && !isManagerOfProject(context)) {
    throw new CmsSecurityException("[" + getClass().getName() + "] could not publish project "+ publishProjectId,CmsSecurityException.C_SECURITY_PROJECTMANAGER_PRIVILEGES_REQUIRED);
  }
 else {
    throw new CmsSecurityException("[" + getClass().getName() + "] could not publish project "+ publishProjectId,CmsSecurityException.C_SECURITY_NO_PERMISSIONS);
  }
  allChanged.setChangedResources(changedResources);
  allChanged.setChangedModuleMasters(changedModuleMasters);
  return allChanged;
}
