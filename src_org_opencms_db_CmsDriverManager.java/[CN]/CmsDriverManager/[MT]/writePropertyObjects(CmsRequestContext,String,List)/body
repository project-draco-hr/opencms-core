{
  CmsProperty property=null;
  CmsResource resource=null;
  Map keyValidationMap=new HashMap();
  try {
    if (properties == null || properties == Collections.EMPTY_LIST) {
      return;
    }
    for (int i=0, n=properties.size(); i < n; i++) {
      property=(CmsProperty)properties.get(i);
      if (!keyValidationMap.containsKey(property.getKey())) {
        keyValidationMap.put(property.getKey(),null);
      }
 else {
        throw new CmsException("Lists of Cms properties must be disjunct.");
      }
    }
    resource=readFileHeader(context,resourceName,CmsResourceFilter.IGNORE_EXPIRATION);
    checkPermissions(context,resource,I_CmsConstants.C_WRITE_ACCESS,CmsResourceFilter.IGNORE_EXPIRATION,-1);
    for (int i=0; i < properties.size(); i++) {
      property=(CmsProperty)properties.get(i);
      m_vfsDriver.writePropertyObject(context.currentProject(),resource,property);
    }
    if (resource.isFile()) {
      m_vfsDriver.writeFileHeader(context.currentProject(),(CmsFile)resource,C_UPDATE_RESOURCE_STATE,context.currentUser().getId());
    }
 else {
      m_vfsDriver.writeFolder(context.currentProject(),(CmsFolder)resource,C_UPDATE_RESOURCE_STATE,context.currentUser().getId());
    }
  }
  finally {
    clearResourceCache();
    m_propertyCache.clear();
    OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_RESOURCE_AND_PROPERTIES_MODIFIED,Collections.singletonMap("resource",resource)));
  }
}
