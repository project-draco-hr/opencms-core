{
  CmsObject cms=getCmsObject();
  CmsPublish adePub=new CmsPublish(cms);
  List<CmsPublishGroupBean> groups=adePub.getPublishGroups();
  assertEquals(0,groups.size());
  String resourcename="/folder1/page1.html";
  cms.lockResource(resourcename);
  cms.setDateReleased(resourcename,System.currentTimeMillis(),false);
  CmsResource resource=cms.readResource(resourcename,CmsResourceFilter.ALL);
  adePub=new CmsPublish(cms);
  groups=adePub.getPublishGroups();
  assertEquals(1,groups.size());
  assertEquals(1,groups.get(0).getResources().size());
  assertEquals(resource.getStructureId(),groups.get(0).getResources().get(0).getId());
  assertTrue(groups.get(0).getResources().get(0).isRemovable());
  assertNull(groups.get(0).getResources().get(0).getInfo());
  assertEquals(0,groups.get(0).getResources().get(0).getRelated().size());
  cms.getRequestContext().setCurrentProject(cms.readProject("test"));
  String resourcename2="/folder1/page2.html";
  cms.copyResourceToProject(resourcename2);
  cms.lockResource(resourcename2);
  cms.setDateReleased(resourcename2,System.currentTimeMillis(),false);
  CmsResource resource2=cms.readResource(resourcename2,CmsResourceFilter.ALL);
  adePub=new CmsPublish(cms);
  groups=adePub.getPublishGroups();
  assertEquals(1,groups.size());
  assertEquals(2,groups.get(0).getResources().size());
  assertEquals(resource2.getStructureId(),groups.get(0).getResources().get(0).getId());
  assertTrue(groups.get(0).getResources().get(0).isRemovable());
  assertNull(groups.get(0).getResources().get(0).getInfo());
  assertEquals(0,groups.get(0).getResources().get(0).getRelated().size());
  assertEquals(resource.getStructureId(),groups.get(0).getResources().get(1).getId());
  assertTrue(groups.get(0).getResources().get(1).isRemovable());
  assertNull(groups.get(0).getResources().get(1).getInfo());
  assertEquals(0,groups.get(0).getResources().get(1).getRelated().size());
  I_CmsPublishEventListener listener=new CmsPublishEventAdapter(){
    /** 
 * @see org.opencms.publish.CmsPublishEventAdapter#onEnqueue(org.opencms.publish.CmsPublishJobBase)
 */
    @Override public void onEnqueue(    CmsPublishJobBase publishJob){
      assertEquals(2,publishJob.getSize());
    }
    /** 
 * @see org.opencms.publish.CmsPublishEventAdapter#onFinish(org.opencms.publish.CmsPublishJobRunning)
 */
    @Override public void onFinish(    CmsPublishJobRunning publishJob){
      assertEquals(2,publishJob.getSize());
    }
    /** 
 * @see org.opencms.publish.CmsPublishEventAdapter#onStart(org.opencms.publish.CmsPublishJobEnqueued)
 */
    @Override public void onStart(    CmsPublishJobEnqueued publishJob){
      assertEquals(2,publishJob.getSize());
    }
  }
;
  OpenCms.getPublishManager().addPublishListener(listener);
  List<CmsResource> resources=new ArrayList<CmsResource>();
  resources.add(resource);
  resources.add(resource2);
  adePub.publishResources(resources);
  OpenCms.getPublishManager().waitWhileRunning();
  OpenCms.getPublishManager().removePublishListener(listener);
  adePub=new CmsPublish(cms);
  groups=adePub.getPublishGroups();
  assertEquals(0,groups.size());
}
