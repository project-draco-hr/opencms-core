{
  CmsResource resource=null;
  int pos=resourceName.indexOf("?");
  String resName=resourceName;
  String query="";
  if (pos > -1) {
    query=resourceName.substring(pos);
    resName=resourceName.substring(0,pos);
  }
  String resNameWithoutServer=OpenCms.getLinkManager().getRootPath(getCmsObject(),resName);
  if (resNameWithoutServer != null) {
    resName=resNameWithoutServer;
  }
  CmsObject cms=getCmsObject();
  try {
    log("reading resource: " + resName);
    resource=cms.readResource(resName,CmsResourceFilter.ONLY_VISIBLE_NO_DELETED);
  }
 catch (  CmsException e) {
    String originalSiteRoot=cms.getRequestContext().getSiteRoot();
    try {
      cms.getRequestContext().setSiteRoot("");
      resource=cms.readResource(resName,CmsResourceFilter.ONLY_VISIBLE_NO_DELETED);
    }
 catch (    CmsException e2) {
      logError(e);
      return null;
    }
 finally {
      cms.getRequestContext().setSiteRoot(originalSiteRoot);
    }
  }
  ArrayList<String> types=new ArrayList<String>();
  String resType=OpenCms.getResourceManager().getResourceType(resource).getTypeName();
  types.add(resType);
  CmsGallerySearchBean initialSearchObj=new CmsGallerySearchBean();
  initialSearchObj.setGalleryMode(data.getMode());
  initialSearchObj.setIgnoreSearchExclude(true);
  initialSearchObj.setTypes(types);
  ArrayList<String> galleries=new ArrayList<String>();
  for (  CmsGalleryFolderBean gallery : data.getGalleries()) {
    String galleryPath=gallery.getPath();
    String galleryRootPath=cms.addSiteRoot(galleryPath);
    String folderPath=CmsResource.getFolderPath(resName);
    if (galleryPath.equals(folderPath) || galleryRootPath.equals(folderPath)) {
      galleries.add(gallery.getPath());
      initialSearchObj.setGalleries(galleries);
      break;
    }
  }
  if (galleries.isEmpty()) {
    ArrayList<String> vfsFolders=new ArrayList<String>();
    vfsFolders.add(CmsResource.getFolderPath(resource.getRootPath()));
    initialSearchObj.setFolders(new HashSet<String>(vfsFolders));
  }
  initialSearchObj.setLocale(data.getLocale());
  CmsGallerySearchBean searchObj=new CmsGallerySearchBean(initialSearchObj);
  searchObj.setSortOrder(CmsGallerySearchParameters.CmsGallerySortParam.DEFAULT.toString());
  int currentPage=1;
  boolean found=false;
  searchObj.setPage(currentPage);
  CmsGallerySearchParameters params=prepareSearchParams(searchObj);
  org.opencms.search.galleries.CmsGallerySearch searchBean=new org.opencms.search.galleries.CmsGallerySearch();
  searchBean.init(getCmsObject());
  searchBean.setIndex(CmsGallerySearchIndex.GALLERY_INDEX_NAME);
  CmsGallerySearchResultList searchResults=null;
  CmsGallerySearchResultList totalResults=new CmsGallerySearchResultList();
  CmsGallerySearchResult foundItem=null;
  while (!found) {
    params.setResultPage(currentPage);
    searchResults=searchBean.getResult(params);
    Iterator<CmsGallerySearchResult> resultsIt=searchResults.listIterator();
    totalResults.append(searchResults);
    while (resultsIt.hasNext()) {
      CmsGallerySearchResult searchResult=resultsIt.next();
      if (searchResult.getPath().equals(resource.getRootPath())) {
        found=true;
        foundItem=searchResult;
        break;
      }
    }
    if (!found && ((searchResults.getHitCount() / (currentPage * params.getMatchesPerPage())) >= 1)) {
      currentPage++;
    }
 else {
      break;
    }
  }
  boolean hasResults=searchResults != null;
  searchResults=totalResults;
  if (found && hasResults) {
    initialSearchObj.setSortOrder(params.getSortOrder().name());
    initialSearchObj.setResultCount(searchResults.getHitCount());
    initialSearchObj.setPage(params.getResultPage());
    initialSearchObj.setResults(buildSearchResultList(searchResults,foundItem));
    initialSearchObj.setPage(1);
    initialSearchObj.setLastPage(currentPage);
    initialSearchObj.setTabId(I_CmsGalleryProviderConstants.GalleryTabId.cms_tab_results.name());
    initialSearchObj.setResourcePath(resName + query);
    initialSearchObj.setResourceType(resType);
  }
 else {
    log("could not find selected resource");
  }
  if ((resource != null)) {
    if (isSitemapEntry(cms,resource)) {
      A_CmsTreeTabDataPreloader<CmsSitemapEntryBean> loader=new A_CmsTreeTabDataPreloader<CmsSitemapEntryBean>(){
        @Override protected CmsSitemapEntryBean createEntry(        CmsObject innerCms,        CmsResource innerResource) throws CmsException {
          return internalCreateSitemapEntryBean(innerCms,innerResource);
        }
      }
;
      CmsSitemapEntryBean entryBean=loader.preloadData(cms,Collections.singletonList(resource));
      initialSearchObj.setSitemapPreloadData(entryBean);
    }
 else     if (resource.isFolder()) {
      A_CmsTreeTabDataPreloader<CmsVfsEntryBean> loader=new A_CmsTreeTabDataPreloader<CmsVfsEntryBean>(){
        @Override protected CmsVfsEntryBean createEntry(        CmsObject innerCms,        CmsResource innerResource) throws CmsException {
          String title=innerCms.readPropertyObject(innerResource,CmsPropertyDefinition.PROPERTY_TITLE,false).getValue();
          return internalCreateVfsEntryBean(innerResource,title,true,isEditable(innerCms,innerResource),null);
        }
      }
;
      CmsVfsEntryBean entryBean=loader.preloadData(cms,Collections.singletonList(resource));
      initialSearchObj.setVfsPreloadData(entryBean);
    }
  }
  return initialSearchObj;
}
