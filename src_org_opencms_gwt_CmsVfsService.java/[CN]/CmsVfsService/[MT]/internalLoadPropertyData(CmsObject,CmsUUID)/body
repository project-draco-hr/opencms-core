{
  String originalSiteRoot=cms.getRequestContext().getSiteRoot();
  CmsPropertiesBean result=new CmsPropertiesBean();
  CmsResource resource=cms.readResource(id,CmsResourceFilter.IGNORE_EXPIRATION);
  boolean hasPermissions=cms.hasPermissions(resource,CmsPermissionSet.ACCESS_WRITE,false,CmsResourceFilter.IGNORE_EXPIRATION);
  CmsLock lock=cms.getLock(resource);
  boolean lockedByOtherUser=!lock.isUnlocked() && !lock.isOwnedBy(cms.getRequestContext().getCurrentUser());
  result.setReadOnly(!hasPermissions || lockedByOtherUser);
  result.setFolder(resource.isFolder());
  result.setContainerPage(CmsResourceTypeXmlContainerPage.isContainerPage(resource));
  String sitePath=cms.getSitePath(resource);
  Map<String,CmsXmlContentProperty> propertyConfig=OpenCms.getADEManager().lookupConfiguration(cms,resource.getRootPath()).getPropertyConfigurationAsMap();
  result.setPropertyDefinitions(new LinkedHashMap<String,CmsXmlContentProperty>(propertyConfig));
  try {
    cms.getRequestContext().setSiteRoot("");
    String parentPath=CmsResource.getParentFolder(resource.getRootPath());
    CmsResource parent=cms.readResource(parentPath);
    List<CmsProperty> parentProperties=cms.readPropertyObjects(parent,true);
    List<CmsProperty> ownProperties=cms.readPropertyObjects(resource,false);
    result.setOwnProperties(convertProperties(ownProperties));
    result.setInheritedProperties(convertProperties(parentProperties));
    result.setPageInfo(getPageInfo(resource));
    List<CmsPropertyDefinition> propDefs=cms.readAllPropertyDefinitions();
    List<String> propNames=new ArrayList<String>();
    for (    CmsPropertyDefinition propDef : propDefs) {
      propNames.add(propDef.getName());
    }
    CmsTemplateFinder templateFinder=new CmsTemplateFinder(cms);
    result.setTemplates(templateFinder.getTemplates());
    result.setAllProperties(propNames);
    result.setStructureId(id);
    result.setSitePath(sitePath);
    return result;
  }
  finally {
    cms.getRequestContext().setSiteRoot(originalSiteRoot);
  }
}
