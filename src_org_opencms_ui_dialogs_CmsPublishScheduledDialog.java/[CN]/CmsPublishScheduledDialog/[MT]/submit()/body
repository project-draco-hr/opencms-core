{
  long current=System.currentTimeMillis();
  Date dateValue=m_dateField.getValue();
  long publishTime=m_dateField.getValue().getTime();
  if (current > publishTime) {
    m_context.error(new CmsException(Messages.get().container(Messages.ERR_PUBLISH_SCHEDULED_DATE_IN_PAST_1,dateValue)));
  }
 else {
    try {
      CmsWorkplaceAction action=CmsWorkplaceAction.getInstance();
      CmsObject cmsAdmin=action.getCmsAdminObject();
      CmsObject cms=OpenCms.initCmsObject(m_context.getCms());
      cmsAdmin.getRequestContext().setSiteRoot(cms.getRequestContext().getSiteRoot());
      CmsProject tmpProject=createTempProject(cmsAdmin,m_context.getResources(),dateValue);
      cmsAdmin.getRequestContext().setCurrentProject(tmpProject);
      cms.getRequestContext().setCurrentProject(tmpProject);
      Set<CmsUUID> changeIds=new HashSet<CmsUUID>();
      for (      CmsResource resource : m_context.getResources()) {
        addToTempProject(cmsAdmin,cms,resource,tmpProject);
        if (resource.isFolder() && m_includeSubResources.getValue().booleanValue()) {
          List<CmsResource> subResources=cms.readResources(resource,CmsResourceFilter.ONLY_VISIBLE.addExcludeState(CmsResourceState.STATE_UNCHANGED),true);
          for (          CmsResource sub : subResources) {
            if (cms.hasPermissions(sub,CmsPermissionSet.ACCESS_DIRECT_PUBLISH,false,CmsResourceFilter.ALL)) {
              addToTempProject(cmsAdmin,cms,sub,tmpProject);
            }
          }
        }
        changeIds.add(resource.getStructureId());
      }
      CmsScheduledJobInfo job=new CmsScheduledJobInfo();
      String jobName=tmpProject.getName();
      job.setJobName(jobName);
      job.setClassName("org.opencms.scheduler.jobs.CmsPublishScheduledJob");
      Calendar calendar=Calendar.getInstance();
      calendar.setTime(dateValue);
      String cronExpr="" + calendar.get(Calendar.SECOND) + " "+ calendar.get(Calendar.MINUTE)+ " "+ calendar.get(Calendar.HOUR_OF_DAY)+ " "+ calendar.get(Calendar.DAY_OF_MONTH)+ " "+ (calendar.get(Calendar.MONTH) + 1)+ " "+ "?"+ " "+ calendar.get(Calendar.YEAR);
      job.setCronExpression(cronExpr);
      job.setActive(true);
      CmsContextInfo contextInfo=new CmsContextInfo();
      contextInfo.setProjectName(tmpProject.getName());
      contextInfo.setUserName(cmsAdmin.getRequestContext().getCurrentUser().getName());
      SortedMap<String,String> params=new TreeMap<String,String>();
      String userName=m_context.getCms().getRequestContext().getCurrentUser().getName();
      params.put(CmsPublishScheduledJob.PARAM_USER,userName);
      params.put(CmsPublishScheduledJob.PARAM_JOBNAME,jobName);
      params.put(CmsPublishScheduledJob.PARAM_LINKCHECK,"true");
      job.setParameters(params);
      job.setContextInfo(contextInfo);
      OpenCms.getScheduleManager().scheduleJob(cmsAdmin,job);
      OpenCms.writeConfiguration(CmsSystemConfiguration.class);
      m_context.finish(changeIds);
    }
 catch (    CmsException ex) {
      LOG.error("Error performing publish scheduled dialog operation.",ex);
      m_context.error(ex);
    }
  }
}
