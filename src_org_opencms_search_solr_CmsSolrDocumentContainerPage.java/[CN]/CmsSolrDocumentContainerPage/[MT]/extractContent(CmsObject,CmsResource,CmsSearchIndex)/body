{
  logContentExtraction(resource,index);
  I_CmsExtractionResult ex=null;
  try {
    CmsFile file=readFile(cms,resource);
    CmsXmlContainerPage containerPage=CmsXmlContainerPageFactory.unmarshal(cms,file);
    Locale locale=index.getLocaleForResource(cms,resource,containerPage.getLocales());
    List<I_CmsExtractionResult> all=new ArrayList<I_CmsExtractionResult>();
    CmsContainerPageBean containerBean=containerPage.getContainerPage(cms);
    if (containerBean != null) {
      for (      CmsContainerElementBean element : containerBean.getElements()) {
        element.initResource(cms);
        CmsADEConfigData adeConfig=OpenCms.getADEManager().lookupConfiguration(cms,file.getRootPath());
        CmsFormatterConfiguration formatters=adeConfig.getFormatters(cms,element.getResource());
        if ((formatters != null) && (element.getFormatterId() != null) && formatters.isSearchContent(element.getFormatterId())) {
          element.initResource(cms);
          all.add(CmsSolrDocumentXmlContent.extractXmlContent(cms,element.getResource(),index));
        }
      }
    }
    Map<String,String> fieldMappings=new HashMap<String,String>(1);
    List<Locale> localesAvailable=OpenCms.getLocaleManager().getAvailableLocales(cms,resource);
    Map<Locale,Map<String,String>> multilingualValues=new HashMap<Locale,Map<String,String>>(localesAvailable.size());
    for (    Locale localeAvailable : localesAvailable) {
      multilingualValues.put(localeAvailable,new HashMap<String,String>());
    }
    ex=new CmsExtractionResult(locale,multilingualValues,fieldMappings);
    ex=ex.merge(all);
    return ex;
  }
 catch (  Exception e) {
    throw new CmsIndexException(Messages.get().container(Messages.ERR_TEXT_EXTRACTION_1,resource.getRootPath()),e);
  }
}
