{
  CmsVfsTreeProxy proxy=new CmsVfsTreeProxy();
  TreeBeanModelReader reader=new TreeBeanModelReader();
  TreeLoader<BeanModel> loader=new BaseTreeLoader<BeanModel>(proxy,reader){
    /** 
 * @see com.extjs.gxt.ui.client.data.BaseTreeLoader#hasChildren(com.extjs.gxt.ui.client.data.ModelData)
 */
    @Override public boolean hasChildren(    BeanModel parent){
      CmsVfsEntryBean model=parent.getBean();
      return model.hasChildren();
    }
  }
;
  TreeStore<BeanModel> store=new TreeStore<BeanModel>(loader);
  store.setKeyProvider(new ModelKeyProvider<BeanModel>(){
    /** 
 * @see ModelKeyProvider#getKey(com.extjs.gxt.ui.client.data.ModelData model)
 */
    public String getKey(    BeanModel model){
      CmsVfsEntryBean entry=model.getBean();
      return entry.getPath();
    }
  }
);
  final TreePanel<BeanModel> tree=new TreePanel<BeanModel>(store);
  tree.setDisplayProperty("name");
  final TreeStyle treeStyle=tree.getStyle();
  tree.setIconProvider(new ModelIconProvider<BeanModel>(){
    /** 
 * @see ModelIconProvider#getIcon(com.extjs.gxt.ui.client.data.ModelData)
 */
    public AbstractImagePrototype getIcon(    BeanModel model){
      CmsVfsEntryBean entry=model.getBean();
      boolean expanded=tree.isExpanded(model);
      if (entry.isFolder()) {
        return expanded ? treeStyle.getNodeOpenIcon() : treeStyle.getNodeCloseIcon();
      }
      return treeStyle.getLeafIcon();
    }
  }
);
  if (selectionHandler != null) {
    tree.getSelectionModel().addSelectionChangedListener(selectionHandler);
  }
  return tree;
}
