{
  String resourceNodeName=getResourceNodeName();
  m_resourceNode=parent.addElement(resourceNodeName);
  getSaxWriter().writeOpen(m_resourceNode);
  if (m_recursive) {
    resourcesToExport=CmsFileUtil.removeRedundancies(resourcesToExport);
  }
  List folderNames=new ArrayList();
  List fileNames=new ArrayList();
  Iterator it=resourcesToExport.iterator();
  while (it.hasNext()) {
    String resource=(String)it.next();
    if (CmsResource.isFolder(resource)) {
      folderNames.add(resource);
    }
 else {
      fileNames.add(resource);
    }
  }
  m_exportedResources=new HashSet();
  m_exportedPageFiles=new HashSet();
  for (int i=0; i < folderNames.size(); i++) {
    String path=(String)folderNames.get(i);
    if (m_recursive) {
      addParentFolders(path);
      addChildResources(path);
    }
 else {
      CmsFolder folder;
      try {
        folder=getCms().readFolder(path,CmsResourceFilter.IGNORE_EXPIRATION);
      }
 catch (      CmsException e) {
        CmsMessageContainer message=Messages.get().container(Messages.ERR_IMPORTEXPORT_ERROR_ADDING_PARENT_FOLDERS_1,path);
        if (LOG.isDebugEnabled()) {
          LOG.debug(message.key(),e);
        }
        throw new CmsImportExportException(message,e);
      }
      int state=folder.getState();
      long age=folder.getDateLastModified() < folder.getDateCreated() ? folder.getDateCreated() : folder.getDateLastModified();
      if (getCms().getRequestContext().currentProject().isOnlineProject() || (m_includeUnchanged) || state == CmsResource.STATE_NEW || state == CmsResource.STATE_CHANGED) {
        if ((state != CmsResource.STATE_DELETED) && (age >= m_contentAge)) {
          String export=getCms().getSitePath(folder);
          if (checkExportResource(export)) {
            appendResourceToManifest(folder,false);
          }
        }
      }
    }
    m_exportedResources.add(path);
  }
  addFiles(fileNames);
  addPageBodyFiles();
  getSaxWriter().writeClose(m_resourceNode);
  parent.remove(m_resourceNode);
  m_resourceNode=null;
}
