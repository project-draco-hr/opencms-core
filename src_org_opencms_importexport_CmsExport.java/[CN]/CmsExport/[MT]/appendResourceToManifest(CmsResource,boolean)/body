{
  try {
    CmsProperty property=null;
    String key=null, value=null;
    Element propertyElement=null;
    Element fileElement=m_resourceNode.addElement(CmsImportExportManager.N_FILE);
    String fileName=trimResourceName(getCms().getSitePath(resource));
    if (resource.isFile()) {
      if (source) {
        fileElement.addElement(CmsImportExportManager.N_SOURCE).addText(fileName);
      }
    }
 else {
      m_exportCount++;
      I_CmsReport report=getReport();
      report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_SUCCESSION_1,String.valueOf(m_exportCount)),I_CmsReport.FORMAT_NOTE);
      report.print(Messages.get().container(Messages.RPT_EXPORT_0),I_CmsReport.FORMAT_NOTE);
      report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_ARGUMENT_1,getCms().getSitePath(resource)));
      report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_DOTS_0));
      report.println(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_OK_0),I_CmsReport.FORMAT_OK);
      if (LOG.isInfoEnabled()) {
        LOG.info(Messages.get().key(Messages.LOG_EXPORTING_OK_2,String.valueOf(m_exportCount),getCms().getSitePath(resource)));
      }
    }
    fileElement.addElement(CmsImportExportManager.N_DESTINATION).addText(fileName);
    fileElement.addElement(CmsImportExportManager.N_TYPE).addText(OpenCms.getResourceManager().getResourceType(resource.getTypeId()).getTypeName());
    if (resource.isFile()) {
      fileElement.addElement(CmsImportExportManager.N_UUIDRESOURCE).addText(resource.getResourceId().toString());
    }
    fileElement.addElement(CmsImportExportManager.N_DATELASTMODIFIED).addText(CmsDateUtil.getHeaderDate(resource.getDateLastModified()));
    String userNameLastModified=null;
    try {
      userNameLastModified=getCms().readUser(resource.getUserLastModified()).getName();
    }
 catch (    CmsException e) {
      userNameLastModified=OpenCms.getDefaultUsers().getUserAdmin();
    }
    fileElement.addElement(CmsImportExportManager.N_USERLASTMODIFIED).addText(CmsEncoder.escapeXml(userNameLastModified));
    fileElement.addElement(CmsImportExportManager.N_DATECREATED).addText(CmsDateUtil.getHeaderDate(resource.getDateCreated()));
    String userNameCreated=null;
    try {
      userNameCreated=getCms().readUser(resource.getUserCreated()).getName();
    }
 catch (    CmsException e) {
      userNameCreated=OpenCms.getDefaultUsers().getUserAdmin();
    }
    fileElement.addElement(CmsImportExportManager.N_USERCREATED).addText(CmsEncoder.escapeXml(userNameCreated));
    if (resource.getDateReleased() != CmsResource.DATE_RELEASED_DEFAULT) {
      fileElement.addElement(CmsImportExportManager.N_DATERELEASED).addText(CmsDateUtil.getHeaderDate(resource.getDateReleased()));
    }
    if (resource.getDateExpired() != CmsResource.DATE_EXPIRED_DEFAULT) {
      fileElement.addElement(CmsImportExportManager.N_DATEEXPIRED).addText(CmsDateUtil.getHeaderDate(resource.getDateExpired()));
    }
    int resFlags=resource.getFlags();
    resFlags&=~CmsResource.FLAG_LABELED;
    fileElement.addElement(CmsImportExportManager.N_FLAGS).addText(Integer.toString(resFlags));
    Element propertiesElement=fileElement.addElement(CmsImportExportManager.N_PROPERTIES);
    List properties=getCms().readPropertyObjects(getCms().getSitePath(resource),false);
    for (int i=0, n=properties.size(); i < n; i++) {
      property=(CmsProperty)properties.get(i);
      if (isIgnoredProperty(property)) {
        continue;
      }
      key=property.getName();
      for (int j=0; j < 2; j++) {
        if ((j == 0 && (value=property.getStructureValue()) != null) || (j == 1 && (value=property.getResourceValue()) != null)) {
          propertyElement=propertiesElement.addElement(CmsImportExportManager.N_PROPERTY);
          if (j == 1) {
            propertyElement.addAttribute(CmsImportExportManager.N_PROPERTY_ATTRIB_TYPE,CmsImportExportManager.N_PROPERTY_ATTRIB_TYPE_SHARED);
          }
          propertyElement.addElement(CmsImportExportManager.N_NAME).addText(CmsEncoder.escapeXml(key));
          propertyElement.addElement(CmsImportExportManager.N_VALUE).addCDATA(value);
        }
      }
    }
    Element acl=fileElement.addElement(CmsImportExportManager.N_ACCESSCONTROL_ENTRIES);
    List fileAcEntries=getCms().getAccessControlEntries(getCms().getSitePath(resource),false);
    Iterator i=fileAcEntries.iterator();
    while (i.hasNext()) {
      CmsAccessControlEntry ace=(CmsAccessControlEntry)i.next();
      Element a=acl.addElement(CmsImportExportManager.N_ACCESSCONTROL_ENTRY);
      int flags=ace.getFlags();
      String acePrincipalName="";
      CmsUUID acePrincipal=ace.getPrincipal();
      if ((flags & CmsAccessControlEntry.ACCESS_FLAGS_GROUP) > 0) {
        acePrincipalName=I_CmsPrincipal.PRINCIPAL_GROUP + '.' + getCms().readGroup(acePrincipal).getName();
      }
 else {
        acePrincipalName=I_CmsPrincipal.PRINCIPAL_USER + '.' + getCms().readUser(acePrincipal).getName();
      }
      a.addElement(CmsImportExportManager.N_ACCESSCONTROL_PRINCIPAL).addText(CmsEncoder.escapeXml(acePrincipalName));
      a.addElement(CmsImportExportManager.N_FLAGS).addText(Integer.toString(flags));
      Element b=a.addElement(CmsImportExportManager.N_ACCESSCONTROL_PERMISSIONSET);
      b.addElement(CmsImportExportManager.N_ACCESSCONTROL_ALLOWEDPERMISSIONS).addText(Integer.toString(ace.getAllowedPermissions()));
      b.addElement(CmsImportExportManager.N_ACCESSCONTROL_DENIEDPERMISSIONS).addText(Integer.toString(ace.getDeniedPermissions()));
    }
    digestElement(m_resourceNode,fileElement);
  }
 catch (  CmsImportExportException e) {
    throw e;
  }
catch (  CmsException e) {
    CmsMessageContainer message=Messages.get().container(Messages.ERR_IMPORTEXPORT_ERROR_APPENDING_RESOURCE_TO_MANIFEST_1,resource.getRootPath());
    if (LOG.isDebugEnabled()) {
      LOG.debug(message.key(),e);
    }
    throw new CmsImportExportException(message,e);
  }
}
