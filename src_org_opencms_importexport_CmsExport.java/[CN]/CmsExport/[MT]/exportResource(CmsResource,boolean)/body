{
  Element e=m_fileNode.addElement(I_CmsConstants.C_EXPORT_TAG_FILE);
  String fileName=trimResourceName(getCms().readAbsolutePath(resource));
  if (resource.isFile()) {
    if (source) {
      e.addElement(I_CmsConstants.C_EXPORT_TAG_SOURCE).addText(fileName);
    }
  }
 else {
    getReport().print(" ( " + ++m_exportCount + " ) ",I_CmsReport.C_FORMAT_NOTE);
    getReport().print(getReport().key("report.exporting"),I_CmsReport.C_FORMAT_NOTE);
    getReport().print(getCms().readAbsolutePath(resource));
    getReport().print(getReport().key("report.dots"));
    getReport().println(getReport().key("report.ok"),I_CmsReport.C_FORMAT_OK);
  }
  e.addElement(I_CmsConstants.C_EXPORT_TAG_DESTINATION).addText(fileName);
  e.addElement(I_CmsConstants.C_EXPORT_TAG_TYPE).addText(getCms().getResourceType(resource.getType()).getResourceTypeName());
  e.addElement(I_CmsConstants.C_EXPORT_TAG_UUIDRESOURCE).addText(resource.getResourceId().toString());
  e.addElement(I_CmsConstants.C_EXPORT_TAG_UUIDCONTENT).addText(resource.getFileId().toString());
  e.addElement(I_CmsConstants.C_EXPORT_TAG_DATELASTMODIFIED).addText(String.valueOf(resource.getDateLastModified()));
  e.addElement(I_CmsConstants.C_EXPORT_TAG_USERLASTMODIFIED).addText(getCms().readUser(resource.getUserLastModified()).getName());
  e.addElement(I_CmsConstants.C_EXPORT_TAG_DATECREATED).addText(String.valueOf(resource.getDateCreated()));
  e.addElement(I_CmsConstants.C_EXPORT_TAG_USERCREATED).addText(getCms().readUser(resource.getUserCreated()).getName());
  int resFlags=resource.getFlags();
  resFlags&=~I_CmsConstants.C_RESOURCEFLAG_LABELLINK;
  e.addElement(I_CmsConstants.C_EXPORT_TAG_FLAGS).addText(Integer.toString(resFlags));
  Element p=e.addElement(I_CmsConstants.C_EXPORT_TAG_PROPERTIES);
  Map fileProperties=getCms().readProperties(getCms().readAbsolutePath(resource));
  Iterator i=fileProperties.keySet().iterator();
  while (i.hasNext()) {
    String key=(String)i.next();
    if ((!isExportingCosData()) || (!I_CmsConstants.C_PROPERTY_CHANNELID.equals(key))) {
      Element q=p.addElement(I_CmsConstants.C_EXPORT_TAG_PROPERTY);
      q.addElement(I_CmsConstants.C_EXPORT_TAG_NAME).addText(key);
      q.addElement(I_CmsConstants.C_EXPORT_TAG_VALUE).addCDATA((String)fileProperties.get(key));
    }
  }
  Element acl=e.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ENTRIES);
  Vector fileAcEntries=getCms().getAccessControlEntries(getCms().readAbsolutePath(resource),false);
  i=fileAcEntries.iterator();
  while (i.hasNext()) {
    CmsAccessControlEntry ace=(CmsAccessControlEntry)i.next();
    Element a=acl.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ENTRY);
    int flags=ace.getFlags();
    String acePrincipalName="";
    CmsUUID acePrincipal=ace.getPrincipal();
    if ((flags & I_CmsConstants.C_ACCESSFLAGS_GROUP) > 0) {
      acePrincipalName=I_CmsConstants.C_EXPORT_ACEPRINCIPAL_GROUP + getCms().readGroup(acePrincipal).getName();
    }
 else {
      acePrincipalName=I_CmsConstants.C_EXPORT_ACEPRINCIPAL_USER + getCms().readUser(acePrincipal).getName();
    }
    a.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_PRINCIPAL).addText(acePrincipalName);
    a.addElement(I_CmsConstants.C_EXPORT_TAG_FLAGS).addText(Integer.toString(flags));
    Element b=a.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_PERMISSIONSET);
    b.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ALLOWEDPERMISSIONS).addText(Integer.toString(ace.getAllowedPermissions()));
    b.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_DENIEDPERMISSIONS).addText(Integer.toString(ace.getDeniedPermissions()));
  }
  digestElement(m_fileNode,e);
}
