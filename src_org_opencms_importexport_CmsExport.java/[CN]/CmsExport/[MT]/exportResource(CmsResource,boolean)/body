{
  Element e=m_fileNode.addElement(I_CmsConstants.C_EXPORT_TAG_FILE);
  String fileName=trimResourceName(m_cms.readAbsolutePath(resource));
  if (resource.isFile()) {
    if (source) {
      e.addElement(I_CmsConstants.C_EXPORT_TAG_SOURCE).addText(fileName);
    }
  }
 else {
    m_report.print(m_report.key("report.exporting"),I_CmsReport.C_FORMAT_NOTE);
    m_report.print(m_cms.readAbsolutePath(resource));
    m_report.print(m_report.key("report.dots"),I_CmsReport.C_FORMAT_NOTE);
    m_report.println(m_report.key("report.ok"),I_CmsReport.C_FORMAT_OK);
  }
  e.addElement(I_CmsConstants.C_EXPORT_TAG_DESTINATION).addText(fileName);
  e.addElement(I_CmsConstants.C_EXPORT_TAG_TYPE).addText(m_cms.getResourceType(resource.getType()).getResourceTypeName());
  e.addElement(I_CmsConstants.C_EXPORT_TAG_UUIDRESOURCE).addText(resource.getResourceId().toString());
  e.addElement(I_CmsConstants.C_EXPORT_TAG_UUIDCONTENT).addText(resource.getFileId().toString());
  e.addElement(I_CmsConstants.C_EXPORT_TAG_DATELASTMODIFIED).addText(String.valueOf(resource.getDateLastModified()));
  e.addElement(I_CmsConstants.C_EXPORT_TAG_USERLASTMODIFIED).addText(m_cms.readUser(resource.getUserLastModified()).getName());
  e.addElement(I_CmsConstants.C_EXPORT_TAG_DATECREATED).addText(String.valueOf(resource.getDateCreated()));
  e.addElement(I_CmsConstants.C_EXPORT_TAG_USERCREATED).addText(m_cms.readUser(resource.getUserCreated()).getName());
  e.addElement(I_CmsConstants.C_EXPORT_TAG_FLAGS).addText(Integer.toString(resource.getFlags()));
  Element p=e.addElement(I_CmsConstants.C_EXPORT_TAG_PROPERTIES);
  Map fileProperties=m_cms.readProperties(m_cms.readAbsolutePath(resource));
  Iterator i=fileProperties.keySet().iterator();
  while (i.hasNext()) {
    String key=(String)i.next();
    if ((!m_exportingModuleData) || (!I_CmsConstants.C_PROPERTY_CHANNELID.equals(key))) {
      Element q=p.addElement(I_CmsConstants.C_EXPORT_TAG_PROPERTY);
      q.addElement(I_CmsConstants.C_EXPORT_TAG_NAME).addText(key);
      q.addElement(I_CmsConstants.C_EXPORT_TAG_TYPE).addText(Integer.toString(m_cms.readPropertydefinition(key,resource.getType()).getType()));
      q.addElement(I_CmsConstants.C_EXPORT_TAG_VALUE).addCDATA((String)fileProperties.get(key));
    }
  }
  Element acl=e.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ENTRIES);
  Vector fileAcEntries=m_cms.getAccessControlEntries(m_cms.readAbsolutePath(resource),false);
  i=fileAcEntries.iterator();
  while (i.hasNext()) {
    CmsAccessControlEntry ace=(CmsAccessControlEntry)i.next();
    Element a=acl.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ENTRY);
    int flags=ace.getFlags();
    String acePrincipalName="";
    CmsUUID acePrincipal=ace.getPrincipal();
    if ((flags & I_CmsConstants.C_ACCESSFLAGS_GROUP) > 0) {
      acePrincipalName=I_CmsConstants.C_EXPORT_ACEPRINCIPAL_GROUP;
      acePrincipalName+=m_cms.readGroup(acePrincipal).getName();
    }
 else {
      acePrincipalName=I_CmsConstants.C_EXPORT_ACEPRINCIPAL_USER;
      acePrincipalName+=m_cms.readUser(acePrincipal).getName();
    }
    a.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_PRINCIPAL).addText(acePrincipalName);
    a.addElement(I_CmsConstants.C_EXPORT_TAG_FLAGS).addText(Integer.toString(flags));
    Element b=a.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_PERMISSIONSET);
    b.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ALLOWEDPERMISSIONS,Integer.toString(ace.getAllowedPermissions()));
    b.addElement(I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_DENIEDPERMISSIONS,Integer.toString(ace.getDeniedPermissions()));
  }
  m_saxWriter.write(e);
  m_fileNode.remove(e);
}
