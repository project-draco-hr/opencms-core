{
  if ((repId == null) || (repId.trim().length() == 0)) {
    throw new IllegalArgumentException("Invalid repository id!");
  }
  repositoryId=repId;
  if ((rootPath == null) || (rootPath.trim().length() == 0)) {
    throw new IllegalArgumentException("Invalid root folder!");
  }
  root=new File(rootPath);
  if (!root.isDirectory()) {
    throw new IllegalArgumentException("Root is not a directory!");
  }
  this.types=types;
  userMap=new HashMap<String,Boolean>();
  repositoryInfo=new RepositoryInfoImpl();
  repositoryInfo.setId(repositoryId);
  repositoryInfo.setName(repositoryId);
  repositoryInfo.setDescription(repositoryId);
  repositoryInfo.setCmisVersionSupported("1.0");
  repositoryInfo.setProductName("OpenCMIS FileShare");
  repositoryInfo.setProductVersion("0.1");
  repositoryInfo.setVendorName("OpenCMIS");
  repositoryInfo.setRootFolder(ROOT_ID);
  repositoryInfo.setThinClientUri("");
  RepositoryCapabilitiesImpl capabilities=new RepositoryCapabilitiesImpl();
  capabilities.setCapabilityAcl(CapabilityAcl.DISCOVER);
  capabilities.setAllVersionsSearchable(false);
  capabilities.setCapabilityJoin(CapabilityJoin.NONE);
  capabilities.setSupportsMultifiling(false);
  capabilities.setSupportsUnfiling(false);
  capabilities.setSupportsVersionSpecificFiling(false);
  capabilities.setIsPwcSearchable(false);
  capabilities.setIsPwcUpdatable(false);
  capabilities.setCapabilityQuery(CapabilityQuery.NONE);
  capabilities.setCapabilityChanges(CapabilityChanges.NONE);
  capabilities.setCapabilityContentStreamUpdates(CapabilityContentStreamUpdates.ANYTIME);
  capabilities.setSupportsGetDescendants(true);
  capabilities.setSupportsGetFolderTree(true);
  capabilities.setCapabilityRendition(CapabilityRenditions.NONE);
  repositoryInfo.setCapabilities(capabilities);
  AclCapabilitiesDataImpl aclCapability=new AclCapabilitiesDataImpl();
  aclCapability.setSupportedPermissions(SupportedPermissions.BASIC);
  aclCapability.setAclPropagation(AclPropagation.OBJECTONLY);
  List<PermissionDefinition> permissions=new ArrayList<PermissionDefinition>();
  permissions.add(createPermission(CMIS_READ,"Read"));
  permissions.add(createPermission(CMIS_WRITE,"Write"));
  permissions.add(createPermission(CMIS_ALL,"All"));
  aclCapability.setPermissionDefinitionData(permissions);
  List<PermissionMapping> list=new ArrayList<PermissionMapping>();
  list.add(createMapping(PermissionMapping.CAN_CREATE_DOCUMENT_FOLDER,CMIS_READ));
  list.add(createMapping(PermissionMapping.CAN_CREATE_FOLDER_FOLDER,CMIS_READ));
  list.add(createMapping(PermissionMapping.CAN_DELETE_CONTENT_DOCUMENT,CMIS_WRITE));
  list.add(createMapping(PermissionMapping.CAN_DELETE_OBJECT,CMIS_ALL));
  list.add(createMapping(PermissionMapping.CAN_DELETE_TREE_FOLDER,CMIS_ALL));
  list.add(createMapping(PermissionMapping.CAN_GET_ACL_OBJECT,CMIS_READ));
  list.add(createMapping(PermissionMapping.CAN_GET_ALL_VERSIONS_VERSION_SERIES,CMIS_READ));
  list.add(createMapping(PermissionMapping.CAN_GET_CHILDREN_FOLDER,CMIS_READ));
  list.add(createMapping(PermissionMapping.CAN_GET_DESCENDENTS_FOLDER,CMIS_READ));
  list.add(createMapping(PermissionMapping.CAN_GET_FOLDER_PARENT_OBJECT,CMIS_READ));
  list.add(createMapping(PermissionMapping.CAN_GET_PARENTS_FOLDER,CMIS_READ));
  list.add(createMapping(PermissionMapping.CAN_GET_PROPERTIES_OBJECT,CMIS_READ));
  list.add(createMapping(PermissionMapping.CAN_MOVE_OBJECT,CMIS_WRITE));
  list.add(createMapping(PermissionMapping.CAN_MOVE_SOURCE,CMIS_READ));
  list.add(createMapping(PermissionMapping.CAN_MOVE_TARGET,CMIS_WRITE));
  list.add(createMapping(PermissionMapping.CAN_SET_CONTENT_DOCUMENT,CMIS_WRITE));
  list.add(createMapping(PermissionMapping.CAN_UPDATE_PROPERTIES_OBJECT,CMIS_WRITE));
  list.add(createMapping(PermissionMapping.CAN_VIEW_CONTENT_OBJECT,CMIS_READ));
  Map<String,PermissionMapping> map=new LinkedHashMap<String,PermissionMapping>();
  for (  PermissionMapping pm : list) {
    map.put(pm.getKey(),pm);
  }
  aclCapability.setPermissionMappingData(map);
  repositoryInfo.setAclCapabilities(aclCapability);
}
