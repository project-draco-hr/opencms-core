{
  if (file == null) {
    throw new IllegalArgumentException("File must not be null!");
  }
  if (!file.exists()) {
    throw new CmisObjectNotFoundException("Object not found!");
  }
  Set<String> filter=(orgfilter == null ? null : new HashSet<String>(orgfilter));
  String typeId=null;
  if (file.isDirectory()) {
    typeId=TypeManager.FOLDER_TYPE_ID;
    objectInfo.setBaseType(BaseTypeId.CMIS_FOLDER);
    objectInfo.setTypeId(typeId);
    objectInfo.setContentType(null);
    objectInfo.setFileName(null);
    objectInfo.setHasAcl(true);
    objectInfo.setHasContent(false);
    objectInfo.setVersionSeriesId(null);
    objectInfo.setIsCurrentVersion(true);
    objectInfo.setRelationshipSourceIds(null);
    objectInfo.setRelationshipTargetIds(null);
    objectInfo.setRenditionInfos(null);
    objectInfo.setSupportsDescendants(true);
    objectInfo.setSupportsFolderTree(true);
    objectInfo.setSupportsPolicies(false);
    objectInfo.setSupportsRelationships(false);
    objectInfo.setWorkingCopyId(null);
    objectInfo.setWorkingCopyOriginalId(null);
  }
 else {
    typeId=TypeManager.DOCUMENT_TYPE_ID;
    objectInfo.setBaseType(BaseTypeId.CMIS_DOCUMENT);
    objectInfo.setTypeId(typeId);
    objectInfo.setHasAcl(true);
    objectInfo.setHasContent(true);
    objectInfo.setHasParent(true);
    objectInfo.setVersionSeriesId(null);
    objectInfo.setIsCurrentVersion(true);
    objectInfo.setRelationshipSourceIds(null);
    objectInfo.setRelationshipTargetIds(null);
    objectInfo.setRenditionInfos(null);
    objectInfo.setSupportsDescendants(false);
    objectInfo.setSupportsFolderTree(false);
    objectInfo.setSupportsPolicies(false);
    objectInfo.setSupportsRelationships(false);
    objectInfo.setWorkingCopyId(null);
    objectInfo.setWorkingCopyOriginalId(null);
  }
  try {
    PropertiesImpl result=new PropertiesImpl();
    String id=fileToId(file);
    addPropertyId(result,typeId,filter,PropertyIds.OBJECT_ID,id);
    objectInfo.setId(id);
    String name=file.getName();
    addPropertyString(result,typeId,filter,PropertyIds.NAME,name);
    objectInfo.setName(name);
    addPropertyString(result,typeId,filter,PropertyIds.CREATED_BY,USER_UNKNOWN);
    addPropertyString(result,typeId,filter,PropertyIds.LAST_MODIFIED_BY,USER_UNKNOWN);
    objectInfo.setCreatedBy(USER_UNKNOWN);
    GregorianCalendar lastModified=millisToCalendar(file.lastModified());
    addPropertyDateTime(result,typeId,filter,PropertyIds.CREATION_DATE,lastModified);
    addPropertyDateTime(result,typeId,filter,PropertyIds.LAST_MODIFICATION_DATE,lastModified);
    objectInfo.setCreationDate(lastModified);
    objectInfo.setLastModificationDate(lastModified);
    addPropertyString(result,typeId,filter,PropertyIds.CHANGE_TOKEN,null);
    if (file.isDirectory()) {
      addPropertyId(result,typeId,filter,PropertyIds.BASE_TYPE_ID,BaseTypeId.CMIS_FOLDER.value());
      addPropertyId(result,typeId,filter,PropertyIds.OBJECT_TYPE_ID,TypeManager.FOLDER_TYPE_ID);
      String path=getRepositoryPath(file);
      addPropertyString(result,typeId,filter,PropertyIds.PATH,(path.length() == 0 ? "/" : path));
      if (!root.equals(file)) {
        addPropertyId(result,typeId,filter,PropertyIds.PARENT_ID,(root.equals(file.getParentFile()) ? ROOT_ID : fileToId(file.getParentFile())));
        objectInfo.setHasParent(true);
      }
 else {
        addPropertyId(result,typeId,filter,PropertyIds.PARENT_ID,null);
        objectInfo.setHasParent(false);
      }
      addPropertyIdList(result,typeId,filter,PropertyIds.ALLOWED_CHILD_OBJECT_TYPE_IDS,null);
    }
 else {
      addPropertyId(result,typeId,filter,PropertyIds.BASE_TYPE_ID,BaseTypeId.CMIS_DOCUMENT.value());
      addPropertyId(result,typeId,filter,PropertyIds.OBJECT_TYPE_ID,TypeManager.DOCUMENT_TYPE_ID);
      addPropertyBoolean(result,typeId,filter,PropertyIds.IS_IMMUTABLE,false);
      addPropertyBoolean(result,typeId,filter,PropertyIds.IS_LATEST_VERSION,true);
      addPropertyBoolean(result,typeId,filter,PropertyIds.IS_MAJOR_VERSION,true);
      addPropertyBoolean(result,typeId,filter,PropertyIds.IS_LATEST_MAJOR_VERSION,true);
      addPropertyString(result,typeId,filter,PropertyIds.VERSION_LABEL,file.getName());
      addPropertyId(result,typeId,filter,PropertyIds.VERSION_SERIES_ID,fileToId(file));
      addPropertyBoolean(result,typeId,filter,PropertyIds.IS_VERSION_SERIES_CHECKED_OUT,false);
      addPropertyString(result,typeId,filter,PropertyIds.VERSION_SERIES_CHECKED_OUT_BY,null);
      addPropertyString(result,typeId,filter,PropertyIds.VERSION_SERIES_CHECKED_OUT_ID,null);
      addPropertyString(result,typeId,filter,PropertyIds.CHECKIN_COMMENT,"");
      if (file.length() == 0) {
        addPropertyBigInteger(result,typeId,filter,PropertyIds.CONTENT_STREAM_LENGTH,null);
        addPropertyString(result,typeId,filter,PropertyIds.CONTENT_STREAM_MIME_TYPE,null);
        addPropertyString(result,typeId,filter,PropertyIds.CONTENT_STREAM_FILE_NAME,null);
        objectInfo.setHasContent(false);
        objectInfo.setContentType(null);
        objectInfo.setFileName(null);
      }
 else {
        addPropertyInteger(result,typeId,filter,PropertyIds.CONTENT_STREAM_LENGTH,file.length());
        addPropertyString(result,typeId,filter,PropertyIds.CONTENT_STREAM_MIME_TYPE,MimeTypes.getMIMEType(file));
        addPropertyString(result,typeId,filter,PropertyIds.CONTENT_STREAM_FILE_NAME,file.getName());
        objectInfo.setHasContent(true);
        objectInfo.setContentType(MimeTypes.getMIMEType(file));
        objectInfo.setFileName(file.getName());
      }
      addPropertyId(result,typeId,filter,PropertyIds.CONTENT_STREAM_ID,null);
    }
    readCustomProperties(file,result,filter,objectInfo);
    if (filter != null) {
      if (!filter.isEmpty()) {
        debug("Unknown filter properties: " + filter.toString(),null);
      }
    }
    return result;
  }
 catch (  Exception e) {
    if (e instanceof CmisBaseException) {
      throw (CmisBaseException)e;
    }
    throw new CmisRuntimeException(e.getMessage(),e);
  }
}
