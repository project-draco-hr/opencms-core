{
  debug("getChildren");
  boolean userReadOnly=checkUser(context,false);
  Set<String> filterCollection=splitFilter(filter);
  boolean iaa=(includeAllowableActions == null ? false : includeAllowableActions.booleanValue());
  boolean ips=(includePathSegment == null ? false : includePathSegment.booleanValue());
  int skip=(skipCount == null ? 0 : skipCount.intValue());
  if (skip < 0) {
    skip=0;
  }
  int max=(maxItems == null ? Integer.MAX_VALUE : maxItems.intValue());
  if (max < 0) {
    max=Integer.MAX_VALUE;
  }
  File folder=getFile(folderId);
  if (!folder.isDirectory()) {
    throw new CmisObjectNotFoundException("Not a folder!");
  }
  if (context.isObjectInfoRequired()) {
    compileObjectType(context,folder,null,false,false,userReadOnly,objectInfos);
  }
  ObjectInFolderListImpl result=new ObjectInFolderListImpl();
  result.setObjects(new ArrayList<ObjectInFolderData>());
  result.setHasMoreItems(false);
  int count=0;
  for (  File child : folder.listFiles()) {
    if (child.isHidden() || child.getName().equals(SHADOW_FOLDER) || child.getPath().endsWith(SHADOW_EXT)) {
      continue;
    }
    count++;
    if (skip > 0) {
      skip--;
      continue;
    }
    if (result.getObjects().size() >= max) {
      result.setHasMoreItems(true);
      continue;
    }
    ObjectInFolderDataImpl objectInFolder=new ObjectInFolderDataImpl();
    objectInFolder.setObject(compileObjectType(context,child,filterCollection,iaa,false,userReadOnly,objectInfos));
    if (ips) {
      objectInFolder.setPathSegment(child.getName());
    }
    result.getObjects().add(objectInFolder);
  }
  result.setNumItems(BigInteger.valueOf(count));
  return result;
}
