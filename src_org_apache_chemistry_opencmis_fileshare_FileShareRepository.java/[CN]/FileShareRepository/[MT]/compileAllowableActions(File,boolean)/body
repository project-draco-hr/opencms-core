{
  if (file == null) {
    throw new IllegalArgumentException("File must not be null!");
  }
  if (!file.exists()) {
    throw new CmisObjectNotFoundException("Object not found!");
  }
  boolean isReadOnly=!file.canWrite();
  boolean isFolder=file.isDirectory();
  boolean isRoot=root.equals(file);
  Set<Action> aas=new HashSet<Action>();
  addAction(aas,Action.CAN_GET_OBJECT_PARENTS,!isRoot);
  addAction(aas,Action.CAN_GET_PROPERTIES,true);
  addAction(aas,Action.CAN_UPDATE_PROPERTIES,!userReadOnly && !isReadOnly);
  addAction(aas,Action.CAN_MOVE_OBJECT,!userReadOnly);
  addAction(aas,Action.CAN_DELETE_OBJECT,!userReadOnly && !isReadOnly && !isRoot);
  addAction(aas,Action.CAN_GET_ACL,true);
  if (isFolder) {
    addAction(aas,Action.CAN_GET_DESCENDANTS,true);
    addAction(aas,Action.CAN_GET_CHILDREN,true);
    addAction(aas,Action.CAN_GET_FOLDER_PARENT,!isRoot);
    addAction(aas,Action.CAN_GET_FOLDER_TREE,true);
    addAction(aas,Action.CAN_CREATE_DOCUMENT,!userReadOnly);
    addAction(aas,Action.CAN_CREATE_FOLDER,!userReadOnly);
    addAction(aas,Action.CAN_DELETE_TREE,!userReadOnly && !isReadOnly);
  }
 else {
    addAction(aas,Action.CAN_GET_CONTENT_STREAM,true);
    addAction(aas,Action.CAN_SET_CONTENT_STREAM,!userReadOnly && !isReadOnly);
    addAction(aas,Action.CAN_DELETE_CONTENT_STREAM,!userReadOnly && !isReadOnly);
    addAction(aas,Action.CAN_GET_ALL_VERSIONS,true);
  }
  AllowableActionsImpl result=new AllowableActionsImpl();
  result.setAllowableActions(aas);
  return result;
}
