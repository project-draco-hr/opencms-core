{
  if (VersioningState.NONE != versioningState) {
    throw new CmisConstraintException("Versioning not supported!");
  }
  File parent=getFile(folderId);
  if (!parent.isDirectory()) {
    throw new CmisObjectNotFoundException("Parent is not a folder!");
  }
  File source=getFile(sourceId);
  if (!source.isFile()) {
    throw new CmisObjectNotFoundException("Source is not a document!");
  }
  String name=source.getName();
  PropertiesImpl sourceProperties=new PropertiesImpl();
  readCustomProperties(source,sourceProperties,null,new ObjectInfoImpl());
  String typeId=getIdProperty(sourceProperties,PropertyIds.OBJECT_TYPE_ID);
  if (typeId == null) {
    typeId=TypeManager.DOCUMENT_TYPE_ID;
  }
  PropertiesImpl newProperties=new PropertiesImpl();
  for (  PropertyData<?> prop : sourceProperties.getProperties().values()) {
    if ((prop.getId().equals(PropertyIds.OBJECT_TYPE_ID)) || (prop.getId().equals(PropertyIds.CREATED_BY)) || (prop.getId().equals(PropertyIds.CREATION_DATE))|| (prop.getId().equals(PropertyIds.LAST_MODIFIED_BY))) {
      continue;
    }
    newProperties.addProperty(prop);
  }
  if (properties != null) {
    String newName=getStringProperty(properties,PropertyIds.NAME);
    if (newName != null) {
      if (!isValidName(newName)) {
        throw new CmisNameConstraintViolationException("Name is not valid!");
      }
      name=newName;
    }
    TypeDefinition type=types.getType(typeId);
    if (type == null) {
      throw new CmisObjectNotFoundException("Type '" + typeId + "' is unknown!");
    }
    for (    PropertyData<?> prop : properties.getProperties().values()) {
      PropertyDefinition<?> propType=type.getPropertyDefinitions().get(prop.getId());
      if (propType == null) {
        throw new CmisConstraintException("Property '" + prop.getId() + "' is unknown!");
      }
      if ((propType.getUpdatability() != Updatability.READWRITE)) {
        throw new CmisConstraintException("Property '" + prop.getId() + "' cannot be updated!");
      }
      if (isEmptyProperty(prop)) {
        throw new CmisConstraintException("Property '" + prop.getId() + "' must not be empty!");
      }
      newProperties.addProperty(prop);
    }
  }
  addPropertyId(newProperties,typeId,null,PropertyIds.OBJECT_TYPE_ID,typeId);
  addPropertyString(newProperties,typeId,null,PropertyIds.CREATED_BY,context.getUsername());
  addPropertyDateTime(newProperties,typeId,null,PropertyIds.CREATION_DATE,millisToCalendar(System.currentTimeMillis()));
  addPropertyString(newProperties,typeId,null,PropertyIds.LAST_MODIFIED_BY,context.getUsername());
  File newFile=new File(parent,name);
  if (newFile.exists()) {
    throw new CmisNameConstraintViolationException("Document already exists.");
  }
  try {
    newFile.createNewFile();
  }
 catch (  IOException e) {
    throw new CmisStorageException("Could not create file: " + e.getMessage(),e);
  }
  try {
    OutputStream out=new BufferedOutputStream(new FileOutputStream(newFile));
    InputStream in=new BufferedInputStream(new FileInputStream(source));
    byte[] buffer=new byte[BUFFER_SIZE];
    int b;
    while ((b=in.read(buffer)) > -1) {
      out.write(buffer,0,b);
    }
    out.flush();
    out.close();
    in.close();
  }
 catch (  Exception e) {
    throw new CmisStorageException("Could not roead or write content: " + e.getMessage(),e);
  }
  writePropertiesFile(newFile,newProperties);
  return getId(newFile);
}
