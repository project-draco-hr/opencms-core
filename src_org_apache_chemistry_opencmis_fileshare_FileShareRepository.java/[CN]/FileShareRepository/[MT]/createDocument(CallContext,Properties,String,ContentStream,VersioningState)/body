{
  debug("createDocument");
  checkUser(context,true);
  if ((properties == null) || (properties.getProperties() == null)) {
    throw new CmisInvalidArgumentException("Properties must be set!");
  }
  if (VersioningState.NONE != versioningState) {
    throw new CmisConstraintException("Versioning not supported!");
  }
  String typeId=getTypeId(properties);
  TypeDefinition type=types.getType(typeId);
  if (type == null) {
    throw new CmisObjectNotFoundException("Type '" + typeId + "' is unknown!");
  }
  Properties props=compileProperties(typeId,context.getUsername(),millisToCalendar(System.currentTimeMillis()),context.getUsername(),properties);
  String name=getStringProperty(properties,PropertyIds.NAME);
  if (!isValidName(name)) {
    throw new CmisNameConstraintViolationException("Name is not valid!");
  }
  File parent=getFile(folderId);
  if (!parent.isDirectory()) {
    throw new CmisObjectNotFoundException("Parent is not a folder!");
  }
  File newFile=new File(parent,name);
  if (newFile.exists()) {
    throw new CmisNameConstraintViolationException("Document already exists!");
  }
  try {
    newFile.createNewFile();
  }
 catch (  IOException e) {
    throw new CmisStorageException("Could not create file: " + e.getMessage());
  }
  if ((contentStream != null) && (contentStream.getStream() != null)) {
    try {
      OutputStream out=new BufferedOutputStream(new FileOutputStream(newFile),BUFFER_SIZE);
      InputStream in=new BufferedInputStream(contentStream.getStream(),BUFFER_SIZE);
      byte[] buffer=new byte[BUFFER_SIZE];
      int b;
      while ((b=in.read(buffer)) > -1) {
        out.write(buffer,0,b);
      }
      out.flush();
      out.close();
      in.close();
    }
 catch (    Exception e) {
      throw new CmisStorageException("Could not write content: " + e.getMessage(),e);
    }
  }
  writePropertiesFile(newFile,props);
  return getId(newFile);
}
