{
  Element rootElement=document.getRootElement();
  setEditorLabel(rootElement.elementText(N_LABEL));
  String widgetClass=rootElement.elementText(N_WIDGETEDITOR);
  if (CmsStringUtil.isNotEmpty(widgetClass)) {
    setWidgetEditor(widgetClass);
  }
  setEditorUri(editorUri);
  Iterator<Element> i=rootElement.element(N_RESOURCETYPES).elementIterator(N_TYPE);
  Map<String,String[]> resTypes=new HashMap<String,String[]>();
  while (i.hasNext()) {
    Element currentType=i.next();
    float ranking;
    String name=currentType.elementText(N_NAME);
    if (CmsStringUtil.isEmpty(name)) {
      logConfigurationError(Messages.get().getBundle().key(Messages.ERR_INVALID_RESTYPE_NAME_0),null);
      continue;
    }
    try {
      ranking=Float.parseFloat(currentType.elementText(N_RANKING));
    }
 catch (    Throwable t) {
      logConfigurationError(Messages.get().getBundle().key(Messages.ERR_INVALID_RESTYPE_RANKING_1,name),t);
      continue;
    }
    String mapTo=currentType.elementText(N_MAPTO);
    if (CmsStringUtil.isEmpty(mapTo)) {
      mapTo=null;
    }
    resTypes.put(name,new String[]{"" + ranking,mapTo});
  }
  i=rootElement.element(N_RESOURCETYPES).elementIterator(N_CLASS);
  while (i.hasNext()) {
    Element currentClass=i.next();
    String name=currentClass.elementText(N_NAME);
    List<String> assignedTypes=new ArrayList<String>();
    try {
      I_CmsEditorTypeMatcher matcher=(I_CmsEditorTypeMatcher)Class.forName(name).newInstance();
      assignedTypes=matcher.getAdditionalResourceTypes();
    }
 catch (    Throwable t) {
      logConfigurationError(Messages.get().getBundle().key(Messages.ERR_INVALID_RESTYPE_CLASS_1,name),t);
      continue;
    }
    float ranking;
    try {
      ranking=Float.parseFloat(currentClass.elementText(N_RANKING));
    }
 catch (    Throwable t) {
      logConfigurationError(Messages.get().getBundle().key(Messages.ERR_INVALID_RESTYPE_RANKING_1,name),t);
      continue;
    }
    String mapTo=currentClass.elementText(N_MAPTO);
    if ("".equals(mapTo)) {
      mapTo=null;
    }
    Iterator<String> j=assignedTypes.iterator();
    while (j.hasNext()) {
      String typeName=j.next();
      resTypes.put(typeName,new String[]{"" + ranking,mapTo});
    }
  }
  setResourceTypes(resTypes);
  i=document.getRootElement().element(N_USERAGENTS).elementIterator(N_AGENT);
  List<Pattern> pattern=new ArrayList<Pattern>();
  List<String> userAgents=new ArrayList<String>();
  while (i.hasNext()) {
    Element currentAgent=i.next();
    String agentName=currentAgent.getText();
    if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(agentName)) {
      userAgents.add(agentName);
      try {
        pattern.add(Pattern.compile(agentName));
      }
 catch (      PatternSyntaxException e) {
        logConfigurationError(Messages.get().getBundle().key(Messages.ERR_COMPILE_EDITOR_REGEX_1,agentName),e);
      }
    }
 else {
      logConfigurationError(Messages.get().getBundle().key(Messages.ERR_INVALID_USERAGENT_DEF_0),null);
    }
  }
  setBrowserPattern(pattern);
  setUserAgentsRegEx(userAgents);
}
