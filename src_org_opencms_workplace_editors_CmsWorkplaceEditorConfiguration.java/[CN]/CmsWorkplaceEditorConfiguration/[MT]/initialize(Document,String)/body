{
  setEditorLabel(document.getRootElement().elementText(C_NODE_EDITORLABEL));
  setEditorUri(editorUri);
  Iterator i=document.getRootElement().element(C_NODE_RESOURCETYPES).elementIterator(C_NODE_TYPE);
  Map resTypes=new HashMap();
  while (i.hasNext()) {
    Element currentType=(Element)i.next();
    float ranking;
    String name=currentType.elementText(C_NODE_NAME);
    if (name == null || "".equals(name.trim())) {
      logConfigurationError("Invalid resource type name.",null);
      continue;
    }
    try {
      ranking=Float.parseFloat(currentType.elementText(C_NODE_RANKING));
    }
 catch (    Throwable t) {
      logConfigurationError("Invalid ranking for resource type " + name + ".",t);
      continue;
    }
    String mapTo=currentType.elementText(C_NODE_MAPTO);
    if ("".equals(mapTo)) {
      mapTo=null;
    }
    resTypes.put(name,new String[]{"" + ranking,mapTo});
  }
  setResourceTypes(resTypes);
  i=document.getRootElement().element(C_NODE_USERAGENTS).elementIterator(C_NODE_AGENT);
  List pattern=new ArrayList();
  List userAgents=new ArrayList();
  while (i.hasNext()) {
    Element currentAgent=(Element)i.next();
    String agentName=currentAgent.getText();
    if (agentName != null && !"".equals(agentName.trim())) {
      userAgents.add(agentName);
      try {
        pattern.add(Pattern.compile(agentName));
      }
 catch (      PatternSyntaxException e) {
        logConfigurationError("Error in regular expression " + agentName + ".",e);
      }
    }
 else {
      logConfigurationError("Invalid user agent definition.",null);
    }
  }
  setBrowserPattern(pattern);
  setUserAgentsRegEx(userAgents);
}
