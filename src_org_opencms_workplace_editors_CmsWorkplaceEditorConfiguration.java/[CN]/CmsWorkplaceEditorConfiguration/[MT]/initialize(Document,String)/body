{
  setEditorLabel(document.getRootElement().elementText(N_LABEL));
  setEditorUri(editorUri);
  Iterator i=document.getRootElement().element(N_RESOURCETYPES).elementIterator(N_TYPE);
  Map resTypes=new HashMap();
  while (i.hasNext()) {
    Element currentType=(Element)i.next();
    float ranking;
    String name=currentType.elementText(N_NAME);
    if (name == null || "".equals(name.trim())) {
      logConfigurationError(Messages.get().key(Messages.ERR_INVALID_RESTYPE_NAME_0),null);
      continue;
    }
    try {
      ranking=Float.parseFloat(currentType.elementText(N_RANKING));
    }
 catch (    Throwable t) {
      logConfigurationError(Messages.get().key(Messages.ERR_INVALID_RESTYPE_RANKING_1,name),t);
      continue;
    }
    String mapTo=currentType.elementText(N_MAPTO);
    if ("".equals(mapTo)) {
      mapTo=null;
    }
    resTypes.put(name,new String[]{"" + ranking,mapTo});
  }
  i=document.getRootElement().element(N_RESOURCETYPES).elementIterator(N_CLASS);
  while (i.hasNext()) {
    Element currentClass=(Element)i.next();
    String name=currentClass.elementText(N_NAME);
    List assignedTypes=new ArrayList();
    try {
      I_CmsEditorTypeMatcher matcher=(I_CmsEditorTypeMatcher)Class.forName(name).newInstance();
      assignedTypes=matcher.getAdditionalResourceTypes();
    }
 catch (    Throwable t) {
      logConfigurationError(Messages.get().key(Messages.ERR_INVALID_RESTYPE_CLASS_1,name),t);
      continue;
    }
    float ranking;
    try {
      ranking=Float.parseFloat(currentClass.elementText(N_RANKING));
    }
 catch (    Throwable t) {
      logConfigurationError(Messages.get().key(Messages.ERR_INVALID_RESTYPE_RANKING_1,name),t);
      continue;
    }
    String mapTo=currentClass.elementText(N_MAPTO);
    if ("".equals(mapTo)) {
      mapTo=null;
    }
    Iterator j=assignedTypes.iterator();
    while (j.hasNext()) {
      String typeName=(String)j.next();
      resTypes.put(typeName,new String[]{"" + ranking,mapTo});
    }
  }
  setResourceTypes(resTypes);
  i=document.getRootElement().element(N_USERAGENTS).elementIterator(N_AGENT);
  List pattern=new ArrayList();
  List userAgents=new ArrayList();
  while (i.hasNext()) {
    Element currentAgent=(Element)i.next();
    String agentName=currentAgent.getText();
    if (agentName != null && !"".equals(agentName.trim())) {
      userAgents.add(agentName);
      try {
        pattern.add(Pattern.compile(agentName));
      }
 catch (      PatternSyntaxException e) {
        logConfigurationError(Messages.get().key(Messages.ERR_COMPILE_EDITOR_REGEX_1,agentName),e);
      }
    }
 else {
      logConfigurationError(Messages.get().key(Messages.ERR_INVALID_USERAGENT_DEF_0),null);
    }
  }
  setBrowserPattern(pattern);
  setUserAgentsRegEx(userAgents);
}
