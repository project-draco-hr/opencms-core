{
  String source=null, destination=null, uuidresource=null, userlastmodified=null, usercreated=null, flags=null, timestamp=null;
  long datelastmodified=0, datecreated=0, datereleased=0, dateexpired=0;
  List fileNodes=null, acentryNodes=null;
  Element currentElement=null, currentEntry=null;
  List properties=null;
  if (m_importingChannelData) {
    m_cms.getRequestContext().saveSiteRoot();
    m_cms.getRequestContext().setSiteRoot(I_CmsConstants.VFS_FOLDER_CHANNELS);
  }
  List immutableResources=new ArrayList();
  if (OpenCms.getImportExportManager().getImmutableResources() != null) {
    immutableResources.addAll(OpenCms.getImportExportManager().getImmutableResources());
  }
  if (excludeList != null) {
    immutableResources.addAll(excludeList);
  }
  List ignoredProperties=OpenCms.getImportExportManager().getIgnoredProperties();
  if (ignoredProperties == null) {
    ignoredProperties=Collections.EMPTY_LIST;
  }
  m_convertToXmlPage=OpenCms.getImportExportManager().convertToXmlPage();
  try {
    fileNodes=m_docXml.selectNodes("//" + I_CmsConstants.C_EXPORT_TAG_FILE);
    int importSize=fileNodes.size();
    for (int i=0; i < fileNodes.size(); i++) {
      m_report.print(" ( " + (i + 1) + " / "+ importSize+ " ) ",I_CmsReport.C_FORMAT_NOTE);
      currentElement=(Element)fileNodes.get(i);
      source=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_SOURCE);
      destination=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DESTINATION);
      String typeName=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_TYPE);
      I_CmsResourceType type=OpenCms.getResourceManager().getResourceType(typeName);
      if (!type.isFolder()) {
        uuidresource=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_UUIDRESOURCE);
      }
 else {
        uuidresource=null;
      }
      if ((timestamp=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DATELASTMODIFIED)) != null) {
        datelastmodified=convertTimestamp(timestamp);
      }
 else {
        datelastmodified=System.currentTimeMillis();
      }
      userlastmodified=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_USERLASTMODIFIED);
      userlastmodified=OpenCms.getImportExportManager().translateUser(userlastmodified);
      if ((timestamp=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DATECREATED)) != null) {
        datecreated=convertTimestamp(timestamp);
      }
 else {
        datecreated=System.currentTimeMillis();
      }
      usercreated=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_USERCREATED);
      usercreated=OpenCms.getImportExportManager().translateUser(usercreated);
      if ((timestamp=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DATERELEASED)) != null) {
        datereleased=convertTimestamp(timestamp);
      }
 else {
        datereleased=CmsResource.DATE_RELEASED_DEFAULT;
      }
      if ((timestamp=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DATEEXPIRED)) != null) {
        dateexpired=convertTimestamp(timestamp);
      }
 else {
        dateexpired=CmsResource.DATE_EXPIRED_DEFAULT;
      }
      flags=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_FLAGS);
      String translatedName=m_cms.getRequestContext().addSiteRoot(m_importPath + destination);
      if (type.isFolder()) {
        if (!CmsResource.isFolder(translatedName)) {
          translatedName+=I_CmsConstants.C_FOLDER_SEPARATOR;
        }
      }
      boolean resourceNotImmutable=checkImmutable(translatedName,immutableResources);
      translatedName=m_cms.getRequestContext().removeSiteRoot(translatedName);
      if (resourceNotImmutable) {
        m_report.print(m_report.key("report.importing"),I_CmsReport.C_FORMAT_NOTE);
        m_report.print(translatedName);
        m_report.print(m_report.key("report.dots"));
        properties=readPropertiesFromManifest(currentElement,propertyKey,propertyValue,ignoredProperties);
        CmsResource res=importResource(source,translatedName,type,uuidresource,datelastmodified,userlastmodified,datecreated,usercreated,datereleased,dateexpired,flags,properties);
        if (res != null) {
          List aceList=new ArrayList();
          acentryNodes=currentElement.selectNodes("*/" + I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ENTRY);
          for (int j=0; j < acentryNodes.size(); j++) {
            currentEntry=(Element)acentryNodes.get(j);
            String id=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_PRINCIPAL);
            String principalId=new CmsUUID().toString();
            String principal=id.substring(id.indexOf('.') + 1,id.length());
            try {
              if (id.startsWith(I_CmsPrincipal.C_PRINCIPAL_GROUP)) {
                principal=OpenCms.getImportExportManager().translateGroup(principal);
                principalId=m_cms.readGroup(principal).getId().toString();
              }
 else {
                principal=OpenCms.getImportExportManager().translateUser(principal);
                principalId=m_cms.readUser(principal).getId().toString();
              }
              String acflags=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_FLAGS);
              String allowed=((Element)currentEntry.selectNodes("./" + I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_PERMISSIONSET + "/"+ I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ALLOWEDPERMISSIONS).get(0)).getTextTrim();
              String denied=((Element)currentEntry.selectNodes("./" + I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_PERMISSIONSET + "/"+ I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_DENIEDPERMISSIONS).get(0)).getTextTrim();
              aceList.add(getImportAccessControlEntry(res,principalId,allowed,denied,acflags));
            }
 catch (            CmsException e) {
              if (LOG.isWarnEnabled()) {
                LOG.warn(Messages.get().key(Messages.LOG_IMPORTEXPORT_ERROR_IMPORTING_ACE_1,translatedName),e);
              }
              m_report.println(e);
            }
          }
          importAccessControlEntries(res,aceList);
          if (OpenCms.getLog(this).isInfoEnabled()) {
            OpenCms.getLog(this).info("( " + (i + 1) + " / "+ importSize+ " ) "+ m_report.key("report.importing")+ translatedName+ " ("+ destination+ ")"+ m_report.key("report.dots")+ m_report.key("report.ok"));
          }
        }
 else {
          m_report.print(m_report.key("report.skipping"),I_CmsReport.C_FORMAT_NOTE);
          m_report.println(translatedName);
          if (OpenCms.getLog(this).isInfoEnabled()) {
            OpenCms.getLog(this).info(" ( " + (i + 1) + " / "+ importSize+ " ) "+ m_report.key("report.skipping")+ translatedName);
          }
        }
      }
 else {
        m_report.print(m_report.key("report.skipping"),I_CmsReport.C_FORMAT_NOTE);
        m_report.println(translatedName);
        if (OpenCms.getLog(this).isInfoEnabled()) {
          OpenCms.getLog(this).info(" ( " + (i + 1) + " / "+ importSize+ " ) "+ m_report.key("report.skipping")+ translatedName);
        }
      }
    }
  }
 catch (  Exception e) {
    m_report.println(e);
    CmsMessageContainer message=Messages.get().container(Messages.ERR_IMPORTEXPORT_ERROR_IMPORTING_RESOURCES_0);
    if (LOG.isDebugEnabled()) {
      LOG.debug(message.key(),e);
    }
    throw new CmsImportExportException(message,e);
  }
 finally {
    if (m_importingChannelData) {
      m_cms.getRequestContext().restoreSiteRoot();
    }
  }
}
