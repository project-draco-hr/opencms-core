{
  String source=null, destination=null, type=null, uuidresource=null, uuidcontent=null, userlastmodified=null, usercreated=null, flags=null, timestamp=null;
  long datelastmodified=0, datecreated=0;
  int resType=I_CmsConstants.C_UNKNOWN_ID;
  int loaderId=I_CmsConstants.C_UNKNOWN_ID;
  List fileNodes=null, acentryNodes=null;
  Element currentElement=null, currentEntry=null;
  List properties=null;
  if (m_importingChannelData) {
    m_cms.getRequestContext().saveSiteRoot();
    m_cms.setContextToCos();
  }
  if (ignoredResources == null) {
    ignoredResources=new Vector();
  }
  List ignoredProperties=OpenCms.getImportExportManager().getIgnoredProperties();
  if (ignoredProperties == null) {
    ignoredProperties=Collections.EMPTY_LIST;
  }
  List immutableResources=OpenCms.getImportExportManager().getImmutableResources();
  if (immutableResources == null) {
    immutableResources=Collections.EMPTY_LIST;
  }
  m_convertToXmlPage=OpenCms.getImportExportManager().convertToXmlPage();
  try {
    fileNodes=m_docXml.selectNodes("//" + I_CmsConstants.C_EXPORT_TAG_FILE);
    int importSize=fileNodes.size();
    for (int i=0; i < fileNodes.size(); i++) {
      m_report.print(" ( " + (i + 1) + " / "+ importSize+ " ) ",I_CmsReport.C_FORMAT_NOTE);
      currentElement=(Element)fileNodes.get(i);
      source=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_SOURCE);
      destination=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DESTINATION);
      type=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_TYPE);
      if (C_RESOURCE_TYPE_NEWPAGE_NAME.equals(type)) {
        resType=C_RESOURCE_TYPE_NEWPAGE_ID;
      }
 else       if (C_RESOURCE_TYPE_PAGE_NAME.equals(type)) {
        resType=C_RESOURCE_TYPE_PAGE_ID;
      }
 else       if (C_RESOURCE_TYPE_LINK_NAME.equals(type)) {
        resType=C_RESOURCE_TYPE_LINK_ID;
      }
 else {
        resType=m_cms.getResourceTypeId(type);
        loaderId=m_cms.getResourceType(resType).getLoaderId();
      }
      if (resType != CmsResourceTypeFolder.C_RESOURCE_TYPE_ID) {
        uuidresource=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_UUIDRESOURCE);
        uuidcontent=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_UUIDCONTENT);
      }
 else {
        uuidresource=null;
        uuidcontent=null;
      }
      if ((timestamp=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DATELASTMODIFIED)) != null) {
        datelastmodified=Long.parseLong(timestamp);
      }
 else {
        datelastmodified=System.currentTimeMillis();
      }
      userlastmodified=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_USERLASTMODIFIED);
      userlastmodified=OpenCms.getImportExportManager().translateUser(userlastmodified);
      if ((timestamp=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DATECREATED)) != null) {
        datecreated=Long.parseLong(timestamp);
      }
 else {
        datecreated=System.currentTimeMillis();
      }
      usercreated=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_USERCREATED);
      usercreated=OpenCms.getImportExportManager().translateUser(usercreated);
      flags=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_FLAGS);
      String translatedName=m_cms.getRequestContext().addSiteRoot(m_importPath + destination);
      if (CmsResourceTypeFolder.C_RESOURCE_TYPE_NAME.equals(type)) {
        translatedName+=I_CmsConstants.C_FOLDER_SEPARATOR;
      }
      translatedName=m_cms.getRequestContext().getDirectoryTranslator().translateResource(translatedName);
      boolean resourceNotImmutable=checkImmutable(translatedName,immutableResources);
      translatedName=m_cms.getRequestContext().removeSiteRoot(translatedName);
      if (resourceNotImmutable && (!ignoredResources.contains(translatedName))) {
        m_report.print(m_report.key("report.importing"),I_CmsReport.C_FORMAT_NOTE);
        m_report.print(translatedName);
        m_report.print(m_report.key("report.dots"));
        properties=readPropertiesFromManifest(currentElement,resType,propertyKey,propertyValue,ignoredProperties);
        CmsResource res=importResource(source,destination,resType,loaderId,uuidresource,uuidcontent,datelastmodified,userlastmodified,datecreated,usercreated,flags,properties);
        if (res != null) {
          acentryNodes=currentElement.selectNodes("*/" + I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ENTRY);
          for (int j=0; j < acentryNodes.size(); j++) {
            currentEntry=(Element)acentryNodes.get(j);
            String id=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_PRINCIPAL);
            String principalId=new CmsUUID().toString();
            String principal=id.substring(id.indexOf(".") + 1,id.length());
            try {
              if (id.startsWith(I_CmsPrincipal.C_PRINCIPAL_GROUP)) {
                principal=OpenCms.getImportExportManager().translateGroup(principal);
                principalId=m_cms.readGroup(principal).getId().toString();
              }
 else {
                principal=OpenCms.getImportExportManager().translateUser(principal);
                principalId=m_cms.readUser(principal).getId().toString();
              }
              String acflags=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_FLAGS);
              String allowed=((Element)currentEntry.selectNodes("./" + I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_PERMISSIONSET + "/"+ I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ALLOWEDPERMISSIONS).get(0)).getTextTrim();
              String denied=((Element)currentEntry.selectNodes("./" + I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_PERMISSIONSET + "/"+ I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_DENIEDPERMISSIONS).get(0)).getTextTrim();
              addImportAccessControlEntry(res,principalId,allowed,denied,acflags);
            }
 catch (            CmsException e) {
              OpenCms.getLog(this).warn("Could not import ACE for resource " + translatedName,e);
              m_report.println(e);
            }
          }
          importAccessControlEntries(res);
        }
 else {
          m_report.print(m_report.key("report.skipping"),I_CmsReport.C_FORMAT_NOTE);
          m_report.println(translatedName);
        }
      }
 else {
        m_report.print(m_report.key("report.skipping"),I_CmsReport.C_FORMAT_NOTE);
        m_report.println(translatedName);
      }
    }
  }
 catch (  Exception exc) {
    m_report.println(exc);
    throw new CmsException(CmsException.C_UNKNOWN_EXCEPTION,exc);
  }
 finally {
    if (m_importingChannelData) {
      m_cms.getRequestContext().restoreSiteRoot();
    }
  }
}
