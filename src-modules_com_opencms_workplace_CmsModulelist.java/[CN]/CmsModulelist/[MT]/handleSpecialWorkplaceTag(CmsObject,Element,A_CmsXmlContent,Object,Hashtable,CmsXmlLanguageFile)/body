{
  String listMethod=n.getAttribute(CmsWorkplaceDefault.C_MODULELIST_METHOD);
  CmsXmlWpTemplateFile listdef=getModulelistDefinitions(cms);
  Method callingMethod=null;
  Vector list=new Vector();
  try {
    callingMethod=callingObject.getClass().getMethod(listMethod,new Class[]{CmsObject.class,CmsXmlLanguageFile.class});
    list=(Vector)callingMethod.invoke(callingObject,new Object[]{cms,lang});
  }
 catch (  NoSuchMethodException exc) {
    throwException("Could not find method " + listMethod + " in calling class "+ callingObject.getClass().getName()+ " for generating projectlist content.",CmsLegacyException.C_NOT_FOUND);
  }
catch (  InvocationTargetException targetEx) {
    Throwable e=targetEx.getTargetException();
    if (!(e instanceof CmsException)) {
      throwException("User method " + listMethod + " in calling class "+ callingObject.getClass().getName()+ " throwed an exception. "+ e);
    }
 else {
      throw (CmsException)e;
    }
  }
catch (  Exception exc2) {
    throwException("User method " + listMethod + " in calling class "+ callingObject.getClass().getName()+ " was found but could not be invoked. "+ exc2,CmsLegacyException.C_XML_NO_USER_METHOD);
  }
  CmsRequestContext reqCont=cms.getRequestContext();
  if (reqCont.currentProject().isOnlineProject()) {
    listdef.setData("menue","menueonline");
  }
 else {
    listdef.setData("menue","modulemenue");
  }
  StringBuffer result=new StringBuffer();
  for (int i=0; i < list.size(); i++) {
    String currentModule=(String)list.elementAt(i);
    listdef.setData(CmsWorkplaceDefault.C_MODULELIST_NAME,currentModule);
    listdef.setData(CmsWorkplaceDefault.C_MODULELIST_NICE_NAME,OpenCms.getModuleManager().getModule(currentModule).getNiceName());
    listdef.setData(CmsWorkplaceDefault.C_MODULELIST_VERSION,OpenCms.getModuleManager().getModule(currentModule).getVersion().toString());
    listdef.setData(CmsWorkplaceDefault.C_MODULELIST_AUTHOR,OpenCms.getModuleManager().getModule(currentModule).getAuthorName());
    listdef.setData(CmsWorkplaceDefault.C_MODULELIST_DATECREATED,CmsDateUtil.getDateShort(OpenCms.getModuleManager().getModule(currentModule).getDateCreated()));
    if (OpenCms.getModuleManager().getModule(currentModule).getDateInstalled() == CmsModule.DEFAULT_DATE) {
      listdef.setData(CmsWorkplaceDefault.C_MODULELIST_DATEUPLOADED,"   -   ");
    }
 else {
      listdef.setData(CmsWorkplaceDefault.C_MODULELIST_DATEUPLOADED,CmsDateUtil.getDateShort(OpenCms.getModuleManager().getModule(currentModule).getDateInstalled()));
    }
    listdef.setData(CmsWorkplaceDefault.C_MODULELIST_IDX,new Integer(i).toString());
    result.append(listdef.getProcessedDataValue(CmsWorkplaceDefault.C_TAG_MODULELIST_DEFAULT,callingObject,parameters));
  }
  return result.toString();
}
