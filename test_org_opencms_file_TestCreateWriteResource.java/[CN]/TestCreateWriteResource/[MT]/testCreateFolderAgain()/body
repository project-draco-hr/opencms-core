{
  CmsObject cms=getCmsObject();
  echo("Testing to create an existing folder again");
  String resourcename="/folder1/test2/";
  storeResources(cms,resourcename);
  long timestamp=System.currentTimeMillis();
  assertState(cms,resourcename,CmsResource.STATE_UNCHANGED);
  cms.lockResource(resourcename);
  try {
    cms.createResource(resourcename,CmsResourceTypeFolder.getStaticTypeId(),null,null);
    fail("Existing resource '" + resourcename + "' was not detected!");
  }
 catch (  CmsVfsResourceAlreadyExistsException e) {
  }
  CmsResource original=cms.readResource(resourcename);
  cms.deleteResource(resourcename,CmsResource.DELETE_PRESERVE_SIBLINGS);
  cms.createResource(resourcename,CmsResourceTypeFolder.getStaticTypeId(),null,null);
  assertIsFolder(cms,resourcename);
  assertProject(cms,resourcename,cms.getRequestContext().getCurrentProject());
  assertState(cms,resourcename,CmsResource.STATE_CHANGED);
  assertDateLastModifiedAfter(cms,resourcename,timestamp);
  assertUserLastModified(cms,resourcename,cms.getRequestContext().getCurrentUser());
  assertDateCreated(cms,resourcename,original.getDateCreated());
  assertUserCreated(cms,resourcename,cms.readUser(original.getUserCreated()));
  CmsResource created=cms.readResource(resourcename);
  if (!created.getResourceId().equals(original.getResourceId())) {
    fail("A created folder that replaced a deleted folder must have the same resource id!");
  }
  cms.unlockProject(cms.getRequestContext().getCurrentProject().getUuid());
  OpenCms.getPublishManager().publishProject(cms);
  OpenCms.getPublishManager().waitWhileRunning();
  assertState(cms,resourcename,CmsResource.STATE_UNCHANGED);
}
