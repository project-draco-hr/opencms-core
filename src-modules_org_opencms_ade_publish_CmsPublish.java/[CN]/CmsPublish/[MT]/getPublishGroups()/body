{
  Set<CmsResource> published=getAlreadyPublishedResources();
  Set<CmsResource> exclude=new HashSet<CmsResource>(published);
  ResourcesAndRelated permissions=getResourcesWithoutPermissions(exclude);
  exclude.addAll(permissions.getResources());
  exclude.addAll(permissions.getRelatedResources());
  ResourcesAndRelated locked=getBlockingLockedResources(exclude);
  exclude.clear();
  exclude.addAll(published);
  exclude.addAll(permissions.getResources());
  exclude.addAll(locked.getResources());
  ResourcesAndRelated pubResources=new ResourcesAndRelated();
  pubResources.getResources().addAll(getPublishResources().getResources());
  pubResources.getResources().removeAll(exclude);
  pubResources.getRelatedResources().addAll(getPublishResources().getRelatedResources());
  pubResources.getRelatedResources().removeAll(permissions.getRelatedResources());
  pubResources.getRelatedResources().removeAll(locked.getRelatedResources());
  if (getPublishResources().getResources().isEmpty()) {
    return new ArrayList<CmsPublishGroup>();
  }
  List<CmsResource> sortedResources=new ArrayList<CmsResource>(getPublishResources().getResources());
  Collections.sort(sortedResources,I_CmsResource.COMPARE_DATE_LAST_MODIFIED);
  Set<CmsResource> allPubRes=new HashSet<CmsResource>(pubResources.getRelatedResources());
  allPubRes.addAll(pubResources.getResources());
  List<CmsResource> pubList=new ArrayList<CmsResource>();
  try {
    long t1=System.currentTimeMillis();
    pubList=OpenCms.getPublishManager().getUsersPubList(m_cms);
    long t2=System.currentTimeMillis();
    System.out.println("time for reading publish list: " + (t2 - t1));
  }
 catch (  CmsException e) {
    LOG.error(e.getLocalizedMessage(),e);
  }
  CmsPublishGroupHelper groupHelper=new CmsPublishGroupHelper(m_locale);
  Map<Long,Integer> daysMap=groupHelper.computeDaysForResources(sortedResources);
  Map<GroupAge,List<CmsResource>> resourcesByAge=groupHelper.partitionPublishResourcesByAge(sortedResources,daysMap);
  List<List<CmsResource>> youngGroups=groupHelper.partitionYoungResources(resourcesByAge.get(GroupAge.young));
  List<List<CmsResource>> mediumGroups=groupHelper.partitionMediumResources(resourcesByAge.get(GroupAge.medium),daysMap);
  List<CmsResource> oldGroup=resourcesByAge.get(GroupAge.old);
  List<CmsPublishGroup> resultGroups=new ArrayList<CmsPublishGroup>();
  for (  List<CmsResource> groupRes : youngGroups) {
    List<CmsPublishResource> groupPubRes=new ArrayList<CmsPublishResource>();
    for (    CmsResource res : groupRes) {
      CmsPublishResource pubRes=createPublishResource(res,pubList,allPubRes,published,permissions,locked);
      groupPubRes.add(pubRes);
    }
    String name=groupHelper.getPublishGroupName(groupRes,GroupAge.young);
    resultGroups.add(new CmsPublishGroup(name,groupPubRes));
  }
  for (  List<CmsResource> groupRes : mediumGroups) {
    List<CmsPublishResource> groupPubRes=new ArrayList<CmsPublishResource>();
    for (    CmsResource res : groupRes) {
      CmsPublishResource pubRes=createPublishResource(res,pubList,allPubRes,published,permissions,locked);
      groupPubRes.add(pubRes);
    }
    String name=groupHelper.getPublishGroupName(groupRes,GroupAge.medium);
    resultGroups.add(new CmsPublishGroup(name,groupPubRes));
  }
  if (!oldGroup.isEmpty()) {
    String oldName=groupHelper.getPublishGroupName(oldGroup,GroupAge.old);
    List<CmsPublishResource> oldRes=new ArrayList<CmsPublishResource>();
    for (    CmsResource res : oldGroup) {
      CmsPublishResource pubRes=createPublishResource(res,pubList,allPubRes,published,permissions,locked);
      oldRes.add(pubRes);
    }
    resultGroups.add(new CmsPublishGroup(oldName,oldRes));
  }
  return resultGroups;
}
