{
  report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_START_COLLECTING_FILES_TO_SEARCH_IN_0),I_CmsReport.FORMAT_HEADLINE);
  List<CmsResource> resources=new ArrayList<CmsResource>();
  Iterator<String> iterPaths=m_settings.getPaths().iterator();
  while (iterPaths.hasNext()) {
    String path=iterPaths.next();
    try {
      List<CmsResource> tmpResources=getCms().readResources(path,CmsResourceFilter.ALL.addRequireFile().addExcludeState(CmsResource.STATE_DELETED).addRequireTimerange().addRequireVisible());
      if ((tmpResources != null) && !tmpResources.isEmpty()) {
        resources.addAll(tmpResources);
      }
    }
 catch (    CmsException e) {
      LOG.error(Messages.get().container(Messages.RPT_SOURCESEARCH_ERROR_READING_RESOURCES_1,path),e);
      report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_ERROR_READING_RESOURCES_1,path),I_CmsReport.FORMAT_ERROR);
      return false;
    }
  }
  if (resources.isEmpty()) {
    report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_NO_FILES_TO_SEARCH_IN_0),I_CmsReport.FORMAT_NOTE);
    return true;
  }
  int nrOfFiles=resources.size();
  report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_NR_OF_FILES_TO_SEARCH_IN_1,new Integer(nrOfFiles)),I_CmsReport.FORMAT_NOTE);
  if (replace) {
    report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_START_SEARCHING_REPLACING_0),I_CmsReport.FORMAT_HEADLINE);
  }
 else {
    report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_START_SEARCHING_0),I_CmsReport.FORMAT_HEADLINE);
  }
  Iterator<CmsResource> iterResources=resources.iterator();
  int fileCounter=0;
  int matchedFiles=0;
  while (iterResources.hasNext()) {
    CmsResource cmsResource=iterResources.next();
    fileCounter+=1;
    CmsFile cmsFile=null;
    try {
      cmsFile=getCms().readFile(cmsResource);
    }
 catch (    CmsException e) {
      report.print(org.opencms.report.Messages.get().container(Messages.RPT_SOURCESEARCH_COULD_NOT_READ_FILE_0),I_CmsReport.FORMAT_ERROR);
      report.println(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_FAILED_0),I_CmsReport.FORMAT_ERROR);
      m_errorSearch+=1;
      continue;
    }
    report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_SUCCESSION_2,String.valueOf(fileCounter),String.valueOf(nrOfFiles)),I_CmsReport.FORMAT_NOTE);
    report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_ARGUMENT_1,report.removeSiteRoot(cmsResource.getRootPath())));
    report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_DOTS_0),I_CmsReport.FORMAT_DEFAULT);
    byte[] contents=cmsFile.getContents();
    String content=new String(contents);
    boolean matched=false;
    Matcher matcher=null;
    try {
      matcher=Pattern.compile(m_settings.getSearchpattern()).matcher(content);
      if (matcher.find()) {
        m_matchedResources.add(cmsResource);
        matched=true;
        matchedFiles+=1;
        if (replace) {
          report.print(Messages.get().container(Messages.RPT_SOURCESEARCH_MATCHED_0),I_CmsReport.FORMAT_OK);
        }
 else {
          report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_MATCHED_0),I_CmsReport.FORMAT_OK);
        }
      }
 else {
        report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_NOT_MATCHED_0),I_CmsReport.FORMAT_NOTE);
      }
    }
 catch (    Exception e) {
      report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_APPLY_PATTERN_ERROR_1,e),I_CmsReport.FORMAT_ERROR);
      m_errorSearch+=1;
      continue;
    }
    if (replace && matched) {
      try {
        if (!lockResource(cmsObject,cmsResource,report)) {
          report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_LOCKED_FILE_0,cmsObject.getSitePath(cmsResource)),I_CmsReport.FORMAT_ERROR);
          continue;
        }
      }
 catch (      CmsException e) {
        report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_LOCKED_FILE_0,cmsObject.getSitePath(cmsResource)),I_CmsReport.FORMAT_ERROR);
        if (LOG.isErrorEnabled()) {
          LOG.error(e.getMessageContainer(),e);
        }
        continue;
      }
      content=matcher.replaceAll(m_settings.getReplacepattern());
      cmsFile.setContents(content.getBytes());
      try {
        cmsObject.writeFile(cmsFile);
      }
 catch (      Exception e) {
        m_errorUpdate+=1;
        report.println(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_FAILED_0),I_CmsReport.FORMAT_ERROR);
        if (LOG.isErrorEnabled()) {
          LOG.error(e.toString());
        }
        continue;
      }
      try {
        cmsObject.unlockResource(cmsObject.getSitePath(cmsResource));
      }
 catch (      CmsException e) {
        m_errorUpdate+=1;
        report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_UNLOCK_FILE_0),I_CmsReport.FORMAT_WARNING);
        if (LOG.isErrorEnabled()) {
          LOG.error(e.getMessageContainer(),e);
        }
        continue;
      }
      report.println(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_OK_0),I_CmsReport.FORMAT_OK);
    }
  }
  if (replace) {
    report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_END_SEARCHING_REPLACING_0),I_CmsReport.FORMAT_HEADLINE);
  }
 else {
    report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_END_SEARCHING_0),I_CmsReport.FORMAT_HEADLINE);
  }
  report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_RESULT_0),I_CmsReport.FORMAT_HEADLINE);
  report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_NR_OF_FILES_TO_SEARCH_IN_1,new Integer(nrOfFiles).toString()),I_CmsReport.FORMAT_NOTE);
  report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_NR_OF_FILES_MATCHED_1,new Integer(matchedFiles).toString()),I_CmsReport.FORMAT_NOTE);
  report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_NUMBER_OF_SEARCH_ERRORS_1,new Integer(m_errorSearch).toString()),I_CmsReport.FORMAT_NOTE);
  if (replace) {
    report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_NUMBER_OF_REPLACE_ERRORS_1,new Integer(m_errorUpdate).toString()),I_CmsReport.FORMAT_NOTE);
    report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_LOCKED_FILES_1,new Integer(m_lockedFiles).toString()),I_CmsReport.FORMAT_NOTE);
    if (matchedFiles == 0) {
      report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_NO_FILES_TO_REPLACE_FOUND_0),I_CmsReport.FORMAT_OK);
    }
 else {
      report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_CLICK_OK_TO_GET_LIST_0),I_CmsReport.FORMAT_OK);
    }
    if (m_lockedFiles > 0) {
      report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_REPLACE_FAILED_0),I_CmsReport.FORMAT_ERROR);
    }
 else {
      report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_REPLACE_SUCCESS_0),I_CmsReport.FORMAT_OK);
    }
  }
 else {
    if (matchedFiles == 0) {
      report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_NO_FILES_FOUND_0),I_CmsReport.FORMAT_OK);
    }
 else {
      report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_CLICK_OK_TO_GET_LIST_0),I_CmsReport.FORMAT_OK);
    }
    if (m_errorSearch > 0) {
      report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_SEARCH_FAILED_0),I_CmsReport.FORMAT_ERROR);
    }
 else {
      report.println(Messages.get().container(Messages.RPT_SOURCESEARCH_SEARCH_SUCCESS_0),I_CmsReport.FORMAT_OK);
    }
  }
  return true;
}
