{
  int streamInput;
  StringBuffer htmlString=new StringBuffer();
  Node node;
  String outString="";
  m_tidy.setShowWarnings(false);
  m_tidy.setQuiet(true);
  if (m_tidyConfFileDefined == false) {
    m_tidy.setOnlyErrors(false);
    m_tidy.setTidyMark(false);
  }
  PrintWriter errorLog=new PrintWriter(new ByteArrayOutputStream(),true);
  m_tidy.setErrout(errorLog);
  try {
    while ((streamInput=input.available()) > 0) {
      byte[] b=new byte[streamInput];
      int result=input.read(b);
      if (result == -1) {
        break;
      }
      htmlString.append(new String(b));
    }
  }
 catch (  IOException e) {
    System.err.println("Conversion error: " + e.toString());
    return;
  }
  outString=htmlString.toString();
  outString=m_tools.scanContent(outString,m_configuration.getReplaceContent());
  InputStream in=new ByteArrayInputStream(outString.getBytes());
  node=m_tidy.parseDOM(in,null);
  if (m_tidy.getParseErrors() != 0) {
    System.err.println("Conversion error: HTML code has errors!");
  }
  this.printDocument(node);
  outString=m_tools.scanString(m_tempString.toString(),m_configuration.getReplaceStrings());
  outString=this.cleanOutput(outString);
  try {
    output.write(outString.getBytes(),0,outString.length());
    output.close();
  }
 catch (  IOException e) {
    System.err.println("Conversion error: " + e.toString());
    return;
  }
}
