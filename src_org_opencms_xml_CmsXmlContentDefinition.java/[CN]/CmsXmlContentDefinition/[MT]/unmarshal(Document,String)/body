{
  Element root=document.getRootElement();
  if (!XSD_NODE_SCHEMA.equals(root.getQName())) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: schema node expected");
  }
  List includes=root.elements(XSD_NODE_INCLUDE);
  if (includes.size() < 1) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: Requires at last one include");
  }
  Element include=(Element)includes.get(0);
  Attribute target=include.attribute(XSD_ATTRIBUTE_SCHEMA_LOCATION);
  if (!XSD_INCLUDE_OPENCMS.equals(target.getValue())) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: First include must point to OpenCms master schema");
  }
  List elements=root.elements(XSD_NODE_ELEMENT);
  Element main=(Element)elements.get(0);
  Attribute nameAttr=main.attribute(XSD_ATTRIBUTE_NAME);
  Attribute typeAttr=main.attribute(XSD_ATTRIBUTE_TYPE);
  if ((nameAttr == null) || (typeAttr == null)) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: name and type attribute expected");
  }
  String name=nameAttr.getValue();
  if (!name.endsWith("s")) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: Name attribute value must end with \"s\"");
  }
  name=name.substring(0,name.length() - 1);
  if (name.length() == 0) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: Name missing");
  }
  String listName=createListName(name);
  String typeName=createTypeName(name);
  if (!listName.equals(typeAttr.getValue())) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: Invalid list name");
  }
  List complexTypes=root.elements(XSD_NODE_COMPLEXTYPE);
  if (complexTypes.size() != 2) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: Requires two complex types");
  }
  Element complex1=(Element)complexTypes.get(0);
  Element complex2=(Element)complexTypes.get(1);
  String name1=complex1.attributeValue(XSD_ATTRIBUTE_NAME);
  String name2=complex2.attributeValue(XSD_ATTRIBUTE_NAME);
  if (!(listName.equals(name1) || listName.equals(name2))) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: List name must be equal to one of the complex type names");
  }
  if (!(typeName.equals(name1) || typeName.equals(name2))) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: Type name must be equal to one of the complex type names");
  }
  Element listElement;
  Element typeElement;
  if (listName.equals(name1)) {
    listElement=complex1;
    typeElement=complex2;
  }
 else {
    listElement=complex2;
    typeElement=complex1;
  }
  Element listSequence=(Element)listElement.elements().get(0);
  if (!XSD_NODE_SEQUENCE.equals(listSequence.getQName())) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: sequence node expected");
  }
  Element listSequenceElement=(Element)listSequence.elements().get(0);
  if (!XSD_NODE_ELEMENT.equals(listSequenceElement.getQName())) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: element node expected");
  }
  if (!name.equals(listSequenceElement.attributeValue(XSD_ATTRIBUTE_NAME))) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: wrong name");
  }
  if (!typeName.equals(listSequenceElement.attributeValue(XSD_ATTRIBUTE_TYPE))) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: wrong type name");
  }
  if (!XSD_ATTRIBUTE_VALUE_ZERO.equals(listSequenceElement.attributeValue(XSD_ATTRIBUTE_MIN_OCCURS))) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: minOccurs must be zero");
  }
  if (!XSD_ATTRIBUTE_VALUE_UNBOUNDED.equals(listSequenceElement.attributeValue(XSD_ATTRIBUTE_MAX_OCCURS))) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: maxOccurs must be unbounded");
  }
  List typeElements=typeElement.elements();
  if ((typeElements.size() != 2) && (typeElements.size() != 3)) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: Expected two type elements");
  }
  Element type1=(Element)typeElements.get(0);
  Element type2=(Element)typeElements.get(1);
  Element typeSequence=null;
  Element typeAttribute=null;
  if (XSD_NODE_SEQUENCE.equals(type1.getQName())) {
    typeSequence=type1;
  }
  if (XSD_NODE_ATTRIBUTE.equals(type2.getQName())) {
    typeAttribute=type2;
  }
  if ((typeSequence == null) || (typeAttribute == null)) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure");
  }
  if (!XSD_ATTRIBUTE_VALUE_LANGUAGE.equals(typeAttribute.attributeValue(XSD_ATTRIBUTE_NAME))) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure");
  }
  if (!CmsXmlLocaleValue.C_TYPE_NAME.equals(typeAttribute.attributeValue(XSD_ATTRIBUTE_TYPE))) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure");
  }
  if (!XSD_ATTRIBUTE_VALUE_REQUIRED.equals(typeAttribute.attributeValue(XSD_ATTRIBUTE_USE)) && !XSD_ATTRIBUTE_VALUE_OPTIONAL.equals(typeAttribute.attributeValue(XSD_ATTRIBUTE_USE))) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure");
  }
  List typeSequenceElements=typeSequence.elements();
  if (typeSequenceElements.size() < 1) {
    throw new CmsXmlException("Invalid OpenCms content definition XML schema structure");
  }
  CmsXmlContentDefinition result=new CmsXmlContentDefinition(name,schemaLocation);
  if (includes.size() > 1) {
    for (int i=1; i < includes.size(); i++) {
      Element inc=(Element)includes.get(i);
      String schemaLoc=inc.attribute(XSD_ATTRIBUTE_SCHEMA_LOCATION).getValue();
      EntityResolver resolver=document.getEntityResolver();
      InputSource source=null;
      try {
        source=resolver.resolveEntity(null,schemaLoc);
      }
 catch (      SAXException e) {
        throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: Unable to resolve included schema '" + schemaLoc + "'");
      }
catch (      IOException e) {
        throw new CmsXmlException("Invalid OpenCms content definition XML schema structure: Unable to resolve included schema '" + schemaLoc + "'");
      }
      CmsXmlContentDefinition xmlContentDefinition=unmarshal(source,schemaLoc,resolver);
      result.addInclude(xmlContentDefinition);
    }
  }
  CmsXmlContentTypeManager typeManager=OpenCms.getXmlContentTypeManager();
  Iterator i=typeSequenceElements.iterator();
  while (i.hasNext()) {
    result.addType(typeManager.getContentType((Element)i.next(),result.getIncludes()));
  }
  List annotations=root.elements(XSD_NODE_ANNOTATION);
  I_CmsXmlContentHandler contentHandler=null;
  Element appInfoElement=null;
  if (annotations.size() > 0) {
    List appinfos=((Element)annotations.get(0)).elements(XSD_NODE_APPINFO);
    if (appinfos.size() > 0) {
      appInfoElement=(Element)appinfos.get(0);
      Element handlerElement=appInfoElement.element("handler");
      if (handlerElement != null) {
        String className=handlerElement.attributeValue("class");
        if (className != null) {
          contentHandler=OpenCms.getXmlContentTypeManager().getContentHandler(className,schemaLocation);
        }
      }
    }
  }
  if (contentHandler == null) {
    contentHandler=OpenCms.getXmlContentTypeManager().getContentHandler(CmsDefaultXmlContentHandler.class.getName(),name);
  }
  contentHandler.initialize(appInfoElement,result);
  result.m_contentHandler=contentHandler;
  result.freeze();
  return result;
}
