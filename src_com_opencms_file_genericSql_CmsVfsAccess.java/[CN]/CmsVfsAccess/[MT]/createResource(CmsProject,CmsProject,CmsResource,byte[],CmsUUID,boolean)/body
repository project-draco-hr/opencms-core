{
  String usedPool=null;
  String usedStatement=null;
  Connection con=null;
  PreparedStatement statement=null;
  if (newResource.getResourceName().length() > C_MAX_LENGTH_RESOURCE_NAME) {
    throw new CmsException("[" + this.getClass().getName() + "] "+ "Resourcename too long(>"+ C_MAX_LENGTH_RESOURCE_NAME+ ") ",CmsException.C_BAD_NAME);
  }
  int state=0;
  CmsUUID modifiedByUserId=userId;
  long dateModified=newResource.isTouched() ? newResource.getDateLastModified() : System.currentTimeMillis();
  if (project.equals(onlineProject)) {
    state=newResource.getState();
    usedPool=m_poolNameOnline;
    usedStatement="_ONLINE";
    modifiedByUserId=newResource.getResourceLastModifiedBy();
    dateModified=newResource.getDateLastModified();
  }
 else {
    state=C_STATE_NEW;
    usedPool=m_poolName;
    usedStatement="";
  }
  try {
    readResource(project,newResource.getResourceName());
    throw new CmsException("[" + this.getClass().getName() + "] ",CmsException.C_FILE_EXISTS);
  }
 catch (  CmsException e) {
    if (e.getType() == CmsException.C_RESOURCE_DELETED) {
      if (isFolder) {
        removeFolder(project.getId(),(CmsFolder)newResource);
      }
 else {
        removeFile(project.getId(),newResource.getResourceName());
      }
      state=C_STATE_CHANGED;
    }
    if (e.getType() == CmsException.C_FILE_EXISTS) {
      throw e;
    }
  }
  CmsUUID newFileId=CmsUUID.getNullUUID();
  CmsUUID resourceId=new CmsUUID();
  try {
    con=DriverManager.getConnection(usedPool);
    if (!isFolder) {
      newFileId=new CmsUUID();
      try {
        createFileContent(newFileId,filecontent,0,usedPool,usedStatement);
      }
 catch (      CmsException se) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(C_OPENCMS_CRITICAL,"[CmsDbAccess] " + se.getMessage());
        }
      }
    }
    statement=con.prepareStatement(m_SqlQueries.get("C_RESOURCES_WRITE" + usedStatement));
    statement.setString(1,resourceId.toString());
    statement.setString(2,newResource.getParentId().toString());
    statement.setString(3,newResource.getResourceName());
    statement.setInt(4,newResource.getType());
    statement.setInt(5,newResource.getFlags());
    statement.setString(6,newResource.getOwnerId().toString());
    statement.setString(7,newResource.getGroupId().toString());
    statement.setInt(8,project.getId());
    statement.setString(9,newFileId.toString());
    statement.setInt(10,newResource.getAccessFlags());
    statement.setInt(11,state);
    statement.setString(12,newResource.isLockedBy().toString());
    statement.setInt(13,newResource.getLauncherType());
    statement.setString(14,newResource.getLauncherClassname());
    statement.setTimestamp(15,new Timestamp(newResource.getDateCreated()));
    statement.setTimestamp(16,new Timestamp(dateModified));
    statement.setInt(17,newResource.getLength());
    statement.setString(18,modifiedByUserId.toString());
    statement.executeUpdate();
    statement.close();
  }
 catch (  SQLException e) {
    throw new CmsException("[" + this.getClass().getName() + "] "+ e.getMessage(),CmsException.C_SQL_ERROR,e);
  }
 finally {
    m_SqlQueries.closeAll(con,statement,null);
  }
  return readResource(project,newResource.getResourceName());
}
