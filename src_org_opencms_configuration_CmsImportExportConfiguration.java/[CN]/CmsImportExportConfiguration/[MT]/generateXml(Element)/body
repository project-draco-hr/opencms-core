{
  Element importexportElement=parent.addElement(N_IMPORTEXPORT);
  Element resourceloadersElement=importexportElement.addElement(N_IMPORTEXPORTHANDLERS);
  List handlers=m_importExportManager.getImportExportHandlers();
  Iterator i=handlers.iterator();
  while (i.hasNext()) {
    I_CmsImportExportHandler handler=(I_CmsImportExportHandler)i.next();
    Element loaderNode=resourceloadersElement.addElement(N_IMPORTEXPORTHANDLER);
    loaderNode.addAttribute(A_CLASS,handler.getClass().getName());
  }
  Element importElement=importexportElement.addElement(N_IMPORT);
  importElement.addElement(N_OVERWRITE).setText((new Boolean(m_importExportManager.overwriteCollidingResources())).toString());
  importElement.addElement(N_CONVERT).setText((new Boolean(m_importExportManager.convertToXmlPage())).toString());
  if (m_importExportManager.getOldWebAppUrl() != null) {
    importElement.addElement(N_OLDWEBAPPURL).setText(m_importExportManager.getOldWebAppUrl());
  }
  Element resourcetypesElement=importElement.addElement(N_IMPORTVERSIONS);
  i=m_importExportManager.getImportVersionClasses().iterator();
  while (i.hasNext()) {
    resourcetypesElement.addElement(N_IMPORTVERSION).addAttribute(A_CLASS,i.next().getClass().getName());
  }
  Element immutablesElement=importElement.addElement(N_IMMUTABLES);
  i=m_importExportManager.getImmutableResources().iterator();
  while (i.hasNext()) {
    String uri=(String)i.next();
    immutablesElement.addElement(N_RESOURCE).addAttribute(A_URI,uri);
  }
  Element principalsElement=importElement.addElement(N_PRINCIPALTRANSLATIONS);
  i=m_importExportManager.getImportUserTranslations().keySet().iterator();
  while (i.hasNext()) {
    String to=(String)i.next();
    principalsElement.addElement(N_PRINCIPALTRANSLATION).addAttribute(A_TYPE,I_CmsPrincipal.C_PRINCIPAL_USER).addAttribute(A_FROM,(String)m_importExportManager.getImportUserTranslations().get(to)).addAttribute(A_TO,to);
  }
  i=m_importExportManager.getImportGroupTranslations().keySet().iterator();
  while (i.hasNext()) {
    String to=(String)i.next();
    principalsElement.addElement(N_PRINCIPALTRANSLATION).addAttribute(A_TYPE,I_CmsPrincipal.C_PRINCIPAL_GROUP).addAttribute(A_FROM,(String)m_importExportManager.getImportGroupTranslations().get(to)).addAttribute(A_TO,to);
  }
  Element propertiesElement=importElement.addElement(N_IGNOREDPROPERTIES);
  i=m_importExportManager.getIgnoredProperties().iterator();
  while (i.hasNext()) {
    String property=(String)i.next();
    propertiesElement.addElement(N_PROPERTY).addAttribute(A_NAME,property);
  }
  Element staticexportElement=parent.addElement(N_STATICEXPORT);
  staticexportElement.addAttribute(A_ENABLED,m_staticExportManager.getExportEnabled());
  staticexportElement.addElement(N_STATICEXPORT_HANDLER).addText(m_staticExportManager.getHandler().getClass().getName());
  String exportPathUnmodified=m_staticExportManager.getExportPathForConfiguration();
  if (exportPathUnmodified.endsWith(File.separator)) {
    exportPathUnmodified=exportPathUnmodified.substring(0,exportPathUnmodified.length() - 1);
  }
  staticexportElement.addElement(N_STATICEXPORT_EXPORTPATH).addText(exportPathUnmodified);
  staticexportElement.addElement(N_STATICEXPORT_DEFAULT).addText(m_staticExportManager.getDefault());
  Element defaultsuffixesElement=staticexportElement.addElement(N_STATICEXPORT_DEFAULTSUFFIXES);
  i=m_staticExportManager.getExportSuffixes().iterator();
  while (i.hasNext()) {
    String suffix=(String)i.next();
    Element suffixElement=defaultsuffixesElement.addElement(N_STATICEXPORT_SUFFIX);
    suffixElement.addAttribute(A_KEY,suffix);
  }
  i=m_staticExportManager.getExportHeaders().iterator();
  if (i.hasNext()) {
    Element exportheadersElement=staticexportElement.addElement(N_STATICEXPORT_EXPORTHEADERS);
    while (i.hasNext()) {
      String header=(String)i.next();
      exportheadersElement.addElement(N_STATICEXPORT_HEADER).addText(header);
    }
  }
  String acceptlanguage=m_staticExportManager.getAcceptLanguageHeader();
  String acceptcharset=m_staticExportManager.getAcceptCharsetHeader();
  String remoteaddr=m_staticExportManager.getRemoteAddr();
  if ((acceptlanguage != null) || (acceptcharset != null) || (remoteaddr != null)) {
    Element requestheadersElement=staticexportElement.addElement(N_STATICEXPORT_REQUESTHEADERS);
    if (acceptlanguage != null) {
      requestheadersElement.addElement(N_STATICEXPORT_ACCEPTLANGUAGE).addText(acceptlanguage);
    }
    if (acceptcharset != null) {
      requestheadersElement.addElement(N_STATICEXPORT_ACCEPTCHARSET).addText(acceptcharset);
    }
    if (remoteaddr != null) {
      requestheadersElement.addElement(N_STATICEXPORT_REMOTEADDR).addText(remoteaddr);
    }
  }
  Element rendersettingsElement=staticexportElement.addElement(N_STATICEXPORT_RENDERSETTINGS);
  rendersettingsElement.addElement(N_STATICEXPORT_RFS_PREFIX).addText(m_staticExportManager.getRfsPrefixForConfiguration());
  rendersettingsElement.addElement(N_STATICEXPORT_VFS_PREFIX).addText(m_staticExportManager.getVfsPrefixForConfiguration());
  rendersettingsElement.addElement(N_STATICEXPORT_RELATIVELINKS).addText(m_staticExportManager.getRelativeLinks());
  rendersettingsElement.addElement(N_STATICEXPORT_EXPORTURL).addText(m_staticExportManager.getExportUrlForConfiguration());
  rendersettingsElement.addElement(N_STATICEXPORT_PLAINOPTIMIZATION).addText(m_staticExportManager.getPlainExportOptimization());
  Element testresourceElement=rendersettingsElement.addElement(N_STATICEXPORT_TESTRESOURCE);
  testresourceElement.addAttribute(A_URI,m_staticExportManager.getTestResource());
  Element resourcetorenderElement=rendersettingsElement.addElement(N_STATICEXPORT_RESOURCESTORENDER);
  i=m_staticExportManager.getExportFolderPatterns().iterator();
  while (i.hasNext()) {
    String pattern=(String)i.next();
    resourcetorenderElement.addElement(N_STATICEXPORT_REGEX).addText(pattern);
  }
  return importexportElement;
}
