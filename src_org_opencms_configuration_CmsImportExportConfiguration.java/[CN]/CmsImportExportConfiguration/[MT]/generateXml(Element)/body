{
  Element importexportElement=parent.addElement(N_IMPORTEXPORT);
  Element resourceloadersElement=importexportElement.addElement(N_IMPORTEXPORTHANDLERS);
  List handlers=m_importExportManager.getImportExportHandlers();
  Iterator i=handlers.iterator();
  while (i.hasNext()) {
    I_CmsImportExportHandler handler=(I_CmsImportExportHandler)i.next();
    Element loaderNode=resourceloadersElement.addElement(N_IMPORTEXPORTHANDLER);
    loaderNode.addAttribute(A_CLASS,handler.getClass().getName());
  }
  Element importElement=importexportElement.addElement(N_IMPORT);
  importElement.addElement(N_OVERWRITE).setText(String.valueOf(m_importExportManager.overwriteCollidingResources()));
  importElement.addElement(N_CONVERT).setText(String.valueOf(m_importExportManager.convertToXmlPage()));
  if (m_importExportManager.getOldWebAppUrl() != null) {
    importElement.addElement(N_OLDWEBAPPURL).setText(m_importExportManager.getOldWebAppUrl());
  }
  Element resourcetypesElement=importElement.addElement(N_IMPORTVERSIONS);
  i=m_importExportManager.getImportVersionClasses().iterator();
  while (i.hasNext()) {
    resourcetypesElement.addElement(N_IMPORTVERSION).addAttribute(A_CLASS,i.next().getClass().getName());
  }
  Element immutablesElement=importElement.addElement(N_IMMUTABLES);
  i=m_importExportManager.getImmutableResources().iterator();
  while (i.hasNext()) {
    String uri=(String)i.next();
    immutablesElement.addElement(N_RESOURCE).addAttribute(A_URI,uri);
  }
  Element principalsElement=importElement.addElement(N_PRINCIPALTRANSLATIONS);
  i=m_importExportManager.getImportUserTranslations().keySet().iterator();
  while (i.hasNext()) {
    String from=(String)i.next();
    String to=(String)m_importExportManager.getImportUserTranslations().get(from);
    principalsElement.addElement(N_PRINCIPALTRANSLATION).addAttribute(A_TYPE,I_CmsPrincipal.PRINCIPAL_USER).addAttribute(A_FROM,from).addAttribute(A_TO,to);
  }
  i=m_importExportManager.getImportGroupTranslations().keySet().iterator();
  while (i.hasNext()) {
    String from=(String)i.next();
    String to=(String)m_importExportManager.getImportGroupTranslations().get(from);
    principalsElement.addElement(N_PRINCIPALTRANSLATION).addAttribute(A_TYPE,I_CmsPrincipal.PRINCIPAL_GROUP).addAttribute(A_FROM,from).addAttribute(A_TO,to);
  }
  Element propertiesElement=importElement.addElement(N_IGNOREDPROPERTIES);
  i=m_importExportManager.getIgnoredProperties().iterator();
  while (i.hasNext()) {
    String property=(String)i.next();
    propertiesElement.addElement(N_PROPERTY).addAttribute(A_NAME,property);
  }
  Element staticexportElement=parent.addElement(N_STATICEXPORT);
  staticexportElement.addAttribute(A_ENABLED,m_staticExportManager.getExportEnabled());
  staticexportElement.addElement(N_STATICEXPORT_HANDLER).addText(m_staticExportManager.getHandler().getClass().getName());
  staticexportElement.addElement(N_LINKSUBSTITUTION_HANDLER).addText(m_staticExportManager.getLinkSubstitutionHandler().getClass().getName());
  String exportPathUnmodified=m_staticExportManager.getExportPathForConfiguration();
  if (exportPathUnmodified.endsWith(File.separator)) {
    exportPathUnmodified=exportPathUnmodified.substring(0,exportPathUnmodified.length() - 1);
  }
  staticexportElement.addElement(N_STATICEXPORT_EXPORTPATH).addText(exportPathUnmodified);
  String exportWorkPathUnmodified=m_staticExportManager.getExportWorkPathForConfiguration();
  if (exportWorkPathUnmodified != null) {
    if (exportWorkPathUnmodified.endsWith(File.separator)) {
      exportWorkPathUnmodified=exportWorkPathUnmodified.substring(0,exportWorkPathUnmodified.length() - 1);
    }
    staticexportElement.addElement(N_STATICEXPORT_EXPORTWORKPATH).addText(exportWorkPathUnmodified);
  }
  if (m_staticExportManager.getExportBackups() != null) {
    String exportBackupsUnmodified=String.valueOf(m_staticExportManager.getExportBackups());
    staticexportElement.addElement(N_STATICEXPORT_EXPORTBACKUPS).addText(exportBackupsUnmodified);
  }
  staticexportElement.addElement(N_STATICEXPORT_DEFAULT).addText(m_staticExportManager.getDefault());
  Element defaultsuffixesElement=staticexportElement.addElement(N_STATICEXPORT_DEFAULTSUFFIXES);
  i=m_staticExportManager.getExportSuffixes().iterator();
  while (i.hasNext()) {
    String suffix=(String)i.next();
    Element suffixElement=defaultsuffixesElement.addElement(N_STATICEXPORT_SUFFIX);
    suffixElement.addAttribute(A_KEY,suffix);
  }
  i=m_staticExportManager.getExportHeaders().iterator();
  if (i.hasNext()) {
    Element exportheadersElement=staticexportElement.addElement(N_STATICEXPORT_EXPORTHEADERS);
    while (i.hasNext()) {
      String header=(String)i.next();
      exportheadersElement.addElement(N_STATICEXPORT_HEADER).addText(header);
    }
  }
  String acceptlanguage=m_staticExportManager.getAcceptLanguageHeader();
  String acceptcharset=m_staticExportManager.getAcceptCharsetHeader();
  String remoteaddr=m_staticExportManager.getRemoteAddr();
  if ((acceptlanguage != null) || (acceptcharset != null) || (remoteaddr != null)) {
    Element requestheadersElement=staticexportElement.addElement(N_STATICEXPORT_REQUESTHEADERS);
    if (acceptlanguage != null) {
      requestheadersElement.addElement(N_STATICEXPORT_ACCEPTLANGUAGE).addText(acceptlanguage);
    }
    if (acceptcharset != null) {
      requestheadersElement.addElement(N_STATICEXPORT_ACCEPTCHARSET).addText(acceptcharset);
    }
    if (remoteaddr != null) {
      requestheadersElement.addElement(N_STATICEXPORT_REMOTEADDR).addText(remoteaddr);
    }
  }
  Element rendersettingsElement=staticexportElement.addElement(N_STATICEXPORT_RENDERSETTINGS);
  rendersettingsElement.addElement(N_STATICEXPORT_RFS_PREFIX).addText(m_staticExportManager.getRfsPrefixForConfiguration());
  rendersettingsElement.addElement(N_STATICEXPORT_VFS_PREFIX).addText(m_staticExportManager.getVfsPrefixForConfiguration());
  rendersettingsElement.addElement(N_STATICEXPORT_RELATIVELINKS).addText(m_staticExportManager.getRelativeLinks());
  rendersettingsElement.addElement(N_STATICEXPORT_EXPORTURL).addText(m_staticExportManager.getExportUrlForConfiguration());
  rendersettingsElement.addElement(N_STATICEXPORT_PLAINOPTIMIZATION).addText(m_staticExportManager.getPlainExportOptimization());
  Element testresourceElement=rendersettingsElement.addElement(N_STATICEXPORT_TESTRESOURCE);
  testresourceElement.addAttribute(A_URI,m_staticExportManager.getTestResource());
  Element resourcetorenderElement=rendersettingsElement.addElement(N_STATICEXPORT_RESOURCESTORENDER);
  i=m_staticExportManager.getExportFolderPatterns().iterator();
  while (i.hasNext()) {
    String pattern=(String)i.next();
    resourcetorenderElement.addElement(N_STATICEXPORT_REGEX).addText(pattern);
  }
  if (!m_staticExportManager.getExportRules().isEmpty()) {
    Element exportRulesElement=resourcetorenderElement.addElement(N_STATICEXPORT_EXPORTRULES);
    i=m_staticExportManager.getExportRules().iterator();
    while (i.hasNext()) {
      CmsStaticExportExportRule rule=(CmsStaticExportExportRule)i.next();
      Element exportRuleElement=exportRulesElement.addElement(N_STATICEXPORT_EXPORTRULE);
      exportRuleElement.addElement(N_STATICEXPORT_NAME).addText(rule.getName());
      exportRuleElement.addElement(N_STATICEXPORT_DESCRIPTION).addText(rule.getDescription());
      Element modifiedElement=exportRuleElement.addElement(N_STATICEXPORT_MODIFIED);
      Iterator itMods=rule.getModifiedResources().iterator();
      while (itMods.hasNext()) {
        Pattern regex=(Pattern)itMods.next();
        modifiedElement.addElement(N_STATICEXPORT_REGEX).addText(regex.pattern());
      }
      Element exportElement=exportRuleElement.addElement(N_STATICEXPORT_EXPORT);
      Iterator itExps=rule.getExportResourcePatterns().iterator();
      while (itExps.hasNext()) {
        String uri=(String)itExps.next();
        exportElement.addElement(N_STATICEXPORT_URI).addText(uri);
      }
    }
  }
  if (!m_staticExportManager.getRfsRules().isEmpty()) {
    Element rfsRulesElement=rendersettingsElement.addElement(N_STATICEXPORT_RFS_RULES);
    i=m_staticExportManager.getRfsRules().iterator();
    while (i.hasNext()) {
      CmsStaticExportRfsRule rule=(CmsStaticExportRfsRule)i.next();
      Element rfsRuleElement=rfsRulesElement.addElement(N_STATICEXPORT_RFS_RULE);
      rfsRuleElement.addElement(N_STATICEXPORT_NAME).addText(rule.getName());
      rfsRuleElement.addElement(N_STATICEXPORT_DESCRIPTION).addText(rule.getDescription());
      rfsRuleElement.addElement(N_STATICEXPORT_SOURCE).addText(rule.getSource().pattern());
      rfsRuleElement.addElement(N_STATICEXPORT_RFS_PREFIX).addText(rule.getRfsPrefixConfigured());
      rfsRuleElement.addElement(N_STATICEXPORT_EXPORTPATH).addText(rule.getExportPathConfigured());
      if (rule.getExportWorkPathConfigured() != null) {
        rfsRuleElement.addElement(N_STATICEXPORT_EXPORTWORKPATH).addText(rule.getExportWorkPathConfigured());
      }
      if (rule.getExportBackups() != null) {
        rfsRuleElement.addElement(N_STATICEXPORT_EXPORTBACKUPS).addText(String.valueOf(rule.getExportBackups()));
      }
      if (rule.getUseRelativeLinks() != null) {
        rfsRuleElement.addElement(N_STATICEXPORT_RELATIVELINKS).addText(rule.getUseRelativeLinks().toString());
      }
      Element relatedSystemRes=rfsRuleElement.addElement(N_STATICEXPORT_RELATED_SYSTEM_RES);
      Iterator itSystemRes=rule.getRelatedSystemResources().iterator();
      while (itSystemRes.hasNext()) {
        Pattern sysRes=(Pattern)itSystemRes.next();
        relatedSystemRes.addElement(N_STATICEXPORT_REGEX).addText(sysRes.pattern());
      }
    }
  }
  if (m_importExportManager.getUserExportSettings() != null) {
    Element userExportElement=parent.addElement(N_USERCSVEXPORT);
    userExportElement.addElement(N_SEPARATOR).setText(m_importExportManager.getUserExportSettings().getSeparator());
    Element exportColumns=userExportElement.addElement(N_COLUMNS);
    List exportColumnList=m_importExportManager.getUserExportSettings().getColumns();
    Iterator itExportColumnList=exportColumnList.iterator();
    while (itExportColumnList.hasNext()) {
      exportColumns.addElement(N_COLUMN).setText((String)itExportColumnList.next());
    }
  }
  if (m_repositoryManager.isConfigured()) {
    List repositories=m_repositoryManager.getRepositories();
    if (repositories != null) {
      Element repositoriesElement=parent.addElement(N_REPOSITORIES);
      i=repositories.iterator();
      while (i.hasNext()) {
        A_CmsRepository repository=(A_CmsRepository)i.next();
        Element repositoryElement=repositoriesElement.addElement(N_REPOSITORY);
        repositoryElement.addAttribute(A_NAME,repository.getName());
        repositoryElement.addAttribute(A_CLASS,repository.getClass().getName());
        Map config=repository.getConfiguration();
        if ((config != null) && (config.size() > 0)) {
          Element paramsElement=repositoryElement.addElement(N_PARAMS);
          Iterator it=config.entrySet().iterator();
          while (it.hasNext()) {
            Map.Entry e=(Map.Entry)it.next();
            String key=(String)e.getKey();
            String[] value=(String[])e.getValue();
            for (int j=0; j < value.length; j++) {
              Element paramNode=paramsElement.addElement(N_PARAM);
              paramNode.addAttribute(A_NAME,key);
              paramNode.addText(value[j]);
            }
          }
        }
        CmsRepositoryFilter filter=repository.getFilter();
        if (filter != null) {
          List rules=filter.getFilterRules();
          if (rules.size() > 0) {
            Element filterElement=repositoryElement.addElement(N_FILTER);
            filterElement.addAttribute(A_TYPE,filter.getType());
            Iterator it=rules.iterator();
            while (it.hasNext()) {
              Pattern rule=(Pattern)it.next();
              filterElement.addElement(N_REGEX).addText(rule.pattern());
            }
          }
        }
      }
    }
  }
  CmsExtendedHtmlImportDefault htmlimport=m_importExportManager.getExtendedHtmlImportDefault(true);
  if (htmlimport != null) {
    Element htmlImportElement=parent.addElement(N_EXTHTMLIMPORT);
    if (!CmsStringUtil.isEmptyOrWhitespaceOnly(htmlimport.getDestinationDir())) {
      htmlImportElement.addElement(N_EXTHTMLIMPORT_DESTINATION).setText(htmlimport.getDestinationDir());
    }
    if (!CmsStringUtil.isEmptyOrWhitespaceOnly(htmlimport.getInputDir())) {
      htmlImportElement.addElement(N_EXTHTMLIMPORT_INPUT).setText(htmlimport.getInputDir());
    }
    Element galleryElement=htmlImportElement.addElement(N_EXTHTMLIMPORT_GALLERIES);
    if (!CmsStringUtil.isEmptyOrWhitespaceOnly(htmlimport.getDownloadGallery())) {
      galleryElement.addElement(N_EXTHTMLIMPORT_DOWNLOAD).setText(htmlimport.getDownloadGallery());
    }
    if (!CmsStringUtil.isEmptyOrWhitespaceOnly(htmlimport.getImageGallery())) {
      galleryElement.addElement(N_EXTHTMLIMPORT_IMAGE).setText(htmlimport.getImageGallery());
    }
    if (!CmsStringUtil.isEmptyOrWhitespaceOnly(htmlimport.getLinkGallery())) {
      galleryElement.addElement(N_EXTHTMLIMPORT_EXTERNALLINK).setText(htmlimport.getLinkGallery());
    }
    Element settingElement=htmlImportElement.addElement(N_EXTHTMLIMPORT_SETTINGS);
    settingElement.addElement(N_EXTHTMLIMPORT_TEMPLATE).setText(htmlimport.getTemplate());
    settingElement.addElement(N_EXTHTMLIMPORT_ELEMENT).setText(htmlimport.getElement());
    settingElement.addElement(N_EXTHTMLIMPORT_LOCALE).setText(htmlimport.getLocale());
    settingElement.addElement(N_EXTHTMLIMPORT_ENCODING).setText(htmlimport.getEncoding());
    Element patternElement=settingElement.addElement(N_EXTHTMLIMPORT_PATTERN);
    if (!CmsStringUtil.isEmptyOrWhitespaceOnly(htmlimport.getStartPattern())) {
      patternElement.addElement(N_EXTHTMLIMPORT_PATTERN_START).setText(htmlimport.getStartPattern());
    }
    if (!CmsStringUtil.isEmptyOrWhitespaceOnly(htmlimport.getEndPattern())) {
      patternElement.addElement(N_EXTHTMLIMPORT_PATTERN_END).setText(htmlimport.getEndPattern());
    }
    settingElement.addElement(N_EXTHTMLIMPORT_OVERWRITE).setText(htmlimport.getOverwrite());
    settingElement.addElement(N_EXTHTMLIMPORT_KEEPBROKENLINKS).setText(htmlimport.getKeepBrokenLinks());
  }
  return importexportElement;
}
