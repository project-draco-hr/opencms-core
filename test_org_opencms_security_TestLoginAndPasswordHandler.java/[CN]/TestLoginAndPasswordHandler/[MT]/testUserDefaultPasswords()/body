{
  CmsObject cms=getCmsObject();
  echo("Testing the user import.");
  I_CmsPasswordHandler passwordHandler=OpenCms.getPasswordHandler();
  CmsUser user;
  echo("Testing passwords of imported users");
  user=cms.readUser(OpenCms.getDefaultUsers().getUserAdmin());
  assertTrue("Admin user password does not check",passwordHandler.checkPassword("admin",user.getPassword(),false));
  user=cms.readUser(OpenCms.getDefaultUsers().getUserGuest());
  assertFalse("Guest user password does check with old default (empty String) but should fail becasue it is now a random UUID",passwordHandler.checkPassword("",user.getPassword(),true));
  try {
    SCryptUtil.check("{random-value}",user.getPassword());
  }
 catch (  IllegalArgumentException e) {
    fail("Guest user password not a valid SCrypt password");
  }
  user=cms.readUser(OpenCms.getDefaultUsers().getUserExport());
  try {
    SCryptUtil.check("{random-value}",user.getPassword());
  }
 catch (  IllegalArgumentException e) {
    fail("Export user password not a valid SCrypt password");
  }
  user=cms.readUser(OpenCms.getDefaultUsers().getUserDeletedResource());
  try {
    SCryptUtil.check("{random-value}",user.getPassword());
  }
 catch (  IllegalArgumentException e) {
    fail("Deleted resource user password not a valid SCrypt password");
  }
  user=cms.readUser("test1");
  assertFalse("test1 user password does check with default SCrypt but should fail becasuse it is encoded in MD5",passwordHandler.checkPassword("test1",user.getPassword(),false));
  assertTrue("test1 user password does not check with fallback to MD5",passwordHandler.checkPassword("test1",user.getPassword(),true));
  user=cms.readUser("test2");
  assertFalse("test2 user password does check with default SCrypt but should fail becasuse it is encoded in MD5",passwordHandler.checkPassword("test2",user.getPassword(),false));
  assertTrue("test2 user password does not check with fallback to MD5",passwordHandler.checkPassword("test2",user.getPassword(),true));
}
