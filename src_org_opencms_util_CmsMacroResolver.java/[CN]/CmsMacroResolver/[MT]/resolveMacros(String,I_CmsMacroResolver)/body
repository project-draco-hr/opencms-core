{
  if ((input == null) || (input.length() < 3)) {
    return input;
  }
  int p=input.indexOf(I_CmsMacroResolver.MACRO_DELIMITER);
  if (p == -1) {
    return input;
  }
  int len=input.length();
  StringBuffer result=new StringBuffer(len << 1);
  int np, pp1, pp2, e;
  String macro, value;
  boolean keep=resolver.isKeepEmptyMacros();
  boolean resolvedNone=true;
  result.append(input.substring(0,p));
  do {
    pp1=p + 1;
    pp2=pp1 + 1;
    if (pp2 >= len) {
      result.append(input.substring(p,len));
      break;
    }
    np=input.indexOf(I_CmsMacroResolver.MACRO_DELIMITER,pp1);
    if (np == -1) {
      np=len;
    }
    if (input.charAt(pp1) == I_CmsMacroResolver.MACRO_START) {
      e=input.indexOf(I_CmsMacroResolver.MACRO_END,p);
      if ((e > 0) && (e < np)) {
        macro=input.substring(pp2,e);
        value=resolver.getMacroValue(macro);
        e++;
        if (value != null) {
          result.append(value);
          resolvedNone=false;
        }
 else         if (keep) {
          result.append(input.substring(p,e));
        }
      }
 else {
        e=p;
      }
    }
 else {
      e=p;
    }
    result.append(input.substring(e,np));
    p=np;
  }
 while (p < len);
  if (resolvedNone && keep) {
    return input;
  }
  return result.toString();
}
