{
  String segments[];
  String replacements[];
  String macros[];
  if (input == null) {
    return null;
  }
 else {
    segments=(String[])CmsStringUtil.splitAsList(input,I_CmsMacroResolver.C_MACRO_DELIMITER).toArray(new String[10]);
    replacements=new String[segments.length];
    macros=new String[segments.length];
  }
  if (segments.length == 1) {
    return input;
  }
  int totalLength=0;
  for (int i=0; i < segments.length && segments[i] != null; i++) {
    int len=segments[i].length(), pos;
    if (segments[i].startsWith(I_CmsMacroResolver.C_MACRO_START) && (pos=segments[i].indexOf(I_CmsMacroResolver.C_MACRO_END)) > 0) {
      macros[i]=segments[i].substring(1,pos);
      replacements[i]=resolver.getValue(macros[i]);
      segments[i]=segments[i].substring(pos + 1);
      len=(replacements[i] != null) ? replacements[i].length() : 0;
      len+=(segments[i] != null) ? segments[i].length() : 0;
    }
 else     if (i > 0) {
      replacements[i]=I_CmsMacroResolver.C_MACRO_DELIMITER;
      len+=1;
    }
    totalLength+=len;
  }
  StringBuffer sb=new StringBuffer(totalLength);
  for (int i=0; i < segments.length && segments[i] != null; i++) {
    if (replacements[i] != null) {
      sb.append(replacements[i]);
    }
 else     if (resolver.isKeepEmptyMacros() && macros[i] != null) {
      sb.append(I_CmsMacroResolver.C_MACRO_DELIMITER).append(I_CmsMacroResolver.C_MACRO_START).append(macros[i]).append(I_CmsMacroResolver.C_MACRO_END);
    }
    if (segments[i] != null) {
      sb.append(segments[i]);
    }
  }
  return sb.toString();
}
