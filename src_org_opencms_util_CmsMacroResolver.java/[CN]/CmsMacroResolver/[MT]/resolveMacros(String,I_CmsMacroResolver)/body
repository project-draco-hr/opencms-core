{
  if ((input == null) || (input.length() < 3)) {
    return input;
  }
  int pn=input.indexOf(I_CmsMacroResolver.MACRO_DELIMITER);
  int po=input.indexOf(I_CmsMacroResolver.MACRO_DELIMITER_OLD);
  if ((po == -1) && (pn == -1)) {
    return input;
  }
  int len=input.length();
  StringBuffer result=new StringBuffer(len << 1);
  int np, pp1, pp2, e;
  String macro, value;
  boolean keep=resolver.isKeepEmptyMacros();
  boolean resolvedNone=true;
  char ds, de;
  int p;
  if ((po == -1) || ((pn > -1) && (pn < po))) {
    p=pn;
    ds=I_CmsMacroResolver.MACRO_START;
    de=I_CmsMacroResolver.MACRO_END;
  }
 else {
    p=po;
    ds=I_CmsMacroResolver.MACRO_START_OLD;
    de=I_CmsMacroResolver.MACRO_END_OLD;
  }
  result.append(input.substring(0,p));
  do {
    pp1=p + 1;
    pp2=pp1 + 1;
    if (pp2 >= len) {
      result.append(input.substring(p,len));
      break;
    }
    if ((pn > -1) && (pn < pp1)) {
      pn=input.indexOf(I_CmsMacroResolver.MACRO_DELIMITER,pp1);
    }
    if ((po > -1) && (po < pp1)) {
      po=input.indexOf(I_CmsMacroResolver.MACRO_DELIMITER_OLD,pp1);
    }
    if ((po == -1) && (pn == -1)) {
      np=len;
    }
 else {
      if ((po == -1) || ((pn > -1) && (pn < po))) {
        np=pn;
      }
 else {
        np=po;
      }
    }
    char st=input.charAt(pp1);
    if (st == ds) {
      e=input.indexOf(de,p);
      if ((e > 0) && (e < np)) {
        macro=input.substring(pp2,e);
        value=resolver.getMacroValue(macro);
        e++;
        if (value != null) {
          result.append(value);
          resolvedNone=false;
        }
 else         if (keep) {
          result.append(input.substring(p,e));
        }
      }
 else {
        e=p;
      }
    }
 else {
      e=p;
    }
    if (np == pn) {
      ds=I_CmsMacroResolver.MACRO_START;
      de=I_CmsMacroResolver.MACRO_END;
    }
 else {
      ds=I_CmsMacroResolver.MACRO_START_OLD;
      de=I_CmsMacroResolver.MACRO_END_OLD;
    }
    result.append(input.substring(e,np));
    p=np;
  }
 while (p < len);
  if (resolvedNone && keep) {
    return input;
  }
  return result.toString();
}
