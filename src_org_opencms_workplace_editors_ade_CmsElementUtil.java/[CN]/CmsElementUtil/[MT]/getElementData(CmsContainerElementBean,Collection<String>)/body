{
  JSONObject resElement=new JSONObject();
  CmsResource resource=m_cms.readResource(element.getElementId());
  CmsResourceUtil resUtil=new CmsResourceUtil(m_cms,resource);
  resElement.put(JsonElement.OBJTYPE.getName(),TYPE_ELEMENT);
  resElement.put(JsonElement.ID.getName(),element.getClientId());
  resElement.put(JsonElement.FILE.getName(),resUtil.getFullPath());
  resElement.put(JsonElement.DATE.getName(),resource.getDateLastModified());
  resElement.put(JsonElement.USER.getName(),m_cms.readUser(resource.getUserLastModified()).getName());
  resElement.put(JsonElement.NAVTEXT.getName(),resUtil.getNavText());
  resElement.put(JsonElement.TITLE.getName(),resUtil.getTitle());
  resElement.put(JsonElement.NO_EDIT_REASON.getName(),CmsEncoder.escapeHtml(resUtil.getNoEditReason(OpenCms.getWorkplaceManager().getWorkplaceLocale(m_cms))));
  resElement.put(JsonElement.STATUS.getName(),"" + resUtil.getStateAbbreviation());
  JSONObject resContents=new JSONObject();
  resElement.put(JsonElement.CONTENTS.getName(),resContents);
  JSONObject formatters=new JSONObject();
  resElement.put(JsonElement.FORMATTERS.getName(),formatters);
  if (resource.getTypeId() == CmsADEManager.SUB_CONTAINER_TYPE_ID) {
    CmsXmlSubContainer xmlSubContainer=CmsXmlSubContainerFactory.unmarshal(m_cms,resource,m_req);
    CmsSubContainerBean subContainer=xmlSubContainer.getSubContainer(m_cms,m_cms.getRequestContext().getLocale());
    if (subContainer.getTypes().isEmpty()) {
      if (subContainer.getElements().isEmpty()) {
        String emptySub="<div>NEW AND EMPTY</div>";
        for (        String type : types) {
          formatters.put(type,"formatter");
          resContents.put(type,emptySub);
        }
      }
 else {
        return null;
      }
    }
 else {
      for (      String type : subContainer.getTypes()) {
        if (types.contains(type)) {
          formatters.put(type,"formatter");
          resContents.put(type,"<div>should not be used</div>");
        }
      }
    }
    String defaultFormatter=m_manager.getXmlContentFormatters(m_cms,resource).get(CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE);
    String jspResult;
    try {
      jspResult=getElementContent(element,m_cms.readResource(defaultFormatter));
      formatters.put(CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE,defaultFormatter);
      resContents.put(CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE,jspResult);
    }
 catch (    Exception e) {
      LOG.error(Messages.get().getBundle().key(Messages.ERR_GENERATE_FORMATTED_ELEMENT_3,m_cms.getSitePath(resource),defaultFormatter,CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE),e);
    }
    JSONArray subitems=new JSONArray();
    resElement.put(JsonElement.SUBITEMS.getName(),subitems);
    for (    CmsContainerElementBean subElement : subContainer.getElements()) {
      subitems.put(subElement.getClientId());
    }
  }
 else {
    Iterator<Map.Entry<String,String>> it=m_manager.getXmlContentFormatters(m_cms,resource).entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<String,String> entry=it.next();
      String type=entry.getKey();
      if (!types.contains(type) && !type.equals(CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE)) {
        continue;
      }
      String formatterUri=entry.getValue();
      formatters.put(type,formatterUri);
      try {
        String jspResult=getElementContent(element,m_cms.readResource(formatterUri));
        resContents.put(type,jspResult);
      }
 catch (      Exception e) {
        LOG.error(Messages.get().getBundle().key(Messages.ERR_GENERATE_FORMATTED_ELEMENT_3,m_cms.getSitePath(resource),formatterUri,type),e);
      }
    }
  }
  return resElement;
}
