{
  JSONObject resElement=new JSONObject();
  resElement.put(CmsADEManager.P_OBJTYPE,CmsADEManager.ELEMENT_TYPE);
  resElement.put(CmsADEManager.P_ID,CmsElementUtil.ADE_ID_PREFIX + resource.getStructureId().toString());
  resElement.put(CmsADEManager.P_FILE,m_cms.getSitePath(resource));
  resElement.put(CmsADEManager.P_DATE,resource.getDateLastModified());
  resElement.put(CmsADEManager.P_USER,m_cms.readUser(resource.getUserLastModified()).getName());
  resElement.put(CmsADEManager.P_NAVTEXT,m_cms.readPropertyObject(resource,CmsPropertyDefinition.PROPERTY_NAVTEXT,false).getValue(""));
  resElement.put(CmsADEManager.P_TITLE,m_cms.readPropertyObject(resource,CmsPropertyDefinition.PROPERTY_TITLE,false).getValue(""));
  CmsResourceUtil resUtil=new CmsResourceUtil(m_cms,resource);
  resElement.put(CmsADEManager.P_ALLOWEDIT,resUtil.getLock().isLockableBy(m_cms.getRequestContext().currentUser()) && resUtil.isEditable());
  resElement.put(CmsADEManager.P_LOCKED,resUtil.getLockedByName());
  resElement.put(CmsADEManager.P_STATUS,"" + resUtil.getStateAbbreviation());
  JSONObject resContents=new JSONObject();
  resElement.put(CmsADEManager.P_CONTENTS,resContents);
  JSONObject formatters=new JSONObject();
  resElement.put(CmsADEManager.P_FORMATTERS,formatters);
  if (resource.getTypeId() == CmsResourceTypeContainerPage.getStaticTypeId()) {
    Iterator<String> itTypes=types.iterator();
    while (itTypes.hasNext()) {
      String type=itTypes.next();
      formatters.put(type,"");
      resContents.put(type,"");
    }
    CmsContainerPageBean cntPage=CmsContainerPageCache.getInstance().getCache(m_cms,resource,m_cms.getRequestContext().getLocale());
    CmsContainerBean container=cntPage.getContainers().values().iterator().next();
    JSONArray subitems=new JSONArray();
    resElement.put(CmsADEManager.P_SUBITEMS,subitems);
    for (    CmsContainerElementBean element : container.getElements()) {
      CmsUUID id=element.getElement().getStructureId();
      subitems.put(createId(id));
    }
  }
 else {
    List<CmsRelation> relations=m_cms.getRelationsForResource(resource,CmsRelationFilter.TARGETS.filterType(CmsRelationType.XSD));
    CmsXmlContentDefinition contentDef=null;
    if ((relations != null) && !relations.isEmpty()) {
      String xsd=m_cms.getSitePath(relations.get(0).getTarget(m_cms,CmsResourceFilter.ALL));
      contentDef=m_entityResolver.getCachedContentDefinition(xsd);
    }
    if (contentDef == null) {
      CmsXmlContent content=CmsXmlContentFactory.unmarshal(m_cms,m_cms.readFile(resource));
      contentDef=content.getContentDefinition();
    }
    Iterator<Map.Entry<String,String>> it=contentDef.getContentHandler().getFormatters().entrySet().iterator();
    if (!it.hasNext()) {
      LOG.warn(Messages.get().getBundle().key(Messages.LOG_WARN_NO_FORMATTERS_DEFINED_1,contentDef.getSchemaLocation()));
    }
    while (it.hasNext()) {
      Map.Entry<String,String> entry=it.next();
      String type=entry.getKey();
      if (!types.contains(type) && !type.equals(CmsDefaultXmlContentHandler.DEFAULT_FORMATTER_TYPE)) {
        continue;
      }
      String formatterUri=entry.getValue();
      formatters.put(type,formatterUri);
      try {
        String jspResult=getElementContent(resource,m_cms.readResource(formatterUri));
        resContents.put(type,jspResult);
      }
 catch (      Exception e) {
        LOG.error(Messages.get().getBundle().key(Messages.ERR_GENERATE_FORMATTED_ELEMENT_3,m_cms.getSitePath(resource),formatterUri,type),e);
      }
    }
  }
  return resElement;
}
