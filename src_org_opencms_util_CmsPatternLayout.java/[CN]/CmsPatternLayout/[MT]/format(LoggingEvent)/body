{
  String result=super.format(event);
  ThrowableInformation ti=event.getThrowableInformation();
  if (ti != null) {
    StringBuffer trace=new StringBuffer();
    StringBuffer minTrace=new StringBuffer();
    boolean exclFound=false;
    int count=0;
    int filtered=0;
    int truncated=0;
    String[] elements=ti.getThrowableStrRep();
    for (int i=0; i < elements.length; i++) {
      String elem=elements[i];
      if (!elem.trim().startsWith("at ") && !elem.trim().startsWith("...")) {
        minTrace.append(elem).append(Layout.LINE_SEP);
      }
      if (elem.trim().startsWith("Caused")) {
        if (!exclFound && (truncated > 0 || filtered > 0)) {
          trace.append(createSummary(truncated,filtered));
        }
        count=0;
        filtered=0;
        truncated=0;
      }
      if (!matches(elem,m_filters) && !exclFound) {
        if (count < m_maxLength) {
          trace.append(elem).append(Layout.LINE_SEP);
          count++;
        }
 else {
          truncated++;
        }
      }
 else {
        filtered++;
      }
      if (!exclFound && matches(elem,m_excludes)) {
        exclFound=true;
      }
    }
    if (exclFound) {
      result+=minTrace.toString();
    }
 else {
      if (truncated > 0 || filtered > 0) {
        trace.append(createSummary(truncated,filtered));
      }
      result+=trace.toString();
    }
  }
  return result;
}
