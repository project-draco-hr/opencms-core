{
  StringBuffer result=new StringBuffer();
  int size=resources.size();
  String navLink[]=new String[size];
  String navText[]=new String[size];
  float navPos[]=new float[size];
  int max=extractNav(cms,resources,navLink,navText,navPos);
  if (max > 0) {
    result.append(xmlDataBlock.getProcessedDataValue("navTreeStart"));
    for (int i=0; i < max; i++) {
      xmlDataBlock.setData("navText",navText[i]);
      xmlDataBlock.setData("count",new Integer(i + 1).toString());
      if (navLink[i].endsWith("/")) {
        xmlDataBlock.setData("navLink",servletPath + navLink[i] + "index.html");
      }
 else {
        xmlDataBlock.setData("navLink",servletPath + navLink[i]);
      }
      if (navLink[i].equals(currentFolder) || navLink[i].equals(requestedUri)) {
        result.append(xmlDataBlock.getProcessedDataValue("navCurrent"));
      }
 else {
        result.append(xmlDataBlock.getProcessedDataValue("navEntry"));
      }
      if (navLink[i].endsWith("/")) {
        Vector all=cms.getSubFolders(navLink[i]);
        Vector files=cms.getFilesInFolder(navLink[i]);
        all.ensureCapacity(all.size() + files.size());
        Enumeration e=files.elements();
        while (e.hasMoreElements()) {
          all.addElement(e.nextElement());
        }
        result.append(buildNavTree(cms,xmlDataBlock,all,requestedUri,currentFolder,servletPath));
      }
    }
    result.append(xmlDataBlock.getProcessedDataValue("navTreeEnd"));
  }
  return result.toString();
}
