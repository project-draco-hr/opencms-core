{
  StringBuffer result=new StringBuffer();
  int size=resources.size();
  String navLink[]=new String[size];
  String navText[]=new String[size];
  float navPos[]=new float[size];
  int max=extractNav(cms,resources,navLink,navText,navPos);
  if (max > 0) {
    result.append(template.getProcessedDataValue("navstart",this,userObject));
    for (int i=0; i < max; i++) {
      count[0]++;
      template.setData("navtext",navText[i]);
      template.setData("navcount",new Integer(count[0]).toString());
      int extractedLevel=extractLevel(cms,navLink[i]);
      template.setData("navlevel",new Integer(extractedLevel).toString());
      String link="";
      if (navLink[i].endsWith("/")) {
        String navIndex=cms.readProperty(navLink[i],C_PROPERTY_NAVINDEX);
        if (navIndex == null || (navIndex != null && navIndex.equals(""))) {
          navIndex=C_NAVINDEX;
        }
        try {
          cms.readFile(navLink[i] + navIndex);
          link=navLink[i] + navIndex;
          template.setData("navlink",LinkSubstitution.getLinkSubstitution(cms,navLink[i] + navIndex));
        }
 catch (        CmsException e) {
          link=requestedUri;
          template.setData("navlink",LinkSubstitution.getLinkSubstitution(cms,requestedUri));
        }
      }
 else {
        try {
          cms.readFile(navLink[i]);
          link=navLink[i];
          template.setData("navlink",LinkSubstitution.getLinkSubstitution(cms,navLink[i]));
        }
 catch (        CmsException e) {
          link=requestedUri;
          template.setData("navlink",LinkSubstitution.getLinkSubstitution(cms,requestedUri));
        }
      }
      if (link.equals(requestedUri)) {
        result.append(template.getProcessedDataValue("navcurrent",this,userObject));
      }
 else {
        result.append(template.getProcessedDataValue("naventry",this,userObject));
      }
      depth--;
      if (depthIsNull || depth >= 0) {
        if (navLink[i].endsWith("/")) {
          List all=cms.getSubFolders(navLink[i]);
          List files=cms.getFilesInFolder(navLink[i]);
          Vector vfsDeps=new Vector();
          vfsDeps.add(cms.readFolder(navLink[i]));
          registerVariantDeps(cms,template.getAbsoluteFilename(),null,null,(Hashtable)userObject,vfsDeps,null,null);
          ((ArrayList)all).ensureCapacity(all.size() + files.size());
          Iterator e=files.iterator();
          while (e.hasNext()) {
            all.add(e.next());
          }
          result.append(buildNavTree(cms,template,userObject,all,requestedUri,currentFolder,servletPath,level,depth,depthIsNull,count));
        }
      }
    }
    result.append(template.getProcessedDataValue("navend",this,userObject));
  }
  return result.toString();
}
