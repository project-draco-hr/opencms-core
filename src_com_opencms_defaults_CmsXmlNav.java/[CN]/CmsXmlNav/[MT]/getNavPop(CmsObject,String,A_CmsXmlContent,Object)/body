{
  String currentFolder="";
  StringBuffer sRet=new StringBuffer();
  int deep=3;
  int level=-1;
  if (!tagcontent.equals("")) {
    try {
      StringTokenizer st=new StringTokenizer(tagcontent.toString(),",");
      if (st.hasMoreTokens()) {
        level=Integer.parseInt(st.nextToken().trim());
      }
      if (st.hasMoreTokens()) {
        deep=Integer.parseInt(st.nextToken().trim());
      }
    }
 catch (    Exception e) {
      throw new CmsException(e.getMessage());
    }
  }
switch (level) {
case -1:
    currentFolder=cms.readAbsolutePath(cms.getRequestContext().currentFolder());
  break;
case 0:
currentFolder=cms.readAbsolutePath(cms.rootFolder());
break;
default :
if (extractFolder(cms,1,"").equals("/")) {
currentFolder=extractFolder(cms,level + 1,"");
}
 else {
currentFolder=extractFolder(cms,level,"");
}
break;
}
Vector resources=cms.getSubFolders(currentFolder);
Vector allFile=cms.getFilesInFolder(currentFolder);
resources.ensureCapacity(resources.size() + allFile.size());
Enumeration e=allFile.elements();
Vector resources2=null;
Vector allFile2=null;
Enumeration e2=null;
Object oBuffer2=null;
Vector resources3=null;
Vector allFile3=null;
Enumeration e3=null;
Object oBuffer1=null;
Object oBuffer3=null;
Vector resources4=new Vector();
ArrayList alLink=new ArrayList();
ArrayList alPos=new ArrayList();
ArrayList alLink2=new ArrayList();
ArrayList alPos2=new ArrayList();
while (e.hasMoreElements()) {
oBuffer1=e.nextElement();
resources.addElement(oBuffer1);
}
sRet=buildNavPop(cms,doc,userObject,resources,null,1,0,0,deep);
if (deep > 1) {
int size=resources.size();
String navLink[]=new String[size];
String navText[]=new String[size];
float navPos[]=new float[size];
int max=extractNav(cms,resources,navLink,navText,navPos);
for (int iCount=0; iCount < max; iCount++) {
if (navLink[iCount].endsWith("/") || navLink[iCount].endsWith("\\")) {
alLink.add(navLink[iCount]);
alPos.add(new Integer(iCount));
resources2=cms.getSubFolders(navLink[iCount]);
allFile2=cms.getFilesInFolder(navLink[iCount]);
resources2.ensureCapacity(resources2.size() + allFile2.size());
e2=allFile2.elements();
while (e2.hasMoreElements()) {
oBuffer2=e2.nextElement();
resources2.addElement(oBuffer2);
}
for (int iResCounter=0; iResCounter < resources2.size(); iResCounter++) {
resources4.addElement(resources2.elementAt(iResCounter));
}
sRet=buildNavPop(cms,doc,userObject,resources2,sRet,2,iCount,0,deep);
int size2=resources2.size();
String navLink2[]=new String[size2];
String navText2[]=new String[size2];
float navPos2[]=new float[size2];
int max3=extractNav(cms,resources2,navLink2,navText2,navPos2);
for (int iCount3=0; iCount3 < max3; iCount3++) {
alLink2.add(navLink2[iCount3]);
alPos2.add(new Integer(iCount3));
}
}
}
}
if (deep > 2) {
int size2=resources4.size();
String[] navLink=new String[size2];
String[] navText=new String[size2];
float[] navPos=new float[size2];
int iCounter3=0;
int max2=extractNav(cms,resources4,navLink,navText,navPos);
for (int iCount=0; iCount < max2; iCount++) {
if (navLink[iCount].endsWith("/") || navLink[iCount].endsWith("\\")) {
resources3=cms.getSubFolders(navLink[iCount]);
allFile3=cms.getFilesInFolder(navLink[iCount]);
resources3.ensureCapacity(resources3.size() + allFile3.size());
e3=allFile3.elements();
while (e3.hasMoreElements()) {
oBuffer3=e3.nextElement();
resources3.addElement(oBuffer3);
}
int iArrayPos=-1;
int iArrayPos2=-1;
String sLinkDummy="";
for (iCounter3=0; iCounter3 < alLink.size(); iCounter3++) {
sLinkDummy=navLink[iCount].substring(0,navLink[iCount].lastIndexOf("/"));
sLinkDummy=sLinkDummy.substring(0,sLinkDummy.lastIndexOf("/") + 1);
if (((String)alLink.get(iCounter3)).equals(sLinkDummy)) {
iArrayPos=((Integer)alPos.get(iCounter3)).intValue();
}
}
for (iCounter3=0; iCounter3 < alLink2.size(); iCounter3++) {
sLinkDummy=navLink[iCount].substring(0,navLink[iCount].lastIndexOf("/") + 1);
if (((String)alLink2.get(iCounter3)).equals(sLinkDummy)) {
iArrayPos2=((Integer)alPos2.get(iCounter3)).intValue();
}
}
if (navText.length > 0) {
sRet=buildNavPop(cms,doc,userObject,resources3,sRet,3,iArrayPos,iArrayPos2,deep);
}
}
}
}
return sRet.toString().getBytes();
}
