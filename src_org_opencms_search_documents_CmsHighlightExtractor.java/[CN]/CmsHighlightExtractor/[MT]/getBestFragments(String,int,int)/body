{
  StringBuffer newText=new StringBuffer();
  TokenStream stream=null;
  ArrayList docFrags=new ArrayList();
  DocumentFragment currentFrag=new DocumentFragment(newText.length(),docFrags.size());
  docFrags.add(currentFrag);
  FragmentQueue fragQueue=new FragmentQueue(maxNumFragments + 1);
  try {
    org.apache.lucene.analysis.Token token;
    String tokenText;
    int startOffset;
    int endOffset;
    int lastEndOffset=0;
    stream=m_analyzer.tokenStream(null,new StringReader(text));
    while ((token=stream.next()) != null) {
      startOffset=token.startOffset();
      endOffset=token.endOffset();
      tokenText=text.substring(startOffset,endOffset);
      if (startOffset > lastEndOffset) {
        newText.append(" ");
      }
      if (m_terms.contains(token.termText())) {
        newText.append(m_highlighter.highlightTerm(tokenText));
        currentFrag.addTerm(token.termText());
      }
 else {
        if (tokenText.length() > fragmentSize / 2) {
          newText.append(tokenText.substring(0,fragmentSize / 2));
          newText.append("...");
        }
 else {
          newText.append(tokenText);
        }
      }
      if (newText.length() >= (fragmentSize * (docFrags.size() + 1))) {
        currentFrag.m_textEndPos=newText.length();
        currentFrag=new DocumentFragment(newText.length(),docFrags.size());
        docFrags.add(currentFrag);
      }
      lastEndOffset=endOffset;
    }
    if (lastEndOffset < text.length()) {
      newText.append(text.substring(lastEndOffset));
    }
    currentFrag.m_textEndPos=newText.length();
    int minScore=0;
    for (Iterator i=docFrags.iterator(); i.hasNext(); ) {
      currentFrag=(DocumentFragment)i.next();
      if (currentFrag.getScore() >= minScore) {
        fragQueue.put(currentFrag);
        if (fragQueue.size() > maxNumFragments) {
          fragQueue.pop();
          minScore=((DocumentFragment)fragQueue.top()).getScore();
        }
      }
    }
    String fragText[]=new String[fragQueue.size()];
    for (int i=fragText.length - 1; i >= 0; i--) {
      DocumentFragment frag=(DocumentFragment)fragQueue.pop();
      fragText[i]=newText.substring(frag.m_textStartPos,frag.m_textEndPos);
    }
    return fragText;
  }
  finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      Exception e) {
      }
    }
  }
}
