{
  String rootUri=cms.getRequestContext().addSiteRoot(uri);
  CmsUUID logId=null;
  if (LOG.isDebugEnabled()) {
    logId=new CmsUUID();
    LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_ENTRY_3,logId,rootUri,Boolean.valueOf(online)).key());
  }
  CmsSitemapEntry startEntry=null;
  String startUri=rootUri;
  while (!startUri.equals("/") && (startEntry == null)) {
    startUri=CmsResource.getParentFolder(startUri);
    startEntry=m_cache.getUri(startUri,online);
  }
  Map<String,String> properties=new HashMap<String,String>();
  if (startEntry == null) {
    CmsXmlSitemap sitemapXml=getSitemapForUri(cms,uri,true);
    if (sitemapXml == null) {
      return null;
    }
    CmsSitemapBean sitemap=sitemapXml.getSitemap(cms,cms.getRequestContext().getLocale());
    if ((sitemap == null) || sitemap.getSiteEntries().isEmpty()) {
      return null;
    }
    startUri=sitemap.getEntryPoint();
    startEntry=sitemap.getSiteEntries().get(0);
    if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(startEntry.getName())) {
      startEntry.removeName();
    }
    startEntry.setRuntimeInfo(properties,0);
    m_cache.setUri(startUri,startEntry,online);
    if (normalizePath(rootUri.substring(startUri.length())).length() == 0) {
      LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_FOUND_3,logId,new Integer(0),startEntry.getRootPath()).key());
      return startEntry;
    }
  }
  properties.putAll(startEntry.getInheritedProperties());
  LinkedList<String> entryPaths=new LinkedList<String>(CmsStringUtil.splitAsList(normalizePath(rootUri.substring(startUri.length())),"/"));
  String uriPath=startUri;
  CmsSitemapEntry parentEntry=startEntry;
  boolean finished=false;
  while (!finished) {
    int position=0;
    List<CmsSitemapEntry> subEntries=getSubEntries(cms,parentEntry,entryPaths,properties,logId);
    if (subEntries == null) {
      return null;
    }
    String name=entryPaths.removeFirst();
    uriPath+=name + "/";
    if (m_cache.getMissingUri(uriPath,online) != null) {
      LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_ENTRY_MISSING_2,logId,startUri).key());
      return null;
    }
    LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_ENTRY_CHECK_2,logId,uriPath).key());
    int size=subEntries.size();
    for (; position < size; position++) {
      CmsSitemapEntry entry=subEntries.get(position);
      if (entry.getInheritedProperties() == null) {
        entry.setRuntimeInfo(properties,position);
        m_cache.setUri(uriPath,entry,online);
      }
      if (!entry.getName().equals(name)) {
        LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_NO_MATCH_3,logId,new Integer(position),entry.getRootPath()).key());
        continue;
      }
      LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_MATCH_3,logId,new Integer(position),entry.getRootPath()).key());
      if (entryPaths.isEmpty()) {
        LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_FOUND_3,logId,new Integer(position),entry.getRootPath()).key());
        return entry;
      }
 else {
        properties.putAll(entry.getProperties());
        parentEntry=entry;
        subEntries=getSubEntries(cms,entry,entryPaths,properties,logId);
        if (subEntries == null) {
          return null;
        }
        finished=subEntries.isEmpty();
        if (finished) {
          LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_NO_SUBENTRIES_3,logId,new Integer(position),entry.getRootPath()).key());
        }
      }
      break;
    }
    if (position == size) {
      finished=true;
      LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_NOT_FOUND_2,logId,uriPath).key());
    }
  }
  return null;
}
