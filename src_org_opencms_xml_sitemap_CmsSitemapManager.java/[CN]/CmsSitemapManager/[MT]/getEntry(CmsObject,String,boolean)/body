{
  String rootUri=cms.getRequestContext().addSiteRoot(uri);
  CmsUUID logId=null;
  if (LOG.isDebugEnabled()) {
    logId=new CmsUUID();
    LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_ENTRY_3,logId,rootUri,Boolean.valueOf(online)).key());
  }
  CmsSitemapEntry startEntry=null;
  String startUri=rootUri;
  while (!startUri.equals("/") && (startEntry == null)) {
    startUri=CmsResource.getParentFolder(startUri);
    startEntry=m_cache.getUri(startUri,online);
  }
  Map<String,String> properties=new HashMap<String,String>();
  if (startEntry == null) {
    CmsXmlSitemap sitemapXml=null;
    for (    CmsRelation relation : cms.readRelations(CmsRelationFilter.TARGETS.filterType(CmsRelationType.ENTRY_POINT))) {
      if (rootUri.startsWith(relation.getTargetPath())) {
        sitemapXml=CmsXmlSitemapFactory.unmarshal(cms,cms.readResource(relation.getSourceId()));
        break;
      }
    }
    if (sitemapXml == null) {
      return null;
    }
    CmsSitemapBean sitemap=sitemapXml.getSitemap(cms,cms.getRequestContext().getLocale());
    if ((sitemap == null) || sitemap.getSiteEntries().isEmpty()) {
      return null;
    }
    startUri=sitemap.getEntryPoint();
    startEntry=sitemap.getSiteEntries().get(0);
    startEntry.setRuntimeInfo(properties,0,null);
    m_cache.setUri(startUri,startEntry,online);
    if (normalizePath(rootUri.substring(startUri.length())).length() == 0) {
      LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_FOUND_3,logId,new Integer(0),startEntry.getRootPath()).key());
      return startEntry;
    }
  }
  properties.putAll(startEntry.getInheritedProperties());
  LinkedList<String> entryPaths=new LinkedList<String>(CmsStringUtil.splitAsList(normalizePath(rootUri.substring(startUri.length())),"/"));
  String uriPath=startUri;
  CmsSitemapEntry parentEntry=startEntry;
  List<CmsSitemapEntry> subEntries=startEntry.getSubEntries();
  boolean finished=false;
  while (!finished) {
    String name=entryPaths.removeFirst();
    uriPath+=name + "/";
    if (m_cache.getMissingUri(uriPath,online) != null) {
      LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_ENTRY_MISSING_2,logId,startUri).key());
      return null;
    }
    LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_ENTRY_CHECK_2,logId,uriPath).key());
    int position=0;
    int size=subEntries.size();
    for (; position < size; position++) {
      CmsSitemapEntry entry=subEntries.get(position);
      if (entry.getInheritedProperties() == null) {
        entry.setRuntimeInfo(properties,position,null);
        m_cache.setUri(uriPath,entry,online);
      }
      if (!entry.getName().equals(name)) {
        LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_NO_MATCH_3,logId,new Integer(position),entry.getRootPath()).key());
        continue;
      }
      LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_MATCH_3,logId,new Integer(position),entry.getRootPath()).key());
      if (entryPaths.isEmpty()) {
        LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_FOUND_3,logId,new Integer(position),entry.getRootPath()).key());
        return entry;
      }
 else {
        properties.putAll(entry.getProperties());
        parentEntry=entry;
        subEntries=entry.getSubEntries();
        if (subEntries.isEmpty()) {
          String subSitemapId=entry.getProperties().get(CmsSitemapManager.Property.sitemap.name());
          if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(subSitemapId)) {
            CmsResource subSitemap=cms.readResource(new CmsUUID(subSitemapId));
            LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_SUBSITEMAP_2,logId,cms.getSitePath(subSitemap)).key());
            CmsXmlSitemap sitemapXml=CmsXmlSitemapFactory.unmarshal(cms,subSitemap);
            CmsSitemapBean sitemap=sitemapXml.getSitemap(cms,cms.getRequestContext().getLocale());
            if (sitemap == null) {
              return null;
            }
            subEntries=sitemap.getSiteEntries();
          }
        }
        finished=subEntries.isEmpty();
        if (finished) {
          LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_NO_SUBENTRIES_3,logId,new Integer(position),entry.getRootPath()).key());
        }
      }
      break;
    }
    if (position == size) {
      finished=true;
      LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_NOT_FOUND_2,logId,uriPath).key());
    }
 else     if (finished && ((entryPaths.size() == 1) && CmsUUID.isValidUUID(entryPaths.get(0)))) {
      CmsUUID id=new CmsUUID(entryPaths.get(0));
      CmsResource contentRes=cms.readResource(id);
      String title=cms.readPropertyObject(contentRes,CmsPropertyDefinition.PROPERTY_TITLE,false).getValue(id.toString());
      HashMap<String,String> entryProps=new HashMap<String,String>(parentEntry.getProperties());
      entryProps.put(Property.navigation.getName(),Boolean.FALSE.toString());
      properties.put(Property.navigation.getName(),Boolean.FALSE.toString());
      CmsSitemapEntry contentEntry=new CmsSitemapEntry(parentEntry.getId(),parentEntry.getOriginalUri(),parentEntry.getResourceId(),id.toString(),title,entryProps,null);
      contentEntry.setRuntimeInfo(properties,0,id);
      LOG.debug(Messages.get().container(Messages.LOG_DEBUG_SITEMAP_FOUND_3,logId,new Integer(0),contentEntry.getRootPath()).key());
      return contentEntry;
    }
  }
  return null;
}
