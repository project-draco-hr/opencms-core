{
  StringBuffer result=new StringBuffer(2048);
  List<String> targetFolderList=new ArrayList<String>();
  if (getTargetFolder() != null) {
    StringTokenizer T=new StringTokenizer(getTargetFolder(),"|");
    while (T.hasMoreTokens()) {
      String currentFolder=T.nextToken().trim();
      targetFolderList.add(currentFolder);
    }
  }
 else {
    targetFolderList.add(null);
  }
  String storedSiteRoot=null;
  try {
    CmsFolder folder=null;
    List<CmsResource> resources=new ArrayList<CmsResource>();
    String oldSiteRoot=getCms().getRequestContext().getSiteRoot();
    Iterator<String> targets=targetFolderList.iterator();
    while (targets.hasNext()) {
      String currentTargetFolder=targets.next();
      if (getSettings().getTreeSite(getTreeType()) != null) {
        storedSiteRoot=getCms().getRequestContext().getSiteRoot();
        if (newTree() && (currentTargetFolder == null)) {
          currentTargetFolder="/";
        }
        getCms().getRequestContext().setSiteRoot(getSettings().getTreeSite(getTreeType()));
        try {
          getCms().readFolder(currentTargetFolder,CmsResourceFilter.ONLY_VISIBLE_NO_DELETED);
        }
 catch (        CmsException e) {
          if (LOG.isInfoEnabled()) {
            LOG.info(e);
          }
          currentTargetFolder="/";
        }
      }
      try {
        folder=getCms().readFolder(currentTargetFolder,CmsResourceFilter.ONLY_VISIBLE_NO_DELETED);
      }
 catch (      CmsException e) {
        return printError(e);
      }
      String startFolder=getStartFolder();
      String rcSite=getCms().getRequestContext().getSiteRoot();
      if (OpenCms.getSiteManager().startsWithShared(currentTargetFolder) && OpenCms.getSiteManager().startsWithShared(rcSite)) {
        currentTargetFolder=currentTargetFolder.substring(OpenCms.getSiteManager().getSharedFolder().length() - 1);
      }
      if ((startFolder == null) || (!currentTargetFolder.startsWith(startFolder))) {
        try {
          if (includeFiles()) {
            resources.addAll(getCms().getResourcesInFolder(currentTargetFolder,CmsResourceFilter.ONLY_VISIBLE_NO_DELETED));
          }
 else {
            resources.addAll(getCms().getSubFolders(currentTargetFolder,CmsResourceFilter.ONLY_VISIBLE_NO_DELETED));
          }
        }
 catch (        CmsException e) {
          return printError(e);
        }
      }
 else {
        try {
          if (includeFiles()) {
            resources.addAll(getCms().getResourcesInFolder(startFolder,CmsResourceFilter.ONLY_VISIBLE_NO_DELETED));
          }
 else {
            resources.addAll(getCms().getSubFolders(startFolder,CmsResourceFilter.ONLY_VISIBLE_NO_DELETED));
          }
          StringTokenizer tok=new StringTokenizer(currentTargetFolder.substring(startFolder.length()),"/");
          while (tok.hasMoreTokens()) {
            startFolder+=tok.nextToken() + "/";
            if (includeFiles()) {
              resources.addAll(getCms().getResourcesInFolder(startFolder,CmsResourceFilter.ONLY_VISIBLE_NO_DELETED));
            }
 else {
              resources.addAll(getCms().getSubFolders(startFolder,CmsResourceFilter.ONLY_VISIBLE_NO_DELETED));
            }
          }
        }
 catch (        CmsException e) {
          return printError(e);
        }
      }
    }
    result.append("function init() {\n");
    if (newTree()) {
      result.append("parent.initTree();\n");
      result.append(getRootNode());
    }
    List<String> projectResources=new ArrayList<String>();
    if (isProjectAware()) {
      try {
        projectResources=getCms().readProjectResources(getCms().getRequestContext().getCurrentProject());
      }
 catch (      CmsException e) {
        if (LOG.isInfoEnabled()) {
          LOG.info(e);
        }
      }
    }
    Iterator<CmsResource> i=resources.iterator();
    while (i.hasNext()) {
      CmsResource resource=i.next();
      boolean grey=false;
      if (isProjectAware()) {
        grey=!CmsProject.isInsideProject(projectResources,resource);
      }
      if (!grey) {
        try {
          OpenCms.getResourceManager().getResourceType(resource.getTypeId());
        }
 catch (        CmsLoaderException e) {
          grey=true;
        }
      }
      result.append(getNode(resource.getRootPath(),resource.getName(),resource.getTypeId(),resource.isFolder(),resource.getState(),grey));
    }
    if (includeFiles()) {
      result.append("parent.setIncludeFiles(true);\n");
    }
    result.append("parent.setProjectAware(").append(isProjectAware()).append(");\n");
    if (getTreeType() != null) {
      result.append("parent.setTreeType(\"");
      result.append(getTreeType());
      result.append("\");\n");
      String curSite=getSettings().getTreeSite(getTreeType());
      if (curSite != null) {
        result.append("parent.setSitePrefix(\"");
        result.append(getSitePrefix(curSite,oldSiteRoot));
        result.append("\");\n");
      }
    }
    result.append("parent.setRootFolder(\"");
    result.append(getRootFolder());
    result.append("\");\n");
    if (folder != null) {
      if (newTree()) {
        result.append("parent.showTree(parent.tree_display.document, \"");
        result.append(folder.getRootPath().hashCode());
        result.append("\");\n");
      }
 else {
        if (resources.size() == 0) {
          result.append("parent.setNoChilds(\"");
          result.append(folder.getRootPath().hashCode());
          result.append("\");\n");
        }
        result.append("parent.showLoadedNodes(parent.tree_display.document,\"");
        result.append(folder.getRootPath().hashCode());
        result.append("\");\n");
      }
    }
    result.append("}\n");
  }
  finally {
    if (storedSiteRoot != null) {
      getCms().getRequestContext().setSiteRoot(storedSiteRoot);
    }
  }
  return result.toString();
}
