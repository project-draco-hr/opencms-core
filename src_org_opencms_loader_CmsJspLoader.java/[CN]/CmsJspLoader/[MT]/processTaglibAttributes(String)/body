{
  final Pattern directivePattern=Pattern.compile("(?sm)<%@\\s*page.*?%>");
  final Pattern taglibPattern=Pattern.compile("(?sm)taglibs\\s*=\\s*\"(.*?)\"");
  final Pattern commaPattern=Pattern.compile("(?sm)\\s*,\\s*");
  final Set<String> taglibs=new LinkedHashSet<String>();
  final String marker=":::TAGLIBS:::";
  I_CmsRegexSubstitution directiveSub=new I_CmsRegexSubstitution(){
    private boolean m_first=true;
    public String substituteMatch(    String string,    Matcher matcher){
      String match=string.substring(matcher.start(),matcher.end());
      I_CmsRegexSubstitution taglibSub=new I_CmsRegexSubstitution(){
        public String substituteMatch(        String string1,        Matcher matcher1){
          String match1=string1.substring(matcher1.start(1),matcher1.end(1));
          for (          String taglibKey : Splitter.on(commaPattern).split(match1)) {
            taglibs.add(taglibKey);
          }
          return "";
        }
      }
;
      String result=CmsStringUtil.substitute(taglibPattern,match,taglibSub);
      if (m_first) {
        result+=marker;
        m_first=false;
      }
      return result;
    }
  }
;
  String substituted=CmsStringUtil.substitute(directivePattern,content,directiveSub);
  substituted=substituted.replaceAll(marker,generateTaglibInclusions(taglibs));
  substituted=substituted.replaceAll("(?sm)<%@\\s*page\\s*%>","");
  return substituted;
}
