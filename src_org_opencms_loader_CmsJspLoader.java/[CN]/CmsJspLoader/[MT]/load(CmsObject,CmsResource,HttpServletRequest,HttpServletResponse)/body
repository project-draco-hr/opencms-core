{
  long timer1;
  if (DEBUG > 0) {
    timer1=System.currentTimeMillis();
    System.err.println("========== JspLoader loading: " + cms.readAbsolutePath(file));
    System.err.println("JspLoader.load()  cms uri is: " + cms.getRequestContext().getUri());
  }
  boolean streaming=false;
  boolean bypass=false;
  String stream;
  try {
    stream=cms.readProperty(cms.readAbsolutePath(file),I_CmsResourceLoader.C_LOADER_STREAMPROPERTY);
  }
 catch (  CmsException e) {
    throw new CmsLoaderException("Error while loading stream properties for " + cms.readAbsolutePath(file),e);
  }
  if (stream != null) {
    if ("yes".equalsIgnoreCase(stream) || "true".equalsIgnoreCase(stream)) {
      streaming=true;
    }
 else     if ("bypass".equalsIgnoreCase(stream) || "bypasscache".equalsIgnoreCase(stream)) {
      bypass=true;
    }
  }
  if (DEBUG > 1) {
    System.err.println("========== JspLoader stream=" + streaming + " bypass="+ bypass);
  }
  CmsFlexController controller=(CmsFlexController)req.getAttribute(CmsFlexController.ATTRIBUTE_NAME);
  CmsFlexRequest f_req;
  CmsFlexResponse f_res;
  if (controller != null) {
    f_req=controller.getCurrentRequest();
    f_res=controller.getCurrentResponse();
  }
 else {
    controller=new CmsFlexController(cms,file,m_cache,req,res);
    req.setAttribute(CmsFlexController.ATTRIBUTE_NAME,controller);
    f_req=new CmsFlexRequest(req,controller);
    f_res=new CmsFlexResponse(res,controller,streaming,true);
    controller.pushRequest(f_req);
    controller.pushResponse(f_res);
  }
  if (bypass) {
    if (DEBUG > 1) {
      System.err.println("JspLoader.load() bypassing cache for file " + cms.readAbsolutePath(file));
    }
    String target=updateJsp(cms,file,f_req,controller,new HashSet());
    req.getRequestDispatcher(target).forward(f_req,res);
    if (DEBUG > 1) {
      System.err.println("JspLoader.load() cache was bypassed!");
    }
  }
 else {
    try {
      f_req.getRequestDispatcher(cms.readAbsolutePath(file)).include(f_req,f_res);
    }
 catch (    java.net.SocketException e) {
      OpenCms.getLog(this).debug("Ignoring SocketException" + e);
    }
    if (!streaming && !f_res.isSuspended()) {
      try {
        if (!res.isCommitted() || m_errorPagesAreNotCommited) {
          long lastModifiedHeader=req.getDateHeader(C_HEADER_IF_MODIFIED_SINCE);
          if (lastModifiedHeader > -1) {
            if (controller.getDateLastModified() == lastModifiedHeader) {
              res.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
              return;
            }
          }
          byte[] result=f_res.getWriterBytes();
          result=CmsEncoder.changeEncoding(result,OpenCms.getSystemInfo().getDefaultEncoding(),cms.getRequestContext().getEncoding());
          res.setContentLength(result.length);
          if (controller.getDateLastModified() > -1) {
            res.setDateHeader(C_HEADER_LAST_MODIFIED,controller.getDateLastModified());
          }
 else {
            res.setDateHeader(C_HEADER_LAST_MODIFIED,System.currentTimeMillis());
          }
          CmsFlexResponse.processHeaders(f_res.getHeaders(),res);
          res.getOutputStream().write(result);
          res.getOutputStream().flush();
          result=null;
        }
      }
 catch (      IllegalStateException e) {
        OpenCms.getLog(this).debug("Ignoring IllegalStateException" + e);
      }
catch (      java.net.SocketException e) {
        OpenCms.getLog(this).debug("Ignoring SocketException",e);
      }
    }
  }
  if (DEBUG > 0) {
    long timer2=System.currentTimeMillis() - timer1;
    System.err.println("========== JspLoader time delivering JSP for " + cms.readAbsolutePath(file) + ": "+ timer2+ "ms");
  }
  CmsFlexController.removeController(req);
}
