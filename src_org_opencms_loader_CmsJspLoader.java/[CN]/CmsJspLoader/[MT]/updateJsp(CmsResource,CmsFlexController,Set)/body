{
  String jspVfsName=resource.getRootPath();
  String extension;
  boolean isHardInclude;
  int loaderId=OpenCms.getResourceManager().getResourceType(resource.getTypeId()).getLoaderId();
  if ((loaderId == CmsJspLoader.RESOURCE_LOADER_ID) && (!jspVfsName.endsWith(JSP_EXTENSION))) {
    extension=JSP_EXTENSION;
    isHardInclude=false;
  }
 else {
    extension="";
    isHardInclude=(loaderId != CmsJspLoader.RESOURCE_LOADER_ID);
  }
  String jspTargetName=CmsFileUtil.getRepositoryName(m_jspWebAppRepository,jspVfsName + extension,controller.getCurrentRequest().isOnline());
  if (updatedFiles.contains(jspTargetName)) {
    return jspTargetName;
  }
  String jspPath=CmsFileUtil.getRepositoryName(m_jspRepository,jspVfsName + extension,controller.getCurrentRequest().isOnline());
  File d=new File(jspPath).getParentFile();
  if ((d == null) || (d.exists() && !(d.isDirectory() && d.canRead()))) {
    CmsMessageContainer message=Messages.get().container(Messages.LOG_ACCESS_DENIED_1,jspPath);
    LOG.error(message.key());
    throw new ServletException(message.key());
  }
  if (!d.exists()) {
    d.mkdirs();
  }
  try {
    while (m_processingFiles.contains(jspVfsName)) {
      try {
synchronized (m_processingFiles) {
          m_processingFiles.wait(100);
        }
      }
 catch (      InterruptedException e) {
      }
    }
    m_processingFiles.add(jspVfsName);
    boolean mustUpdate=false;
    File f=new File(jspPath);
    if (!f.exists()) {
      mustUpdate=true;
      File folder=f.getParentFile();
      if (!folder.exists()) {
        boolean success=folder.mkdirs();
        if (!success) {
          LOG.error(org.opencms.db.Messages.get().getBundle().key(org.opencms.db.Messages.LOG_CREATE_FOLDER_FAILED_1,folder.getAbsolutePath()));
        }
      }
    }
 else     if (f.lastModified() <= resource.getDateLastModified()) {
      mustUpdate=true;
    }
 else     if (controller.getCurrentRequest().isDoRecompile()) {
      mustUpdate=true;
    }
 else {
      updatedFiles.add(jspTargetName);
      mustUpdate=updateStrongLinks(resource,controller,updatedFiles);
    }
    if (mustUpdate) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_WRITING_JSP_1,jspTargetName));
      }
      updatedFiles.add(jspTargetName);
      byte[] contents;
      String encoding;
      try {
        CmsObject cms=controller.getCmsObject();
        contents=cms.readFile(resource).getContents();
        encoding=cms.readPropertyObject(resource,CmsPropertyDefinition.PROPERTY_CONTENT_ENCODING,true).getValue();
        if (encoding == null) {
          encoding=OpenCms.getSystemInfo().getDefaultEncoding();
        }
 else {
          encoding=CmsEncoder.lookupEncoding(encoding.trim(),encoding);
        }
      }
 catch (      CmsException e) {
        controller.setThrowable(e,jspVfsName);
        throw new ServletException(Messages.get().getBundle().key(Messages.ERR_LOADER_JSP_ACCESS_1,jspVfsName),e);
      }
      try {
        contents=parseJsp(contents,encoding,controller,updatedFiles,isHardInclude);
        if (LOG.isInfoEnabled()) {
          LOG.info(Messages.get().getBundle().key(Messages.LOG_JSP_PERMCHECK_4,new Object[]{f.getAbsolutePath(),Boolean.valueOf(f.exists()),Boolean.valueOf(f.isFile()),Boolean.valueOf(f.canWrite())}));
        }
synchronized (CmsJspLoader.class) {
          FileOutputStream fs=new FileOutputStream(f);
          fs.write(contents);
          fs.close();
        }
        if (LOG.isInfoEnabled()) {
          LOG.info(Messages.get().getBundle().key(Messages.LOG_UPDATED_JSP_2,jspTargetName,jspVfsName));
        }
      }
 catch (      FileNotFoundException e) {
        throw new ServletException(Messages.get().getBundle().key(Messages.ERR_LOADER_JSP_WRITE_1,f.getName()),e);
      }
    }
    controller.updateDates(f.lastModified(),CmsResource.DATE_EXPIRED_DEFAULT);
  }
  finally {
    m_processingFiles.remove(jspVfsName);
  }
  return jspTargetName;
}
