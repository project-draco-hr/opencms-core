{
  CmsObject cms=getCmsObject();
  echo("Extended test for the validation of values in the XML content");
  CmsXmlEntityResolver resolver=new CmsXmlEntityResolver(cms);
  String content;
  CmsXmlContent xmlcontent;
  content=CmsFileUtil.readFile("org/opencms/xml/content/xmlcontent-definition-8.xsd",CmsEncoder.ENCODING_UTF_8);
  CmsXmlEntityResolver.cacheSystemId(SCHEMA_SYSTEM_ID_8,content.getBytes(CmsEncoder.ENCODING_UTF_8));
  content=CmsFileUtil.readFile("org/opencms/xml/content/xmlcontent-8.xml",CmsEncoder.ENCODING_UTF_8);
  xmlcontent=CmsXmlContentFactory.unmarshal(content,CmsEncoder.ENCODING_UTF_8,resolver);
  xmlcontent.validateXmlStructure(resolver);
  CmsXmlContentValueSequence sequence;
  I_CmsXmlContentValue value;
  sequence=xmlcontent.getValueSequence("String",Locale.ENGLISH);
  value=sequence.addValue(cms,0);
  value.setStringValue(cms,"This is a String that contains an error and a warning!");
  xmlcontent.validateXmlStructure(resolver);
  CmsXmlContentErrorHandler errorHandler;
  errorHandler=xmlcontent.validate(cms);
  assertTrue(errorHandler.hasErrors());
  assertTrue(errorHandler.hasWarnings());
  assertTrue(errorHandler.hasErrors(Locale.ENGLISH));
  assertFalse(errorHandler.hasErrors(Locale.GERMAN));
  assertFalse(errorHandler.hasErrors(Locale.FRENCH));
  assertEquals(1,errorHandler.getErrors().size());
  assertEquals(1,errorHandler.getErrors(Locale.ENGLISH).size());
  assertEquals(1,errorHandler.getWarnings(Locale.ENGLISH).size());
  value.setStringValue(cms,"This is a nice String");
  errorHandler=xmlcontent.validate(cms);
  assertFalse(errorHandler.hasErrors());
  assertFalse(errorHandler.hasWarnings());
  sequence=xmlcontent.getValueSequence("DateTime",Locale.ENGLISH);
  value=sequence.addValue(cms,0);
  value.setStringValue(cms,"invalid!");
  boolean error=true;
  try {
    xmlcontent.validateXmlStructure(resolver);
  }
 catch (  Exception e) {
    error=false;
  }
  if (error) {
    fail("Invalid value was possible for DateTime");
  }
  errorHandler=xmlcontent.validate(cms);
  assertTrue(errorHandler.hasErrors());
  assertFalse(errorHandler.hasWarnings());
  assertEquals(1,errorHandler.getErrors(Locale.ENGLISH).size());
  value.setStringValue(cms,String.valueOf(System.currentTimeMillis()));
  xmlcontent.validateXmlStructure(resolver);
  errorHandler=xmlcontent.validate(cms);
  assertFalse(errorHandler.hasErrors());
  assertFalse(errorHandler.hasWarnings());
  sequence=xmlcontent.getValueSequence("Color",Locale.ENGLISH);
  value=sequence.addValue(cms,0);
  value.setStringValue(cms,"invalid!");
  error=true;
  try {
    xmlcontent.validateXmlStructure(resolver);
  }
 catch (  Exception e) {
    error=false;
  }
  if (error) {
    fail("Invalid value was possible for Color");
  }
  errorHandler=xmlcontent.validate(cms);
  assertTrue(errorHandler.hasErrors());
  assertFalse(errorHandler.hasWarnings());
  assertEquals(1,errorHandler.getErrors(Locale.ENGLISH).size());
  value.setStringValue(cms,"#fff");
  xmlcontent.validateXmlStructure(resolver);
  errorHandler=xmlcontent.validate(cms);
  assertTrue(errorHandler.hasErrors());
  assertFalse(errorHandler.hasWarnings());
  assertEquals(1,errorHandler.getErrors(Locale.ENGLISH).size());
  assertEquals("A valid HTML color value (e.g. #ffffff) is required",errorHandler.getErrors(Locale.ENGLISH).get(value.getPath()));
  value.setStringValue(cms,"#ffffff");
  xmlcontent.validateXmlStructure(resolver);
  errorHandler=xmlcontent.validate(cms);
  assertFalse(errorHandler.hasErrors());
  assertFalse(errorHandler.hasWarnings());
  sequence=xmlcontent.getValueSequence("Locale",Locale.ENGLISH);
  value=sequence.addValue(cms,0);
  value.setStringValue(cms,"invalid!");
  error=true;
  try {
    xmlcontent.validateXmlStructure(resolver);
  }
 catch (  Exception e) {
    error=false;
  }
  if (error) {
    fail("Invalid value was possible for Locale");
  }
  errorHandler=xmlcontent.validate(cms);
  assertTrue(errorHandler.hasErrors());
  assertFalse(errorHandler.hasWarnings());
  assertEquals(1,errorHandler.getErrors(Locale.ENGLISH).size());
  value.setStringValue(cms,Locale.GERMANY.toString());
  xmlcontent.validateXmlStructure(resolver);
  errorHandler=xmlcontent.validate(cms);
  assertTrue(errorHandler.hasErrors());
  assertFalse(errorHandler.hasWarnings());
  assertEquals(1,errorHandler.getErrors(Locale.ENGLISH).size());
  value.setStringValue(cms,Locale.GERMAN.toString());
  xmlcontent.validateXmlStructure(resolver);
  errorHandler=xmlcontent.validate(cms);
  assertFalse(errorHandler.hasErrors());
  assertFalse(errorHandler.hasWarnings());
  System.out.println(xmlcontent.toString());
}
