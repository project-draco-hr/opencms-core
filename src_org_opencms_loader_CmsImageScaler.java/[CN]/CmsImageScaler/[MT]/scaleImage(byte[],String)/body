{
  byte[] result=content;
  boolean imageProcessed=false;
  initCropArea();
  RenderSettings renderSettings;
  if ((m_renderMode == 0) && (m_quality == 0)) {
    renderSettings=new RenderSettings(Simapi.RENDER_QUALITY);
  }
 else {
    renderSettings=new RenderSettings(m_renderMode);
    if (m_quality != 0) {
      renderSettings.setCompressionQuality(m_quality / 100f);
    }
  }
  renderSettings.setMaximumBlurSize(m_maxBlurSize);
  Simapi scaler=new Simapi(renderSettings);
  String imageType=Simapi.getImageType(rootPath);
  if (imageType == null) {
    String mimeType=OpenCms.getResourceManager().getMimeType(rootPath,null,null);
    if (mimeType == null) {
      imageType=Simapi.TYPE_JPEG;
    }
  }
  if (imageType == null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.ERR_UNABLE_TO_SCALE_IMAGE_2,rootPath,toString()));
    }
    return result;
  }
  try {
    BufferedImage image=Simapi.read(content);
    if (isCropping()) {
      if ((m_cropHeight > image.getHeight()) || (m_cropWidth > image.getWidth())) {
        return result;
      }
    }
    Color color=getColor();
    if (!m_filters.isEmpty()) {
      Iterator<String> i=m_filters.iterator();
      while (i.hasNext()) {
        String filter=i.next();
        if (FILTER_GRAYSCALE.equals(filter)) {
          GrayscaleFilter grayscaleFilter=new GrayscaleFilter();
          renderSettings.addImageFilter(grayscaleFilter);
        }
 else         if (FILTER_SHADOW.equals(filter)) {
          ShadowFilter shadowFilter=new ShadowFilter();
          shadowFilter.setXOffset(5);
          shadowFilter.setYOffset(5);
          shadowFilter.setOpacity(192);
          shadowFilter.setBackgroundColor(color.getRGB());
          color=Simapi.COLOR_TRANSPARENT;
          renderSettings.setTransparentReplaceColor(Simapi.COLOR_TRANSPARENT);
          renderSettings.addImageFilter(shadowFilter);
        }
      }
    }
    if (isCropping()) {
      image=scaler.cropToSize(image,m_cropX,m_cropY,m_cropWidth,m_cropHeight,getWidth(),getHeight(),color);
      imageProcessed=true;
    }
 else {
      int imageWidth=image.getWidth();
      int imageHeight=image.getHeight();
switch (getType()) {
case 1:
        image=scaler.resize(image,getWidth(),getHeight(),color,getPosition(),false);
      imageProcessed=true;
    break;
case 2:
  if (((imageWidth != getWidth()) || (imageHeight != getHeight()))) {
    image=scaler.resize(image,getWidth(),getHeight(),getPosition());
    imageProcessed=true;
  }
break;
case 3:
if (((imageWidth != getWidth()) || (imageHeight != getHeight()))) {
image=scaler.resize(image,getWidth(),getHeight(),true);
imageProcessed=true;
}
break;
case 4:
if (((imageWidth != getWidth()) || (imageHeight != getHeight()))) {
image=scaler.resize(image,getWidth(),getHeight(),false);
imageProcessed=true;
}
break;
case 5:
if (((imageWidth != getWidth()) || (imageHeight != getHeight()))) {
image=scaler.resize(image,getWidth(),getHeight(),false);
imageProcessed=true;
}
break;
default :
image=scaler.resize(image,getWidth(),getHeight(),color,getPosition(),true);
imageProcessed=true;
}
}
if (!m_filters.isEmpty()) {
Rectangle targetSize=scaler.applyFilterDimensions(getWidth(),getHeight());
image=scaler.resize(image,(int)targetSize.getWidth(),(int)targetSize.getHeight(),Simapi.COLOR_TRANSPARENT,Simapi.POS_CENTER);
image=scaler.applyFilters(image);
imageProcessed=true;
}
if (imageProcessed) {
result=scaler.getBytes(image,imageType);
}
}
 catch (Exception e) {
if (LOG.isDebugEnabled()) {
LOG.debug(Messages.get().getBundle().key(Messages.ERR_UNABLE_TO_SCALE_IMAGE_2,rootPath,toString()),e);
}
}
return result;
}
