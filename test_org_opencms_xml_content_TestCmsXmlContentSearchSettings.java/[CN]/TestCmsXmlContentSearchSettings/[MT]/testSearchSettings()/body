{
  CmsXmlEntityResolver resolver=new CmsXmlEntityResolver(null);
  String content;
  cacheXmlSchema("org/opencms/xml/content/xmlcontent-searchsettings-image.xsd",SCHEMA_SYSTEM_ID_1);
  content=CmsFileUtil.readFile("org/opencms/xml/content/xmlcontent-searchsettings.xsd",CmsEncoder.ENCODING_UTF_8);
  CmsXmlContentDefinition definition=CmsXmlContentDefinition.unmarshal(content,SCHEMA_SYSTEM_ID_2,resolver);
  CmsXmlEntityResolver.cacheSystemId(SCHEMA_SYSTEM_ID_2,definition.getSchema().asXML().getBytes(CmsEncoder.ENCODING_UTF_8));
  content=CmsFileUtil.readFile("org/opencms/xml/content/test-searchsettings.xml",CmsEncoder.ENCODING_UTF_8);
  CmsXmlContent xmlContent=CmsXmlContentFactory.unmarshal(content,CmsEncoder.ENCODING_UTF_8,resolver);
  List<String> goods=Arrays.asList(new String[]{"Title[1]","Description[1]","Image[1]","Image[1]/Path[1]","Image[1]/Description[1]"});
  List<String> nogoods=new ArrayList<String>();
  I_CmsXmlContentHandler contentHandler=xmlContent.getHandler();
  for (  Locale locale : xmlContent.getLocales()) {
    List<String> paths=xmlContent.getNames(locale);
    for (    String xpath : paths) {
      I_CmsXmlContentValue value=xmlContent.getValue(xpath,locale);
      if (contentHandler.isSearchable(value)) {
        assertTrue("This value should be in the list of goods",goods.contains(value.getPath()));
      }
 else {
        nogoods.add(value.getPath());
      }
    }
  }
  for (  String ns : nogoods) {
    assertTrue("The value with XPath: " + ns + "should not be searchable",!goods.contains(ns));
  }
}
