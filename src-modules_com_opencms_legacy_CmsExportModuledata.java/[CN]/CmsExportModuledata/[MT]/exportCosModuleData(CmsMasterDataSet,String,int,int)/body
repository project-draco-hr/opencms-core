{
  Document doc=DocumentHelper.createDocument();
  Element data=doc.addElement(com.opencms.core.I_CmsConstants.C_EXPORT_TAG_MODULEXPORT).addElement(C_EXPORT_TAG_MASTER_DATASET);
  String ownerName="";
  try {
    ownerName=getCms().readUser(dataset.m_userId).getName();
  }
 catch (  CmsException e) {
    if (CmsLog.getLog(this).isErrorEnabled()) {
      CmsLog.getLog(this).error("Unable to read user with id " + dataset.m_userId,e);
    }
  }
  String groupName="";
  try {
    groupName=getCms().readGroup(dataset.m_groupId).getName();
  }
 catch (  CmsException e) {
    if (CmsLog.getLog(this).isErrorEnabled()) {
      CmsLog.getLog(this).error("Unable to read group with id " + dataset.m_groupId,e);
    }
  }
  data.addElement(C_EXPORT_TAG_MASTER_ID).addText(dataset.m_masterId.toString());
  data.addElement(C_EXPORT_TAG_MASTER_USER).addText(ownerName);
  data.addElement(C_EXPORT_TAG_MASTER_GROUP).addText(groupName);
  data.addElement(C_EXPORT_TAG_MASTER_ACCESSFLAGS).addText(Integer.toString(dataset.m_accessFlags));
  data.addElement(C_EXPORT_TAG_MASTER_PUBLICATIONDATE).addText(CmsDateUtil.getDateTimeShort(dataset.m_publicationDate));
  data.addElement(C_EXPORT_TAG_MASTER_PURGEDATE).addText(CmsDateUtil.getDateTimeShort(dataset.m_purgeDate));
  data.addElement(C_EXPORT_TAG_MASTER_FLAGS).addText(Integer.toString(dataset.m_flags));
  data.addElement(C_EXPORT_TAG_MASTER_FEEDID).addText(Integer.toString(dataset.m_feedId));
  data.addElement(C_EXPORT_TAG_MASTER_FEEDREFERENCE).addText(Integer.toString(dataset.m_feedReference));
  data.addElement(C_EXPORT_TAG_MASTER_FEEDFILENAME).addText(dataset.m_feedFilename != null ? dataset.m_feedFilename : "");
  data.addElement(C_EXPORT_TAG_MASTER_TITLE).addCDATA(dataset.m_title != null ? dataset.m_title : "");
  for (int i=0; i < dataset.m_dataBig.length; i++) {
    String value=dataset.m_dataBig[i];
    String dataFile=new String();
    if (value != null && !"".equals(value)) {
      dataFile="databig_" + subId + "_"+ masterNr+ "_"+ i+ ".dat";
      writeExportFile(dataFile,value.getBytes());
    }
    data.addElement(C_EXPORT_TAG_MASTER_DATABIG + i).addText(dataFile);
  }
  for (int i=0; i < dataset.m_dataMedium.length; i++) {
    String value=dataset.m_dataMedium[i];
    String dataFile=new String();
    if (value != null && !"".equals(value)) {
      dataFile="datamedium_" + subId + "_"+ masterNr+ "_"+ i+ ".dat";
      writeExportFile(dataFile,value.getBytes());
    }
    data.addElement(C_EXPORT_TAG_MASTER_DATAMEDIUM + i).addText(dataFile);
  }
  for (int i=0; i < dataset.m_dataSmall.length; i++) {
    String value=dataset.m_dataSmall[i];
    String dataFile=new String();
    if (value != null && !"".equals(value)) {
      dataFile="datasmall_" + subId + "_"+ masterNr+ "_"+ i+ ".dat";
      writeExportFile(dataFile,value.getBytes());
    }
    data.addElement(C_EXPORT_TAG_MASTER_DATASMALL + i).addText(dataFile);
  }
  for (int i=0; i < dataset.m_dataInt.length; i++) {
    String value="" + dataset.m_dataInt[i];
    data.addElement(C_EXPORT_TAG_MASTER_DATAINT + i).addText(value);
  }
  for (int i=0; i < dataset.m_dataReference.length; i++) {
    String value="" + dataset.m_dataReference[i];
    data.addElement(C_EXPORT_TAG_MASTER_DATAREFERENCE + i).addText(value);
  }
  for (int i=0; i < dataset.m_dataDate.length; i++) {
    String value=CmsDateUtil.getDateTimeShort(dataset.m_dataDate[i]);
    data.addElement(C_EXPORT_TAG_MASTER_DATADATE + i).addText(value);
  }
  try {
    ZipEntry entry=new ZipEntry(filename);
    getExportZipStream().putNextEntry(entry);
    CmsXmlSaxWriter saxHandler=new CmsXmlSaxWriter(new OutputStreamWriter(getExportZipStream()),OpenCms.getSystemInfo().getDefaultEncoding());
    (new SAXWriter(saxHandler,saxHandler)).write(doc);
    getExportZipStream().closeEntry();
  }
 catch (  SAXException e) {
    getReport().println(e);
    if (CmsLog.getLog(this).isErrorEnabled()) {
      CmsLog.getLog(this).error("Unable to write ZIP dataset file " + filename,e);
    }
    throw new CmsLegacyException(CmsLegacyException.C_UNKNOWN_EXCEPTION,e);
  }
catch (  IOException e) {
    getReport().println(e);
    if (CmsLog.getLog(this).isErrorEnabled()) {
      CmsLog.getLog(this).error("Unable to write ZIP dataset file " + filename,e);
    }
    throw new CmsLegacyException(CmsLegacyException.C_UNKNOWN_EXCEPTION,e);
  }
}
