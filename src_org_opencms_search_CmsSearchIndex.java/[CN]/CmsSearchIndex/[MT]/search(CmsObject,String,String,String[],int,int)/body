{
  Document luceneDocument=null;
  double maxScore=-1.0;
  CmsSearchResult searchResult=null;
  double score=-1;
  String excerpt=null;
  long totalSearchDuration=-System.currentTimeMillis();
  long luceneSearchDuration=0;
  if (OpenCms.getLog(this).isDebugEnabled()) {
    OpenCms.getLog(this).debug("Searching for \"" + searchQuery + "\" in fields \""+ fields+ "\" of index "+ m_name);
  }
  CmsRequestContext context=cms.getRequestContext();
  CmsProject currentProject=context.currentProject();
  Searcher searcher=null;
  Hits hits;
  List searchResults=new ArrayList();
  int previousPriority=Thread.currentThread().getPriority();
  try {
    if (m_priority > 0) {
      Thread.currentThread().setPriority(m_priority);
    }
    context.setCurrentProject(cms.readProject(m_project));
    if (searchRoot != null && !"".equals(searchRoot)) {
      searchRoot=cms.getRequestContext().getSiteRoot() + searchRoot;
    }
 else {
      searchRoot=cms.getRequestContext().getSiteRoot();
    }
    luceneSearchDuration=-System.currentTimeMillis();
    Analyzer languageAnalyzer=OpenCms.getSearchManager().getAnalyzer(m_locale);
    BooleanQuery.setMaxClauseCount(Integer.MAX_VALUE);
    BooleanQuery query=new BooleanQuery();
    if (CmsStringUtil.isNotEmpty(searchRoot)) {
      String phrase="\"" + C_ROOT_PATH_TOKEN + " "+ searchRoot.replace('/',' ').trim()+ "\"";
      Query phraseQuery=QueryParser.parse(phrase,I_CmsDocumentFactory.DOC_ROOT,languageAnalyzer);
      query.add(phraseQuery,true,false);
    }
    if (!C_SEARCH_QUERY_RETURN_ALL.equals(searchQuery) && (fields != null) && (fields.length > 0)) {
      BooleanQuery fieldsQuery=new BooleanQuery();
      for (int i=0; i < fields.length; i++) {
        fieldsQuery.add(QueryParser.parse(searchQuery,fields[i],languageAnalyzer),false,false);
      }
      query.add(fieldsQuery,true,false);
    }
 else {
      query.add(QueryParser.parse(searchQuery,I_CmsDocumentFactory.DOC_CONTENT,languageAnalyzer),true,false);
    }
    searcher=new IndexSearcher(m_path);
    hits=searcher.search(query);
    luceneSearchDuration+=System.currentTimeMillis();
    if (hits != null) {
      maxScore=(hits.length() > 0) ? hits.score(0) : 0.0;
      int start=-1, end=-1;
      if (matchesPerPage > 0 && page > 0 && hits.length() > 0) {
        start=matchesPerPage * (page - 1);
        end=start + matchesPerPage;
        start=(start > hits.length()) ? hits.length() : start;
        end=(end > hits.length()) ? hits.length() : end;
      }
 else {
        start=0;
        end=hits.length();
      }
      if (m_checkPermissions) {
        for (int i=0, cnt=0; i < hits.length() && cnt < end; i++) {
          try {
            luceneDocument=hits.doc(i);
            score=(hits.score(i) / maxScore) * 100.0;
            if (getIndexResource(cms,luceneDocument) != null) {
              if (cnt >= start) {
                if (m_createExcerpt) {
                  excerpt=getExcerpt(luceneDocument.getField(I_CmsDocumentFactory.DOC_CONTENT).stringValue(),searchQuery);
                }
                searchResult=new CmsSearchResult((int)score,luceneDocument,excerpt);
                searchResults.add(searchResult);
              }
              cnt++;
            }
          }
 catch (          Exception exc) {
          }
        }
      }
 else {
        for (int i=start; i < end; i++) {
          try {
            luceneDocument=hits.doc(i);
            score=(hits.score(i) / maxScore) * 100.0;
            if (m_createExcerpt) {
              excerpt=getExcerpt(luceneDocument.getField(I_CmsDocumentFactory.DOC_CONTENT).stringValue(),searchQuery);
            }
            searchResult=new CmsSearchResult((int)score,luceneDocument,excerpt);
            searchResults.add(searchResult);
          }
 catch (          Exception exc) {
          }
        }
      }
      searchResults.add(new Integer(hits.length()));
    }
 else {
      searchResults.add(new Integer(0));
    }
  }
 catch (  Exception exc) {
    throw new CmsException("[" + this.getClass().getName() + "] "+ "Search on "+ m_path+ " failed. ",exc);
  }
 finally {
    Thread.currentThread().setPriority(previousPriority);
    if (searcher != null) {
      try {
        searcher.close();
      }
 catch (      IOException exc) {
      }
    }
    context.setCurrentProject(currentProject);
  }
  totalSearchDuration+=System.currentTimeMillis();
  if (OpenCms.getLog(this).isDebugEnabled()) {
    OpenCms.getLog(this).debug(hits.length() + " results found in " + totalSearchDuration+ " ms"+ " (Lucene: "+ luceneSearchDuration+ " ms)");
  }
  return searchResults;
}
