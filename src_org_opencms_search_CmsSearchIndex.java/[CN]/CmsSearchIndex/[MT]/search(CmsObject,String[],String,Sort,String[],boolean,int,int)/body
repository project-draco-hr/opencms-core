{
  long timeTotal=-System.currentTimeMillis();
  long timeLucene;
  long timeResultProcessing;
  if (OpenCms.getLog(this).isDebugEnabled()) {
    StringBuffer searchFields=new StringBuffer();
    if (fields != null) {
      for (int i=0; i < fields.length; i++) {
        searchFields.append(fields[i]);
        if (i + 1 < fields.length) {
          searchFields.append(", ");
        }
      }
    }
    OpenCms.getLog(this).debug("Searching for \"" + searchQuery + "\" in fields ["+ searchFields+ "] of index "+ m_name);
  }
  CmsRequestContext context=cms.getRequestContext();
  CmsProject currentProject=context.currentProject();
  IndexSearcher searcher=null;
  Hits hits;
  CmsSearchResultList searchResults=new CmsSearchResultList();
  int previousPriority=Thread.currentThread().getPriority();
  try {
    if (m_priority > 0) {
      Thread.currentThread().setPriority(m_priority);
    }
    context.setCurrentProject(cms.readProject(m_project));
    if ((searchRoots != null) && (searchRoots.length > 0)) {
      for (int i=0; i < searchRoots.length; i++) {
        searchRoots[i]=cms.getRequestContext().addSiteRoot(searchRoots[i]);
      }
    }
 else {
      searchRoots=new String[]{cms.getRequestContext().getSiteRoot()};
    }
    timeLucene=-System.currentTimeMillis();
    Analyzer languageAnalyzer=OpenCms.getSearchManager().getAnalyzer(m_locale);
    BooleanQuery query=new BooleanQuery();
    StringBuffer phrase=new StringBuffer();
    phrase.append("+(");
    for (int i=0; i < searchRoots.length; i++) {
      phrase.append("\"");
      phrase.append(rewriteResourcePath(searchRoots[i],true));
      phrase.append("\" ");
    }
    phrase.append(")");
    Query phraseQuery=QueryParser.parse(phrase.toString(),I_CmsDocumentFactory.DOC_ROOT,languageAnalyzer);
    query.add(phraseQuery,true,false);
    if ((fields != null) && (fields.length > 0)) {
      BooleanQuery fieldsQuery=new BooleanQuery();
      for (int i=0; i < fields.length; i++) {
        fieldsQuery.add(QueryParser.parse(searchQuery,fields[i],languageAnalyzer),false,false);
      }
      query.add(fieldsQuery,true,false);
    }
 else {
      query.add(QueryParser.parse(searchQuery,I_CmsDocumentFactory.DOC_CONTENT,languageAnalyzer),true,false);
    }
    searcher=new IndexSearcher(m_path);
    Query finalQuery;
    if (m_createExcerpt || OpenCms.getLog(this).isDebugEnabled()) {
      finalQuery=searcher.rewrite(query);
    }
 else {
      finalQuery=query;
    }
    if (OpenCms.getLog(this).isDebugEnabled()) {
      OpenCms.getLog(this).debug("Base query: " + query);
      OpenCms.getLog(this).debug("Rewritten query: " + finalQuery);
    }
    CmsSearchCategoryCollector categoryCollector;
    if (countCategories) {
      categoryCollector=new CmsSearchCategoryCollector(searcher);
      searcher.search(finalQuery,categoryCollector);
      searchResults.setCategories(categoryCollector.getCategoryCountResult());
    }
    hits=searcher.search(finalQuery,sortOrder);
    int hitCount=hits.length();
    timeLucene+=System.currentTimeMillis();
    timeResultProcessing=-System.currentTimeMillis();
    Document doc;
    CmsSearchResult searchResult;
    String excerpt=null;
    if (hits != null) {
      int start=-1, end=-1;
      if (matchesPerPage > 0 && page > 0 && hitCount > 0) {
        start=matchesPerPage * (page - 1);
        end=start + matchesPerPage;
        start=(start > hitCount) ? hitCount : start;
        end=(end > hitCount) ? hitCount : end;
      }
 else {
        start=0;
        end=hitCount;
      }
      for (int i=0, cnt=0; i < hitCount && cnt < end; i++) {
        try {
          doc=hits.doc(i);
          if (hasReadPermission(cms,doc)) {
            if (cnt >= start) {
              if (m_createExcerpt) {
                excerpt=getExcerpt(doc.getField(I_CmsDocumentFactory.DOC_CONTENT).stringValue(),finalQuery,languageAnalyzer);
              }
              searchResult=new CmsSearchResult(Math.round(hits.score(i) * 100f),doc,excerpt);
              searchResults.add(searchResult);
            }
            cnt++;
          }
        }
 catch (        Exception e) {
          OpenCms.getLog(this).warn("Error during search result iteration",e);
        }
      }
      searchResults.setHitCount(hitCount);
    }
 else {
      searchResults.setHitCount(0);
    }
    timeResultProcessing+=System.currentTimeMillis();
  }
 catch (  Exception exc) {
    throw new CmsException("Searching for \"" + searchQuery + "\" failed",exc);
  }
 finally {
    Thread.currentThread().setPriority(previousPriority);
    if (searcher != null) {
      try {
        searcher.close();
      }
 catch (      IOException exc) {
      }
    }
    context.setCurrentProject(currentProject);
  }
  timeTotal+=System.currentTimeMillis();
  if (OpenCms.getLog(this).isDebugEnabled()) {
    OpenCms.getLog(this).debug(hits.length() + " results found in " + timeTotal+ " ms"+ " (Lucene: "+ timeLucene+ " ms OpenCms: "+ timeResultProcessing+ " ms)");
  }
  return searchResults;
}
