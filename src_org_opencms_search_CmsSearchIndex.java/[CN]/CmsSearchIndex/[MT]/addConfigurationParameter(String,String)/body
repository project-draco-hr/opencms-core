{
  if (PERMISSIONS.equals(key)) {
    m_checkPermissions=Boolean.valueOf(value).booleanValue();
  }
 else   if (TIME_RANGE.equals(key)) {
    m_checkTimeRange=Boolean.valueOf(value).booleanValue();
  }
 else   if (EXCERPT.equals(key)) {
    m_createExcerpt=Boolean.valueOf(value).booleanValue();
  }
 else   if (EXTRACT_CONTENT.equals(key)) {
    m_extractContent=Boolean.valueOf(value).booleanValue();
  }
 else   if (BACKUP_REINDEXING.equals(key)) {
    m_backupReindexing=Boolean.valueOf(value).booleanValue();
  }
 else   if (MAX_HITS.equals(key)) {
    try {
      m_maxHits=Integer.parseInt(value);
    }
 catch (    NumberFormatException e) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_INVALID_PARAM_3,value,key,getName()));
    }
    if (m_maxHits < (MAX_HITS_DEFAULT / 100)) {
      m_maxHits=MAX_HITS_DEFAULT;
      LOG.error(Messages.get().getBundle().key(Messages.LOG_INVALID_PARAM_3,value,key,getName()));
    }
  }
 else   if (PRIORITY.equals(key)) {
    m_priority=Integer.parseInt(value);
    if (m_priority < Thread.MIN_PRIORITY) {
      m_priority=Thread.MIN_PRIORITY;
      LOG.error(Messages.get().getBundle().key(Messages.LOG_SEARCH_PRIORITY_TOO_LOW_2,value,new Integer(Thread.MIN_PRIORITY)));
    }
 else     if (m_priority > Thread.MAX_PRIORITY) {
      m_priority=Thread.MAX_PRIORITY;
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_SEARCH_PRIORITY_TOO_HIGH_2,value,new Integer(Thread.MAX_PRIORITY)));
    }
  }
 else   if (LUCENE_MAX_MERGE_DOCS.equals(key)) {
    try {
      m_luceneMaxMergeDocs=Integer.valueOf(value);
    }
 catch (    NumberFormatException e) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_INVALID_PARAM_3,value,key,getName()));
    }
  }
 else   if (LUCENE_MERGE_FACTOR.equals(key)) {
    try {
      m_luceneMergeFactor=Integer.valueOf(value);
    }
 catch (    NumberFormatException e) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_INVALID_PARAM_3,value,key,getName()));
    }
  }
 else   if (LUCENE_RAM_BUFFER_SIZE_MB.equals(key)) {
    try {
      m_luceneRAMBufferSizeMB=Double.valueOf(value);
    }
 catch (    NumberFormatException e) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_INVALID_PARAM_3,value,key,getName()));
    }
  }
 else   if (LUCENE_USE_COMPOUND_FILE.equals(key)) {
    m_luceneUseCompoundFile=Boolean.valueOf(value);
  }
}
