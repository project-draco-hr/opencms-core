{
  List searchResult=null;
  Query query=null;
  Searcher searcher=null;
  IndexReader reader=null;
  Hits hits=null;
  Document doc=null;
  A_CmsIndexResource resource=null;
  List foundDocuments=null;
  double maxScore=-1.0;
  double[] scores=null;
  Map searchCache=OpenCms.getSearchManager().getResultCache();
  String key=cms.getRequestContext().currentUser().getName() + "_" + cms.getRequestContext().getRemoteAddress()+ "_"+ m_name+ "_"+ searchQuery+ "_"+ searchRoot+ "_"+ fields;
  searchResult=(ArrayList)searchCache.get(key);
  if (searchResult != null) {
    return searchResult;
  }
  CmsRequestContext context=cms.getRequestContext();
  CmsProject currentProject=context.currentProject();
  context.setCurrentProject(cms.readProject(m_project));
  if (searchRoot != null && !"".equals(searchRoot)) {
    searchRoot=cms.getRequestContext().getSiteRoot() + searchRoot;
  }
 else {
    searchRoot=cms.getRequestContext().getSiteRoot();
  }
  if (OpenCms.getLog(this).isDebugEnabled()) {
    OpenCms.getLog(this).debug("Searching for \"" + searchQuery + "\" in fields \""+ fields+ "\" of index "+ m_name);
  }
  try {
    if (!"*".equals(searchQuery)) {
      if (fields != null) {
        BooleanQuery fieldsQuery=new BooleanQuery();
        String fList[]=org.opencms.util.CmsStringSubstitution.split(fields," ");
        for (int i=0; i < fList.length; i++) {
          fieldsQuery.add(QueryParser.parse(searchQuery,fList[i],OpenCms.getSearchManager().getAnalyzer(m_locale)),false,false);
        }
        query=fieldsQuery;
      }
 else {
        query=QueryParser.parse(searchQuery,I_CmsDocumentFactory.DOC_CONTENT,OpenCms.getSearchManager().getAnalyzer(m_locale));
      }
      searcher=new IndexSearcher(m_path);
      hits=searcher.search(query);
      foundDocuments=new ArrayList(hits.length());
      scores=new double[hits.length()];
      for (int i=0, n=hits.length(); i < n; i++) {
        doc=hits.doc(i);
        foundDocuments.add(doc);
        scores[i]=hits.score(i);
      }
    }
 else {
      try {
        reader=IndexReader.open(m_path);
        foundDocuments=new ArrayList(reader.numDocs());
        scores=new double[reader.numDocs()];
        for (int i=0, n=reader.numDocs(); i < n; i++) {
          if (!reader.isDeleted(i)) {
            doc=reader.document(i);
            foundDocuments.add(doc);
            scores[i]=0;
          }
        }
      }
  finally {
        if (reader != null) {
          reader.close();
        }
      }
    }
    searchResult=new ArrayList(foundDocuments.size());
    for (int i=0, n=foundDocuments.size(); i < n; i++) {
      try {
        doc=(Document)foundDocuments.get(i);
        resource=getIndexResource(cms,searchRoot,doc);
        if (resource != null) {
          maxScore=(maxScore < scores[i]) ? scores[i] : maxScore;
          searchResult.add(new CmsSearchResult(this,searchQuery,resource,doc,(int)((scores[i] / maxScore) * 100.0)));
        }
      }
 catch (      Exception exc) {
      }
    }
  }
 catch (  Exception exc) {
    throw new CmsException("[" + this.getClass().getName() + "] "+ "Search on "+ m_path+ " failed. ",exc);
  }
 finally {
    if (searcher != null) {
      try {
        searcher.close();
      }
 catch (      IOException exc) {
      }
    }
    context.setCurrentProject(currentProject);
  }
  searchCache.put(key,searchResult);
  return searchResult;
}
