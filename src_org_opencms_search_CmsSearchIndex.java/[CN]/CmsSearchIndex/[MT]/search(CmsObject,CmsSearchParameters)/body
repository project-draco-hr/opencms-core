{
  long timeTotal=-System.currentTimeMillis();
  long timeLucene;
  long timeResultProcessing;
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().getBundle().key(Messages.LOG_SEARCH_PARAMS_2,params,m_name));
  }
  CmsRequestContext context=cms.getRequestContext();
  CmsProject currentProject=context.currentProject();
  IndexSearcher searcher=null;
  Hits hits;
  CmsSearchResultList searchResults=new CmsSearchResultList();
  int previousPriority=Thread.currentThread().getPriority();
  try {
    if (m_priority > 0) {
      Thread.currentThread().setPriority(m_priority);
    }
    context.setCurrentProject(cms.readProject(m_project));
    String[] roots;
    if ((params.getRoots() != null) && (params.getRoots().size() > 0)) {
      roots=new String[params.getRoots().size()];
      for (int i=0; i < params.getRoots().size(); i++) {
        roots[i]=cms.getRequestContext().addSiteRoot((String)params.getRoots().get(i));
      }
    }
 else {
      roots=new String[]{cms.getRequestContext().getSiteRoot()};
    }
    timeLucene=-System.currentTimeMillis();
    Analyzer languageAnalyzer=OpenCms.getSearchManager().getAnalyzer(m_locale);
    BooleanQuery query=new BooleanQuery();
    BooleanQuery pathQuery=new BooleanQuery();
    for (int i=0; i < roots.length; i++) {
      String[] paths=rootPathSplit(roots[i]);
      PhraseQuery phrase=new PhraseQuery();
      for (int j=0; j < paths.length; j++) {
        Term term=new Term(CmsSearchField.FIELD_ROOT,paths[j].toLowerCase());
        phrase.add(term);
      }
      pathQuery.add(phrase,BooleanClause.Occur.SHOULD);
    }
    query.add(pathQuery,BooleanClause.Occur.MUST);
    if ((params.getCategories() != null) && (params.getCategories().size() > 0)) {
      BooleanQuery categoryQuery=new BooleanQuery();
      for (int i=0; i < params.getCategories().size(); i++) {
        Term term=new Term(CmsSearchField.FIELD_CATEGORY,(String)params.getCategories().get(i));
        TermQuery termQuery=new TermQuery(term);
        categoryQuery.add(termQuery,BooleanClause.Occur.SHOULD);
      }
      query.add(categoryQuery,BooleanClause.Occur.MUST);
    }
    if ((params.getFields() != null) && (params.getFields().size() > 0)) {
      BooleanQuery fieldsQuery=new BooleanQuery();
      for (int i=0; i < params.getFields().size(); i++) {
        QueryParser p=new QueryParser((String)params.getFields().get(i),languageAnalyzer);
        fieldsQuery.add(p.parse(params.getQuery()),BooleanClause.Occur.SHOULD);
      }
      query.add(fieldsQuery,BooleanClause.Occur.MUST);
    }
 else {
      QueryParser p=new QueryParser(CmsSearchField.FIELD_CONTENT,languageAnalyzer);
      query.add(p.parse(params.getQuery()),BooleanClause.Occur.MUST);
    }
    searcher=new IndexSearcher(m_path);
    Query finalQuery;
    if (m_createExcerpt || LOG.isDebugEnabled()) {
      finalQuery=searcher.rewrite(query);
    }
 else {
      finalQuery=query;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_BASE_QUERY_1,query));
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_REWRITTEN_QUERY_1,finalQuery));
    }
    CmsSearchCategoryCollector categoryCollector;
    if (params.isCalculateCategories()) {
      categoryCollector=new CmsSearchCategoryCollector(searcher);
      searcher.search(finalQuery,categoryCollector);
      searchResults.setCategories(categoryCollector.getCategoryCountResult());
    }
    hits=searcher.search(finalQuery,params.getSort());
    timeLucene+=System.currentTimeMillis();
    timeResultProcessing=-System.currentTimeMillis();
    Document doc;
    CmsSearchResult searchResult;
    if (hits != null) {
      int hitCount=hits.length();
      int page=params.getSearchPage();
      int start=-1, end=-1;
      if ((params.getMatchesPerPage() > 0) && (page > 0) && (hitCount > 0)) {
        start=params.getMatchesPerPage() * (page - 1);
        end=start + params.getMatchesPerPage();
        start=(start > hitCount) ? hitCount : start;
        end=(end > hitCount) ? hitCount : end;
      }
 else {
        start=0;
        end=hitCount;
      }
      int visibleHitCount=hitCount;
      for (int i=0, cnt=0; (i < hitCount) && (cnt < end); i++) {
        try {
          doc=hits.doc(i);
          if (hasReadPermission(cms,doc)) {
            if (cnt >= start) {
              String excerpt=null;
              if (m_createExcerpt) {
                I_CmsTermHighlighter highlighter=OpenCms.getSearchManager().getHighlighter();
                excerpt=highlighter.getExcerpt(doc,this,params,finalQuery,languageAnalyzer);
              }
              searchResult=new CmsSearchResult(Math.round(hits.score(i) * 100f),doc,excerpt);
              searchResults.add(searchResult);
            }
            cnt++;
          }
 else {
            visibleHitCount--;
          }
        }
 catch (        Exception e) {
          if (LOG.isWarnEnabled()) {
            LOG.warn(Messages.get().getBundle().key(Messages.LOG_RESULT_ITERATION_FAILED_0),e);
          }
        }
      }
      searchResults.setHitCount(visibleHitCount);
    }
 else {
      searchResults.setHitCount(0);
    }
    timeResultProcessing+=System.currentTimeMillis();
  }
 catch (  RuntimeException e) {
    throw new CmsSearchException(Messages.get().container(Messages.ERR_SEARCH_PARAMS_1,params),e);
  }
catch (  Exception e) {
    throw new CmsSearchException(Messages.get().container(Messages.ERR_SEARCH_PARAMS_1,params),e);
  }
 finally {
    Thread.currentThread().setPriority(previousPriority);
    if (searcher != null) {
      try {
        searcher.close();
      }
 catch (      IOException exc) {
      }
    }
    context.setCurrentProject(currentProject);
  }
  timeTotal+=System.currentTimeMillis();
  Object[] logParams=new Object[]{new Integer(hits == null ? 0 : hits.length()),new Long(timeTotal),new Long(timeLucene),new Long(timeResultProcessing)};
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().getBundle().key(Messages.LOG_STAT_RESULTS_TIME_4,logParams));
  }
  return searchResults;
}
