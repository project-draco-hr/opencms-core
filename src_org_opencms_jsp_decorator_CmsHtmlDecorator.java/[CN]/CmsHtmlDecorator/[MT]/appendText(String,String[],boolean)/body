{
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().getBundle().key(Messages.LOG_HTML_DECORATOR_APPEND_TEXT_2,m_config,text));
  }
  if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(text) && m_decorate) {
    List wordList=splitAsList(text,delimiters,false,true);
    for (int i=0; i < wordList.size(); i++) {
      String word=(String)wordList.get(i);
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_HTML_DECORATOR_PROCESS_WORD_2,word,Boolean.valueOf(mustDecode(word,wordList,i))));
      }
      if (mustDecode(word,wordList,i)) {
        word=Translate.decode(word);
        if (LOG.isDebugEnabled()) {
          LOG.debug(Messages.get().getBundle().key(Messages.LOG_HTML_DECORATOR_DECODED_WORD_1,word));
        }
      }
      CmsDecorationObject decObj=null;
      if (!hasDelimiter(word,delimiters)) {
        decObj=(CmsDecorationObject)m_decorations.get(word);
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_HTML_DECORATOR_DECORATION_FOUND_2,decObj,word));
      }
      if (decObj == null) {
        if (hasDelimiter(word,DELIMITERS_SECOND_LEVEL) && recursive) {
          String secondLevel=word;
          if (i < wordList.size() - 1) {
            if (!((String)wordList.get(i + 1)).equals(" ")) {
              secondLevel=word + (String)wordList.get(i + 1);
              i++;
            }
          }
          appendText(secondLevel,DELIMITERS_SECOND_LEVEL,false);
        }
 else {
          StringBuffer decKey=new StringBuffer();
          decKey.append(word);
          int forwardLookup=wordList.size() - i - 1;
          if (forwardLookup > FORWARD_LOOKUP) {
            forwardLookup=FORWARD_LOOKUP;
          }
          if (i < wordList.size() - forwardLookup) {
            for (int j=1; j <= forwardLookup; j++) {
              decKey.append(wordList.get(i + j));
              decObj=(CmsDecorationObject)m_decorations.get(decKey.toString());
              if (LOG.isDebugEnabled()) {
                LOG.debug(Messages.get().getBundle().key(Messages.LOG_HTML_DECORATOR_DECORATION_FOUND_FWL_3,decObj,word,new Integer(j)));
              }
              if (decObj != null) {
                if (LOG.isDebugEnabled()) {
                  LOG.debug(Messages.get().getBundle().key(Messages.LOG_HTML_DECORATOR_DECORATION_APPEND_DECORATION_1,decObj.getContentDecoration(m_config,decKey.toString(),m_cms.getRequestContext().getLocale().toString())));
                }
                m_result.append(decObj.getContentDecoration(m_config,decKey.toString(),m_cms.getRequestContext().getLocale().toString()));
                i+=j;
                break;
              }
            }
          }
          if (decObj == null) {
            if (LOG.isDebugEnabled()) {
              LOG.debug(Messages.get().getBundle().key(Messages.LOG_HTML_DECORATOR_DECORATION_APPEND_WORD_1,word));
            }
            m_result.append(word);
          }
        }
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug(Messages.get().getBundle().key(Messages.LOG_HTML_DECORATOR_DECORATION_APPEND_DECORATION_1,decObj.getContentDecoration(m_config,word,m_cms.getRequestContext().getLocale().toString())));
        }
        m_result.append(decObj.getContentDecoration(m_config,word,m_cms.getRequestContext().getLocale().toString()));
      }
    }
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_HTML_DECORATOR_DECORATION_APPEND_ORIGINALTEXT_1,text));
    }
    m_result.append(text);
  }
}
