{
  Iterator i=explorerTypes.iterator();
  while (i.hasNext()) {
    CmsExplorerTypeSettings settings=(CmsExplorerTypeSettings)i.next();
    if (settings.isAddititionalModuleExplorerType() == module) {
      Element explorerTypeElement=startNode.addElement(N_EXPLORERTYPE);
      explorerTypeElement.addAttribute(A_NAME,settings.getName());
      explorerTypeElement.addAttribute(A_KEY,settings.getKey());
      explorerTypeElement.addAttribute(A_ICON,settings.getIcon());
      if (settings.getReference() != null) {
        explorerTypeElement.addAttribute(A_REFERENCE,settings.getReference());
      }
      Element newResElement=explorerTypeElement.addElement(N_NEWRESOURCE);
      if (CmsStringUtil.isNotEmpty(settings.getNewResourcePage())) {
        newResElement.addAttribute(A_PAGE,settings.getNewResourcePage());
      }
      newResElement.addAttribute(A_URI,settings.getNewResourceUri());
      newResElement.addAttribute(A_ORDER,settings.getNewResourceOrder());
      if (settings.isAutoSetNavigation()) {
        newResElement.addAttribute(A_AUTOSETNAVIGATION,String.valueOf(settings.isAutoSetNavigation()));
      }
      if (settings.isAutoSetTitle()) {
        newResElement.addAttribute(A_AUTOSETTITLE,String.valueOf(settings.isAutoSetTitle()));
      }
      List accessEntries=new ArrayList();
      CmsExplorerTypeAccess access=settings.getAccess();
      Iterator iter=access.getAccessEntries().keySet().iterator();
      while (iter.hasNext()) {
        accessEntries.add(iter.next());
      }
      Collections.sort(accessEntries);
      if (accessEntries.size() > 0) {
        Element accessControlElement=explorerTypeElement.addElement(N_ACCESSCONTROL);
        Iterator k=accessEntries.iterator();
        while (k.hasNext()) {
          String key=(String)k.next();
          String value=(String)settings.getAccess().getAccessEntries().get(key);
          Element accessEntryElement=accessControlElement.addElement(N_ACCESSENTRY);
          accessEntryElement.addAttribute(A_PRINCIPAL,key);
          accessEntryElement.addAttribute(A_PERMISSIONS,value);
        }
      }
      if (settings.hasEditOptions()) {
        Element editOptionsElement=explorerTypeElement.addElement(N_EDITOPTIONS);
        Element defaultPropertiesElement=editOptionsElement.addElement(N_DEFAULTPROPERTIES);
        defaultPropertiesElement.addAttribute(A_ENABLED,String.valueOf(settings.isPropertiesEnabled()));
        defaultPropertiesElement.addAttribute(A_SHOWNAVIGATION,String.valueOf(settings.isShowNavigation()));
        Iterator m=settings.getProperties().iterator();
        while (m.hasNext()) {
          defaultPropertiesElement.addElement(N_PROPERTY).addAttribute(A_NAME,(String)m.next());
        }
        Element contextMenuElement=editOptionsElement.addElement(N_CONTEXTMENU);
        m=settings.getContextMenuEntries().iterator();
        while (m.hasNext()) {
          CmsExplorerContextMenuItem item=(CmsExplorerContextMenuItem)m.next();
          Element itemElement;
          if (CmsExplorerContextMenuItem.C_TYPE_ENTRY.equals(item.getType())) {
            itemElement=contextMenuElement.addElement(N_ENTRY);
            itemElement.addAttribute(A_KEY,item.getKey());
            itemElement.addAttribute(A_URI,item.getUri());
            if (item.isXml()) {
              itemElement.addAttribute(A_ISXML,"" + item.isXml());
            }
            if (item.getTarget() != null) {
              itemElement.addAttribute(A_TARGET,item.getTarget());
            }
            itemElement.addAttribute(A_RULES,item.getRules());
          }
 else {
            itemElement=contextMenuElement.addElement(N_SEPARATOR);
          }
          itemElement.addAttribute(A_ORDER,"" + item.getOrder());
        }
      }
    }
  }
}
