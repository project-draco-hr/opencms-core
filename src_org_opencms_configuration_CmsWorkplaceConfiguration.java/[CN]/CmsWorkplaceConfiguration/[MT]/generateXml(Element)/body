{
  Element workplaceElement=parent.addElement(N_WORKPLACE);
  Iterator i;
  workplaceElement.addElement(N_DEFAULTLOCALE).setText(m_workplaceManager.getDefaultLocale().toString());
  Element localizedElement=workplaceElement.addElement(N_LOCALIZEDFOLDERS);
  Iterator localizedIterator=m_workplaceManager.getLocalizedFolders().iterator();
  while (localizedIterator.hasNext()) {
    localizedElement.addElement(N_RESOURCE).addAttribute(A_URI,(String)localizedIterator.next());
  }
  Element dialogElement=workplaceElement.addElement(N_DIALOGHANDLERS);
  Map dialogs=m_workplaceManager.getDialogHandler();
  String[] keys=(String[])dialogs.keySet().toArray(new String[0]);
  Arrays.sort(keys);
  for (int j=0; j < keys.length; j++) {
    String name=keys[j];
    dialogElement.addElement(N_DIALOGHANDLER).addAttribute(A_CLASS,dialogs.get(name).getClass().getName());
  }
  workplaceElement.addElement(N_EDITORHANDLER).addAttribute(A_CLASS,m_workplaceManager.getEditorHandler().getClass().getName());
  workplaceElement.addElement(N_EDITORACTION).addAttribute(A_CLASS,m_workplaceManager.getEditorActionHandler().getClass().getName());
  I_CmsConfigurationParameterHandler deProvider=m_workplaceManager.getDirectEditProvider();
  Element deProviderNode=workplaceElement.addElement(N_DIRECTEDITPROVIDER).addAttribute(A_CLASS,deProvider.getClass().getName());
  Map deProviderConfig=deProvider.getConfiguration();
  if (deProviderConfig != null) {
    Iterator it=deProviderConfig.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Map.Entry)it.next();
      String name=(String)entry.getKey();
      String value=(String)entry.getValue();
      Element paramNode=deProviderNode.addElement(N_PARAM);
      paramNode.addAttribute(A_NAME,name);
      paramNode.addText(value);
    }
  }
  Element resourceloadersElement=workplaceElement.addElement(N_EXPORTPOINTS);
  Set points=m_workplaceManager.getExportPoints();
  i=points.iterator();
  while (i.hasNext()) {
    CmsExportPoint point=(CmsExportPoint)i.next();
    resourceloadersElement.addElement(N_EXPORTPOINT).addAttribute(A_URI,point.getUri()).addAttribute(A_DESTINATION,point.getConfiguredDestination());
  }
  workplaceElement.addElement(N_AUTOLOCK).setText(new Boolean(m_workplaceManager.autoLockResources()).toString());
  workplaceElement.addElement(N_ENABLEUSERMGMT).setText(new Boolean(m_workplaceManager.showUserGroupIcon()).toString());
  workplaceElement.addElement(N_DEFAULTPROPERTIESONSTRUCTURE).setText(new Boolean(m_workplaceManager.isDefaultPropertiesOnStructure()).toString());
  workplaceElement.addElement(N_ENABLEADVANCEDPROPERTYTABS).setText(new Boolean(m_workplaceManager.isEnableAdvancedPropertyTabs()).toString());
  workplaceElement.addElement(N_MAXUPLOADSIZE).setText(new Integer(m_workplaceManager.getFileMaxUploadSize()).toString());
  Element labeledElement=workplaceElement.addElement(N_LABELEDFOLDERS);
  i=m_workplaceManager.getLabelSiteFolders().iterator();
  while (i.hasNext()) {
    labeledElement.addElement(N_RESOURCE).addAttribute(A_URI,(String)i.next());
  }
  if (m_workplaceManager.isEnableWorkflowMessages()) {
    Element workflow=workplaceElement.addElement(N_WORKFLOW);
    workflow.addElement(N_SHOWMESSAGES).setText(new Boolean(m_workplaceManager.isEnableWorkflowMessages()).toString());
  }
  CmsRfsFileViewer viewSettings=m_workplaceManager.getFileViewSettings();
  Element fileViewElement=workplaceElement.addElement(N_RFSFILEVIEWESETTINGS);
  String filePath=viewSettings.getFilePath();
  if (filePath != null) {
    fileViewElement.addElement(N_FILEPATH).setText(filePath);
  }
  fileViewElement.addElement(N_ENABLED).setText(String.valueOf(viewSettings.isEnabled()));
  fileViewElement.addElement(N_FILEENCODING).setText(viewSettings.getFileEncoding());
  fileViewElement.addElement(N_ISLOGFILE).setText(String.valueOf(viewSettings.getIsLogfile()));
  fileViewElement.addElement(N_WINDOWSIZE).setText(String.valueOf(viewSettings.getWindowSize()));
  Element explorerTypesElement=workplaceElement.addElement(N_EXPLORERTYPES);
  List explorerTypes=m_workplaceManager.getExplorerTypeSettings();
  generateExplorerTypesXml(explorerTypesElement,explorerTypes,false);
  Element defaultAccessControlElement=explorerTypesElement.addElement(N_DEFAULTACCESSCONTROL);
  List accessEntries=new ArrayList();
  CmsExplorerTypeAccess access=m_workplaceManager.getDefaultAccess();
  Iterator iter=access.getAccessEntries().keySet().iterator();
  while (iter.hasNext()) {
    accessEntries.add(iter.next());
  }
  Collections.sort(accessEntries);
  if (accessEntries.size() > 0) {
    Element accessControlElement=defaultAccessControlElement.addElement(N_ACCESSCONTROL);
    Iterator k=accessEntries.iterator();
    while (k.hasNext()) {
      String key=(String)k.next();
      String value=(String)m_workplaceManager.getDefaultAccess().getAccessEntries().get(key);
      Element accessEntryElement=accessControlElement.addElement(N_ACCESSENTRY);
      accessEntryElement.addAttribute(A_PRINCIPAL,key);
      accessEntryElement.addAttribute(A_PERMISSIONS,value);
    }
  }
  i=m_workplaceManager.getMultiContextMenu().getAllEntries().iterator();
  if (i.hasNext()) {
    Element contextMenuElement=explorerTypesElement.addElement(N_MULTICONTEXTMENU);
    while (i.hasNext()) {
      CmsExplorerContextMenuItem item=(CmsExplorerContextMenuItem)i.next();
      Element itemElement;
      if (CmsExplorerContextMenuItem.TYPE_ENTRY.equals(item.getType())) {
        itemElement=contextMenuElement.addElement(N_ENTRY);
        itemElement.addAttribute(A_KEY,item.getKey());
        itemElement.addAttribute(A_URI,item.getUri());
        if (item.getTarget() != null) {
          itemElement.addAttribute(A_TARGET,item.getTarget());
        }
        String rules=item.getRules();
        if (CmsStringUtil.isEmptyOrWhitespaceOnly(rules)) {
          rules="";
        }
        itemElement.addAttribute(A_RULES,rules);
      }
 else {
        itemElement=contextMenuElement.addElement(N_SEPARATOR);
      }
      itemElement.addAttribute(A_ORDER,"" + item.getOrder());
    }
  }
  Element defaultPreferences=workplaceElement.addElement(N_DEFAULTPREFERENCES);
  Element workplacePreferences=defaultPreferences.addElement(N_WORKPLACEPREFERENCES);
  Element workplaceGeneraloptions=workplacePreferences.addElement(N_WORKPLACEGENERALOPTIONS);
  workplaceGeneraloptions.addElement(N_BUTTONSTYLE).setText(m_workplaceManager.getDefaultUserSettings().getWorkplaceButtonStyleString());
  workplaceGeneraloptions.addElement(N_REPORTTYPE).setText(m_workplaceManager.getDefaultUserSettings().getWorkplaceReportType());
  workplaceGeneraloptions.addElement(N_UPLOADAPPLET).setText(m_workplaceManager.getDefaultUserSettings().getUploadAppletString());
  if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(m_workplaceManager.getDefaultUserSettings().getPublishButtonAppearance())) {
    workplaceGeneraloptions.addElement(N_PUBLISHBUTTONAPPEARANCE).setText(m_workplaceManager.getDefaultUserSettings().getPublishButtonAppearance());
  }
  workplaceGeneraloptions.addElement(N_NEWFOLDEREDITPROPERTIES).setText(m_workplaceManager.getDefaultUserSettings().getNewFolderEditProperties().toString());
  workplaceGeneraloptions.addElement(N_NEWFOLDERCREATEINDEXPAGE).setText(m_workplaceManager.getDefaultUserSettings().getNewFolderCreateIndexPage().toString());
  Element workplaceStartupsettings=workplacePreferences.addElement(N_WORKPLACESTARTUPSETTINGS);
  workplaceStartupsettings.addElement(N_LOCALE).setText(m_workplaceManager.getDefaultUserSettings().getLocale().toString());
  workplaceStartupsettings.addElement(N_PROJECT).setText(m_workplaceManager.getDefaultUserSettings().getStartProject());
  workplaceStartupsettings.addElement(N_WORKPLACEVIEW).setText(m_workplaceManager.getDefaultUserSettings().getStartView());
  workplaceStartupsettings.addElement(N_FOLDER).setText(m_workplaceManager.getDefaultUserSettings().getStartFolder());
  workplaceStartupsettings.addElement(N_SITE).setText(m_workplaceManager.getDefaultUserSettings().getStartSite());
  workplaceStartupsettings.addElement(N_RESTRICTEXPLORERVIEW).setText(m_workplaceManager.getDefaultUserSettings().getRestrictExplorerViewString());
  Element explorerPreferences=defaultPreferences.addElement(N_EXPLORERPREFERENCES);
  Element explorerGeneraloptions=explorerPreferences.addElement(N_EXPLORERGENERALOPTIONS);
  explorerGeneraloptions.addElement(N_BUTTONSTYLE).setText(m_workplaceManager.getDefaultUserSettings().getExplorerButtonStyleString());
  explorerGeneraloptions.addElement(N_ENTRIES).setText("" + m_workplaceManager.getDefaultUserSettings().getExplorerFileEntries());
  Element explorerDisplayoptions=explorerPreferences.addElement(N_EXPLORERDISPLAYOPTIONS);
  explorerDisplayoptions.addElement(N_TITLE).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFileTitle());
  explorerDisplayoptions.addElement(N_TYPE).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFileType());
  explorerDisplayoptions.addElement(N_DATELASTMODIFIED).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFileDateLastModified());
  explorerDisplayoptions.addElement(N_DATECREATED).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFileDateCreated());
  explorerDisplayoptions.addElement(N_LOCKEDBY).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFileLockedBy());
  explorerDisplayoptions.addElement(N_PERMISSIONS).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFilePermissions());
  explorerDisplayoptions.addElement(N_SIZE).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFileSize());
  explorerDisplayoptions.addElement(N_STATE).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFileState());
  explorerDisplayoptions.addElement(N_USERLASTMODIFIED).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFileUserLastModified());
  explorerDisplayoptions.addElement(N_USERCREATED).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFileUserCreated());
  explorerDisplayoptions.addElement(N_DATERELEASED).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFileDateReleased());
  explorerDisplayoptions.addElement(N_DATEEXPIRED).setText(m_workplaceManager.getDefaultUserSettings().getShowExplorerFileDateExpired());
  Element dialogPreferences=defaultPreferences.addElement(N_DIALOGSPREFERENCES);
  Element dialogDefaultSettings=dialogPreferences.addElement(N_DIALOGSDEFAULTSETTINGS);
  dialogDefaultSettings.addElement(N_FILECOPY).setText(m_workplaceManager.getDefaultUserSettings().getDialogCopyFileModeString());
  dialogDefaultSettings.addElement(N_FOLDERCOPY).setText(m_workplaceManager.getDefaultUserSettings().getDialogCopyFolderModeString());
  dialogDefaultSettings.addElement(N_FILEDELETION).setText(m_workplaceManager.getDefaultUserSettings().getDialogDeleteFileModeString());
  dialogDefaultSettings.addElement(N_DIRECTPUBLISH).setText(m_workplaceManager.getDefaultUserSettings().getDialogPublishSiblingsString());
  dialogDefaultSettings.addElement(N_SHOWLOCK).setText(m_workplaceManager.getDefaultUserSettings().getDialogShowLockString());
  dialogDefaultSettings.addElement(N_SHOWEXPORTSETTINGS).setText(m_workplaceManager.getDefaultUserSettings().getDialogShowExportSettingsString());
  dialogDefaultSettings.addElement(N_EXPANDPERMISSIONSUSER).setText(m_workplaceManager.getDefaultUserSettings().getDialogExpandUserPermissionsString());
  dialogDefaultSettings.addElement(N_EXPANDPERMISSIONSINHERITED).setText(m_workplaceManager.getDefaultUserSettings().getDialogExpandInheritedPermissionsString());
  dialogDefaultSettings.addElement(N_PERMISSIONSINHERITONFOLDER).setText(m_workplaceManager.getDefaultUserSettings().getDialogPermissionsInheritOnFolderString());
  Element editorsPreferences=defaultPreferences.addElement(N_EDITORPREFERENCES);
  Element editorGeneraloptions=editorsPreferences.addElement(N_EDITORGENERALOPTIONS);
  editorGeneraloptions.addElement(N_BUTTONSTYLE).setText(m_workplaceManager.getDefaultUserSettings().getEditorButtonStyleString());
  editorGeneraloptions.addElement(N_DIRECTEDITSTYLE).setText(m_workplaceManager.getDefaultUserSettings().getDirectEditButtonStyleString());
  Element editorPreferrededitors=editorsPreferences.addElement(N_EDITORPREFERREDEDITORS);
  Iterator editors=m_workplaceManager.getDefaultUserSettings().getEditorSettings().keySet().iterator();
  while (editors.hasNext()) {
    String type=(String)editors.next();
    String value=m_workplaceManager.getDefaultUserSettings().getPreferredEditor(type);
    Element editor=editorPreferrededitors.addElement(N_EDITOR);
    editor.addAttribute(A_TYPE,type);
    editor.addAttribute(A_VALUE,value);
  }
  Element workflowPreferences=defaultPreferences.addElement(N_WORKFLOWPREFERENCES);
  Element workflowGeneraloptions=workflowPreferences.addElement(N_WORKFLOWGENERALOPTIONS);
  workflowGeneraloptions.addElement(N_STARTUPFILTER).setText(m_workplaceManager.getDefaultUserSettings().getTaskStartupFilterDefault());
  workflowGeneraloptions.addElement(N_SHOWPROJECTS).setText(m_workplaceManager.getDefaultUserSettings().getTaskShowAllProjectsString());
  Element workflowDefaultsettings=workflowPreferences.addElement(N_WORKFLOWDEFAULTSETTINGS);
  workflowDefaultsettings.addElement(N_MESSAGEACCEPTED).setText(m_workplaceManager.getDefaultUserSettings().getTaskMessageAcceptedString());
  workflowDefaultsettings.addElement(N_MESSAGEFORWARDED).setText(m_workplaceManager.getDefaultUserSettings().getTaskMessageForwardedString());
  workflowDefaultsettings.addElement(N_MESSAGECOMPLETED).setText(m_workplaceManager.getDefaultUserSettings().getTaskMessageCompletedString());
  workflowDefaultsettings.addElement(N_INFORMROLEMEMBERS).setText(m_workplaceManager.getDefaultUserSettings().getTaskMessageMembersString());
  Element toolManagerElement=workplaceElement.addElement(N_TOOLMANAGER);
  Element rootsElement=toolManagerElement.addElement(N_ROOTS);
  Iterator it=m_workplaceManager.getToolManager().getToolRoots().iterator();
  while (it.hasNext()) {
    CmsToolRootHandler root=(CmsToolRootHandler)it.next();
    Element rootElement=rootsElement.addElement(N_ROOT);
    rootElement.addElement(N_KEY).addText(root.getKey());
    rootElement.addElement(N_URI).addText(root.getUri());
    rootElement.addElement(N_NAME).addText(root.getName());
    rootElement.addElement(N_HELPTEXT).addText(root.getHelpText());
  }
  return workplaceElement;
}
