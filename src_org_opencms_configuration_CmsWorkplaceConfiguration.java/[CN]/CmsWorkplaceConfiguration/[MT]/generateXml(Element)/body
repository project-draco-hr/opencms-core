{
  Element workplaceElement=parent.addElement(N_WORKPLACE);
  workplaceElement.addElement(N_DEFAULTLOCALE).setText(m_workplaceManager.getDefaultLocale().toString());
  Element localizedElement=workplaceElement.addElement(N_LOCALIZEDFOLDERS);
  Iterator<String> localizedIterator=m_workplaceManager.getLocalizedFolders().iterator();
  while (localizedIterator.hasNext()) {
    localizedElement.addElement(N_RESOURCE).addAttribute(A_URI,localizedIterator.next());
  }
  Element dialogElement=workplaceElement.addElement(N_DIALOGHANDLERS);
  Map<String,I_CmsDialogHandler> dialogs=m_workplaceManager.getDialogHandler();
  String[] keys=dialogs.keySet().toArray(new String[0]);
  Arrays.sort(keys);
  for (int j=0; j < keys.length; j++) {
    String name=keys[j];
    Element dialogHandler=dialogElement.addElement(N_DIALOGHANDLER).addAttribute(A_CLASS,dialogs.get(name).getClass().getName());
    I_CmsDialogHandler daialogHandlerConfig=dialogs.get(name);
    CmsParameterConfiguration handlerConfig=daialogHandlerConfig.getConfiguration();
    if (handlerConfig != null) {
      handlerConfig.appendToXml(dialogHandler);
    }
  }
  workplaceElement.addElement(N_EDITORHANDLER).addAttribute(A_CLASS,m_workplaceManager.getEditorHandler().getClass().getName());
  workplaceElement.addElement(N_EDITORACTION).addAttribute(A_CLASS,m_workplaceManager.getEditorActionHandler().getClass().getName());
  if (m_workplaceManager.getEditorCssHandlers().size() > 0) {
    Element editorCssHandlers=workplaceElement.addElement(N_EDITORCSSHANDLERS);
    Iterator<I_CmsEditorCssHandler> it=m_workplaceManager.getEditorCssHandlers().iterator();
    while (it.hasNext()) {
      I_CmsEditorCssHandler current=it.next();
      Element handler=editorCssHandlers.addElement(N_EDITORCSSHANDLER);
      handler.addAttribute(A_CLASS,current.getClass().getName());
    }
  }
  if (m_workplaceManager.getPreEditorConditionDefinitions().size() > 0) {
    Element editorPreActions=workplaceElement.addElement(N_EDITORPRECONDITIONS);
    Iterator<I_CmsPreEditorActionDefinition> it=m_workplaceManager.getPreEditorConditionDefinitions().iterator();
    while (it.hasNext()) {
      I_CmsPreEditorActionDefinition current=it.next();
      Element action=editorPreActions.addElement(N_EDITORPRECONDITION);
      action.addAttribute(A_NAME,current.getResourceTypeName());
      action.addAttribute(A_CLASS,current.getClass().getName());
      CmsParameterConfiguration config=current.getConfiguration();
      if ((config != null) && (config.size() > 0)) {
        config.appendToXml(action);
      }
    }
  }
  I_CmsConfigurationParameterHandler deProvider=m_workplaceManager.getDirectEditProvider();
  Element deProviderNode=workplaceElement.addElement(N_DIRECTEDITPROVIDER).addAttribute(A_CLASS,deProvider.getClass().getName());
  CmsParameterConfiguration deProviderConfig=deProvider.getConfiguration();
  if (deProviderConfig != null) {
    deProviderConfig.appendToXml(deProviderNode);
  }
  Element resourceloadersElement=workplaceElement.addElement(N_EXPORTPOINTS);
  Set<CmsExportPoint> points=m_workplaceManager.getExportPoints();
  Iterator<CmsExportPoint> exportPoints=points.iterator();
  while (exportPoints.hasNext()) {
    CmsExportPoint point=exportPoints.next();
    resourceloadersElement.addElement(N_EXPORTPOINT).addAttribute(A_URI,point.getUri()).addAttribute(A_DESTINATION,point.getConfiguredDestination());
  }
  workplaceElement.addElement(N_AUTOLOCK).setText(String.valueOf(m_workplaceManager.autoLockResources()));
  String acaciaUnlock=m_workplaceManager.getAcaciaUnlock();
  if (acaciaUnlock != null) {
    workplaceElement.addElement(N_ACACIA_UNLOCK).setText(acaciaUnlock);
  }
  workplaceElement.addElement(N_XMLCONTENTAUTOCORRECTION).setText(String.valueOf(m_workplaceManager.isXmlContentAutoCorrect()));
  workplaceElement.addElement(N_ENABLEUSERMGMT).setText(String.valueOf(m_workplaceManager.showUserGroupIcon()));
  workplaceElement.addElement(N_DEFAULTPROPERTIESONSTRUCTURE).setText(String.valueOf(m_workplaceManager.isDefaultPropertiesOnStructure()));
  workplaceElement.addElement(N_ENABLEADVANCEDPROPERTYTABS).setText(String.valueOf(m_workplaceManager.isEnableAdvancedPropertyTabs()));
  if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(m_workplaceManager.getCategoryFolder()) && !CmsCategoryService.REPOSITORY_BASE_FOLDER.equals(m_workplaceManager.getCategoryFolder())) {
    workplaceElement.addElement(N_CATEGORYFOLDER).setText(String.valueOf(m_workplaceManager.getCategoryFolder()));
  }
  String groupTranslationClass=m_workplaceManager.getGroupTranslationClass();
  if (groupTranslationClass != null) {
    Element groupTranslationElement=workplaceElement.addElement(N_GROUP_TRANSLATION);
    groupTranslationElement.addAttribute(A_CLASS,groupTranslationClass);
  }
  workplaceElement.addElement(N_MAXUPLOADSIZE).setText(String.valueOf(m_workplaceManager.getFileMaxUploadSize()));
  Element labeledElement=workplaceElement.addElement(N_LABELEDFOLDERS);
  Iterator<String> sitesFolders=m_workplaceManager.getLabelSiteFolders().iterator();
  while (sitesFolders.hasNext()) {
    labeledElement.addElement(N_RESOURCE).addAttribute(A_URI,sitesFolders.next());
  }
  workplaceElement.addElement(N_REPOSITORY_FOLDER).addAttribute(A_CLASS,m_workplaceManager.getRepositoryFolderHandler().getClass().getName());
  CmsRfsFileViewer viewSettings=m_workplaceManager.getFileViewSettings();
  Element fileViewElement=workplaceElement.addElement(N_RFSFILEVIEWESETTINGS);
  String rootPath=viewSettings.getRootPath();
  if (rootPath != null) {
    fileViewElement.addElement(N_ROOTPATH).setText(rootPath);
  }
  String filePath=viewSettings.getFilePath();
  if (filePath != null) {
    fileViewElement.addElement(N_FILEPATH).setText(filePath);
  }
  fileViewElement.addElement(N_ENABLED).setText(String.valueOf(viewSettings.isEnabled()));
  fileViewElement.addElement(N_FILEENCODING).setText(viewSettings.getFileEncoding());
  fileViewElement.addElement(N_ISLOGFILE).setText(String.valueOf(viewSettings.getIsLogfile()));
  fileViewElement.addElement(N_WINDOWSIZE).setText(String.valueOf(viewSettings.getWindowSize()));
  Element explorerTypesElement=workplaceElement.addElement(N_EXPLORERTYPES);
  List<CmsExplorerTypeSettings> explorerTypes=m_workplaceManager.getExplorerTypeSettings();
  generateExplorerTypesXml(explorerTypesElement,explorerTypes,false);
  Element defaultAccessControlElement=explorerTypesElement.addElement(N_DEFAULTACCESSCONTROL);
  List<String> accessEntries=new ArrayList<String>();
  CmsExplorerTypeAccess access=m_workplaceManager.getDefaultAccess();
  Iterator<String> iter=access.getAccessEntries().keySet().iterator();
  while (iter.hasNext()) {
    accessEntries.add(iter.next());
  }
  Collections.sort(accessEntries);
  if (accessEntries.size() > 0) {
    Element accessControlElement=defaultAccessControlElement.addElement(N_ACCESSCONTROL);
    Iterator<String> k=accessEntries.iterator();
    while (k.hasNext()) {
      String key=k.next();
      String value=m_workplaceManager.getDefaultAccess().getAccessEntries().get(key);
      Element accessEntryElement=accessControlElement.addElement(N_ACCESSENTRY);
      accessEntryElement.addAttribute(A_PRINCIPAL,key);
      accessEntryElement.addAttribute(A_PERMISSIONS,value);
    }
  }
  Iterator<CmsExplorerContextMenuItem> menuEntries=m_workplaceManager.getMultiContextMenu().getAllEntries().iterator();
  if (menuEntries.hasNext()) {
    Element contextMenuElement=explorerTypesElement.addElement(N_MULTICONTEXTMENU);
    CmsMenuRuleTranslator menuRuleTranslator=new CmsMenuRuleTranslator();
    while (menuEntries.hasNext()) {
      CmsExplorerContextMenuItem item=menuEntries.next();
      generateContextMenuItemXml(contextMenuElement,menuRuleTranslator,item);
    }
  }
  if (m_workplaceManager.getMenuRules().size() > 0) {
    Element rulesElement=explorerTypesElement.addElement(N_MENURULES);
    Iterator<CmsMenuRule> menuRules=m_workplaceManager.getMenuRules().iterator();
    while (menuRules.hasNext()) {
      CmsMenuRule rule=menuRules.next();
      Element ruleElement=rulesElement.addElement(N_MENURULE);
      ruleElement.addAttribute(A_NAME,rule.getName());
      Iterator<I_CmsMenuItemRule> it=rule.getMenuItemRules().iterator();
      while (it.hasNext()) {
        I_CmsMenuItemRule itemRule=it.next();
        Element itemRuleElement=ruleElement.addElement(N_MENUITEMRULE);
        itemRuleElement.addAttribute(A_CLASS,itemRule.getClass().getName());
      }
    }
  }
  if (m_workplaceManager.getUserInfoManager() != null) {
    Element userInfosElement=workplaceElement.addElement(N_USERINFOS);
    Iterator<CmsWorkplaceUserInfoBlock> infoBlocks=m_workplaceManager.getUserInfoManager().getBlocks().iterator();
    while (infoBlocks.hasNext()) {
      CmsWorkplaceUserInfoBlock block=infoBlocks.next();
      Element infoBlockElement=userInfosElement.addElement(N_INFOBLOCK);
      infoBlockElement.addAttribute(A_NAME,block.getTitle());
      Iterator<CmsWorkplaceUserInfoEntry> itEntries=block.getEntries().iterator();
      while (itEntries.hasNext()) {
        CmsWorkplaceUserInfoEntry entry=itEntries.next();
        Element userInfoElement=infoBlockElement.addElement(N_USERINFO);
        userInfoElement.addAttribute(A_KEY,entry.getKey());
        if (entry.getType() != null) {
          userInfoElement.addAttribute(A_TYPE,entry.getType());
        }
        if (entry.getWidget() != null) {
          userInfoElement.addAttribute(A_WIDGET,entry.getWidget());
        }
        if (entry.getParams() != null) {
          userInfoElement.addAttribute(A_PARAMS,entry.getParams());
        }
        if (entry.getOptional() != null) {
          userInfoElement.addAttribute(A_OPTIONAL,entry.getOptional());
        }
      }
    }
  }
  Element defaultPreferences=workplaceElement.addElement(N_DEFAULTPREFERENCES);
  for (  I_CmsPreference pref : m_workplaceManager.getDefaultUserSettings().getPreferences().values()) {
    Element elem=pref.createConfigurationItem();
    if (elem != null) {
      defaultPreferences.add(elem);
    }
  }
  if (m_workplaceManager.getCustomFoot() != null) {
    Element workplaceFootCustom=workplaceElement.addElement(N_WORKPLACECUSTOMFOOT);
    workplaceFootCustom.addElement(N_COLOR).setText(m_workplaceManager.getCustomFoot().getColor());
    workplaceFootCustom.addElement(N_BACKGROUNDCOLOR).setText(m_workplaceManager.getCustomFoot().getBackgroundColor());
    Element textElement=workplaceFootCustom.addElement(N_TEXT);
    textElement.addAttribute(A_REPLACE,Boolean.toString(m_workplaceManager.getCustomFoot().isReplaceDefault()));
    textElement.setText(m_workplaceManager.getCustomFoot().getText());
  }
  Element toolManagerElement=workplaceElement.addElement(N_TOOLMANAGER);
  Element rootsElement=toolManagerElement.addElement(N_ROOTS);
  Iterator<CmsToolRootHandler> it=m_workplaceManager.getToolManager().getToolRoots().iterator();
  while (it.hasNext()) {
    CmsToolRootHandler root=it.next();
    Element rootElement=rootsElement.addElement(N_ROOT);
    rootElement.addElement(N_KEY).addText(root.getKey());
    rootElement.addElement(N_URI).addText(root.getUri());
    rootElement.addElement(N_NAME).addText(root.getName());
    rootElement.addElement(N_HELPTEXT).addText(root.getHelpText());
  }
  String userListsMode=m_workplaceManager.getUserListModeString();
  if (userListsMode != null) {
    Element userListsElem=workplaceElement.addElement(N_USER_LISTS);
    userListsElem.addAttribute(A_MODE,userListsMode);
  }
  Boolean keepAlive=m_workplaceManager.isKeepAlive(false);
  if (keepAlive != null) {
    workplaceElement.addElement(N_KEEP_ALIVE).setText(keepAlive.toString());
  }
  String defaultScope=m_workplaceManager.getGalleryDefaultScopeString();
  if (defaultScope != null) {
    workplaceElement.addElement(N_GALLERY_DEFAULT_SCOPE).setText(defaultScope);
  }
  return workplaceElement;
}
