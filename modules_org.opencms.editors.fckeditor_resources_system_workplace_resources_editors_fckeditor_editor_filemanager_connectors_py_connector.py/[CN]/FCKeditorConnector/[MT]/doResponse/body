def doResponse(self):
    'Main function. Process the request, set headers and return a string as response.'
    s = ''
    if (not Config.Enabled):
        return self.sendError(1, 'This connector is disabled.  Please check the connector configurations in "editor/filemanager/connectors/py/config.py" and try again.')
    for key in ('Command', 'Type', 'CurrentFolder'):
        if (not self.request.has_key(key)):
            return
    command = self.request.get('Command')
    resourceType = self.request.get('Type')
    currentFolder = getCurrentFolder(self.request.get('CurrentFolder'))
    if (currentFolder is None):
        if (command == 'FileUpload'):
            return self.sendUploadResults(errorNo=102, customMsg='')
        else:
            return self.sendError(102, '')
    if (not (command in Config.ConfigAllowedCommands)):
        return self.sendError(1, ("The %s command isn't allowed" % command))
    if (not (resourceType in Config.ConfigAllowedTypes)):
        return self.sendError(1, 'Invalid type specified')
    if (command == 'QuickUpload'):
        self.userFilesFolder = Config.QuickUploadAbsolutePath[resourceType]
        self.webUserFilesFolder = Config.QuickUploadPath[resourceType]
    else:
        self.userFilesFolder = Config.FileTypesAbsolutePath[resourceType]
        self.webUserFilesFolder = Config.FileTypesPath[resourceType]
    if (not self.userFilesFolder):
        self.userFilesFolder = mapServerPath(self.environ, self.webUserFilesFolder)
    if (not os.path.exists(self.userFilesFolder)):
        try:
            self.createServerFolder(self.userFilesFolder)
        except:
            return self.sendError(1, 'This connector couldn\'t access to local user\'s files directories.  Please check the UserFilesAbsolutePath in "editor/filemanager/connectors/py/config.py" and try again. ')
    if (command == 'FileUpload'):
        return self.uploadFile(resourceType, currentFolder)
    url = combinePaths(self.webUserFilesFolder, currentFolder)
    s += self.createXmlHeader(command, resourceType, currentFolder, url)
    selector = {'GetFolders': self.getFolders, 'GetFoldersAndFiles': self.getFoldersAndFiles, 'CreateFolder': self.createFolder, }
    s += selector[command](resourceType, currentFolder)
    s += self.createXmlFooter()
    return s
