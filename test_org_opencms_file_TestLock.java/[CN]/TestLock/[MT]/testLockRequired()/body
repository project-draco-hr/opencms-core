{
  CmsObject cms=getCmsObject();
  echo("Testing if a lock is required for write/control operations");
  String source="/index.html";
  storeResources(cms,source);
  long timestamp=System.currentTimeMillis();
  assertLock(cms,source,CmsLock.C_TYPE_UNLOCKED);
  CmsFile file=cms.readFile(source);
  boolean needLock;
  needLock=false;
  try {
    cms.touch(source,timestamp,timestamp,timestamp,false);
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Touch operation on resource permitted without a lock on the current user!");
  }
  needLock=false;
  try {
    cms.deleteResource(source,I_CmsConstants.C_DELETE_OPTION_PRESERVE_SIBLINGS);
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Delete operation on resource permitted without a lock on the current user!");
  }
  needLock=false;
  try {
    cms.writeFile(file);
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Write operation on resource permitted without a lock on the current user!");
  }
  needLock=false;
  try {
    cms.moveResource(source,"index_dest.html");
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Move operation on resource permitted without a lock on the current user!");
  }
  needLock=false;
  try {
    cms.writePropertyObject(source,new CmsProperty(I_CmsConstants.C_PROPERTY_TITLE,"New title",null));
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Write property operation on resource permitted without a lock on the current user!");
  }
  needLock=false;
  try {
    List properties=new ArrayList();
    properties.add(new CmsProperty(I_CmsConstants.C_PROPERTY_TITLE,"New title 2",null));
    cms.writePropertyObjects(source,properties);
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Write property list operation on resource permitted without a lock on the current user!");
  }
  needLock=false;
  try {
    cms.chflags(source,1234);
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Change flags operation on resource permitted without a lock on the current user!");
  }
  needLock=false;
  try {
    cms.chtype(source,CmsResourceTypePlain.C_RESOURCE_TYPE_ID);
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Change type operation on resource permitted without a lock on the current user!");
  }
  needLock=false;
  try {
    cms.replaceResource(source,CmsResourceTypePlain.C_RESOURCE_TYPE_ID,"Kaputt".getBytes(),null);
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Replace operation on resource permitted without a lock on the current user!");
  }
  needLock=false;
  try {
    cms.changeLastModifiedProjectId(source);
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Change last modified in project operation on resource permitted without a lock on the current user!");
  }
  needLock=false;
  try {
    CmsPermissionSet permissions=new CmsPermissionSet(I_CmsConstants.C_ACCESS_WRITE,I_CmsConstants.C_ACCESS_READ);
    cms.chacc(source,I_CmsPrincipal.C_PRINCIPAL_GROUP,OpenCms.getDefaultUsers().getGroupAdministrators(),permissions.getAllowedPermissions(),permissions.getDeniedPermissions(),I_CmsConstants.C_ACCESSFLAGS_OVERWRITE);
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Change permissions operation on resource permitted without a lock on the current user!");
  }
  needLock=false;
  try {
    cms.undeleteResource(source);
  }
 catch (  CmsLockException e) {
    needLock=true;
  }
  if (!needLock) {
    fail("Unlock operation on resource permitted without a lock on the current user!");
  }
  assertFilter(cms,source,OpenCmsTestResourceFilter.FILTER_EQUAL);
  cms.lockResource(source);
  cms.deleteResource(source,I_CmsConstants.C_DELETE_OPTION_PRESERVE_SIBLINGS);
  cms.lockResource(source);
  cms.undeleteResource(source);
  cms.unlockResource(source);
  assertFilter(cms,source,OpenCmsTestResourceFilter.FILTER_EQUAL);
}
