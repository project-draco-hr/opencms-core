{
  super.onBrowserEvent(event);
switch (DOM.eventGetType(event)) {
case Event.ONBLUR:
    m_keyTimer.cancel();
  if (m_slidingMouse) {
    stopMouseSliding(event);
  }
 else   if (m_slidingKeyboard) {
    m_slidingKeyboard=false;
  }
break;
case Event.ONMOUSEWHEEL:
int velocityY=DOM.eventGetMouseWheelVelocityY(event) * m_stepSize;
DOM.eventPreventDefault(event);
CmsDebugLog.getInstance().printLine("Whell velocity: " + velocityY);
if (velocityY > 0) {
shiftDown(velocityY);
}
 else {
shiftUp(-velocityY);
}
break;
case Event.ONKEYDOWN:
if (!m_slidingKeyboard) {
int multiplier=1;
if (DOM.eventGetCtrlKey(event)) {
multiplier=m_stepSize;
}
switch (DOM.eventGetKeyCode(event)) {
case KeyCodes.KEY_HOME:
DOM.eventPreventDefault(event);
setValue(Integer.valueOf(0));
break;
case KeyCodes.KEY_END:
DOM.eventPreventDefault(event);
setValue(Integer.valueOf(getMaximumVerticalScrollPosition()));
break;
case KeyCodes.KEY_PAGEUP:
DOM.eventPreventDefault(event);
m_slidingKeyboard=true;
shiftUp(m_pageSize);
m_keyTimer.schedule(INITIALDELAY,true,m_pageSize);
break;
case KeyCodes.KEY_PAGEDOWN:
DOM.eventPreventDefault(event);
m_slidingKeyboard=true;
shiftDown(m_pageSize);
m_keyTimer.schedule(INITIALDELAY,false,m_pageSize);
break;
case KeyCodes.KEY_UP:
DOM.eventPreventDefault(event);
m_slidingKeyboard=true;
shiftUp(multiplier);
m_keyTimer.schedule(INITIALDELAY,true,multiplier);
break;
case KeyCodes.KEY_DOWN:
DOM.eventPreventDefault(event);
m_slidingKeyboard=true;
shiftDown(multiplier);
m_keyTimer.schedule(INITIALDELAY,false,multiplier);
break;
default :
}
}
break;
case Event.ONKEYUP:
m_keyTimer.cancel();
if (m_slidingKeyboard) {
m_slidingKeyboard=false;
}
break;
case Event.ONMOUSEDOWN:
setFocus(true);
if (sliderClicked(event)) {
startMouseSliding(event);
DOM.eventPreventDefault(event);
}
break;
case Event.ONMOUSEUP:
stopMouseSliding(event);
break;
case Event.ONMOUSEMOVE:
slideKnob(event);
break;
default :
}
}
