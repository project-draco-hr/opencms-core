{
  Hashtable notAvailable=new Hashtable();
  Vector linkList=new Vector();
  Hashtable ownerLinkList=new Hashtable();
  Hashtable linkckecktable=CmsLinkCheck.readLinkCheckTable();
  Hashtable newLinkchecktable=new Hashtable();
  int warning=0;
  Hashtable emailValues=CmsRegistry.getInstance().getSystemValues("checklink");
  CmsXmlTemplateFile template=getOwnTemplateFile(cms,(String)emailValues.get("mailtemplate"),"",null,"");
  GregorianCalendar actDate=new GregorianCalendar();
  String actDateString=getDateString(actDate);
  template.setData("actdate",actDateString);
  newLinkchecktable.put(I_CmsConstants.C_LINKCHECKTABLE_DATE,actDateString);
  StringBuffer mailContent=new StringBuffer(template.getProcessedDataValue("single_message"));
  linkList=new Vector();
  for (int i=0; i < linkList.size(); i++) {
    CmsFile linkElement=(CmsFile)linkList.elementAt(i);
    String linkName=cms.getSitePath(linkElement);
    String linkUrl=new String(linkElement.getContents());
    if (!linkUrl.startsWith("/")) {
      int failedCheck=0;
      String numFromTable=(String)linkckecktable.get(linkName + ", " + linkUrl);
      if ((numFromTable != null) && (!"".equals(numFromTable.trim()))) {
        failedCheck=Integer.parseInt(numFromTable);
      }
      if (!checkUrl(linkUrl)) {
        Vector inList=null;
        inList=(Vector)notAvailable.get(linkUrl);
        if (inList == null) {
          inList=new Vector();
        }
        inList.addElement(linkName);
        notAvailable.put(linkUrl,inList);
        if ((parameter != null) && ("owneremail".equals(parameter.trim()))) {
          String ownerEmail=null;
          if ((ownerEmail == null) || ("".equals(ownerEmail.trim()))) {
            ownerEmail=(String)emailValues.get("mailto");
          }
          Hashtable ownerLinks=null;
          ownerLinks=(Hashtable)ownerLinkList.get(ownerEmail);
          if (ownerLinks == null) {
            ownerLinks=new Hashtable();
          }
          ownerLinks.put(linkName,linkUrl);
          ownerLinkList.put(ownerEmail,ownerLinks);
        }
        newLinkchecktable.put(linkName + ", " + linkUrl,"" + (failedCheck + 1));
      }
    }
  }
  CmsLinkCheck.writeLinkCheckTable(newLinkchecktable);
  if ((parameter != null) && (!"".equals(parameter.trim()))) {
    if ("owneremail".equals(parameter.trim())) {
      if (ownerLinkList.size() > 0) {
        Enumeration ownerKeys=ownerLinkList.keys();
        while (ownerKeys.hasMoreElements()) {
          StringBuffer ownerContent=new StringBuffer();
          ownerContent.append(mailContent.toString());
          String mailTo=(String)ownerKeys.nextElement();
          Hashtable linknames=(Hashtable)ownerLinkList.get(mailTo);
          Enumeration linkKeys=linknames.keys();
          String singleLink="";
          while (linkKeys.hasMoreElements()) {
            singleLink=(String)linkKeys.nextElement();
            template.setData("ownerlinkname",singleLink);
            template.setData("ownerlinkurl",(String)linknames.get(singleLink));
            ownerContent.append(template.getProcessedDataValue("ownermail_link"));
          }
          String mailSubject=template.getProcessedDataValue("emailsubject");
          String mailFrom=(String)emailValues.get("mailfrom");
          List mailCc=getReceiverList(template.getDataValue("emailcc"));
          List mailBcc=getReceiverList(template.getDataValue("emailbcc"));
          String mailType=template.getDataValue("emailtype");
          generateEmail(mailFrom,getReceiverList(mailTo),mailCc,mailBcc,mailSubject,ownerContent.toString(),mailType);
        }
      }
    }
 else {
      if (notAvailable.size() > 0) {
        Enumeration linkKeys=notAvailable.keys();
        StringBuffer mailUrls=new StringBuffer();
        while (linkKeys.hasMoreElements()) {
          String url=(String)linkKeys.nextElement();
          template.setData("url",url);
          Vector linknames=(Vector)notAvailable.get(url);
          StringBuffer mailLinks=new StringBuffer();
          for (int j=0; j < linknames.size(); j++) {
            String nextLink=(String)linknames.elementAt(j);
            template.setData("linkname",nextLink);
            mailLinks.append(template.getProcessedDataValue("single_link"));
          }
          template.setData("links",mailLinks.toString());
          mailUrls.append(template.getProcessedDataValue("single_url"));
        }
        mailContent.append(mailUrls.toString());
        if ("email".equals(parameter.trim())) {
          String mailSubject=template.getProcessedDataValue("emailsubject");
          String mailFrom=(String)emailValues.get("mailfrom");
          List mailTo=getReceiverList((String)emailValues.get("mailto"));
          List mailCc=getReceiverList(template.getDataValue("emailcc"));
          List mailBcc=getReceiverList(template.getDataValue("emailbcc"));
          String mailType=template.getDataValue("emailtype");
          generateEmail(mailFrom,mailTo,mailCc,mailBcc,mailSubject,mailContent.toString(),mailType);
        }
 else {
          generateFile(mailContent.toString(),parameter,actDate);
        }
      }
    }
  }
}
