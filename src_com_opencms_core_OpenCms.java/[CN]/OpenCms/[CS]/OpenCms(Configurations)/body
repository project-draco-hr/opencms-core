{
  try {
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCmsServlet] logging started");
      String jdkinfo=System.getProperty("java.vm.name") + " ";
      jdkinfo+=System.getProperty("java.vm.version") + " ";
      jdkinfo+=System.getProperty("java.vm.info") + " ";
      jdkinfo+=System.getProperty("java.vm.vendor") + " ";
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCmsServlet] JDK Info: " + jdkinfo);
      String osinfo=System.getProperty("os.name") + " ";
      osinfo+=System.getProperty("os.version") + " ";
      osinfo+=System.getProperty("os.arch") + " ";
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCmsServlet] OS Info: " + osinfo);
    }
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] creating first cms-object");
    }
    CmsObject cms=new CmsObject();
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] initializing the main resource-broker");
    }
    m_sessionFailover=conf.getBoolean("sessionfailover.enabled",false);
    c_rb=CmsRbManager.init(conf);
    printCopyrightInformation(cms);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] read mime types");
    }
    m_mt=c_rb.readMimeTypes(null,null);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] found " + m_mt.size() + " mime-type entrys");
    }
    m_streaming=conf.getBoolean("httpstreaming.enabled",true);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] HTTP streaming " + (m_streaming ? "en" : "dis") + "abled. ");
    }
    if (!new Boolean(System.getProperty("opencms.disableScheduler")).booleanValue()) {
      m_table=new CmsCronTable(c_rb.readCronTable(null,null));
      m_scheduler=new CmsCronScheduler(this,m_table);
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCmsServlet] initializing CmsCronScheduler... DONE");
      }
    }
 else {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCmsServlet] CmsCronScheduler is disabled!");
      }
    }
    checkFileEncoding();
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] " + e.getMessage());
    }
    throw e;
  }
  try {
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] initialize launchers...");
    }
    m_launcherManager=new CmsLauncherManager(this);
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] " + e.getMessage());
    }
  }
  m_enableElementCache=conf.getBoolean("elementcache.enabled",false);
  if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] element cache " + (m_enableElementCache ? "en" : "dis") + "abled. ");
  }
  if (m_enableElementCache) {
    try {
      c_elementCache=new CmsElementCache(conf.getInteger("elementcache.uri",10000),conf.getInteger("elementcache.elements",50000),conf.getInteger("elementcache.variants",100));
    }
 catch (    Exception e) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] " + e.getMessage());
      }
    }
    c_variantDeps=new Hashtable();
    c_elementCache.getElementLocator().setExternDependencies(c_variantDeps);
  }
  try {
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] initializing link replace rules.");
    }
    String export=conf.getString("linkrules.export");
    if (export != null && !"".equals(export)) {
      c_linkRulesExport=conf.getStringArray("ruleset." + export);
      for (int i=0; i < c_linkRulesExport.length; i++) {
        c_linkRulesExport[i]=Utils.replace(c_linkRulesExport[i],C_WEB_APP_REPLACE_KEY,CmsBase.getWebAppName());
      }
    }
    String online=conf.getString("linkrules.online");
    if (online != null && !"".equals(online)) {
      c_linkRulesOnline=conf.getStringArray("ruleset." + online);
      for (int i=0; i < c_linkRulesOnline.length; i++) {
        c_linkRulesOnline[i]=Utils.replace(c_linkRulesOnline[i],C_WEB_APP_REPLACE_KEY,CmsBase.getWebAppName());
      }
    }
    String offline=conf.getString("linkrules.offline");
    if (offline != null && !"".equals(offline)) {
      c_linkRulesOffline=conf.getStringArray("ruleset." + offline);
      for (int i=0; i < c_linkRulesOffline.length; i++) {
        c_linkRulesOffline[i]=Utils.replace(c_linkRulesOffline[i],C_WEB_APP_REPLACE_KEY,CmsBase.getWebAppName());
      }
    }
    String extern=conf.getString("linkrules.extern");
    if (extern != null && !"".equals(extern)) {
      c_linkRulesExtern=conf.getStringArray("ruleset." + extern);
      for (int i=0; i < c_linkRulesExtern.length; i++) {
        c_linkRulesExtern[i]=Utils.replace(c_linkRulesExtern[i],C_WEB_APP_REPLACE_KEY,CmsBase.getWebAppName());
      }
    }
    c_linkRuleStart=conf.getString("exportfirstrule");
    String[] buffer=conf.getStringArray(C_STATICEXPORT_START);
    if (buffer != null) {
      c_staticExportStart=new Vector();
      for (int i=0; i < buffer.length; i++) {
        c_staticExportStart.add(buffer[i]);
      }
    }
    m_staticExportPath=com.opencms.boot.CmsBase.getAbsoluteWebPath(CmsBase.getAbsoluteWebPath(conf.getString(C_STATICEXPORT_PATH)));
    c_staticExportEnabled=conf.getBoolean("staticexport.enabled",false);
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[OpenCms] " + e.getMessage());
    }
  }
}
