{
  setConfiguration(conf);
  String defaultEncoding=getDefaultEncoding();
  defaultEncoding=conf.getString("defaultContentEncoding",defaultEncoding);
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". OpenCms encoding     : " + defaultEncoding);
  String systemEncoding=null;
  try {
    systemEncoding=System.getProperty("file.encoding");
  }
 catch (  SecurityException se) {
  }
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". System file.encoding : " + systemEncoding);
  if (!defaultEncoding.equals(systemEncoding)) {
    String msg="OpenCms startup failure: System file.encoding '" + systemEncoding + "' not equal to OpenCms encoding '"+ defaultEncoding+ "'";
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL))     log(I_CmsLogChannels.C_OPENCMS_CRITICAL,". Critical init error/1: " + msg);
    throw new Exception(msg);
  }
  try {
    if (!java.nio.charset.Charset.isSupported(defaultEncoding)) {
      defaultEncoding=getDefaultEncoding();
    }
  }
 catch (  Throwable t) {
  }
  setDefaultEncoding(defaultEncoding);
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". Encoding set to      : " + defaultEncoding);
  String ethernetAddress=conf.getString("server.ethernet.address",CmsUUID.getDummyEthernetAddress());
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". Ethernet address used: " + ethernetAddress);
  CmsUUID.init(ethernetAddress);
  try {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT)) {
      String jdkinfo=System.getProperty("java.vm.name") + " ";
      jdkinfo+=System.getProperty("java.vm.version") + " ";
      jdkinfo+=System.getProperty("java.vm.info") + " ";
      jdkinfo+=System.getProperty("java.vm.vendor") + " ";
      log(I_CmsLogChannels.C_OPENCMS_INIT,". Java VM in use       : " + jdkinfo);
      String osinfo=System.getProperty("os.name") + " ";
      osinfo+=System.getProperty("os.version") + " ";
      osinfo+=System.getProperty("os.arch") + " ";
      log(I_CmsLogChannels.C_OPENCMS_INIT,". Operating sytem      : " + osinfo);
    }
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL))     log(I_CmsLogChannels.C_OPENCMS_CRITICAL,". Critical init error/2: " + e.getMessage());
    throw e;
  }
  try {
    m_driverManager=CmsDriverManager.newInstance(conf);
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL))     log(I_CmsLogChannels.C_OPENCMS_CRITICAL,". Critical init error/3: " + e.getMessage());
    throw new CmsException("Database init failed",CmsException.C_RB_INIT_ERROR,e);
  }
  try {
    m_mt=m_driverManager.readMimeTypes();
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Found mime types     : " + m_mt.size() + " entrys");
    if (!new Boolean(System.getProperty("opencms.disableScheduler")).booleanValue()) {
      m_table=new CmsCronTable(m_driverManager.readCronTable());
      m_scheduler=new CmsCronScheduler(this,m_table);
      if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))       log(I_CmsLogChannels.C_OPENCMS_INIT,". OpenCms scheduler    : enabled");
    }
 else {
      if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))       log(I_CmsLogChannels.C_OPENCMS_INIT,". OpenCms scheduler    : disabled");
    }
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL))     log(I_CmsLogChannels.C_OPENCMS_CRITICAL,". Critical init error/5: " + e.getMessage());
    throw e;
  }
  String flexExportUrl=conf.getString(CmsJspLoader.C_LOADER_JSPEXPORTURL,null);
  if (null != flexExportUrl) {
    if (flexExportUrl.endsWith(I_CmsConstants.C_FOLDER_SEPARATOR)) {
      flexExportUrl=flexExportUrl.substring(0,flexExportUrl.length() - 1);
    }
    setRuntimeProperty(CmsJspLoader.C_LOADER_JSPEXPORTURL,flexExportUrl);
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". JSP export URL       : using value from opencms.properties - " + flexExportUrl);
  }
  Boolean flexErrorPageCommit=conf.getBoolean(CmsJspLoader.C_LOADER_ERRORPAGECOMMIT,new Boolean(true));
  setRuntimeProperty(CmsJspLoader.C_LOADER_ERRORPAGECOMMIT,flexErrorPageCommit);
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". JSP errorPage commit : " + (flexErrorPageCommit.booleanValue() ? "enabled" : "disabled"));
  try {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Flex cache init      : starting");
    new com.opencms.flex.cache.CmsFlexCache(this);
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Flex cache init      : finished");
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Flex cache init      : non-critical error " + e.toString());
  }
  try {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". ResourceLoader init  : starting");
    setLoaderManager(new CmsLoaderManager(this,conf));
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". ResourceLoader init  : finished");
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". ResourceLoader init  : non-critical error " + e.toString());
  }
  try {
    boolean translationEnabled=conf.getBoolean("directory.translation.enabled",false);
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Directory translation: " + (translationEnabled ? "enabled" : "disabled"));
    if (translationEnabled) {
      String[] translations=conf.getStringArray("directory.translation.rules");
      m_directoryTranslator=new CmsResourceTranslator(translations,false);
    }
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Directory translation: non-critical error " + e.toString());
  }
  if (m_directoryTranslator == null)   m_directoryTranslator=new CmsResourceTranslator(new String[0],false);
  try {
    boolean translationEnabled=conf.getBoolean("filename.translation.enabled",false);
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Filename translation : " + (translationEnabled ? "enabled" : "disabled"));
    if (translationEnabled) {
      String[] translations=conf.getStringArray("filename.translation.rules");
      m_fileTranslator=new CmsResourceTranslator(translations,true);
    }
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Filename translation : non-critical error " + e.toString());
  }
  if (m_fileTranslator == null)   m_fileTranslator=new CmsResourceTranslator(new String[0],false);
  try {
    m_defaultFilenames=conf.getStringArray("directory.default.files");
    for (int i=0; i < m_defaultFilenames.length; i++) {
      m_defaultFilenames[i]=m_defaultFilenames[i].trim();
      if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))       log(I_CmsLogChannels.C_OPENCMS_INIT,". Default file         : " + (i + 1) + " - "+ m_defaultFilenames[i]);
    }
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Default file         : non-critical error " + e.toString());
  }
  if (m_defaultFilenames == null)   m_defaultFilenames=new String[0];
  String[] immuResources=conf.getStringArray("import.immutable.resources");
  if (immuResources == null)   immuResources=new String[0];
  List immutableResourcesOri=java.util.Arrays.asList(immuResources);
  ArrayList immutableResources=new ArrayList();
  for (int i=0; i < immutableResourcesOri.size(); i++) {
    String path=((String)immutableResourcesOri.get(i)).trim();
    if (path != null && !"".equals(path)) {
      immutableResources.add(path);
      if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))       log(I_CmsLogChannels.C_OPENCMS_INIT,". Immutable resource   : " + (i + 1) + " - "+ path);
    }
  }
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". Immutable resources  : " + ((immutableResources.size() > 0) ? "enabled" : "disabled"));
  setRuntimeProperty("import.immutable.resources",immutableResources);
  try {
    String userDefaultLanguage=conf.getString("workplace.user.default.language",I_CmsWpConstants.C_DEFAULT_LANGUAGE);
    setUserDefaultLanguage(userDefaultLanguage);
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". User data init       : Default language is '" + userDefaultLanguage + "'");
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". User data init       : non-critical error " + e.toString());
  }
  c_passwordValidatingClass=conf.getString("passwordvalidatingclass","com.opencms.util.PasswordValidtation");
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". Password validation  : " + c_passwordValidatingClass);
  Integer fileMaxUploadSize=new Integer(conf.getInteger("workplace.file.maxuploadsize",-1));
  setRuntimeProperty("workplace.file.maxuploadsize",fileMaxUploadSize);
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". File max. upload size: " + (fileMaxUploadSize.intValue() > 0 ? (fileMaxUploadSize + " KB") : "unlimited"));
  try {
    List resourceInitClasses=getRegistry().getResourceInit();
    Iterator i=resourceInitClasses.iterator();
    while (i.hasNext()) {
      String currentClass=(String)i.next();
      try {
        m_checkFile.add(Class.forName(currentClass).newInstance());
        if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))         log(I_CmsLogChannels.C_OPENCMS_INIT,". Resource init class  : " + currentClass + " instanciated");
      }
 catch (      Exception e1) {
        if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))         log(I_CmsLogChannels.C_OPENCMS_INIT,". Resource init class  : non-critical error " + e1.toString());
      }
    }
  }
 catch (  Exception e2) {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Resource init class  : non-critical error " + e2.toString());
  }
  setSiteManager(CmsSiteManager.initialize(conf));
  Boolean supportOldLocales=conf.getBoolean("compatibility.support.oldlocales",new Boolean(false));
  setRuntimeProperty("compatibility.support.oldlocales",supportOldLocales);
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". Old locale support   : " + (supportOldLocales.booleanValue() ? "enabled" : "disabled"));
  String webappUrl=conf.getString("compatibility.support.import.old.webappurl",null);
  if (webappUrl != null) {
    setRuntimeProperty("compatibility.support.import.old.webappurl",webappUrl);
  }
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". Old webapp URL       : " + ((webappUrl == null) ? "not set!" : webappUrl));
  String[] propNames=conf.getStringArray("compatibility.support.import.remove.propertytags");
  if (propNames == null)   propNames=new String[0];
  List propertyNamesOri=java.util.Arrays.asList(propNames);
  ArrayList propertyNames=new ArrayList();
  for (int i=0; i < propertyNamesOri.size(); i++) {
    String name=((String)propertyNamesOri.get(i)).trim();
    if (name != null && !"".equals(name)) {
      propertyNames.add(name);
      if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))       log(I_CmsLogChannels.C_OPENCMS_INIT,". Clear import property: " + (i + 1) + " - "+ name);
    }
  }
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". Remove properties    : " + ((propertyNames.size() > 0) ? "enabled" : "disabled"));
  setRuntimeProperty("compatibility.support.import.remove.propertytags",propertyNames);
  String[] appNames=conf.getStringArray("compatibility.support.webAppNames");
  if (appNames == null)   appNames=new String[0];
  List webAppNamesOri=java.util.Arrays.asList(appNames);
  ArrayList webAppNames=new ArrayList();
  for (int i=0; i < webAppNamesOri.size(); i++) {
    String name=((String)webAppNamesOri.get(i)).trim();
    if (name != null && !"".equals(name)) {
      webAppNames.add(name);
      if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))       log(I_CmsLogChannels.C_OPENCMS_INIT,". Old context path     : " + (i + 1) + " - "+ name);
    }
  }
  if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))   log(I_CmsLogChannels.C_OPENCMS_INIT,". Old context support  : " + ((webAppNames.size() > 0) ? "enabled" : "disabled"));
  setRuntimeProperty("compatibility.support.webAppNames",webAppNames);
  try {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Link rules init      : starting");
    CmsStaticExportProperties exportProperties=new CmsStaticExportProperties();
    setStaticExportProperties(exportProperties);
    String exportPrefix=CmsStringSubstitution.substitute(conf.getString(I_CmsConstants.C_URL_PREFIX_EXPORT,""),I_CmsConstants.C_WEB_APP_REPLACE_KEY,CmsBase.getWebAppName());
    String internPrefix=internPrefix=CmsStringSubstitution.substitute(conf.getString(I_CmsConstants.C_URL_PREFIX_HTTP,""),I_CmsConstants.C_WEB_APP_REPLACE_KEY,CmsBase.getWebAppName());
    exportProperties.setExportPrefix(exportPrefix);
    exportProperties.setInternPrefix(internPrefix);
    String exportDefault=conf.getString("staticexport.default.export","true");
    exportProperties.setExportDefaultValue(exportDefault);
    String export=conf.getString("linkrules." + exportDefault + ".export");
    String[] linkRulesExport;
    if (export != null && !"".equals(export)) {
      linkRulesExport=conf.getStringArray("ruleset." + export);
      for (int i=0; i < linkRulesExport.length; i++) {
        linkRulesExport[i]=CmsStringSubstitution.substitute(linkRulesExport[i],I_CmsConstants.C_WEB_APP_REPLACE_KEY,CmsBase.getWebAppName());
        linkRulesExport[i]=CmsStringSubstitution.substitute(linkRulesExport[i],"${" + I_CmsConstants.C_URL_PREFIX_EXPORT + "}",exportPrefix);
        linkRulesExport[i]=CmsStringSubstitution.substitute(linkRulesExport[i],"${" + I_CmsConstants.C_URL_PREFIX_HTTP + "}",internPrefix);
      }
      exportProperties.setLinkRulesExport(linkRulesExport);
    }
    String online=conf.getString("linkrules." + exportDefault + ".online");
    String[] linkRulesOnline;
    if (online != null && !"".equals(online)) {
      linkRulesOnline=conf.getStringArray("ruleset." + online);
      for (int i=0; i < linkRulesOnline.length; i++) {
        linkRulesOnline[i]=CmsStringSubstitution.substitute(linkRulesOnline[i],I_CmsConstants.C_WEB_APP_REPLACE_KEY,CmsBase.getWebAppName());
        linkRulesOnline[i]=CmsStringSubstitution.substitute(linkRulesOnline[i],"${" + I_CmsConstants.C_URL_PREFIX_EXPORT + "}",exportPrefix);
        linkRulesOnline[i]=CmsStringSubstitution.substitute(linkRulesOnline[i],"${" + I_CmsConstants.C_URL_PREFIX_HTTP + "}",internPrefix);
      }
      exportProperties.setLinkRulesOnline(linkRulesOnline);
    }
    String offline=conf.getString("linkrules." + exportDefault + ".offline");
    String[] linkRulesOffline;
    if (offline != null && !"".equals(offline)) {
      linkRulesOffline=conf.getStringArray("ruleset." + offline);
      for (int i=0; i < linkRulesOffline.length; i++) {
        linkRulesOffline[i]=CmsStringSubstitution.substitute(linkRulesOffline[i],I_CmsConstants.C_WEB_APP_REPLACE_KEY,CmsBase.getWebAppName());
        linkRulesOffline[i]=CmsStringSubstitution.substitute(linkRulesOffline[i],"${" + I_CmsConstants.C_URL_PREFIX_EXPORT + "}",exportPrefix);
        linkRulesOffline[i]=CmsStringSubstitution.substitute(linkRulesOffline[i],"${" + I_CmsConstants.C_URL_PREFIX_HTTP + "}",internPrefix);
      }
      exportProperties.setLinkRulesOffline(linkRulesOffline);
    }
    String extern=conf.getString("linkrules." + exportDefault + ".extern");
    String[] linkRulesExtern;
    if (extern != null && !"".equals(extern)) {
      linkRulesExtern=conf.getStringArray("ruleset." + extern);
      for (int i=0; i < linkRulesExtern.length; i++) {
        linkRulesExtern[i]=CmsStringSubstitution.substitute(linkRulesExtern[i],I_CmsConstants.C_WEB_APP_REPLACE_KEY,CmsBase.getWebAppName());
        linkRulesExtern[i]=CmsStringSubstitution.substitute(linkRulesExtern[i],"${" + I_CmsConstants.C_URL_PREFIX_EXPORT + "}",exportPrefix);
        linkRulesExtern[i]=CmsStringSubstitution.substitute(linkRulesExtern[i],"${" + I_CmsConstants.C_URL_PREFIX_HTTP + "}",internPrefix);
      }
      exportProperties.setLinkRulesExtern(linkRulesExtern);
    }
    exportProperties.setStartRule(null);
    Vector staticExportStart=new Vector();
    staticExportStart.add("/");
    exportProperties.setStartPoints(staticExportStart);
    exportProperties.setExportPath(com.opencms.boot.CmsBase.getAbsoluteWebPath(CmsBase.getAbsoluteWebPath(conf.getString(I_CmsConstants.C_STATICEXPORT_PATH))));
    exportProperties.setExportRelativeLinks(conf.getBoolean("relativelinks_in_export",false));
    String activCheck=conf.getString("staticexport.enabled","false");
    if ("true".equalsIgnoreCase(activCheck)) {
      exportProperties.setStaticExportEnabled(true);
    }
 else {
      exportProperties.setStaticExportEnabled(false);
    }
    if (exportProperties.isStaticExportEnabled()) {
      createDynamicLinkRules();
    }
 else {
      exportProperties.setLinkRulesOffline(new String[]{"s#^#" + internPrefix + "#"});
      exportProperties.setLinkRulesOnline(new String[]{"s#^#" + internPrefix + "#"});
    }
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Link rules init      : finished");
  }
 catch (  Exception e) {
    if (I_CmsLogChannels.C_LOGGING && isLogging(I_CmsLogChannels.C_OPENCMS_INIT))     log(I_CmsLogChannels.C_OPENCMS_INIT,". Link rules init      : non-critical error " + e.toString());
  }
}
