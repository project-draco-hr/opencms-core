{
  if (m_startupClassesInitialized)   return;
synchronized (this) {
    m_startupClassesInitialized=true;
    if (res == null) {
    }
    if (C_LOGGING && isLogging(C_OPENCMS_INIT))     log(C_OPENCMS_INIT,". Startup class init   : starting");
    String context=req.getContextPath() + req.getServletPath();
    if (context.endsWith("/"))     context=context.substring(0,context.lastIndexOf('/'));
    A_OpenCms.setOpenCmsContext(context);
    if (C_LOGGING && isLogging(C_OPENCMS_INIT))     log(C_OPENCMS_INIT,". OpenCms context      : " + context);
    ArrayList webAppNames=(ArrayList)A_OpenCms.getRuntimeProperty("compatibility.support.webAppNames");
    if (webAppNames == null) {
      webAppNames=new ArrayList();
    }
    if (!webAppNames.contains(context)) {
      webAppNames.add(context);
      setRuntimeProperty("compatibility.support.webAppNames",webAppNames);
    }
    String jspExportUrl=(String)getRuntimeProperty(CmsJspLoader.C_LOADER_JSPEXPORTURL);
    if (jspExportUrl == null) {
      StringBuffer url=new StringBuffer(256);
      url.append(req.getScheme());
      url.append("://");
      url.append(req.getServerName());
      url.append(":");
      url.append(req.getServerPort());
      url.append(context);
      String flexExportUrl=new String(url);
      if (flexExportUrl.endsWith(C_FOLDER_SEPARATOR)) {
        flexExportUrl=flexExportUrl.substring(0,flexExportUrl.length() - 1);
      }
      setRuntimeProperty(CmsJspLoader.C_LOADER_JSPEXPORTURL,flexExportUrl);
      CmsJspLoader.setJspExportUrl(flexExportUrl);
      if (C_LOGGING && isLogging(C_OPENCMS_INIT))       log(C_OPENCMS_INIT,". JSP export URL       : using value from first request - " + flexExportUrl);
    }
    try {
      Hashtable startupNode=getRegistry().getSystemValues("startup");
      if (startupNode != null) {
        for (int i=1; i <= startupNode.size(); i++) {
          String currentClass=(String)startupNode.get("class" + i);
          try {
            Class.forName(currentClass).newInstance();
            if (C_LOGGING && isLogging(C_OPENCMS_INIT))             log(C_OPENCMS_INIT,". Startup class init   : " + currentClass + " instanciated");
          }
 catch (          Exception e1) {
            if (C_LOGGING && isLogging(C_OPENCMS_INIT))             log(C_OPENCMS_INIT,". Startup class init   : non-critical error " + e1.toString());
          }
        }
      }
    }
 catch (    Exception e2) {
      if (C_LOGGING && isLogging(C_OPENCMS_INIT))       log(C_OPENCMS_INIT,". Startup class init   : non-critical error " + e2.toString());
    }
    if (C_LOGGING && A_OpenCms.isLogging(C_OPENCMS_INIT)) {
      A_OpenCms.log(C_OPENCMS_INIT,". Startup class init   : finished");
      A_OpenCms.log(C_OPENCMS_INIT,".                      ...............................................................");
      A_OpenCms.log(C_OPENCMS_INIT,".");
    }
  }
}
