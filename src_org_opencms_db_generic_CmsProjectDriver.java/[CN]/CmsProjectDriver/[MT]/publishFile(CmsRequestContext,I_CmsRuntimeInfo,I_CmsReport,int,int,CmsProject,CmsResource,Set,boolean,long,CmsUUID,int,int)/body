{
  CmsFile newFile=null;
  CmsResource onlineFileHeader=null;
  List offlineProperties=null;
  CmsProperty property=null;
  int propertyDeleteOption=-1;
  try {
    if (offlineFileHeader.getState() == I_CmsConstants.C_STATE_DELETED) {
      report.print("( " + m + " / "+ n+ " ) "+ report.key("report.deleting.file"),I_CmsReport.C_FORMAT_NOTE);
      report.print(context.removeSiteRoot(offlineFileHeader.getRootPath()));
      report.print(report.key("report.dots"));
      try {
        onlineFileHeader=m_driverManager.getVfsDriver().readResource(runtimeInfo,onlineProject.getId(),offlineFileHeader.getStructureId(),true);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error reading resource " + offlineFileHeader.toString(),e);
        }
        throw e;
      }
      if (offlineFileHeader.isLabeled() && !m_driverManager.labelResource(context,offlineFileHeader,null,2)) {
        int flags=offlineFileHeader.getFlags();
        flags&=~I_CmsConstants.C_RESOURCEFLAG_LABELLINK;
        offlineFileHeader.setFlags(flags);
      }
      try {
        if (backupEnabled && !OpenCms.getSystemInfo().keepVersionHistory()) {
          m_driverManager.deleteBackup(offlineFileHeader);
        }
        m_driverManager.getProjectDriver().writePublishHistory(runtimeInfo,context.currentProject(),publishHistoryId,backupTagId,offlineFileHeader);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing backup/publishing history of " + offlineFileHeader.toString(),e);
        }
        throw e;
      }
      try {
        if (onlineFileHeader.getSiblingCount() > 1) {
          propertyDeleteOption=CmsProperty.C_DELETE_OPTION_DELETE_STRUCTURE_VALUES;
        }
 else {
          propertyDeleteOption=CmsProperty.C_DELETE_OPTION_DELETE_STRUCTURE_AND_RESOURCE_VALUES;
        }
        m_driverManager.getVfsDriver().deletePropertyObjects(runtimeInfo,onlineProject.getId(),onlineFileHeader,propertyDeleteOption);
        m_driverManager.getVfsDriver().deletePropertyObjects(runtimeInfo,context.currentProject().getId(),offlineFileHeader,propertyDeleteOption);
        if (!onlineFileHeader.getResourceId().equals(offlineFileHeader.getResourceId())) {
          m_driverManager.getVfsDriver().deletePropertyObjects(runtimeInfo,context.currentProject().getId(),onlineFileHeader,CmsProperty.C_DELETE_OPTION_DELETE_STRUCTURE_AND_RESOURCE_VALUES);
        }
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error deleting properties of " + offlineFileHeader.toString(),e);
        }
        throw e;
      }
      try {
        m_driverManager.getVfsDriver().removeFile(runtimeInfo,context.currentProject(),offlineFileHeader,true);
        try {
          m_driverManager.getVfsDriver().readResource(runtimeInfo,context.currentProject().getId(),offlineFileHeader.getStructureId(),true);
        }
 catch (        CmsVfsResourceNotFoundException e) {
          m_driverManager.getVfsDriver().removeFile(runtimeInfo,onlineProject,onlineFileHeader,true);
        }
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error removing resource " + offlineFileHeader.toString(),e);
        }
        throw e;
      }
      try {
        m_driverManager.getUserDriver().removeAccessControlEntries(runtimeInfo,onlineProject,onlineFileHeader.getResourceId());
        m_driverManager.getUserDriver().removeAccessControlEntries(runtimeInfo,context.currentProject(),offlineFileHeader.getResourceId());
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error removing ACLs of " + offlineFileHeader.toString(),e);
        }
        throw e;
      }
      report.println(report.key("report.ok"),I_CmsReport.C_FORMAT_OK);
      if (OpenCms.getLog(this).isDebugEnabled()) {
        OpenCms.getLog(this).debug("( " + m + " / "+ n+ " ) "+ report.key("report.deleting.file")+ offlineFileHeader.getRootPath()+ report.key("report.dots")+ report.key("report.ok"));
      }
    }
 else     if (offlineFileHeader.getState() == I_CmsConstants.C_STATE_CHANGED) {
      report.print("( " + m + " / "+ n+ " ) "+ report.key("report.publishing.file"),I_CmsReport.C_FORMAT_NOTE);
      report.print(context.removeSiteRoot(offlineFileHeader.getRootPath()));
      report.print(report.key("report.dots"));
      try {
        onlineFileHeader=m_driverManager.getVfsDriver().readResource(runtimeInfo,onlineProject.getId(),offlineFileHeader.getStructureId(),false);
        int flags=offlineFileHeader.getFlags();
        flags&=~I_CmsConstants.C_RESOURCEFLAG_LABELLINK;
        offlineFileHeader.setFlags(flags);
        m_driverManager.getVfsDriver().deletePropertyObjects(runtimeInfo,onlineProject.getId(),onlineFileHeader,CmsProperty.C_DELETE_OPTION_DELETE_STRUCTURE_AND_RESOURCE_VALUES);
        if (!onlineFileHeader.getResourceId().equals(offlineFileHeader.getResourceId())) {
          offlineProperties=m_driverManager.getVfsDriver().readPropertyObjects(context.currentProject(),onlineFileHeader);
          if (offlineProperties.size() > 0) {
            for (int i=0; i < offlineProperties.size(); i++) {
              property=(CmsProperty)offlineProperties.get(i);
              property.setStructureValue(null);
              property.setResourceValue(CmsProperty.C_DELETE_VALUE);
            }
            m_driverManager.getVfsDriver().writePropertyObjects(runtimeInfo,context.currentProject(),onlineFileHeader,offlineProperties);
          }
        }
        boolean removeContent=!publishedContentIds.contains(offlineFileHeader.getResourceId());
        m_driverManager.getVfsDriver().removeFile(runtimeInfo,onlineProject,onlineFileHeader,removeContent);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error deleting properties of " + offlineFileHeader.toString(),e);
        }
        throw e;
      }
      try {
        newFile=m_driverManager.getProjectDriver().publishFileContent(runtimeInfo,context.currentProject(),onlineProject,offlineFileHeader,publishedContentIds);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error creating resource " + offlineFileHeader.toString(),e);
        }
        throw e;
      }
      try {
        offlineProperties=m_driverManager.getVfsDriver().readPropertyObjects(context.currentProject(),offlineFileHeader);
        CmsProperty.setAutoCreatePropertyDefinitions(offlineProperties,true);
        m_driverManager.getVfsDriver().writePropertyObjects(runtimeInfo,onlineProject,newFile,offlineProperties);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing properties of " + newFile.toString(),e);
        }
        throw e;
      }
      try {
        m_driverManager.getUserDriver().publishAccessControlEntries(runtimeInfo,context.currentProject(),onlineProject,newFile.getResourceId(),onlineFileHeader.getResourceId());
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing ACLs of " + newFile.toString(),e);
        }
        throw e;
      }
      try {
        if (backupEnabled) {
          if (offlineProperties == null) {
            offlineProperties=m_driverManager.getVfsDriver().readPropertyObjects(context.currentProject(),offlineFileHeader);
          }
          m_driverManager.getBackupDriver().writeBackupResource(runtimeInfo,context.currentUser(),context.currentProject(),newFile,offlineProperties,backupTagId,publishDate,maxVersions);
        }
        m_driverManager.getProjectDriver().writePublishHistory(runtimeInfo,context.currentProject(),publishHistoryId,backupTagId,offlineFileHeader);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing backup/publishing history of " + offlineFileHeader.toString(),e);
        }
        throw e;
      }
      report.println(report.key("report.ok"),I_CmsReport.C_FORMAT_OK);
      if (OpenCms.getLog(this).isDebugEnabled()) {
        OpenCms.getLog(this).debug("( " + m + " / "+ n+ " ) "+ report.key("report.publishing.file")+ offlineFileHeader.getRootPath()+ report.key("report.dots")+ report.key("report.ok"));
      }
    }
 else     if (offlineFileHeader.getState() == I_CmsConstants.C_STATE_NEW) {
      report.print("( " + m + " / "+ n+ " ) "+ report.key("report.publishing.file"),I_CmsReport.C_FORMAT_NOTE);
      report.print(context.removeSiteRoot(offlineFileHeader.getRootPath()));
      report.print(report.key("report.dots"));
      try {
        int flags=offlineFileHeader.getFlags();
        flags&=~I_CmsConstants.C_RESOURCEFLAG_LABELLINK;
        offlineFileHeader.setFlags(flags);
        newFile=m_driverManager.getProjectDriver().publishFileContent(runtimeInfo,context.currentProject(),onlineProject,offlineFileHeader,publishedContentIds);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Caught error " + e.getType(),e);
        }
        if (e.getType() == CmsException.C_FILE_EXISTS) {
          try {
            m_driverManager.getVfsDriver().removeFile(runtimeInfo,onlineProject,offlineFileHeader,true);
            publishedContentIds.remove(offlineFileHeader.getResourceId());
            newFile=m_driverManager.getProjectDriver().publishFileContent(runtimeInfo,context.currentProject(),onlineProject,offlineFileHeader,publishedContentIds);
          }
 catch (          CmsException e1) {
            if (OpenCms.getLog(this).isErrorEnabled()) {
              OpenCms.getLog(this).error("Error creating resource " + offlineFileHeader.toString(),e);
            }
            throw e1;
          }
        }
 else {
          if (OpenCms.getLog(this).isErrorEnabled()) {
            OpenCms.getLog(this).error("Error creating resource " + offlineFileHeader.toString(),e);
          }
          throw e;
        }
      }
      try {
        offlineProperties=m_driverManager.getVfsDriver().readPropertyObjects(context.currentProject(),offlineFileHeader);
        CmsProperty.setAutoCreatePropertyDefinitions(offlineProperties,true);
        m_driverManager.getVfsDriver().writePropertyObjects(runtimeInfo,onlineProject,newFile,offlineProperties);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing properties of " + newFile.toString(),e);
        }
        throw e;
      }
      try {
        m_driverManager.getUserDriver().publishAccessControlEntries(runtimeInfo,context.currentProject(),onlineProject,offlineFileHeader.getResourceId(),newFile.getResourceId());
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing ACLs of " + newFile.toString(),e);
        }
        throw e;
      }
      try {
        if (backupEnabled) {
          if (offlineProperties == null) {
            offlineProperties=m_driverManager.getVfsDriver().readPropertyObjects(context.currentProject(),offlineFileHeader);
          }
          m_driverManager.getBackupDriver().writeBackupResource(runtimeInfo,context.currentUser(),context.currentProject(),newFile,offlineProperties,backupTagId,publishDate,maxVersions);
        }
        m_driverManager.getProjectDriver().writePublishHistory(runtimeInfo,context.currentProject(),publishHistoryId,backupTagId,offlineFileHeader);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing backup/publishing history of " + newFile.toString(),e);
        }
        throw e;
      }
      report.println(report.key("report.ok"),I_CmsReport.C_FORMAT_OK);
      if (OpenCms.getLog(this).isDebugEnabled()) {
        OpenCms.getLog(this).debug("( " + m + " / "+ n+ " ) "+ report.key("report.publishing.file")+ offlineFileHeader.getRootPath()+ report.key("report.dots")+ report.key("report.ok"));
      }
    }
  }
 catch (  Exception e) {
    if (C_DEBUG) {
      System.err.println(e.getMessage());
      e.printStackTrace(System.err);
    }
    throw e;
  }
 finally {
    OpenCms.fireCmsEvent(new CmsEvent(I_CmsEventListener.EVENT_RESOURCE_AND_PROPERTIES_MODIFIED,Collections.singletonMap("resource",offlineFileHeader)));
  }
}
