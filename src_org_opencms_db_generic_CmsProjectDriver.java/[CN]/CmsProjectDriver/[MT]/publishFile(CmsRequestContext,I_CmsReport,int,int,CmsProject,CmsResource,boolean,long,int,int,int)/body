{
  CmsFile onlineFile=null;
  CmsFile offlineFile=null;
  CmsFile newFile=null;
  Map offlineProperties=null;
  try {
    offlineFile=m_driverManager.getVfsDriver().readFile(context.currentProject().getId(),true,offlineFileHeader.getStructureId());
    offlineFile.setFullResourceName(offlineFileHeader.getRootPath());
    if (offlineFileHeader.getState() == I_CmsConstants.C_STATE_DELETED) {
      report.print("( " + m + " / "+ n+ " ) "+ report.key("report.deleting.file"),I_CmsReport.C_FORMAT_NOTE);
      report.println(context.removeSiteRoot(offlineFileHeader.getRootPath()));
      try {
        onlineFile=m_driverManager.getVfsDriver().readFile(onlineProject.getId(),true,offlineFile.getStructureId());
        onlineFile.setFullResourceName(offlineFileHeader.getRootPath());
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error reading resource " + offlineFile.toString(),e);
        }
        throw e;
      }
      if (offlineFile.isLabeled() && !m_driverManager.hasLabeledLinks(context,offlineFile)) {
        int flags=offlineFile.getFlags();
        flags&=~I_CmsConstants.C_RESOURCEFLAG_LABELLINK;
        offlineFile.setFlags(flags);
      }
      if (onlineFile.isLabeled() && !m_driverManager.hasLabeledLinks(context,onlineFile)) {
        int flags=onlineFile.getFlags();
        flags&=~I_CmsConstants.C_RESOURCEFLAG_LABELLINK;
        onlineFile.setFlags(flags);
      }
      try {
        m_driverManager.getVfsDriver().deleteProperties(onlineProject.getId(),onlineFile);
        m_driverManager.getVfsDriver().deleteProperties(context.currentProject().getId(),offlineFile);
        if (!onlineFile.getResourceId().equals(offlineFile.getResourceId())) {
          m_driverManager.getVfsDriver().deleteProperties(context.currentProject().getId(),onlineFile);
        }
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error deleting properties of " + offlineFile.toString(),e);
        }
        throw e;
      }
      try {
        m_driverManager.getVfsDriver().removeFile(onlineProject,onlineFile);
        m_driverManager.getVfsDriver().removeFile(context.currentProject(),offlineFile);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error removing resource " + offlineFile.toString(),e);
        }
        throw e;
      }
      try {
        m_driverManager.getUserDriver().removeAccessControlEntries(onlineProject,onlineFile.getResourceId());
        m_driverManager.getUserDriver().removeAccessControlEntries(context.currentProject(),offlineFile.getResourceId());
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error removing ACLs of " + offlineFile.toString(),e);
        }
        throw e;
      }
      try {
        if (backupEnabled) {
          offlineProperties=m_driverManager.getVfsDriver().readProperties(context.currentProject().getId(),offlineFile,offlineFile.getType());
          m_driverManager.getBackupDriver().writeBackupResource(context.currentUser(),context.currentProject(),offlineFile,offlineProperties,backupTagId,publishDate,maxVersions);
        }
        writePublishHistory(context.currentProject(),publishHistoryId,backupTagId,offlineFileHeader.getRootPath(),offlineFile);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing backup/publishing history of " + offlineFile.toString(),e);
        }
        throw e;
      }
    }
 else     if (offlineFileHeader.getState() == I_CmsConstants.C_STATE_CHANGED) {
      report.print("( " + m + " / "+ n+ " ) "+ report.key("report.publishing.file"),I_CmsReport.C_FORMAT_NOTE);
      report.println(context.removeSiteRoot(offlineFileHeader.getRootPath()));
      try {
        onlineFile=m_driverManager.getVfsDriver().readFile(onlineProject.getId(),true,offlineFile.getStructureId());
        onlineFile.setFullResourceName(offlineFileHeader.getRootPath());
        m_driverManager.getVfsDriver().deleteProperties(onlineProject.getId(),onlineFile);
        if (!onlineFile.getResourceId().equals(offlineFile.getResourceId())) {
          m_driverManager.getVfsDriver().deleteProperties(context.currentProject().getId(),onlineFile);
        }
        m_driverManager.getVfsDriver().removeFile(onlineProject,onlineFile);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error deleting properties of " + offlineFile.toString(),e);
        }
        throw e;
      }
      try {
        newFile=(CmsFile)offlineFile.clone();
        newFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
        newFile.setFullResourceName(offlineFileHeader.getRootPath());
        m_driverManager.getVfsDriver().createFile(onlineProject,newFile,context.currentUser().getId(),newFile.getParentStructureId(),newFile.getName());
        m_driverManager.getVfsDriver().writeResource(newFile,offlineFile);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error creating resource " + newFile.toString(),e);
        }
        throw e;
      }
      try {
        offlineProperties=m_driverManager.getVfsDriver().readProperties(context.currentProject().getId(),offlineFile,offlineFile.getType());
        m_driverManager.getVfsDriver().writeProperties(offlineProperties,onlineProject.getId(),newFile,newFile.getType(),false);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing properties of " + newFile.toString(),e);
        }
        throw e;
      }
      try {
        m_driverManager.getUserDriver().publishAccessControlEntries(context.currentProject(),onlineProject,newFile.getResourceId(),onlineFile.getResourceId());
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing ACLs of " + offlineFile.toString(),e);
        }
        throw e;
      }
      try {
        if (backupEnabled) {
          m_driverManager.getBackupDriver().writeBackupResource(context.currentUser(),context.currentProject(),offlineFile,offlineProperties,backupTagId,publishDate,maxVersions);
        }
        writePublishHistory(context.currentProject(),publishHistoryId,backupTagId,offlineFileHeader.getRootPath(),offlineFile);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing backup/publishing history of " + offlineFile.toString(),e);
        }
        throw e;
      }
      try {
        if (offlineFileHeader.getState() != I_CmsConstants.C_STATE_UNCHANGED) {
          offlineFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
          m_driverManager.getVfsDriver().writeResourceState(context.currentProject(),offlineFile,CmsDriverManager.C_UPDATE_ALL);
        }
        m_driverManager.getVfsDriver().writeLastModifiedProjectId(context.currentProject(),0,offlineFile);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error reseting resource state of " + offlineFile.toString(),e);
        }
        throw e;
      }
    }
 else     if (offlineFileHeader.getState() == I_CmsConstants.C_STATE_NEW) {
      report.print("( " + m + " / "+ n+ " ) "+ report.key("report.publishing.file"),I_CmsReport.C_FORMAT_NOTE);
      report.println(context.removeSiteRoot(offlineFileHeader.getRootPath()));
      try {
        newFile=(CmsFile)offlineFile.clone();
        newFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
        newFile.setFullResourceName(offlineFileHeader.getRootPath());
        m_driverManager.getVfsDriver().createFile(onlineProject,newFile,context.currentUser().getId(),newFile.getParentStructureId(),newFile.getName());
      }
 catch (      CmsException e) {
        if (e.getType() == CmsException.C_FILE_EXISTS) {
          try {
            m_driverManager.getVfsDriver().removeFile(onlineProject,offlineFile);
            m_driverManager.getVfsDriver().createFile(onlineProject,newFile,context.currentUser().getId(),newFile.getParentStructureId(),newFile.getName());
          }
 catch (          CmsException e1) {
            if (OpenCms.getLog(this).isErrorEnabled()) {
              OpenCms.getLog(this).error("Error creating resource " + offlineFile.toString(),e);
            }
            throw e1;
          }
        }
 else         if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error creating resource " + offlineFile.toString(),e);
        }
        throw e;
      }
      try {
        offlineProperties=m_driverManager.getVfsDriver().readProperties(context.currentProject().getId(),offlineFile,offlineFile.getType());
        m_driverManager.getVfsDriver().writeProperties(offlineProperties,onlineProject.getId(),newFile,newFile.getType(),false);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing properties of " + newFile.toString(),e);
        }
        throw e;
      }
      try {
        m_driverManager.getUserDriver().publishAccessControlEntries(context.currentProject(),onlineProject,offlineFile.getResourceId(),newFile.getResourceId());
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing ACLs of " + newFile.toString(),e);
        }
        throw e;
      }
      try {
        if (backupEnabled) {
          m_driverManager.getBackupDriver().writeBackupResource(context.currentUser(),context.currentProject(),offlineFile,offlineProperties,backupTagId,publishDate,maxVersions);
        }
        writePublishHistory(context.currentProject(),publishHistoryId,backupTagId,offlineFileHeader.getRootPath(),offlineFile);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error writing backup/publishing history of " + newFile.toString(),e);
        }
        throw e;
      }
      try {
        if (offlineFileHeader.getState() != I_CmsConstants.C_STATE_UNCHANGED) {
          offlineFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
          m_driverManager.getVfsDriver().writeResourceState(context.currentProject(),offlineFile,CmsDriverManager.C_UPDATE_ALL);
        }
        m_driverManager.getVfsDriver().writeLastModifiedProjectId(context.currentProject(),0,offlineFile);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error reseting resource state of " + offlineFile.toString(),e);
        }
        throw e;
      }
    }
  }
 catch (  Exception e) {
    if (C_DEBUG) {
      System.err.println(e.getMessage());
      e.printStackTrace(System.err);
    }
    throw e;
  }
 finally {
    OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_RESOURCE_AND_PROPERTIES_MODIFIED,Collections.singletonMap("resource",offlineFileHeader)));
  }
}
