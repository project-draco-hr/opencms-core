{
  CmsResource newFolder=null;
  CmsResource onlineFolder=null;
  List offlineProperties=null;
  try {
    report.print("( " + m + " / "+ n+ " ) "+ report.key("report.publishing.folder"),I_CmsReport.C_FORMAT_NOTE);
    report.print(context.removeSiteRoot(offlineFolder.getRootPath()));
    report.print(report.key("report.dots"));
    if (offlineFolder.getState() == I_CmsConstants.C_STATE_NEW) {
      try {
        newFolder=(CmsFolder)offlineFolder.clone();
        newFolder.setState(I_CmsConstants.C_STATE_UNCHANGED);
        onlineFolder=m_driverManager.getVfsDriver().createResource(runtimeInfo,onlineProject,newFolder,null);
      }
 catch (      CmsException e) {
        if (e.getType() == CmsException.C_FILE_EXISTS) {
          try {
            onlineFolder=m_driverManager.getVfsDriver().readFolder(onlineProject.getId(),newFolder.getStructureId());
            m_driverManager.getVfsDriver().publishResource(runtimeInfo,onlineProject,onlineFolder,offlineFolder,false);
          }
 catch (          CmsException e1) {
            if (OpenCms.getLog(this).isErrorEnabled()) {
              OpenCms.getLog(this).error("Error reading resource " + offlineFolder.toString(),e1);
            }
            throw e1;
          }
        }
 else {
          if (OpenCms.getLog(this).isErrorEnabled()) {
            OpenCms.getLog(this).error("Error creating resource " + offlineFolder.toString(),e);
          }
          throw e;
        }
      }
    }
 else     if (offlineFolder.getState() == I_CmsConstants.C_STATE_CHANGED) {
      try {
        onlineFolder=m_driverManager.getVfsDriver().readFolder(onlineProject.getId(),offlineFolder.getStructureId());
      }
 catch (      CmsVfsResourceNotFoundException e) {
        try {
          onlineFolder=m_driverManager.getVfsDriver().createResource(runtimeInfo,onlineProject,offlineFolder,null);
          onlineFolder.setState(I_CmsConstants.C_STATE_UNCHANGED);
          m_driverManager.getVfsDriver().writeResourceState(runtimeInfo,context.currentProject(),onlineFolder,CmsDriverManager.C_UPDATE_ALL);
        }
 catch (        CmsException e1) {
          if (OpenCms.getLog(this).isErrorEnabled()) {
            OpenCms.getLog(this).error("Error creating resource " + offlineFolder.toString(),e1);
          }
          throw e1;
        }
      }
      try {
        m_driverManager.getVfsDriver().publishResource(runtimeInfo,onlineProject,onlineFolder,offlineFolder,false);
      }
 catch (      CmsException e) {
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error("Error updating resource " + offlineFolder.toString(),e);
        }
        throw e;
      }
    }
    try {
      m_driverManager.getUserDriver().publishAccessControlEntries(runtimeInfo,context.currentProject(),onlineProject,offlineFolder.getResourceId(),onlineFolder.getResourceId());
    }
 catch (    CmsException e) {
      if (OpenCms.getLog(this).isErrorEnabled()) {
        OpenCms.getLog(this).error("Error writing ACLs of " + offlineFolder.toString(),e);
      }
      throw e;
    }
    try {
      m_driverManager.getVfsDriver().deletePropertyObjects(runtimeInfo,onlineProject.getId(),onlineFolder,CmsProperty.C_DELETE_OPTION_DELETE_STRUCTURE_AND_RESOURCE_VALUES);
      offlineProperties=m_driverManager.getVfsDriver().readPropertyObjects(context.currentProject(),offlineFolder);
      CmsProperty.setAutoCreatePropertyDefinitions(offlineProperties,true);
      m_driverManager.getVfsDriver().writePropertyObjects(runtimeInfo,onlineProject,onlineFolder,offlineProperties);
    }
 catch (    CmsException e) {
      if (OpenCms.getLog(this).isErrorEnabled()) {
        OpenCms.getLog(this).error("Error writing properties of " + offlineFolder.toString(),e);
      }
      throw e;
    }
    try {
      if (backupEnabled) {
        if (offlineProperties == null) {
          offlineProperties=m_driverManager.getVfsDriver().readPropertyObjects(context.currentProject(),offlineFolder);
        }
        m_driverManager.getBackupDriver().writeBackupResource(runtimeInfo,context.currentUser(),context.currentProject(),offlineFolder,offlineProperties,backupTagId,publishDate,maxVersions);
      }
      m_driverManager.getProjectDriver().writePublishHistory(runtimeInfo,context.currentProject(),publishHistoryId,backupTagId,offlineFolder);
    }
 catch (    CmsException e) {
      if (OpenCms.getLog(this).isErrorEnabled()) {
        OpenCms.getLog(this).error("Error writing backup/publishing history of " + offlineFolder.toString(),e);
      }
      throw e;
    }
    report.println(report.key("report.ok"),I_CmsReport.C_FORMAT_OK);
    if (OpenCms.getLog(this).isDebugEnabled()) {
      OpenCms.getLog(this).debug("( " + m + " / "+ n+ " ) "+ report.key("report.publishing.folder")+ offlineFolder.getRootPath()+ report.key("report.dots")+ report.key("report.ok"));
    }
  }
 catch (  Exception e) {
    if (C_DEBUG) {
      System.err.println(e.getMessage());
      e.printStackTrace(System.err);
    }
    throw e;
  }
 finally {
    OpenCms.fireCmsEvent(new CmsEvent(I_CmsEventListener.EVENT_RESOURCE_AND_PROPERTIES_MODIFIED,Collections.singletonMap("resource",offlineFolder)));
  }
}
