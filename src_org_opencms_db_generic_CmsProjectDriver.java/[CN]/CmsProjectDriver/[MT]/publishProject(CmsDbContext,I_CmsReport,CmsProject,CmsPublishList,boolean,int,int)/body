{
  CmsResource currentResource=null;
  long publishDate=System.currentTimeMillis();
  Iterator i=null;
  int n;
  int publishedFolderCount=0;
  int deletedFolderCount=0;
  int publishedFileCount=0;
  Set publishedContentIds=new HashSet();
  try {
    if (backupEnabled) {
      try {
        m_driverManager.getBackupDriver().writeBackupProject(dbc,backupTagId,publishDate);
        dbc.pop();
      }
 catch (      Throwable t) {
        dbc.report(report,Messages.get().container(Messages.ERR_WRITING_BACKUP_OF_PROJECT_1,dbc.currentProject().getName()),t);
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_START_PUBLISHING_PROJECT_2,dbc.currentProject().getName(),dbc.currentUser().getName()));
    }
    publishedFolderCount=0;
    n=publishList.getFolderList().size();
    i=publishList.getFolderList().iterator();
    if (n > 0) {
      report.println(Messages.get().container(Messages.RPT_PUBLISH_FOLDERS_BEGIN_0),I_CmsReport.FORMAT_HEADLINE);
    }
    while (i.hasNext()) {
      CmsResource currentFolder=(CmsResource)i.next();
      try {
        if (currentFolder.getState() == CmsResource.STATE_NEW) {
          m_driverManager.getProjectDriver().publishFolder(dbc,report,++publishedFolderCount,n,onlineProject,new CmsFolder(currentFolder),backupEnabled,publishDate,publishList.getPublishHistoryId(),backupTagId,maxVersions);
          internalResetResourceState(dbc,currentFolder);
        }
 else         if (currentFolder.getState() == CmsResource.STATE_CHANGED) {
          m_driverManager.getProjectDriver().publishFolder(dbc,report,++publishedFolderCount,n,onlineProject,new CmsFolder(currentFolder),backupEnabled,publishDate,publishList.getPublishHistoryId(),backupTagId,maxVersions);
          internalResetResourceState(dbc,currentFolder);
        }
        dbc.pop();
      }
 catch (      Throwable t) {
        dbc.report(report,Messages.get().container(Messages.ERR_ERROR_PUBLISHING_FOLDER_1,currentFolder.getRootPath()),t);
      }
    }
    if (n > 0) {
      report.println(Messages.get().container(Messages.RPT_PUBLISH_FOLDERS_END_0),I_CmsReport.FORMAT_HEADLINE);
    }
    publishedFileCount=0;
    n=publishList.getFileList().size();
    i=publishList.getFileList().iterator();
    if (n > 0) {
      report.println(Messages.get().container(Messages.RPT_PUBLISH_FILES_BEGIN_0),I_CmsReport.FORMAT_HEADLINE);
    }
    while (i.hasNext()) {
      currentResource=(CmsResource)i.next();
      try {
        m_driverManager.getProjectDriver().publishFile(dbc,report,++publishedFileCount,n,onlineProject,currentResource,publishedContentIds,backupEnabled,publishDate,publishList.getPublishHistoryId(),backupTagId,maxVersions);
        if (currentResource.getState() != CmsResource.STATE_DELETED) {
          internalResetResourceState(dbc,currentResource);
        }
        dbc.pop();
      }
 catch (      Throwable t) {
        dbc.report(report,Messages.get().container(Messages.ERR_ERROR_PUBLISHING_FILE_1,currentResource.getRootPath()),t);
      }
      currentResource=null;
    }
    if (n > 0) {
      report.println(Messages.get().container(Messages.RPT_PUBLISH_FILES_END_0),I_CmsReport.FORMAT_HEADLINE);
    }
    List deletedFolders=publishList.getDeletedFolderList();
    if (deletedFolders.isEmpty()) {
      return;
    }
    deletedFolderCount=0;
    n=deletedFolders.size();
    i=deletedFolders.iterator();
    if (n > 0) {
      report.println(Messages.get().container(Messages.RPT_DELETE_FOLDERS_BEGIN_0),I_CmsReport.FORMAT_HEADLINE);
    }
    while (i.hasNext()) {
      CmsResource currentFolder=(CmsResource)i.next();
      try {
        m_driverManager.getProjectDriver().publishDeletedFolder(dbc,report,++deletedFolderCount,n,onlineProject,new CmsFolder(currentFolder),backupEnabled,publishDate,publishList.getPublishHistoryId(),backupTagId,maxVersions);
        dbc.pop();
      }
 catch (      Throwable t) {
        dbc.report(report,Messages.get().container(Messages.ERR_ERROR_PUBLISHING_DELETED_FOLDER_1,currentFolder.getRootPath()),t);
      }
    }
    if (n > 0) {
      report.println(Messages.get().container(Messages.RPT_DELETE_FOLDERS_END_0),I_CmsReport.FORMAT_HEADLINE);
    }
  }
 catch (  OutOfMemoryError o) {
    OpenCms.fireCmsEvent(new CmsEvent(I_CmsEventListener.EVENT_CLEAR_CACHES,Collections.EMPTY_MAP));
    CmsMessageContainer message=Messages.get().container(Messages.ERR_OUT_OF_MEMORY_0);
    if (LOG.isErrorEnabled()) {
      LOG.error(message.key(),o);
    }
    throw new CmsDataAccessException(message,o);
  }
 finally {
    currentResource=null;
    Object[] msgArgs=new Object[]{String.valueOf(publishedFileCount),String.valueOf(publishedFolderCount),String.valueOf(deletedFolderCount),report.formatRuntime()};
    CmsMessageContainer message=Messages.get().container(Messages.RPT_PUBLISH_STAT_4,msgArgs);
    if (LOG.isInfoEnabled()) {
      LOG.info(message.key());
    }
    report.println(message);
  }
}
