{
  StringBuffer conditions=new StringBuffer(128);
  params.clear();
  if (filter.getUserId() != null) {
    if (conditions.length() == 0) {
      conditions.append(BEGIN_CONDITION);
    }
 else {
      conditions.append(BEGIN_INCLUDE_CONDITION);
    }
    conditions.append(m_sqlManager.readQuery("C_LOG_FILTER_USER_ID"));
    params.add(filter.getUserId().toString());
    conditions.append(END_CONDITION);
  }
  if (filter.getStructureId() != null) {
    if (conditions.length() == 0) {
      conditions.append(BEGIN_CONDITION);
    }
 else {
      conditions.append(BEGIN_INCLUDE_CONDITION);
    }
    conditions.append(m_sqlManager.readQuery("C_LOG_FILTER_RESOURCE_ID"));
    params.add(filter.getStructureId().toString());
    conditions.append(END_CONDITION);
  }
  if (filter.getDateFrom() != CmsResource.DATE_RELEASED_DEFAULT) {
    if (conditions.length() == 0) {
      conditions.append(BEGIN_CONDITION);
    }
 else {
      conditions.append(BEGIN_INCLUDE_CONDITION);
    }
    conditions.append(m_sqlManager.readQuery("C_LOG_FILTER_DATE_FROM"));
    params.add(String.valueOf(filter.getDateFrom()));
    conditions.append(END_CONDITION);
  }
  if (filter.getDateTo() != CmsResource.DATE_RELEASED_DEFAULT) {
    if (conditions.length() == 0) {
      conditions.append(BEGIN_CONDITION);
    }
 else {
      conditions.append(BEGIN_INCLUDE_CONDITION);
    }
    conditions.append(m_sqlManager.readQuery("C_LOG_FILTER_DATE_TO"));
    params.add(String.valueOf(filter.getDateTo()));
    conditions.append(END_CONDITION);
  }
  Set<CmsLogEntryType> includeTypes=filter.getIncludeTypes();
  if (!includeTypes.isEmpty()) {
    if (conditions.length() == 0) {
      conditions.append(BEGIN_CONDITION);
    }
 else {
      conditions.append(BEGIN_INCLUDE_CONDITION);
    }
    conditions.append(m_sqlManager.readQuery("C_LOG_FILTER_INCLUDE_TYPE"));
    conditions.append(BEGIN_CONDITION);
    Iterator<CmsLogEntryType> it=includeTypes.iterator();
    while (it.hasNext()) {
      CmsLogEntryType type=it.next();
      conditions.append("?");
      params.add(String.valueOf(type.getId()));
      if (it.hasNext()) {
        conditions.append(", ");
      }
    }
    conditions.append(END_CONDITION);
    conditions.append(END_CONDITION);
  }
  Set<CmsLogEntryType> excludeTypes=filter.getExcludeTypes();
  if (!excludeTypes.isEmpty()) {
    if (conditions.length() == 0) {
      conditions.append(BEGIN_CONDITION);
    }
 else {
      conditions.append(BEGIN_INCLUDE_CONDITION);
    }
    conditions.append(m_sqlManager.readQuery("C_LOG_FILTER_EXCLUDE_TYPE"));
    conditions.append(BEGIN_CONDITION);
    Iterator<CmsLogEntryType> it=excludeTypes.iterator();
    while (it.hasNext()) {
      CmsLogEntryType type=it.next();
      conditions.append("?");
      params.add(String.valueOf(type.getId()));
      if (it.hasNext()) {
        conditions.append(", ");
      }
    }
    conditions.append(END_CONDITION);
    conditions.append(END_CONDITION);
  }
  return conditions.toString();
}
