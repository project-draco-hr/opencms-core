{
  Connection conn=null;
  PreparedStatement stmt=null;
  try {
    conn=m_sqlManager.getConnection(dbc);
    stmt=m_sqlManager.getPreparedStatement(conn,"C_RESOURCE_LOCKS_DELETEALL");
    int deleted=stmt.executeUpdate();
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_DBG_CLEAR_LOCKS_1,new Integer(deleted)));
    }
    stmt=m_sqlManager.getPreparedStatement(conn,"C_RESOURCE_LOCK_WRITE");
    if (LOG.isDebugEnabled()) {
      LOG.debug("SQL :" + m_sqlManager.readQuery("C_RESOURCE_LOCK_WRITE"));
    }
    Iterator<CmsLock> i=locks.iterator();
    int count=0;
    while (i.hasNext()) {
      CmsLock lock=i.next();
      CmsLock sysLock=lock.getSystemLock();
      if (sysLock.isPersistent()) {
        stmt.setString(1,sysLock.getResourceName());
        stmt.setString(2,sysLock.getUserId().toString());
        stmt.setString(3,sysLock.getProjectId().toString());
        stmt.setInt(4,sysLock.getType().hashCode());
        stmt.executeUpdate();
        count++;
      }
      CmsLock editLock=lock.getEditionLock();
      if (editLock.isPersistent()) {
        stmt.setString(1,editLock.getResourceName());
        stmt.setString(2,editLock.getUserId().toString());
        stmt.setString(3,editLock.getProjectId().toString());
        stmt.setInt(4,editLock.getType().hashCode());
        stmt.executeUpdate();
        count++;
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_DBG_WRITE_LOCKS_1,new Integer(count)));
    }
  }
 catch (  SQLException e) {
    throw new CmsDbSqlException(Messages.get().container(Messages.ERR_GENERIC_SQL_1,CmsDbSqlException.getErrorQuery(stmt)),e);
  }
 finally {
    m_sqlManager.closeAll(dbc,conn,stmt,null);
  }
}
