{
  CmsExportPointDriver discAccess=null;
  CmsFolder currentFolder=null;
  CmsFile currentFile=null;
  CmsResource currentFileHeader=null;
  CmsLock currentLock=null;
  CmsFolder newFolder=null;
  CmsFile newFile=null;
  CmsFile onlineFile=null;
  List offlineFolders=null;
  List offlineFiles=null;
  List deletedFolders=(List)new ArrayList();
  Vector changedResources=new Vector();
  String currentExportKey=null;
  String currentResourceName=null;
  long publishDate=System.currentTimeMillis();
  Iterator i=null;
  boolean publishCurrentResource=false;
  List projectResources=null;
  Map properties=null;
  CmsFolder onlineFolder=null;
  Map sortedFolderMap=null;
  List sortedFolderList=null;
  CmsResource delOnlineFolder=null;
  byte[] contents=null;
  int publishHistoryId=nextPublishVersionId();
  try {
    discAccess=new CmsExportPointDriver(exportpoints);
    if (backupEnabled) {
      m_driverManager.backupProject(context,context.currentProject(),backupTagId,publishDate,context.currentUser());
    }
    projectResources=m_driverManager.readProjectResources(context,context.currentProject());
    offlineFolders=m_driverManager.getVfsDriver().readFolders(context.currentProject().getId());
    sortedFolderMap=(Map)new HashMap();
    i=offlineFolders.iterator();
    while (i.hasNext()) {
      currentFolder=(CmsFolder)i.next();
      currentResourceName=m_driverManager.readPath(context,currentFolder,true);
      sortedFolderMap.put(currentResourceName,currentFolder);
    }
    sortedFolderList=(List)new ArrayList(sortedFolderMap.keySet());
    Collections.sort(sortedFolderList);
    offlineFolders.clear();
    offlineFolders=null;
    i=sortedFolderList.iterator();
    while (i.hasNext()) {
      currentResourceName=(String)i.next();
      currentFolder=(CmsFolder)sortedFolderMap.get(currentResourceName);
      currentLock=m_driverManager.getLock(context,currentResourceName);
      publishCurrentResource=currentFolder.getState() > I_CmsConstants.C_STATE_CHANGED;
      if (currentFolder.getState() == I_CmsConstants.C_STATE_CHANGED) {
        publishCurrentResource=currentFolder.getProjectId() == context.currentProject().getId();
      }
      publishCurrentResource=publishCurrentResource && CmsProject.isInsideProject(projectResources,currentFolder);
      publishCurrentResource=publishCurrentResource && currentLock.isNullLock();
      if (publishCurrentResource) {
        currentExportKey=checkExport(currentResourceName,exportpoints);
        report.print(report.key("report.publishing"),I_CmsReport.C_FORMAT_NOTE);
        report.println(context.removeSiteRoot(currentResourceName));
        if (currentFolder.getState() == I_CmsConstants.C_STATE_DELETED) {
          deletedFolders.add(currentFolder);
          changedResources.addElement(currentResourceName);
        }
 else         if (currentFolder.getState() == I_CmsConstants.C_STATE_NEW) {
          changedResources.addElement(currentResourceName);
          if (currentExportKey != null) {
            discAccess.createFolder(currentResourceName,currentExportKey);
          }
          try {
            newFolder=(CmsFolder)currentFolder.clone();
            newFolder.setState(I_CmsConstants.C_STATE_UNCHANGED);
            newFolder.setFullResourceName(currentResourceName);
            m_driverManager.getVfsDriver().createFolder(context.currentUser(),onlineProject,newFolder,newFolder.getParentId(),newFolder.getResourceName());
          }
 catch (          CmsException e) {
            if (e.getType() == CmsException.C_FILE_EXISTS) {
              try {
                onlineFolder=m_driverManager.getVfsDriver().readFolder(onlineProject.getId(),newFolder.getId());
                onlineFolder.setFullResourceName(currentResourceName);
              }
 catch (              CmsException exc) {
                throw exc;
              }
              m_driverManager.getVfsDriver().publishResource(onlineFolder,currentFolder);
            }
 else {
              throw e;
            }
          }
          m_driverManager.getUserDriver().publishAccessControlEntries(context.currentProject(),onlineProject,currentFolder.getResourceAceId(),newFolder.getResourceAceId());
          properties=(Map)new HashMap();
          try {
            properties=m_driverManager.getVfsDriver().readProperties(context.currentProject().getId(),currentFolder,currentFolder.getType());
            m_driverManager.getVfsDriver().writeProperties(properties,onlineProject.getId(),newFolder,newFolder.getType());
          }
 catch (          CmsException exc) {
            if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INFO)) {
              OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, copy properties for "+ newFolder.toString()+ " Message= "+ exc.getMessage());
            }
          }
          if (backupEnabled) {
            m_driverManager.getBackupDriver().writeBackupResource(context.currentUser(),context.currentProject(),currentFolder,properties,backupTagId,publishDate);
          }
          writePublishHistory(context.currentProject(),publishHistoryId,backupTagId,currentResourceName,currentFolder);
          if (currentFolder.getState() != I_CmsConstants.C_STATE_UNCHANGED) {
            currentFolder.setState(I_CmsConstants.C_STATE_UNCHANGED);
            m_driverManager.getVfsDriver().updateResourceState(context.currentProject(),currentFolder,CmsDriverManager.C_UPDATE_ALL);
          }
        }
 else         if (currentFolder.getState() == I_CmsConstants.C_STATE_CHANGED) {
          changedResources.addElement(currentResourceName);
          onlineFolder=null;
          try {
            onlineFolder=m_driverManager.getVfsDriver().readFolder(onlineProject.getId(),currentFolder.getId());
            onlineFolder.setFullResourceName(currentResourceName);
          }
 catch (          CmsException exc) {
            if (exc.getType() == CmsException.C_NOT_FOUND) {
              onlineFolder=m_driverManager.getVfsDriver().createFolder(context.currentUser(),onlineProject,currentFolder,currentFolder.getParentId(),currentFolder.getResourceName());
              onlineFolder.setState(I_CmsConstants.C_STATE_UNCHANGED);
              onlineFolder.setFullResourceName(currentResourceName);
              m_driverManager.getVfsDriver().updateResourceState(context.currentProject(),onlineFolder,CmsDriverManager.C_UPDATE_ALL);
            }
 else {
              throw exc;
            }
          }
          if (currentExportKey != null) {
            discAccess.createFolder(currentResourceName,currentExportKey);
          }
          m_driverManager.getVfsDriver().publishResource(onlineFolder,currentFolder);
          m_driverManager.getUserDriver().publishAccessControlEntries(context.currentProject(),onlineProject,currentFolder.getResourceAceId(),onlineFolder.getResourceAceId());
          properties=(Map)new HashMap();
          try {
            m_driverManager.getVfsDriver().deleteAllProperties(onlineProject.getId(),onlineFolder);
            properties=m_driverManager.getVfsDriver().readProperties(context.currentProject().getId(),currentFolder,currentFolder.getType());
            m_driverManager.getVfsDriver().writeProperties(properties,onlineProject.getId(),onlineFolder,currentFolder.getType());
          }
 catch (          CmsException exc) {
            if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INFO)) {
              OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, deleting properties for "+ onlineFolder.toString()+ " Message= "+ exc.getMessage());
            }
          }
          if (backupEnabled) {
            m_driverManager.getBackupDriver().writeBackupResource(context.currentUser(),context.currentProject(),currentFolder,properties,backupTagId,publishDate);
          }
          writePublishHistory(context.currentProject(),publishHistoryId,backupTagId,currentResourceName,currentFolder);
          if (currentFolder.getState() != I_CmsConstants.C_STATE_UNCHANGED) {
            currentFolder.setState(I_CmsConstants.C_STATE_UNCHANGED);
            m_driverManager.getVfsDriver().updateResourceState(context.currentProject(),currentFolder,CmsDriverManager.C_UPDATE_ALL);
          }
        }
        m_driverManager.getVfsDriver().resetProjectId(context.currentProject(),currentFolder);
        OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_RESOURCE_MODIFIED,Collections.singletonMap("resource",(CmsResource)currentFolder)));
        properties=null;
        currentFolder=null;
        newFolder=null;
        onlineFolder=null;
      }
    }
    if (sortedFolderList != null) {
      sortedFolderList.clear();
      sortedFolderList=null;
    }
    if (sortedFolderMap != null) {
      sortedFolderMap.clear();
      sortedFolderMap=null;
    }
    offlineFiles=m_driverManager.getVfsDriver().readFiles(context.currentProject().getId());
    i=offlineFiles.iterator();
    while (i.hasNext()) {
      currentFileHeader=(CmsResource)i.next();
      currentResourceName=m_driverManager.readPath(context,currentFileHeader,true);
      currentLock=m_driverManager.getLock(context,currentResourceName);
switch (currentFileHeader.getState()) {
case I_CmsConstants.C_STATE_DELETED:
        publishCurrentResource=currentFileHeader.getProjectId() == context.currentProject().getId();
      break;
case I_CmsConstants.C_STATE_NEW:
    publishCurrentResource=currentFileHeader.getProjectId() == context.currentProject().getId() || currentFileHeader.getProjectId() == 0;
  break;
case I_CmsConstants.C_STATE_CHANGED:
publishCurrentResource=currentFileHeader.getProjectId() == context.currentProject().getId();
break;
case I_CmsConstants.C_STATE_UNCHANGED:
default :
publishCurrentResource=false;
break;
}
publishCurrentResource=publishCurrentResource && CmsProject.isInsideProject(projectResources,currentFileHeader);
publishCurrentResource=publishCurrentResource && currentLock.isNullLock();
if (publishCurrentResource) {
currentFile=m_driverManager.getVfsDriver().readFile(context.currentProject().getId(),true,currentFileHeader.getId());
currentFile.setFullResourceName(currentResourceName);
currentExportKey=checkExport(currentResourceName,exportpoints);
report.print(report.key("report.publishing"),I_CmsReport.C_FORMAT_NOTE);
report.println(context.removeSiteRoot(currentResourceName));
if (currentLock.isNullLock()) {
m_driverManager.getVfsDriver().removeTemporaryFile(currentFile);
}
if (currentFile.getResourceName().startsWith(I_CmsConstants.C_TEMP_PREFIX)) {
m_driverManager.getVfsDriver().deleteAllProperties(context.currentProject().getId(),currentFile);
m_driverManager.getVfsDriver().removeFile(context.currentProject(),currentFile);
}
if (currentFile.getState() == I_CmsConstants.C_STATE_DELETED) {
changedResources.addElement(currentResourceName);
if (currentExportKey != null) {
try {
discAccess.removeResource(currentResourceName,currentExportKey);
}
 catch (Exception ex) {
}
}
onlineFile=m_driverManager.readFileInProject(context,onlineProject.getId(),currentFile.getId(),false);
onlineFile.setFullResourceName(currentResourceName);
if (backupEnabled) {
properties=m_driverManager.getVfsDriver().readProperties(context.currentProject().getId(),currentFile,currentFile.getType());
m_driverManager.getBackupDriver().writeBackupResource(context.currentUser(),context.currentProject(),currentFile,properties,backupTagId,publishDate);
}
writePublishHistory(context.currentProject(),publishHistoryId,backupTagId,currentResourceName,currentFile);
try {
m_driverManager.getVfsDriver().deleteAllProperties(onlineProject.getId(),onlineFile);
m_driverManager.getVfsDriver().deleteAllProperties(context.currentProject().getId(),currentFile);
}
 catch (CmsException exc) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INFO)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, deleting properties for "+ onlineFile.toString()+ " Message= "+ exc.getMessage());
}
}
try {
m_driverManager.getVfsDriver().removeFile(onlineProject,onlineFile);
m_driverManager.getVfsDriver().removeFile(context.currentProject(),currentFile);
}
 catch (CmsException exc) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INFO)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, deleting resource for "+ onlineFile.toString()+ " Message= "+ exc.getMessage());
}
}
try {
m_driverManager.getUserDriver().removeAllAccessControlEntries(onlineProject,onlineFile.getResourceAceId());
m_driverManager.getUserDriver().removeAllAccessControlEntries(context.currentProject(),currentFile.getResourceAceId());
}
 catch (CmsException exc) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INFO)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, deleting resource for "+ onlineFile.toString()+ " Message= "+ exc.getMessage());
}
}
}
 else if (currentFile.getState() == I_CmsConstants.C_STATE_CHANGED) {
changedResources.addElement(currentResourceName);
if (currentExportKey != null) {
contents=currentFile.getContents();
String encoding=m_driverManager.getVfsDriver().readProperty(I_CmsConstants.C_PROPERTY_CONTENT_ENCODING,context.currentProject().getId(),currentFile,currentFile.getType());
if (encoding != null) {
try {
contents=(new String(contents,encoding)).getBytes();
}
 catch (UnsupportedEncodingException uex) {
}
}
discAccess.writeFile(currentResourceName,currentExportKey,contents);
}
try {
onlineFile=m_driverManager.getVfsDriver().readFile(onlineProject.getId(),false,currentFile.getId());
onlineFile.setFullResourceName(currentResourceName);
}
 catch (CmsException exc) {
if (exc.getType() == CmsException.C_NOT_FOUND) {
currentFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
onlineFile=m_driverManager.getVfsDriver().createFile(onlineProject,currentFile,context.currentUser().getId(),currentFile.getParentId(),currentFile.getResourceName());
}
}
m_driverManager.getVfsDriver().publishResource(onlineFile,currentFile);
properties=(Map)new HashMap();
try {
m_driverManager.getVfsDriver().deleteAllProperties(onlineProject.getId(),onlineFile);
properties=m_driverManager.getVfsDriver().readProperties(context.currentProject().getId(),currentFile,currentFile.getType());
m_driverManager.getVfsDriver().writeProperties(properties,onlineProject.getId(),onlineFile,currentFile.getType());
}
 catch (CmsException exc) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INFO)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, deleting properties for "+ onlineFile.toString()+ " Message= "+ exc.getMessage());
}
}
m_driverManager.getUserDriver().publishAccessControlEntries(context.currentProject(),onlineProject,currentFile.getResourceAceId(),onlineFile.getResourceAceId());
if (backupEnabled) {
m_driverManager.getBackupDriver().writeBackupResource(context.currentUser(),context.currentProject(),currentFile,properties,backupTagId,publishDate);
}
writePublishHistory(context.currentProject(),publishHistoryId,backupTagId,currentResourceName,currentFile);
if (currentFile.getState() != I_CmsConstants.C_STATE_UNCHANGED) {
currentFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
m_driverManager.getVfsDriver().updateResourceState(context.currentProject(),currentFile,CmsDriverManager.C_UPDATE_ALL);
}
}
 else if (currentFile.getState() == I_CmsConstants.C_STATE_NEW) {
changedResources.addElement(currentResourceName);
if (currentExportKey != null) {
contents=currentFile.getContents();
String encoding=m_driverManager.getVfsDriver().readProperty(I_CmsConstants.C_PROPERTY_CONTENT_ENCODING,context.currentProject().getId(),currentFile,currentFile.getType());
if (encoding != null) {
try {
contents=(new String(contents,encoding)).getBytes();
}
 catch (UnsupportedEncodingException uex) {
}
}
discAccess.writeFile(currentResourceName,currentExportKey,contents);
}
try {
newFile=(CmsFile)currentFile.clone();
newFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
newFile.setFullResourceName(currentResourceName);
m_driverManager.getVfsDriver().createFile(onlineProject,newFile,context.currentUser().getId(),newFile.getParentId(),newFile.getResourceName());
}
 catch (CmsException e) {
if (e.getType() == CmsException.C_FILE_EXISTS) {
try {
onlineFile=m_driverManager.getVfsDriver().readFile(onlineProject.getId(),false,currentFile.getId());
onlineFile.setFullResourceName(currentResourceName);
}
 catch (CmsException exc) {
throw exc;
}
m_driverManager.getVfsDriver().publishResource(onlineFile,currentFile);
}
 else {
throw e;
}
}
properties=(Map)new HashMap();
try {
properties=m_driverManager.getVfsDriver().readProperties(context.currentProject().getId(),currentFile,currentFile.getType());
m_driverManager.getVfsDriver().writeProperties(properties,onlineProject.getId(),newFile,newFile.getType());
}
 catch (CmsException exc) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INFO)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, copy properties for "+ newFile.toString()+ " Message= "+ exc.getMessage());
}
}
m_driverManager.getUserDriver().publishAccessControlEntries(context.currentProject(),onlineProject,currentFile.getResourceAceId(),newFile.getResourceAceId());
if (backupEnabled) {
m_driverManager.getBackupDriver().writeBackupResource(context.currentUser(),context.currentProject(),currentFile,properties,backupTagId,publishDate);
}
writePublishHistory(context.currentProject(),publishHistoryId,backupTagId,currentResourceName,currentFile);
if (currentFile.getState() != I_CmsConstants.C_STATE_UNCHANGED) {
currentFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
m_driverManager.getVfsDriver().updateResourceState(context.currentProject(),currentFile,CmsDriverManager.C_UPDATE_ALL);
}
}
m_driverManager.getVfsDriver().resetProjectId(context.currentProject(),currentFile);
OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_RESOURCE_MODIFIED,Collections.singletonMap("resource",(CmsResource)currentFile)));
properties=null;
currentFile=null;
currentFileHeader=null;
newFile=null;
onlineFile=null;
contents=null;
}
}
if (offlineFiles != null) {
offlineFiles.clear();
offlineFiles=null;
}
if (deletedFolders.isEmpty()) {
return changedResources;
}
sortedFolderMap=(Map)new HashMap();
i=deletedFolders.iterator();
while (i.hasNext()) {
currentFolder=(CmsFolder)i.next();
currentResourceName=currentFolder.getFullResourceName();
sortedFolderMap.put(currentResourceName,currentFolder);
}
sortedFolderList=(List)new ArrayList(sortedFolderMap.keySet());
Collections.sort(sortedFolderList);
Collections.reverse(sortedFolderList);
if (deletedFolders != null) {
deletedFolders.clear();
deletedFolders=null;
}
i=sortedFolderList.iterator();
while (i.hasNext()) {
currentResourceName=(String)i.next();
currentFolder=(CmsFolder)sortedFolderMap.get(currentResourceName);
currentExportKey=checkExport(currentResourceName,exportpoints);
report.print(report.key("report.deleting"),I_CmsReport.C_FORMAT_NOTE);
report.println(context.removeSiteRoot(currentResourceName));
if (currentExportKey != null) {
discAccess.removeResource(currentResourceName,currentExportKey);
}
if (backupEnabled) {
properties=m_driverManager.getVfsDriver().readProperties(context.currentProject().getId(),currentFolder,currentFolder.getType());
m_driverManager.getBackupDriver().writeBackupResource(context.currentUser(),context.currentProject(),currentFolder,properties,backupTagId,publishDate);
}
delOnlineFolder=m_driverManager.readFolder(context,currentFolder.getId(),true);
delOnlineFolder.setFullResourceName(currentResourceName);
try {
m_driverManager.getVfsDriver().deleteAllProperties(onlineProject.getId(),delOnlineFolder);
m_driverManager.getVfsDriver().deleteAllProperties(context.currentProject().getId(),currentFolder);
}
 catch (CmsException exc) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INFO)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, deleting properties for "+ currentFolder.toString()+ " Message= "+ exc.getMessage());
}
}
m_driverManager.getVfsDriver().removeFolder(onlineProject,currentFolder);
m_driverManager.getVfsDriver().removeFolder(context.currentProject(),currentFolder);
m_driverManager.getUserDriver().removeAllAccessControlEntries(onlineProject,delOnlineFolder.getResourceAceId());
m_driverManager.getUserDriver().removeAllAccessControlEntries(context.currentProject(),currentFolder.getResourceAceId());
OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_RESOURCE_MODIFIED,Collections.singletonMap("resource",(CmsResource)currentFolder)));
currentFolder=null;
delOnlineFolder=null;
}
if (sortedFolderList != null) {
sortedFolderList.clear();
sortedFolderList=null;
}
if (sortedFolderMap != null) {
sortedFolderMap.clear();
sortedFolderMap=null;
}
}
 catch (CmsException e) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishProject] "+ e.getMessage());
}
throw e;
}
catch (OutOfMemoryError o) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishProject] "+ o.getMessage());
}
System.runFinalization();
System.gc();
Runtime.getRuntime().gc();
throw o;
}
 finally {
if (sortedFolderList != null) {
sortedFolderList.clear();
sortedFolderList=null;
}
if (sortedFolderMap != null) {
sortedFolderMap.clear();
sortedFolderMap=null;
}
if (deletedFolders != null) {
deletedFolders.clear();
deletedFolders=null;
}
if (offlineFiles != null) {
offlineFiles.clear();
offlineFiles=null;
}
properties=null;
currentFile=null;
currentFileHeader=null;
newFile=null;
onlineFile=null;
currentFolder=null;
newFolder=null;
onlineFolder=null;
discAccess=null;
delOnlineFolder=null;
currentExportKey=null;
contents=null;
}
return changedResources;
}
