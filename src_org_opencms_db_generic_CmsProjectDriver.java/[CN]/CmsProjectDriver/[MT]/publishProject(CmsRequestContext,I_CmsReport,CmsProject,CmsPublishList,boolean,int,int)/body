{
  CmsFolder currentFolder=null;
  CmsResource currentFileHeader=null;
  long publishDate=System.currentTimeMillis();
  Iterator i=null;
  int n;
  int publishedFolderCount=0;
  int deletedFolderCount=0;
  int publishedFileCount=0;
  Set publishedContentIds=(Set)new HashSet();
  try {
    if (backupEnabled) {
      m_driverManager.backupProject(context,context.currentProject(),backupTagId,publishDate);
    }
    publishedFolderCount=0;
    n=publishList.getFolderList().size();
    i=publishList.getFolderList().iterator();
    if (n > 0) {
      report.println(report.key("report.publish_folders_begin"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    while (i.hasNext()) {
      currentFolder=(CmsFolder)i.next();
      if (currentFolder.getState() == I_CmsConstants.C_STATE_NEW) {
        m_driverManager.getProjectDriver().publishFolder(context,report,++publishedFolderCount,n,onlineProject,currentFolder,backupEnabled,publishDate,publishList.getPublishHistoryId(),backupTagId,maxVersions);
        internalResetResourceState(context,currentFolder);
      }
 else       if (currentFolder.getState() == I_CmsConstants.C_STATE_CHANGED) {
        m_driverManager.getProjectDriver().publishFolder(context,report,++publishedFolderCount,n,onlineProject,currentFolder,backupEnabled,publishDate,publishList.getPublishHistoryId(),backupTagId,maxVersions);
        internalResetResourceState(context,currentFolder);
      }
    }
    if (n > 0) {
      report.println(report.key("report.publish_folders_end"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    publishedFileCount=0;
    n=publishList.getFileList().size();
    i=publishList.getFileList().iterator();
    if (n > 0) {
      report.println(report.key("report.publish_files_begin"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    while (i.hasNext()) {
      currentFileHeader=(CmsResource)i.next();
      m_driverManager.getProjectDriver().publishFile(context,report,++publishedFileCount,n,onlineProject,currentFileHeader,publishedContentIds,backupEnabled,publishDate,publishList.getPublishHistoryId(),backupTagId,maxVersions);
      if (currentFileHeader.getState() != I_CmsConstants.C_STATE_DELETED) {
        internalResetResourceState(context,currentFileHeader);
      }
      currentFileHeader=null;
    }
    if (n > 0) {
      report.println(report.key("report.publish_files_end"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    if (publishList.getDeletedFolderList().isEmpty()) {
      return;
    }
    deletedFolderCount=0;
    n=publishList.getDeletedFolderList().size();
    i=publishList.getDeletedFolderList().iterator();
    if (n > 0) {
      report.println(report.key("report.publish_delete_folders_begin"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    while (i.hasNext()) {
      currentFolder=(CmsFolder)i.next();
      m_driverManager.getProjectDriver().publishDeletedFolder(context,report,++deletedFolderCount,n,onlineProject,currentFolder,backupEnabled,publishDate,publishList.getPublishHistoryId(),backupTagId,maxVersions);
    }
    if (n > 0) {
      report.println(report.key("report.publish_delete_folders_end"),I_CmsReport.C_FORMAT_HEADLINE);
    }
  }
 catch (  Exception e) {
    if (C_DEBUG) {
      System.err.println(e.getMessage());
      e.printStackTrace(System.err);
    }
    throw e;
  }
catch (  OutOfMemoryError o) {
    if (OpenCms.getLog(this).isFatalEnabled()) {
      OpenCms.getLog(this).fatal("Out of memory error during publishing",o);
    }
    OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_CLEAR_CACHES,Collections.EMPTY_MAP,false));
    System.runFinalization();
    Runtime.getRuntime().runFinalization();
    System.gc();
    Runtime.getRuntime().gc();
    throw o;
  }
 finally {
    currentFileHeader=null;
    currentFolder=null;
    StringBuffer stats=new StringBuffer();
    stats.append(report.key("report.publish_stats"));
    stats.append(report.key("report.publish_stats_files"));
    stats.append(publishedFileCount + ",");
    stats.append(report.key("report.publish_stats_folders"));
    stats.append(publishedFolderCount + ",");
    stats.append(report.key("report.publish_stats_deleted_folders"));
    stats.append(deletedFolderCount + ",");
    stats.append(report.key("report.publish_stats_duration"));
    stats.append(report.formatRuntime());
    if (OpenCms.getLog(this).isInfoEnabled()) {
      OpenCms.getLog(this).info(stats.toString());
    }
    report.println(stats.toString());
  }
}
