{
  CmsFolder onlineFolder=null;
  Map offlineProperties=null;
  try {
    report.print("( " + m + " / "+ n+ " ) "+ report.key("report.deleting.folder"),I_CmsReport.C_FORMAT_NOTE);
    report.println(context.removeSiteRoot(currentFolder.getFullResourceName()));
    try {
      if (backupEnabled) {
        offlineProperties=m_driverManager.getVfsDriver().readProperties(context.currentProject().getId(),currentFolder,currentFolder.getType());
        m_driverManager.getBackupDriver().writeBackupResource(context.currentUser(),context.currentProject(),currentFolder,offlineProperties,backupTagId,publishDate,maxVersions);
      }
      writePublishHistory(context.currentProject(),publishHistoryId,backupTagId,currentFolder.getFullResourceName(),currentFolder);
    }
 catch (    CmsException e) {
      if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
        OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishDeletedFolder] error writing backup/publishing history, type: "+ e.getTypeText()+ ",  "+ currentFolder.toString());
      }
      throw e;
    }
    try {
      onlineFolder=m_driverManager.readFolder(context,currentFolder.getId(),true);
      onlineFolder.setFullResourceName(currentFolder.getFullResourceName());
    }
 catch (    CmsException e) {
      if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
        OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishDeletedFolder] error reading resource, type: "+ e.getTypeText()+ ",  "+ currentFolder.toString());
      }
      throw e;
    }
    try {
      m_driverManager.getVfsDriver().deleteAllProperties(onlineProject.getId(),onlineFolder);
      m_driverManager.getVfsDriver().deleteAllProperties(context.currentProject().getId(),currentFolder);
    }
 catch (    CmsException e) {
      if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
        OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishDeletedFolder] error deleting properties, type: "+ e.getTypeText()+ ",  "+ currentFolder.toString());
      }
      throw e;
    }
    try {
      m_driverManager.getVfsDriver().removeFolder(onlineProject,currentFolder);
      m_driverManager.getVfsDriver().removeFolder(context.currentProject(),currentFolder);
    }
 catch (    CmsException e) {
      if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
        OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishDeletedFolder] error removing resource, type: "+ e.getTypeText()+ ",  "+ currentFolder.toString());
      }
      throw e;
    }
    try {
      m_driverManager.getUserDriver().removeAllAccessControlEntries(onlineProject,onlineFolder.getResourceAceId());
      m_driverManager.getUserDriver().removeAllAccessControlEntries(context.currentProject(),currentFolder.getResourceAceId());
    }
 catch (    CmsException e) {
      if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
        OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishDeletedFolder] error removing ACLs, type: "+ e.getTypeText()+ ",  "+ currentFolder.toString());
      }
      throw e;
    }
  }
 catch (  Exception e) {
    if (C_DEBUG) {
      System.err.println(e.getMessage());
      e.printStackTrace(System.err);
    }
    throw e;
  }
 finally {
    OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_PROPERTIES_MODIFIED,Collections.singletonMap("resource",currentFolder)));
  }
}
