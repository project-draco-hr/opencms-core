{
  CmsExportPointDriver discAccess=new CmsExportPointDriver(exportpoints);
  CmsFolder currentFolder=null;
  CmsFile currentFile=null;
  CmsFolder newFolder=null;
  CmsFile newFile=null;
  Vector offlineFolders=null;
  Vector offlineFiles=null;
  Vector deletedFolders=new Vector();
  Vector changedResources=new Vector();
  Map folderIdIndex=(Map)new HashMap();
  CmsProject currentProject=m_driverManager.readProject(projectId);
  int versionId=1;
  long publishDate=System.currentTimeMillis();
  if (enableHistory) {
    versionId=m_driverManager.getBackupDriver().nextBackupVersionId();
    m_driverManager.getBackupDriver().writeBackupProject(currentProject,versionId,publishDate,user);
  }
  offlineFolders=m_driverManager.getVfsDriver().readFolders(projectId,false,true);
  for (int i=0; i < offlineFolders.size(); i++) {
    currentFolder=((CmsFolder)offlineFolders.elementAt(i));
    report.print(report.key("report.publishing"),I_CmsReport.C_FORMAT_NOTE);
    report.println(currentFolder.getAbsolutePath());
    if (currentFolder.isLocked()) {
    }
 else     if (currentFolder.getState() == I_CmsConstants.C_STATE_DELETED) {
      deletedFolders.addElement(currentFolder);
      changedResources.addElement(currentFolder.getResourceName());
    }
 else     if (currentFolder.getState() == I_CmsConstants.C_STATE_NEW) {
      changedResources.addElement(currentFolder.getResourceName());
      String exportKey=checkExport(currentFolder.getAbsolutePath(),exportpoints);
      if (exportKey != null) {
        discAccess.createFolder(currentFolder.getAbsolutePath(),exportKey);
      }
      CmsUUID parentId=(CmsUUID)folderIdIndex.get(currentFolder.getParentId());
      if (parentId == null) {
        CmsFolder currentOnlineParent=m_driverManager.getVfsDriver().readFolder(onlineProject.getId(),currentFolder.getRootName() + currentFolder.getParent());
        parentId=currentOnlineParent.getId();
        folderIdIndex.put(currentFolder.getParentId(),parentId);
      }
      try {
        newFolder=m_driverManager.getVfsDriver().createFolder(user,onlineProject,currentFolder,parentId,currentFolder.getResourceName());
        newFolder.setState(I_CmsConstants.C_STATE_UNCHANGED);
        m_driverManager.getVfsDriver().updateResourcestate(newFolder);
      }
 catch (      CmsException e) {
        if (e.getType() == CmsException.C_FILE_EXISTS) {
          CmsFolder onlineFolder=null;
          try {
            onlineFolder=m_driverManager.getVfsDriver().readFolder(onlineProject.getId(),currentFolder.getResourceName());
          }
 catch (          CmsException exc) {
            throw exc;
          }
          m_driverManager.getVfsDriver().updateOnlineResourceFromOfflineResource((CmsResource)onlineFolder,(CmsResource)currentFolder);
          newFolder=m_driverManager.getVfsDriver().readFolder(I_CmsConstants.C_PROJECT_ONLINE_ID,currentFolder.getResourceName());
        }
 else {
          throw e;
        }
      }
      folderIdIndex.put(currentFolder.getId(),newFolder.getId());
      m_driverManager.getUserDriver().publishAccessControlEntries(currentProject,onlineProject,currentFolder.getResourceAceId(),newFolder.getResourceAceId());
      Map props=new HashMap();
      try {
        props=m_driverManager.getVfsDriver().readProperties(projectId,currentFolder,currentFolder.getType());
        m_driverManager.getVfsDriver().writeProperties(props,onlineProject.getId(),newFolder,newFolder.getType());
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, copy properties for "+ newFolder.toString()+ " Message= "+ exc.getMessage());
        }
      }
      if (enableHistory) {
        m_driverManager.getBackupDriver().writeBackupResource(projectId,currentFolder,new byte[0],props,versionId,publishDate);
      }
      currentFolder.setState(I_CmsConstants.C_STATE_UNCHANGED);
      m_driverManager.getVfsDriver().updateResourcestate(currentFolder);
    }
 else     if (currentFolder.getState() == I_CmsConstants.C_STATE_CHANGED) {
      changedResources.addElement(currentFolder.getResourceName());
      String exportKey=checkExport(currentFolder.getAbsolutePath(),exportpoints);
      if (exportKey != null) {
        discAccess.createFolder(currentFolder.getAbsolutePath(),exportKey);
      }
      CmsFolder onlineFolder=null;
      try {
        onlineFolder=m_driverManager.getVfsDriver().readFolder(onlineProject.getId(),currentFolder.getResourceName());
      }
 catch (      CmsException exc) {
        if (exc.getType() == CmsException.C_NOT_FOUND) {
          CmsUUID parentId=(CmsUUID)folderIdIndex.get(currentFolder.getParentId());
          if (parentId == null) {
            CmsFolder currentOnlineParent=m_driverManager.getVfsDriver().readFolder(onlineProject.getId(),currentFolder.getRootName() + currentFolder.getParent());
            parentId=currentOnlineParent.getId();
            folderIdIndex.put(currentFolder.getParentId(),parentId);
          }
          onlineFolder=m_driverManager.getVfsDriver().createFolder(user,onlineProject,currentFolder,parentId,currentFolder.getResourceName());
          onlineFolder.setState(I_CmsConstants.C_STATE_UNCHANGED);
          m_driverManager.getVfsDriver().updateResourcestate(onlineFolder);
        }
 else {
          throw exc;
        }
      }
      m_driverManager.getVfsDriver().updateOnlineResourceFromOfflineResource((CmsResource)onlineFolder,(CmsResource)currentFolder);
      folderIdIndex.put(currentFolder.getId(),onlineFolder.getId());
      m_driverManager.getUserDriver().publishAccessControlEntries(currentProject,onlineProject,currentFolder.getResourceAceId(),newFolder.getResourceAceId());
      Map props=new HashMap();
      try {
        m_driverManager.getVfsDriver().deleteAllProperties(onlineProject.getId(),onlineFolder);
        props=m_driverManager.getVfsDriver().readProperties(projectId,currentFolder,currentFolder.getType());
        m_driverManager.getVfsDriver().writeProperties(props,onlineProject.getId(),onlineFolder,currentFolder.getType());
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, deleting properties for "+ onlineFolder.toString()+ " Message= "+ exc.getMessage());
        }
      }
      if (enableHistory) {
        m_driverManager.getBackupDriver().writeBackupResource(projectId,currentFolder,new byte[0],props,versionId,publishDate);
      }
      currentFolder.setState(I_CmsConstants.C_STATE_UNCHANGED);
      m_driverManager.getVfsDriver().updateResourcestate(currentFolder);
    }
  }
  offlineFiles=m_driverManager.getVfsDriver().readFiles(projectId,false,true);
  for (int i=0; i < offlineFiles.size(); i++) {
    currentFile=((CmsFile)offlineFiles.elementAt(i));
    report.print(report.key("report.publishing"),I_CmsReport.C_FORMAT_NOTE);
    report.println(currentFile.getAbsolutePath());
    if (!currentFile.isLocked()) {
      m_driverManager.getVfsDriver().removeTemporaryFile(currentFile);
    }
    if (currentFile.isLocked()) {
    }
 else     if (currentFile.getName().startsWith(I_CmsConstants.C_TEMP_PREFIX)) {
      m_driverManager.getVfsDriver().deleteAllProperties(projectId,currentFile);
      m_driverManager.getVfsDriver().removeFile(projectId,currentFile.getResourceName());
    }
 else     if (currentFile.getState() == I_CmsConstants.C_STATE_DELETED) {
      changedResources.addElement(currentFile.getResourceName());
      String exportKey=checkExport(currentFile.getAbsolutePath(),exportpoints);
      if (exportKey != null) {
        try {
          discAccess.removeResource(currentFile.getAbsolutePath(),exportKey);
        }
 catch (        Exception ex) {
        }
      }
      CmsFile currentOnlineFile=m_driverManager.getVfsDriver().readFile(onlineProject.getId(),currentFile.getResourceName());
      if (enableHistory) {
        Map props=m_driverManager.getVfsDriver().readProperties(projectId,currentFile,currentFile.getType());
        m_driverManager.getBackupDriver().writeBackupResource(projectId,currentFile,currentFile.getContents(),props,versionId,publishDate);
      }
      try {
        m_driverManager.getVfsDriver().deleteAllProperties(onlineProject.getId(),currentOnlineFile);
        m_driverManager.getVfsDriver().deleteAllProperties(projectId,currentFile);
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, deleting properties for "+ currentOnlineFile.toString()+ " Message= "+ exc.getMessage());
        }
      }
      try {
        m_driverManager.getVfsDriver().deleteResource(currentOnlineFile);
        m_driverManager.getVfsDriver().deleteResource(currentFile);
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, deleting resource for "+ currentOnlineFile.toString()+ " Message= "+ exc.getMessage());
        }
      }
      try {
        m_driverManager.getUserDriver().removeAllAccessControlEntries(onlineProject,currentOnlineFile.getResourceAceId());
        m_driverManager.getUserDriver().removeAllAccessControlEntries(currentProject,currentFile.getResourceAceId());
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[CmsProjectDriver] error publishing, deleting resource for " + currentOnlineFile.toString() + " Message= "+ exc.getMessage());
        }
      }
      try {
        m_driverManager.getUserDriver().removeAllAccessControlEntries(onlineProject,currentOnlineFile.getResourceAceId());
        m_driverManager.getUserDriver().removeAllAccessControlEntries(currentProject,currentFile.getResourceAceId());
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[CmsProjectDriver] error publishing, deleting resource for " + currentOnlineFile.toString() + " Message= "+ exc.getMessage());
        }
      }
    }
 else     if (currentFile.getState() == I_CmsConstants.C_STATE_CHANGED) {
      changedResources.addElement(currentFile.getResourceName());
      String exportKey=checkExport(currentFile.getAbsolutePath(),exportpoints);
      if (exportKey != null) {
        byte[] contents=currentFile.getContents();
        String encoding=m_driverManager.getVfsDriver().readProperty(I_CmsConstants.C_PROPERTY_CONTENT_ENCODING,projectId,currentFile,currentFile.getType());
        if (encoding != null) {
          try {
            contents=(new String(contents,encoding)).getBytes();
          }
 catch (          UnsupportedEncodingException uex) {
          }
        }
        discAccess.writeFile(currentFile.getAbsolutePath(),exportKey,contents);
      }
      CmsFile onlineFile=null;
      try {
        onlineFile=m_driverManager.getVfsDriver().readFileHeader(onlineProject.getId(),currentFile.getResourceName(),false);
      }
 catch (      CmsException exc) {
        if (exc.getType() == CmsException.C_NOT_FOUND) {
          CmsUUID parentId=(CmsUUID)folderIdIndex.get(currentFile.getParentId());
          if (parentId == null) {
            CmsFolder currentOnlineParent=m_driverManager.getVfsDriver().readFolder(onlineProject.getId(),currentFile.getRootName() + currentFile.getParent());
            parentId=currentOnlineParent.getId();
            folderIdIndex.put(currentFile.getParentId(),parentId);
          }
          currentFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
          onlineFile=m_driverManager.getVfsDriver().createFile(onlineProject,currentFile,user.getId(),parentId,currentFile.getResourceName());
        }
      }
      m_driverManager.getVfsDriver().updateOnlineResourceFromOfflineResource((CmsResource)onlineFile,(CmsResource)currentFile);
      m_driverManager.getVfsDriver().writeFileContent(onlineFile.getFileId(),currentFile.getContents(),I_CmsConstants.C_PROJECT_ONLINE_ID,false);
      Map props=new HashMap();
      try {
        m_driverManager.getVfsDriver().deleteAllProperties(onlineProject.getId(),onlineFile);
        props=m_driverManager.getVfsDriver().readProperties(projectId,currentFile,currentFile.getType());
        m_driverManager.getVfsDriver().writeProperties(props,onlineProject.getId(),onlineFile,currentFile.getType());
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, deleting properties for "+ onlineFile.toString()+ " Message= "+ exc.getMessage());
        }
      }
      m_driverManager.getUserDriver().publishAccessControlEntries(currentProject,onlineProject,currentFile.getResourceAceId(),onlineFile.getResourceAceId());
      if (enableHistory) {
        m_driverManager.getBackupDriver().writeBackupResource(projectId,currentFile,currentFile.getContents(),props,versionId,publishDate);
      }
      currentFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
      m_driverManager.getVfsDriver().updateResourcestate(currentFile);
    }
 else     if (currentFile.getState() == I_CmsConstants.C_STATE_NEW) {
      changedResources.addElement(currentFile.getResourceName());
      String exportKey=checkExport(currentFile.getAbsolutePath(),exportpoints);
      if (exportKey != null) {
        byte[] contents=currentFile.getContents();
        String encoding=m_driverManager.getVfsDriver().readProperty(I_CmsConstants.C_PROPERTY_CONTENT_ENCODING,projectId,currentFile,currentFile.getType());
        if (encoding != null) {
          try {
            contents=(new String(contents,encoding)).getBytes();
          }
 catch (          UnsupportedEncodingException uex) {
          }
        }
        discAccess.writeFile(currentFile.getAbsolutePath(),exportKey,contents);
      }
      CmsUUID parentId=(CmsUUID)folderIdIndex.get(currentFile.getParentId());
      if (parentId == null) {
        CmsFolder currentOnlineParent=m_driverManager.getVfsDriver().readFolder(onlineProject.getId(),currentFile.getRootName() + currentFile.getParent());
        parentId=currentOnlineParent.getId();
        folderIdIndex.put(currentFile.getParentId(),parentId);
      }
      try {
        newFile=m_driverManager.getVfsDriver().createFile(onlineProject,currentFile,user.getId(),parentId,currentFile.getResourceName());
        newFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
        m_driverManager.getVfsDriver().updateResourcestate(newFile);
      }
 catch (      CmsException e) {
        if (e.getType() == CmsException.C_FILE_EXISTS) {
          CmsFile onlineFile=null;
          try {
            onlineFile=m_driverManager.getVfsDriver().readFileHeader(onlineProject.getId(),currentFile.getResourceName(),false);
          }
 catch (          CmsException exc) {
            throw exc;
          }
          m_driverManager.getVfsDriver().updateOnlineResourceFromOfflineResource((CmsResource)onlineFile,(CmsResource)currentFile);
          m_driverManager.getVfsDriver().writeFileContent(onlineFile.getFileId(),currentFile.getContents(),I_CmsConstants.C_PROJECT_ONLINE_ID,false);
          newFile=m_driverManager.getVfsDriver().readFile(onlineProject.getId(),currentFile.getResourceName());
        }
 else {
          throw e;
        }
      }
      Map props=new HashMap();
      try {
        props=m_driverManager.getVfsDriver().readProperties(projectId,currentFile,currentFile.getType());
        m_driverManager.getVfsDriver().writeProperties(props,onlineProject.getId(),newFile,newFile.getType());
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, copy properties for "+ newFile.toString()+ " Message= "+ exc.getMessage());
        }
      }
      m_driverManager.getUserDriver().publishAccessControlEntries(currentProject,onlineProject,currentFile.getResourceAceId(),newFile.getResourceAceId());
      if (enableHistory) {
        m_driverManager.getBackupDriver().writeBackupResource(projectId,currentFile,currentFile.getContents(),props,versionId,publishDate);
      }
      currentFile.setState(I_CmsConstants.C_STATE_UNCHANGED);
      m_driverManager.getVfsDriver().updateResourcestate(currentFile);
    }
  }
  for (int i=deletedFolders.size() - 1; i > -1; i--) {
    currentFolder=((CmsFolder)deletedFolders.elementAt(i));
    report.print(report.key("report.deleting"),I_CmsReport.C_FORMAT_NOTE);
    report.println(currentFolder.getAbsolutePath());
    String exportKey=checkExport(currentFolder.getAbsolutePath(),exportpoints);
    if (exportKey != null) {
      discAccess.removeResource(currentFolder.getAbsolutePath(),exportKey);
    }
    if (enableHistory) {
      Map props=m_driverManager.getVfsDriver().readProperties(projectId,currentFolder,currentFolder.getType());
      m_driverManager.getBackupDriver().writeBackupResource(projectId,currentFolder,new byte[0],props,versionId,publishDate);
    }
    CmsResource delOnlineFolder=m_driverManager.getVfsDriver().readFolder(onlineProject.getId(),currentFolder.getResourceName());
    try {
      m_driverManager.getVfsDriver().deleteAllProperties(onlineProject.getId(),delOnlineFolder);
      m_driverManager.getVfsDriver().deleteAllProperties(projectId,currentFolder);
    }
 catch (    CmsException exc) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[" + this.getClass().getName() + "] error publishing, deleting properties for "+ currentFolder.toString()+ " Message= "+ exc.getMessage());
      }
    }
    m_driverManager.getVfsDriver().removeFolderForPublish(onlineProject.getId(),currentFolder.getResourceName());
    m_driverManager.getVfsDriver().removeFolderForPublish(projectId,currentFolder.getResourceName());
    m_driverManager.getUserDriver().removeAllAccessControlEntries(onlineProject,delOnlineFolder.getResourceAceId());
    m_driverManager.getUserDriver().removeAllAccessControlEntries(currentProject,currentFolder.getResourceAceId());
  }
  return changedResources;
}
