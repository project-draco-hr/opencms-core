{
  CmsExportPointDriver discAccess=null;
  CmsFolder currentFolder=null;
  CmsFile currentFile=null;
  CmsResource currentFileHeader=null;
  CmsLock currentLock=null;
  List offlineFolders=null;
  List offlineFiles=null;
  List deletedFolders=(List)new ArrayList();
  Vector changedResources=new Vector();
  String currentExportKey=null;
  String currentResourceName=null;
  long publishDate=System.currentTimeMillis();
  Iterator i=null;
  boolean publishCurrentResource=false;
  List projectResources=null;
  Map sortedFolderMap=null;
  List sortedFolderList=null;
  byte[] contents=null;
  int publishHistoryId=readNextPublishVersionId();
  String encoding=null;
  int m, n;
  try {
    discAccess=new CmsExportPointDriver(exportpoints);
    if (backupEnabled) {
      m_driverManager.backupProject(context,context.currentProject(),backupTagId,publishDate);
    }
    projectResources=m_driverManager.readProjectResources(context,context.currentProject());
    offlineFolders=m_driverManager.getVfsDriver().readFolders(context.currentProject().getId());
    sortedFolderMap=(Map)new HashMap();
    i=offlineFolders.iterator();
    while (i.hasNext()) {
      publishCurrentResource=false;
      currentFolder=(CmsFolder)i.next();
      currentResourceName=m_driverManager.readPath(context,currentFolder,true);
      currentFolder.setFullResourceName(currentResourceName);
      currentLock=m_driverManager.getLock(context,currentResourceName);
      publishCurrentResource=currentFolder.getState() > I_CmsConstants.C_STATE_UNCHANGED;
      if (context.currentProject().getType() == I_CmsConstants.C_PROJECT_TYPE_DIRECT_PUBLISH && directPublishResource != null) {
        publishCurrentResource=publishCurrentResource && currentResourceName.startsWith(directPublishResource.getRootPath());
      }
 else {
        publishCurrentResource=publishCurrentResource && currentFolder.getProjectLastModified() == context.currentProject().getId();
        publishCurrentResource=publishCurrentResource && CmsProject.isInsideProject(projectResources,currentFolder);
      }
      publishCurrentResource=publishCurrentResource && currentLock.isNullLock();
      if (publishCurrentResource) {
        sortedFolderMap.put(currentResourceName,currentFolder);
      }
    }
    sortedFolderList=(List)new ArrayList(sortedFolderMap.keySet());
    Collections.sort(sortedFolderList);
    offlineFolders.clear();
    offlineFolders=null;
    m=1;
    n=sortedFolderList.size();
    i=sortedFolderList.iterator();
    if (n > 0) {
      report.println(report.key("report.publish_folders_begin"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    while (i.hasNext()) {
      currentResourceName=(String)i.next();
      currentFolder=(CmsFolder)sortedFolderMap.get(currentResourceName);
      currentExportKey=checkExport(currentResourceName,exportpoints);
      if (currentFolder.getState() == I_CmsConstants.C_STATE_DELETED) {
        deletedFolders.add(currentFolder);
        changedResources.addElement(currentResourceName);
      }
 else       if (currentFolder.getState() == I_CmsConstants.C_STATE_NEW) {
        changedResources.addElement(currentResourceName);
        if (currentExportKey != null) {
          discAccess.createFolder(currentResourceName,currentExportKey);
        }
        m_driverManager.getProjectDriver().publishFolder(context,report,m++,n,onlineProject,currentFolder,backupEnabled,publishDate,publishHistoryId,backupTagId,maxVersions);
      }
 else       if (currentFolder.getState() == I_CmsConstants.C_STATE_CHANGED) {
        changedResources.addElement(currentResourceName);
        if (currentExportKey != null) {
          discAccess.createFolder(currentResourceName,currentExportKey);
        }
        m_driverManager.getProjectDriver().publishFolder(context,report,m++,n,onlineProject,currentFolder,backupEnabled,publishDate,publishHistoryId,backupTagId,maxVersions);
      }
      i.remove();
    }
    if (n > 0) {
      report.println(report.key("report.publish_folders_end"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    if (sortedFolderList != null) {
      sortedFolderList.clear();
      sortedFolderList=null;
    }
    if (sortedFolderMap != null) {
      sortedFolderMap.clear();
      sortedFolderMap=null;
    }
    offlineFiles=m_driverManager.getVfsDriver().readFiles(context.currentProject().getId());
    i=offlineFiles.iterator();
    while (i.hasNext()) {
      publishCurrentResource=false;
      currentFileHeader=(CmsResource)i.next();
      currentResourceName=m_driverManager.readPath(context,currentFileHeader,true);
      currentFileHeader.setFullResourceName(currentResourceName);
      currentLock=m_driverManager.getLock(context,currentResourceName);
switch (currentFileHeader.getState()) {
case I_CmsConstants.C_STATE_DELETED:
        String delProject=m_driverManager.getVfsDriver().readProperty(I_CmsConstants.C_PROPERTY_INTERNAL,context.currentProject().getId(),currentFileHeader,currentFileHeader.getType());
      if (delProject != null && delProject.equals("" + context.currentProject().getId())) {
        publishCurrentResource=true;
      }
 else {
        publishCurrentResource=false;
      }
    break;
case I_CmsConstants.C_STATE_NEW:
  publishCurrentResource=currentFileHeader.getProjectLastModified() == context.currentProject().getId() || currentFileHeader.getProjectLastModified() == 0;
break;
case I_CmsConstants.C_STATE_CHANGED:
publishCurrentResource=currentFileHeader.getProjectLastModified() == context.currentProject().getId();
break;
case I_CmsConstants.C_STATE_UNCHANGED:
default :
publishCurrentResource=false;
break;
}
if (context.currentProject().getType() == I_CmsConstants.C_PROJECT_TYPE_DIRECT_PUBLISH && directPublishResource != null) {
publishCurrentResource=publishCurrentResource && currentResourceName.startsWith(directPublishResource.getRootPath());
}
 else {
publishCurrentResource=publishCurrentResource && CmsProject.isInsideProject(projectResources,currentFileHeader);
}
publishCurrentResource=publishCurrentResource && currentLock.isNullLock();
if (currentLock.isNullLock()) {
m_driverManager.getVfsDriver().removeTemporaryFile(currentFileHeader);
}
if (currentFileHeader.getName().startsWith(I_CmsConstants.C_TEMP_PREFIX)) {
m_driverManager.getVfsDriver().deleteAllProperties(context.currentProject().getId(),currentFileHeader);
m_driverManager.getVfsDriver().removeFile(context.currentProject(),currentFileHeader);
}
if (!publishCurrentResource) {
i.remove();
}
}
m=1;
n=offlineFiles.size();
i=offlineFiles.iterator();
if (n > 0) {
report.println(report.key("report.publish_files_begin"),I_CmsReport.C_FORMAT_HEADLINE);
}
while (i.hasNext()) {
currentFileHeader=(CmsResource)i.next();
currentResourceName=currentFileHeader.getRootPath();
currentExportKey=checkExport(currentResourceName,exportpoints);
currentFile=m_driverManager.getVfsDriver().readFile(context.currentProject().getId(),true,currentFileHeader.getStructureId());
currentFile.setFullResourceName(currentResourceName);
if (currentFileHeader.getState() == I_CmsConstants.C_STATE_DELETED) {
changedResources.addElement(currentResourceName);
if (currentExportKey != null) {
try {
discAccess.removeResource(currentResourceName,currentExportKey);
}
 catch (CmsException e) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishProject()] error deleting export point, type: "+ e.getType()+ ",  "+ currentFile.toString());
}
}
catch (Exception e) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishProject()] error deleting export point "+ currentFile.toString());
}
}
}
m_driverManager.getProjectDriver().publishFile(context,report,m++,n,onlineProject,currentFileHeader,backupEnabled,publishDate,publishHistoryId,backupTagId,maxVersions);
}
 else if (currentFileHeader.getState() == I_CmsConstants.C_STATE_CHANGED) {
changedResources.addElement(currentResourceName);
if (currentExportKey != null) {
try {
contents=currentFile.getContents();
encoding=m_driverManager.getVfsDriver().readProperty(I_CmsConstants.C_PROPERTY_CONTENT_ENCODING,context.currentProject().getId(),currentFile,currentFile.getType());
if (encoding != null) {
try {
contents=(new String(contents,encoding)).getBytes();
}
 catch (UnsupportedEncodingException uex) {
}
}
discAccess.writeFile(currentResourceName,currentExportKey,contents);
}
 catch (CmsException e) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishProject()] error writing export point, type: "+ e.getType()+ ",  "+ currentFile.toString());
}
}
catch (Exception e) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishProject()] error writing export point "+ currentFile.toString());
}
}
}
m_driverManager.getProjectDriver().publishFile(context,report,m++,n,onlineProject,currentFileHeader,backupEnabled,publishDate,publishHistoryId,backupTagId,maxVersions);
}
 else if (currentFileHeader.getState() == I_CmsConstants.C_STATE_NEW) {
changedResources.addElement(currentResourceName);
if (currentExportKey != null) {
contents=currentFile.getContents();
encoding=m_driverManager.getVfsDriver().readProperty(I_CmsConstants.C_PROPERTY_CONTENT_ENCODING,context.currentProject().getId(),currentFile,currentFile.getType());
if (encoding != null) {
try {
contents=(new String(contents,encoding)).getBytes();
}
 catch (UnsupportedEncodingException uex) {
}
}
discAccess.writeFile(currentResourceName,currentExportKey,contents);
}
m_driverManager.getProjectDriver().publishFile(context,report,m++,n,onlineProject,currentFileHeader,backupEnabled,publishDate,publishHistoryId,backupTagId,maxVersions);
}
i.remove();
}
if (n > 0) {
report.println(report.key("report.publish_files_end"),I_CmsReport.C_FORMAT_HEADLINE);
}
if (offlineFiles != null) {
offlineFiles.clear();
offlineFiles=null;
}
if (deletedFolders.isEmpty()) {
return changedResources;
}
sortedFolderMap=(Map)new HashMap();
i=deletedFolders.iterator();
while (i.hasNext()) {
currentFolder=(CmsFolder)i.next();
currentResourceName=currentFolder.getRootPath();
sortedFolderMap.put(currentResourceName,currentFolder);
}
sortedFolderList=(List)new ArrayList(sortedFolderMap.keySet());
Collections.sort(sortedFolderList);
Collections.reverse(sortedFolderList);
if (deletedFolders != null) {
deletedFolders.clear();
deletedFolders=null;
}
m=1;
n=sortedFolderList.size();
i=sortedFolderList.iterator();
if (n > 0) {
report.println(report.key("report.publish_delete_folders_begin"),I_CmsReport.C_FORMAT_HEADLINE);
}
while (i.hasNext()) {
currentResourceName=(String)i.next();
currentFolder=(CmsFolder)sortedFolderMap.get(currentResourceName);
currentExportKey=checkExport(currentResourceName,exportpoints);
if (currentExportKey != null) {
discAccess.removeResource(currentResourceName,currentExportKey);
}
m_driverManager.getProjectDriver().publishDeletedFolder(context,report,m++,n,onlineProject,currentFolder,backupEnabled,publishDate,publishHistoryId,backupTagId,maxVersions);
i.remove();
}
if (n > 0) {
report.println(report.key("report.publish_delete_folders_end"),I_CmsReport.C_FORMAT_HEADLINE);
}
if (sortedFolderList != null) {
sortedFolderList.clear();
sortedFolderList=null;
}
if (sortedFolderMap != null) {
sortedFolderMap.clear();
sortedFolderMap=null;
}
}
 catch (Exception e) {
if (C_DEBUG) {
System.err.println(e.getMessage());
e.printStackTrace(System.err);
}
throw e;
}
catch (OutOfMemoryError o) {
if (OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + ".publishProject] out of memory error!");
}
OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_CLEAR_CACHES,new HashMap(),false));
System.runFinalization();
Runtime.getRuntime().runFinalization();
System.gc();
Runtime.getRuntime().gc();
throw o;
}
 finally {
if (sortedFolderList != null) {
sortedFolderList.clear();
sortedFolderList=null;
}
if (sortedFolderMap != null) {
sortedFolderMap.clear();
sortedFolderMap=null;
}
if (deletedFolders != null) {
deletedFolders.clear();
deletedFolders=null;
}
if (offlineFiles != null) {
offlineFiles.clear();
offlineFiles=null;
}
currentFile=null;
currentFileHeader=null;
currentFolder=null;
discAccess=null;
currentExportKey=null;
contents=null;
}
return changedResources;
}
