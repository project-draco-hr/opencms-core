{
  CmsFolder currentFolder=null;
  CmsResource currentFileHeader=null;
  CmsLock currentLock=null;
  List offlineFolders=null;
  List offlineFiles=null;
  List deletedFolders=(List)new ArrayList();
  String currentResourceName=null;
  long publishDate=System.currentTimeMillis();
  Iterator i=null;
  boolean publishCurrentResource=false;
  List projectResources=null;
  Map sortedFolderMap=null;
  List sortedFolderList=null;
  int n;
  int publishedFolderCount=0;
  int deletedFolderCount=0;
  int publishedFileCount=0;
  Set publishedContentIds=(Set)new HashSet();
  boolean directPublishFile=context.currentProject().getType() == I_CmsConstants.C_PROJECT_TYPE_DIRECT_PUBLISH && directPublishResource != null && directPublishResource.isFile();
  List siblings=null;
  try {
    if (backupEnabled) {
      m_driverManager.backupProject(context,context.currentProject(),backupTagId,publishDate);
    }
    report.print(report.key("report.publish_read_projectresources") + report.key("report.dots"));
    projectResources=m_driverManager.readProjectResources(context.currentProject());
    report.println(report.key("report.ok"),I_CmsReport.C_FORMAT_OK);
    if (!directPublishFile) {
      report.println(report.key("report.publish_prepare_folders"),I_CmsReport.C_FORMAT_HEADLINE);
      report.print(report.key("report.publish_read_projectfolders") + report.key("report.dots"));
      offlineFolders=m_driverManager.getVfsDriver().readFolders(context.currentProject().getId());
      report.println(report.key("report.ok"),I_CmsReport.C_FORMAT_OK);
      report.print(report.key("report.publish_filter_folders") + report.key("report.dots"));
      sortedFolderMap=(Map)new HashMap();
      i=offlineFolders.iterator();
      while (i.hasNext()) {
        publishCurrentResource=false;
        currentFolder=(CmsFolder)i.next();
        currentResourceName=m_driverManager.readPath(context,currentFolder,true);
        currentFolder.setFullResourceName(currentResourceName);
        currentLock=m_driverManager.getLock(context,currentResourceName);
        publishCurrentResource=currentFolder.getState() > I_CmsConstants.C_STATE_UNCHANGED;
        if (context.currentProject().getType() == I_CmsConstants.C_PROJECT_TYPE_DIRECT_PUBLISH && directPublishResource != null) {
          publishCurrentResource=publishCurrentResource && currentResourceName.startsWith(directPublishResource.getRootPath());
        }
 else {
          publishCurrentResource=publishCurrentResource && currentFolder.getProjectLastModified() == context.currentProject().getId();
          publishCurrentResource=publishCurrentResource && CmsProject.isInsideProject(projectResources,currentFolder);
        }
        publishCurrentResource=publishCurrentResource && currentLock.isNullLock();
        if (publishCurrentResource) {
          sortedFolderMap.put(currentResourceName,currentFolder);
        }
      }
      sortedFolderList=(List)new ArrayList(sortedFolderMap.keySet());
      Collections.sort(sortedFolderList);
      report.println(report.key("report.ok"),I_CmsReport.C_FORMAT_OK);
      report.println(report.key("report.publish_prepare_folders_finished"),I_CmsReport.C_FORMAT_HEADLINE);
      offlineFolders.clear();
      offlineFolders=null;
    }
 else {
      sortedFolderList=Collections.EMPTY_LIST;
    }
    publishedFolderCount=0;
    n=sortedFolderList.size();
    i=sortedFolderList.iterator();
    if (n > 0) {
      report.println(report.key("report.publish_folders_begin"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    while (i.hasNext()) {
      currentResourceName=(String)i.next();
      currentFolder=(CmsFolder)sortedFolderMap.get(currentResourceName);
      if (currentFolder.getState() == I_CmsConstants.C_STATE_DELETED) {
        deletedFolders.add(currentFolder);
      }
 else       if (currentFolder.getState() == I_CmsConstants.C_STATE_NEW) {
        m_driverManager.getProjectDriver().publishFolder(context,report,++publishedFolderCount,n,onlineProject,currentFolder,backupEnabled,publishDate,publishHistoryId,backupTagId,maxVersions);
        internalResetResourceState(context,currentFolder);
      }
 else       if (currentFolder.getState() == I_CmsConstants.C_STATE_CHANGED) {
        m_driverManager.getProjectDriver().publishFolder(context,report,++publishedFolderCount,n,onlineProject,currentFolder,backupEnabled,publishDate,publishHistoryId,backupTagId,maxVersions);
        internalResetResourceState(context,currentFolder);
      }
      i.remove();
    }
    if (n > 0) {
      report.println(report.key("report.publish_folders_end"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    if (sortedFolderList != null) {
      sortedFolderList.clear();
      sortedFolderList=null;
    }
    if (sortedFolderMap != null) {
      sortedFolderMap.clear();
      sortedFolderMap=null;
    }
    offlineFiles=m_driverManager.filterOfflineFiles(context,directPublishResource,directPublishSiblings,report);
    publishedFileCount=0;
    n=offlineFiles.size();
    i=offlineFiles.iterator();
    if (n > 0) {
      report.println(report.key("report.publish_files_begin"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    while (i.hasNext()) {
      currentFileHeader=(CmsResource)i.next();
      currentResourceName=currentFileHeader.getRootPath();
      currentFileHeader.setFullResourceName(currentResourceName);
      m_driverManager.getProjectDriver().publishFile(context,report,++publishedFileCount,n,onlineProject,currentFileHeader,publishedContentIds,backupEnabled,publishDate,publishHistoryId,backupTagId,maxVersions);
      if (currentFileHeader.getState() != I_CmsConstants.C_STATE_DELETED) {
        internalResetResourceState(context,currentFileHeader);
      }
      i.remove();
      currentFileHeader=null;
      currentResourceName=null;
    }
    if (n > 0) {
      report.println(report.key("report.publish_files_end"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    if (offlineFiles != null) {
      offlineFiles.clear();
      offlineFiles=null;
    }
    if (deletedFolders.isEmpty()) {
      return;
    }
    sortedFolderMap=(Map)new HashMap();
    i=deletedFolders.iterator();
    while (i.hasNext()) {
      currentFolder=(CmsFolder)i.next();
      currentResourceName=currentFolder.getRootPath();
      sortedFolderMap.put(currentResourceName,currentFolder);
    }
    sortedFolderList=(List)new ArrayList(sortedFolderMap.keySet());
    Collections.sort(sortedFolderList);
    Collections.reverse(sortedFolderList);
    if (deletedFolders != null) {
      deletedFolders.clear();
      deletedFolders=null;
    }
    deletedFolderCount=0;
    n=sortedFolderList.size();
    i=sortedFolderList.iterator();
    if (n > 0) {
      report.println(report.key("report.publish_delete_folders_begin"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    while (i.hasNext()) {
      currentResourceName=(String)i.next();
      currentFolder=(CmsFolder)sortedFolderMap.get(currentResourceName);
      m_driverManager.getProjectDriver().publishDeletedFolder(context,report,++deletedFolderCount,n,onlineProject,currentFolder,backupEnabled,publishDate,publishHistoryId,backupTagId,maxVersions);
      i.remove();
    }
    if (n > 0) {
      report.println(report.key("report.publish_delete_folders_end"),I_CmsReport.C_FORMAT_HEADLINE);
    }
    if (sortedFolderList != null) {
      sortedFolderList.clear();
      sortedFolderList=null;
    }
    if (sortedFolderMap != null) {
      sortedFolderMap.clear();
      sortedFolderMap=null;
    }
  }
 catch (  Exception e) {
    if (C_DEBUG) {
      System.err.println(e.getMessage());
      e.printStackTrace(System.err);
    }
    throw e;
  }
catch (  OutOfMemoryError o) {
    if (OpenCms.getLog(this).isFatalEnabled()) {
      OpenCms.getLog(this).fatal("Out of memory error during publishing",o);
    }
    OpenCms.fireCmsEvent(new CmsEvent(new CmsObject(),I_CmsEventListener.EVENT_CLEAR_CACHES,Collections.EMPTY_MAP,false));
    System.runFinalization();
    Runtime.getRuntime().runFinalization();
    System.gc();
    Runtime.getRuntime().gc();
    throw o;
  }
 finally {
    if (sortedFolderList != null) {
      sortedFolderList.clear();
      sortedFolderList=null;
    }
    if (sortedFolderMap != null) {
      sortedFolderMap.clear();
      sortedFolderMap=null;
    }
    if (deletedFolders != null) {
      deletedFolders.clear();
      deletedFolders=null;
    }
    if (offlineFiles != null) {
      offlineFiles.clear();
      offlineFiles=null;
    }
    if (siblings != null) {
      siblings.clear();
      siblings=null;
    }
    currentFileHeader=null;
    currentFolder=null;
    StringBuffer stats=new StringBuffer();
    stats.append(report.key("report.publish_stats"));
    stats.append(report.key("report.publish_stats_files"));
    stats.append(publishedFileCount + ",");
    stats.append(report.key("report.publish_stats_folders"));
    stats.append(publishedFolderCount + ",");
    stats.append(report.key("report.publish_stats_deleted_folders"));
    stats.append(deletedFolderCount + ",");
    stats.append(report.key("report.publish_stats_duration"));
    stats.append(report.formatRuntime());
    if (OpenCms.getLog(this).isInfoEnabled()) {
      OpenCms.getLog(this).info(stats.toString());
    }
    report.println(stats.toString());
  }
}
