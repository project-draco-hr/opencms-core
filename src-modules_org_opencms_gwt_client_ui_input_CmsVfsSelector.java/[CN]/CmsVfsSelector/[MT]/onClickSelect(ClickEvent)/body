{
  final TreePanel<BeanModel> tree=CmsVfsTreeFactory.createVfsTree(createSelectionChangedListener());
  final Dialog dialog=new Dialog();
  tree.getStore().getLoader().addLoadListener(new LoadListener(){
    @Override public void loaderLoadException(    LoadEvent le){
      super.loaderLoadException(le);
      dialog.hide();
      String alertTitle=Messages.get().key(Messages.GUI_ERROR_0);
      String exceptionText=le.exception.toString();
      String alertContent=Messages.get().key(Messages.GUI_CANT_LOAD_TREE_1,exceptionText);
      CmsAlertDialog alert=new CmsAlertDialog(alertTitle,alertContent);
      alert.center();
    }
  }
);
  dialog.addWidgetListener(new WidgetListener(){
    /** 
 * @see com.extjs.gxt.ui.client.event.WidgetListener#widgetDetached(com.extjs.gxt.ui.client.event.ComponentEvent)
 */
    @Override public void widgetDetached(    ComponentEvent event){
      if (m_dialog != null) {
        m_dialog.removeAutoHidePartner(dialog.getElement());
      }
    }
  }
);
  dialog.setHeading("Select file");
  dialog.setButtons("");
  dialog.add(tree);
  dialog.setSize(400,300);
  dialog.setModal(true);
  dialog.setScrollMode(Scroll.AUTO);
  ScheduledCommand cmd=new Scheduler.ScheduledCommand(){
    /** 
 * @see com.google.gwt.core.client.Scheduler.ScheduledCommand#execute()
 */
    public void execute(){
      dialog.show();
      if (m_dialog != null) {
        m_dialog.addAutoHidePartner(dialog.getElement());
      }
      tree.getStore().getLoader().load(null);
    }
  }
;
  Scheduler.get().scheduleDeferred(cmd);
}
