{
  System.out.println(new Exception().getStackTrace()[0].toString());
  try {
    if (dbCon.hasTableOrColumn(CMS_USERS_TABLE,USER_TYPE)) {
      CmsUUID id=createWebusersGroup(dbCon);
      addWebusersToGroup(dbCon,id);
    }
 else {
      System.out.println("table " + CHECK_CMS_USERDATA + " already exists");
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  try {
    if (!checkUserDataTable(dbCon)) {
      createUserDataTable(dbCon);
      String query=readQuery(QUERY_SELECT_USER_DATA);
      ResultSet set=dbCon.executeSqlStatement(query,null);
      while (set.next()) {
        String userID=(String)set.getObject(RESULTSET_USER_ID);
        System.out.println("UserId: " + userID);
        try {
          Blob blob=set.getBlob(RESULTSET_USER_INFO);
          ByteArrayInputStream bin=new ByteArrayInputStream(blob.getBytes(1,(int)blob.length()));
          ObjectInputStream oin=new ObjectInputStream(bin);
          Map infos=(Map)oin.readObject();
          if (infos == null) {
            infos=new HashMap();
          }
          String userAddress=(String)set.getObject(USER_ADDRESS);
          if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(userAddress)) {
            infos.put(USER_ADDRESS,userAddress);
          }
          String userDescription=(String)set.getObject(USER_DESCRIPTION);
          if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(userDescription)) {
            infos.put(USER_DESCRIPTION,userDescription);
          }
          writeAdditionalUserInfo(dbCon,userID,infos);
        }
 catch (        Throwable e) {
          e.printStackTrace();
        }
      }
      addUserDateCreated(dbCon);
      removeUnnecessaryColumns(dbCon);
    }
 else {
      System.out.println("table " + CHECK_CMS_USERDATA + " already exists");
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}
