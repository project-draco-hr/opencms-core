{
  CmsCacheSettings cacheSettings=configuration.getCacheSettings();
  m_memoryAverage=new CmsMemoryStatus();
  m_memoryCurrent=new CmsMemoryStatus();
  m_warningSendSinceLastStatus=false;
  m_warningLoggedSinceLastStatus=false;
  m_lastEmailWarning=0;
  m_lastEmailStatus=0;
  m_lastLogStatus=0;
  m_lastLogWarning=0;
  m_lastClearCache=0;
  m_configuration=configuration.getCmsMemoryMonitorConfiguration();
  m_intervalWarning=720 * 60000;
  m_maxUsagePercent=90;
  m_intervalEmail=m_configuration.getEmailInterval() * 1000;
  m_intervalLog=m_configuration.getLogInterval() * 1000;
  if (m_configuration.getWarningInterval() > 0) {
    m_intervalWarning=m_configuration.getWarningInterval();
  }
  m_intervalWarning*=1000;
  if (m_configuration.getMaxUsagePercent() > 0) {
    m_maxUsagePercent=m_configuration.getMaxUsagePercent();
  }
  if (CmsLog.INIT.isInfoEnabled()) {
    CmsLog.INIT.info(Messages.get().getBundle().key(Messages.LOG_MM_INTERVAL_LOG_1,new Integer(m_intervalLog / 1000)));
    CmsLog.INIT.info(Messages.get().getBundle().key(Messages.LOG_MM_INTERVAL_EMAIL_1,new Integer(m_intervalEmail / 1000)));
    CmsLog.INIT.info(Messages.get().getBundle().key(Messages.LOG_MM_INTERVAL_WARNING_1,new Integer(m_intervalWarning / 1000)));
    CmsLog.INIT.info(Messages.get().getBundle().key(Messages.LOG_MM_INTERVAL_MAX_USAGE_1,new Integer(m_maxUsagePercent)));
    if ((m_configuration.getEmailReceiver() == null) || (m_configuration.getEmailSender() == null)) {
      CmsLog.INIT.info(Messages.get().getBundle().key(Messages.LOG_MM_EMAIL_DISABLED_0));
    }
 else {
      CmsLog.INIT.info(Messages.get().getBundle().key(Messages.LOG_MM_EMAIL_SENDER_1,m_configuration.getEmailSender()));
      Iterator<String> i=m_configuration.getEmailReceiver().iterator();
      int n=0;
      while (i.hasNext()) {
        CmsLog.INIT.info(Messages.get().getBundle().key(Messages.LOG_MM_EMAIL_RECEIVER_2,new Integer(n + 1),i.next()));
        n++;
      }
    }
  }
  m_cacheXmlTemporaryEntity=createLRUCacheMap(128);
  register(CmsXmlEntityResolver.class.getName() + ".xmlEntityTemporaryCache",m_cacheXmlTemporaryEntity);
  m_cacheXmlPermanentEntity=new ConcurrentHashMap<String,byte[]>(32);
  register(CmsXmlEntityResolver.class.getName() + ".xmlEntityPermanentCache",m_cacheXmlPermanentEntity);
  m_cacheContentDefinitions=createLRUCacheMap(64);
  register(CmsXmlEntityResolver.class.getName() + ".contentDefinitionsCache",m_cacheContentDefinitions);
  m_cacheLock=new ConcurrentHashMap<String,CmsLock>();
  register(CmsLockManager.class.getName(),m_cacheLock);
  m_cacheLocale=new ConcurrentHashMap<String,Locale>();
  register(CmsLocaleManager.class.getName(),m_cacheLocale);
  m_cachePermission=createLRUCacheMap(cacheSettings.getPermissionCacheSize());
  register(CmsSecurityManager.class.getName(),m_cachePermission);
  m_cacheUser=createLRUCacheMap(cacheSettings.getUserCacheSize());
  register(CmsDriverManager.class.getName() + ".userCache",m_cacheUser);
  m_cacheUserList=createLRUCacheMap(cacheSettings.getUserCacheSize());
  register(CmsDriverManager.class.getName() + ".userListCache",m_cacheUserList);
  m_cacheGroup=createLRUCacheMap(cacheSettings.getGroupCacheSize());
  register(CmsDriverManager.class.getName() + ".groupCache",m_cacheGroup);
  m_cacheOrgUnit=createLRUCacheMap(cacheSettings.getOrgUnitCacheSize());
  register(CmsDriverManager.class.getName() + ".orgUnitCache",m_cacheOrgUnit);
  m_cacheUserGroups=createLRUCacheMap(cacheSettings.getUserGroupsCacheSize());
  register(CmsDriverManager.class.getName() + ".userGroupsCache",m_cacheUserGroups);
  m_cacheProject=createLRUCacheMap(cacheSettings.getProjectCacheSize());
  register(CmsDriverManager.class.getName() + ".projectCache",m_cacheProject);
  m_cacheProjectResources=createLRUCacheMap(cacheSettings.getProjectResourcesCacheSize());
  register(CmsDriverManager.class.getName() + ".projectResourcesCache",m_cacheProjectResources);
  int size=configuration.getPublishManager().getPublishHistorySize();
  Buffer buffer=CmsPublishHistory.getQueue(size);
  m_publishHistory=SynchronizedBuffer.decorate(buffer);
  register(CmsPublishHistory.class.getName() + ".publishHistory",buffer);
  buffer=CmsPublishQueue.getQueue();
  m_publishQueue=SynchronizedBuffer.decorate(buffer);
  register(CmsPublishQueue.class.getName() + ".publishQueue",buffer);
  m_cacheResource=createLRUCacheMap(cacheSettings.getResourceCacheSize());
  register(CmsDriverManager.class.getName() + ".resourceCache",m_cacheResource);
  m_cacheHasRoles=createLRUCacheMap(cacheSettings.getRolesCacheSize());
  register(CmsDriverManager.class.getName() + ".rolesCache",m_cacheHasRoles);
  m_cacheRoleLists=createLRUCacheMap(cacheSettings.getRolesCacheSize());
  register(CmsDriverManager.class.getName() + ".roleListsCache",m_cacheRoleLists);
  m_cacheResourceList=createLRUCacheMap(cacheSettings.getResourcelistCacheSize());
  register(CmsDriverManager.class.getName() + ".resourceListCache",m_cacheResourceList);
  m_cacheProperty=createLRUCacheMap(cacheSettings.getPropertyCacheSize());
  register(CmsDriverManager.class.getName() + ".propertyCache",m_cacheProperty);
  m_cachePropertyList=createLRUCacheMap(cacheSettings.getPropertyListsCacheSize());
  register(CmsDriverManager.class.getName() + ".propertyListCache",m_cachePropertyList);
  m_cachePublishedResources=createLRUCacheMap(5);
  register(CmsDriverManager.class.getName() + ".publishedResourcesCache",m_cachePublishedResources);
  m_cacheAccessControlList=createLRUCacheMap(cacheSettings.getAclCacheSize());
  register(CmsDriverManager.class.getName() + ".accessControlListCache",m_cacheAccessControlList);
  m_cacheVfsObject=new ConcurrentHashMap<String,Object>();
  register(CmsVfsMemoryObjectCache.class.getName(),m_cacheVfsObject);
  m_cacheMemObject=new ConcurrentHashMap<String,Object>();
  register(CmsMemoryObjectCache.class.getName(),m_cacheMemObject);
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().getBundle().key(Messages.LOG_MM_CREATED_1,new Date(System.currentTimeMillis())));
  }
}
