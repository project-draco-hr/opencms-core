{
  if (!LOG.isWarnEnabled()) {
    return;
  }
 else   if ((!warning) && (!LOG.isInfoEnabled())) {
    return;
  }
 else   if (warning && (m_warningLoggedSinceLastStatus && !(((m_intervalLog <= 0) && (System.currentTimeMillis() < (m_lastLogWarning + m_intervalWarning)))))) {
    return;
  }
 else   if ((!warning) && (m_intervalLog <= 0)) {
    return;
  }
  if (warning) {
    m_lastLogWarning=System.currentTimeMillis();
    m_warningLoggedSinceLastStatus=true;
    LOG.warn(Messages.get().key(Messages.LOG_MM_WARNING_MEM_CONSUME_2,new Long(m_memoryCurrent.getUsage()),new Integer(m_maxUsagePercent)));
  }
 else {
    m_warningLoggedSinceLastStatus=false;
    m_lastLogStatus=System.currentTimeMillis();
  }
  if (warning) {
    LOG.warn(Messages.get().key(Messages.LOG_MM_WARNING_MEM_STATUS_6,new Object[]{new Long(m_memoryCurrent.getMaxMemory()),new Long(m_memoryCurrent.getTotalMemory()),new Long(m_memoryCurrent.getFreeMemory()),new Long(m_memoryCurrent.getUsedMemory()),new Long(m_memoryCurrent.getUsage()),new Integer(m_maxUsagePercent)}));
  }
 else {
    m_logCount++;
    LOG.info(Messages.get().key(Messages.LOG_MM_LOG_INFO_2,OpenCms.getSystemInfo().getServerName().toUpperCase(),String.valueOf(m_logCount)));
    List keyList=Arrays.asList(m_monitoredObjects.keySet().toArray());
    Collections.sort(keyList);
    long totalSize=0;
    for (Iterator keys=keyList.iterator(); keys.hasNext(); ) {
      String key=(String)keys.next();
      Object obj=m_monitoredObjects.get(key);
      long size=getKeySize(obj) + getValueSize(obj) + getCosts(obj);
      totalSize+=size;
      PrintfFormat name1=new PrintfFormat("%-80s");
      PrintfFormat name2=new PrintfFormat("%-50s");
      PrintfFormat form=new PrintfFormat("%9s");
      LOG.info(Messages.get().key(Messages.LOG_MM_NOWARN_STATUS_5,new Object[]{name1.sprintf(key),name2.sprintf(obj.getClass().getName()),form.sprintf(getItems(obj)),form.sprintf(getLimit(obj)),form.sprintf(Long.toString(size))}));
    }
    LOG.info(Messages.get().key(Messages.LOG_MM_WARNING_MEM_STATUS_6,new Object[]{new Long(m_memoryCurrent.getMaxMemory()),new Long(m_memoryCurrent.getTotalMemory()),new Long(m_memoryCurrent.getFreeMemory()),new Long(m_memoryCurrent.getUsedMemory()),new Long(m_memoryCurrent.getUsage()),new Integer(m_maxUsagePercent),new Long(totalSize),new Long(totalSize / 1048576)}));
    LOG.info(Messages.get().key(Messages.LOG_MM_WARNING_MEM_STATUS_AVG_6,new Object[]{new Long(m_memoryAverage.getMaxMemory()),new Long(m_memoryAverage.getTotalMemory()),new Long(m_memoryAverage.getFreeMemory()),new Long(m_memoryAverage.getUsedMemory()),new Long(m_memoryAverage.getUsage()),new Integer(m_memoryAverage.getCount())}));
    CmsSessionManager sm=OpenCms.getSessionManager();
    if (sm != null) {
      LOG.info(Messages.get().key(Messages.LOG_MM_SESSION_STAT_3,String.valueOf(sm.getSessionCountAuthenticated()),String.valueOf(sm.getSessionCountCurrent()),String.valueOf(sm.getSessionCountTotal())));
    }
    sm=null;
    for (Iterator i=OpenCms.getSqlManager().getDbPoolNames().iterator(); i.hasNext(); ) {
      String poolname=(String)i.next();
      try {
        LOG.info(Messages.get().key(Messages.LOG_MM_CONNECTIONS_3,poolname,Integer.toString(OpenCms.getSqlManager().getActiveConnections(poolname)),Integer.toString(OpenCms.getSqlManager().getIdleConnections(poolname))));
      }
 catch (      Exception exc) {
        LOG.info(Messages.get().key(Messages.LOG_MM_CONNECTIONS_3,poolname,Integer.toString(-1),Integer.toString(-1)));
      }
    }
    LOG.info(Messages.get().key(Messages.LOG_MM_STARTUP_TIME_2,CmsDateUtil.getDateTimeShort(OpenCms.getSystemInfo().getStartupTime()),CmsStringUtil.formatRuntime(OpenCms.getSystemInfo().getRuntime())));
  }
}
