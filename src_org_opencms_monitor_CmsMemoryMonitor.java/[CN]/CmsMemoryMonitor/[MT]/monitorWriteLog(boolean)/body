{
  if ((warning && m_warningLoggedSinceLastLog) || ((m_intervalLog <= 0) && (System.currentTimeMillis() < (m_lastLogWarning + m_intervalWarning)))) {
    return;
  }
 else   if ((!OpenCms.getLog(this).isDebugEnabled()) || ((!warning) && (m_intervalLog <= 0))) {
    return;
  }
  long maxMemory=Runtime.getRuntime().maxMemory() / 1048576;
  long totalMemory=Runtime.getRuntime().totalMemory() / 1048576;
  long usedMemory=(Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1048576;
  long freeMemory=maxMemory - usedMemory;
  long usage=usedMemory * 100 / maxMemory;
  if (warning) {
    m_lastLogWarning=System.currentTimeMillis();
    m_warningLoggedSinceLastLog=true;
    OpenCms.getLog(this).warn("W A R N I N G Memory consumption of " + usage + "% has reached a critical level"+ " ("+ m_maxUsagePercent+ "% configured)");
  }
 else {
    m_warningLoggedSinceLastLog=false;
    m_lastLogStatus=System.currentTimeMillis();
  }
  String memStatus="Memory max: ," + maxMemory + " ,"+ "total: ,"+ totalMemory+ " ,"+ "free: ,"+ freeMemory+ " ,"+ "used: ,"+ usedMemory;
  if (warning) {
    OpenCms.getLog(this).warn(memStatus);
  }
 else {
    OpenCms.getLog(this).debug(memStatus);
    for (Iterator keys=m_monitoredObjects.keySet().iterator(); keys.hasNext(); ) {
      String key=(String)keys.next();
      Object obj=m_monitoredObjects.get(key);
      OpenCms.getLog(this).debug(",,,,,,, " + "Monitored: ," + key + ", "+ "Type: ,"+ obj.getClass().getName()+ ", "+ Integer.toHexString(obj.hashCode())+ ", "+ "Limit: ,"+ getLimit(obj)+ ", "+ "Mapped: ,"+ getItems(obj)+ ", "+ "Costs: ,"+ getCosts(obj)+ ", "+ "Keys: ,"+ getKeySize(obj,true)+ ", "+ "Values: ,"+ getValueSize(obj));
    }
  }
}
