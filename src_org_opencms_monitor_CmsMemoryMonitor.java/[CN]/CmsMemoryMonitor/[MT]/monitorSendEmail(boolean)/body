{
  if ((m_configuration.getEmailSender() == null) || (m_configuration.getEmailReceiver() == null)) {
    return;
  }
 else   if (warning && (m_warningSendSinceLastStatus && !((m_intervalEmail <= 0) && (System.currentTimeMillis() < (m_lastEmailWarning + m_intervalWarning))))) {
    return;
  }
 else   if ((!warning) && (m_intervalEmail <= 0)) {
    return;
  }
  String date=CmsDateUtil.getDateTimeShort(System.currentTimeMillis());
  String subject;
  String content="";
  if (warning) {
    m_warningSendSinceLastStatus=true;
    m_lastEmailWarning=System.currentTimeMillis();
    subject="OpenCms Memory W A R N I N G [" + OpenCms.getSystemInfo().getServerName().toUpperCase() + "/"+ date+ "]";
    content+="W A R N I N G !\nOpenCms memory consumption on server " + OpenCms.getSystemInfo().getServerName().toUpperCase() + " has reached a critical level !\n\n"+ "The configured limit is "+ m_maxUsagePercent+ "%\n\n";
  }
 else {
    m_warningSendSinceLastStatus=false;
    m_lastEmailStatus=System.currentTimeMillis();
    subject="OpenCms Memory Status [" + OpenCms.getSystemInfo().getServerName().toUpperCase() + "/"+ date+ "]";
  }
  long maxMemory=Runtime.getRuntime().maxMemory() / 1048576;
  long totalMemory=Runtime.getRuntime().totalMemory() / 1048576;
  long usedMemory=(Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1048576;
  long freeMemory=maxMemory - usedMemory;
  long usage=usedMemory * 100 / maxMemory;
  content+="Memory usage report of OpenCms server " + OpenCms.getSystemInfo().getServerName().toUpperCase() + " at "+ date+ "\n\n"+ "Memory maximum heap size: "+ maxMemory+ " mb\n"+ "Memory current heap size: "+ totalMemory+ " mb\n\n"+ "Memory currently used   : "+ usedMemory+ " mb ("+ usage+ "%)\n"+ "Memory currently unused : "+ freeMemory+ " mb\n\n\n";
  if (warning) {
    content+="*** Please take action NOW to ensure that no OutOfMemoryException occurs.\n\n\n";
  }
  CmsSessionManager sm=OpenCmsCore.getInstance().getSessionManager();
  if (sm != null) {
    content+="Current status of the sessions:\n\n";
    content+="Logged in users          : " + sm.getSessionCountAuthenticated() + "\n";
    content+="Currently active sessions: " + sm.getSessionCountCurrent() + "\n";
    content+="Total created sessions   : " + sm.getSessionCountTotal() + "\n\n\n";
  }
  sm=null;
  content+="Current status of the caches:\n\n";
  List keyList=Arrays.asList(m_monitoredObjects.keySet().toArray());
  Collections.sort(keyList);
  long totalSize=0;
  for (Iterator keys=keyList.iterator(); keys.hasNext(); ) {
    String key=(String)keys.next();
    String shortKeys[]=key.split("\\.");
    String shortKey=shortKeys[shortKeys.length - 2] + "." + shortKeys[shortKeys.length - 1];
    PrintfFormat form=new PrintfFormat("%9s");
    Object obj=m_monitoredObjects.get(key);
    long size=getKeySize(obj) + getValueSize(obj) + getCosts(obj);
    totalSize+=size;
    content+=new PrintfFormat("%-42.42s").sprintf(shortKey) + "  " + "Entries: "+ form.sprintf(getItems(obj))+ "   "+ "Limit: "+ form.sprintf(getLimit(obj))+ "   "+ "Size: "+ form.sprintf(Long.toString(size))+ "\n";
  }
  content+="\nTotal size of cache memory monitored: " + totalSize + " ("+ totalSize / 1048576 + ")\n\n";
  String from=m_configuration.getEmailSender();
  List receivers=new ArrayList();
  List receiverEmails=m_configuration.getEmailReceiver();
  try {
    if (from != null && receiverEmails != null && !receiverEmails.isEmpty()) {
      Iterator i=receiverEmails.iterator();
      while (i.hasNext()) {
        receivers.add(new InternetAddress((String)i.next()));
      }
      CmsSimpleMail email=new CmsSimpleMail();
      email.setFrom(from);
      email.setTo(receivers);
      email.setSubject(subject);
      email.setMsg(content);
      new CmsMailTransport(email).send();
    }
    if (OpenCms.getLog(this).isInfoEnabled()) {
      OpenCms.getLog(this).info("Memory Monitor " + (warning ? "warning" : "status") + " email send");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
