{
  context.addStyleName(ENTITY_CLASS);
  context.getElement().setAttribute("typeof",entity.getTypeName());
  context.getElement().setAttribute("about",entity.getId());
  CmsType entityType=m_entityBackEnd.getType(entity.getTypeName());
  CmsAttributeValueView lastCompactView=null;
  if (entityType.isChoice()) {
    CmsEntityAttribute attribute=entity.getAttribute(CmsType.CHOICE_ATTRIBUTE_NAME);
    CmsAttributeHandler handler=new CmsAttributeHandler(m_entityBackEnd,entity,CmsType.CHOICE_ATTRIBUTE_NAME,m_widgetService);
    parentHandler.setHandler(attributeIndex,CmsType.CHOICE_ATTRIBUTE_NAME,handler);
    CmsValuePanel attributeElement=new CmsValuePanel();
    if ((attribute != null) && attribute.isComplexValue()) {
      for (      CmsEntity choiceEntity : attribute.getComplexValues()) {
        CmsType choiceType=m_entityBackEnd.getType(choiceEntity.getTypeName());
        List<CmsEntityAttribute> choiceAttributes=choiceEntity.getAttributes();
        CmsEntityAttribute choiceAttribute=choiceAttributes.get(0);
        CmsType attributeType=choiceType.getAttributeType(choiceAttribute.getAttributeName());
        I_CmsEntityRenderer renderer=m_widgetService.getRendererForAttribute(choiceAttribute.getAttributeName(),attributeType);
        String label=m_widgetService.getAttributeLabel(choiceAttribute.getAttributeName());
        String help=m_widgetService.getAttributeHelp(choiceAttribute.getAttributeName());
        context.add(attributeElement);
        CmsAttributeValueView valueWidget=new CmsAttributeValueView(handler,label,help);
        attributeElement.add(valueWidget);
        if (choiceAttribute.isSimpleValue()) {
          valueWidget.setValueWidget(m_widgetService.getAttributeFormWidget(choiceAttribute.getAttributeName()),choiceAttribute.getSimpleValue(),m_widgetService.getDefaultAttributeValue(choiceAttribute.getAttributeName(),handler.getSimplePath(attributeIndex)),true);
          if (m_widgetService.isDisplaySingleLine(choiceAttribute.getAttributeName())) {
            valueWidget.setCompactMode(CmsAttributeValueView.COMPACT_MODE_SINGLE_LINE);
          }
        }
 else {
          valueWidget.setValueEntity(renderer,choiceAttribute.getComplexValue());
          if (m_widgetService.isDisplayCompact(choiceAttribute.getAttributeName())) {
            valueWidget.setCompactMode(CmsAttributeValueView.COMPACT_MODE_NESTED);
          }
        }
        setAttributeChoice(valueWidget,entityType);
      }
    }
    handler.updateButtonVisisbility();
  }
 else {
    List<String> attributeNames=entityType.getAttributeNames();
    for (    String attributeName : attributeNames) {
      if (!m_widgetService.isVisible(attributeName)) {
        continue;
      }
      int minOccurrence=entityType.getAttributeMinOccurrence(attributeName);
      CmsEntityAttribute attribute=entity.getAttribute(attributeName);
      CmsAttributeHandler handler=new CmsAttributeHandler(m_entityBackEnd,entity,attributeName,m_widgetService);
      parentHandler.setHandler(attributeIndex,attributeName,handler);
      if ((attribute == null) && (minOccurrence > 0)) {
        attribute=createEmptyAttribute(entity,attributeName,handler,minOccurrence);
      }
      CmsType attributeType=entityType.getAttributeType(attributeName);
      CmsValuePanel attributeElement=new CmsValuePanel();
      context.add(attributeElement);
      lastCompactView=renderAttribute(entityType,attributeType,attribute,handler,attributeElement,attributeName,lastCompactView);
    }
  }
  if (lastCompactView != null) {
    lastCompactView.setCompactMode(CmsAttributeValueView.COMPACT_MODE_WIDE);
  }
}
