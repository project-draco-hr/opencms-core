{
  if (getParamListAction().equals(LIST_MACTION_DELETE)) {
    List removedItems=new ArrayList();
    try {
      Iterator itItems=getSelectedItems().iterator();
      while (itItems.hasNext()) {
        CmsListItem listItem=(CmsListItem)itItems.next();
        int pId=new Integer(listItem.getId()).intValue();
        getCms().deleteProject(pId);
        removedItems.add(listItem.getId());
      }
    }
 catch (    CmsException e) {
      throw new CmsRuntimeException(Messages.get().container(Messages.ERR_DELETE_SELECTED_PROJECTS_0),e);
    }
 finally {
      getList().removeAllItems(removedItems,getLocale());
    }
  }
 else   if (getParamListAction().equals(LIST_MACTION_PUBLISH)) {
    Map params=new HashMap();
    params.put(CmsPublishProjectReport.PARAM_PROJECTIDS,getParamSelItems());
    params.put(CmsDialog.PARAM_ACTION,CmsDialog.DIALOG_INITIAL);
    try {
      getToolManager().jspRedirectTool(this,"/projects/publish",params);
    }
 catch (    IOException e) {
      throw new CmsRuntimeException(Messages.get().container(Messages.ERR_EDIT_PUBLISH_0),e);
    }
  }
 else   if (getParamListAction().equals(LIST_MACTION_UNLOCK)) {
    try {
      Iterator itItems=getSelectedItems().iterator();
      while (itItems.hasNext()) {
        CmsListItem listItem=(CmsListItem)itItems.next();
        int pId=new Integer(listItem.getId()).intValue();
        getCms().unlockProject(pId);
      }
    }
 catch (    CmsException e) {
      throw new CmsRuntimeException(Messages.get().container(Messages.ERR_UNLOCK_SELECTED_PROJECTS_0),e);
    }
  }
 else {
    throwListUnsupportedActionException();
  }
  listSave();
}
