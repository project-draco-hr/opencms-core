{
  Element searchElement=parent.addElement(N_SEARCH);
  if (OpenCms.getRunLevel() >= OpenCms.RUNLEVEL_3_SHELL_ACCESS) {
    m_searchManager=OpenCms.getSearchManager();
  }
  if (!m_searchManager.getClass().equals(CmsSearchManager.class)) {
    searchElement.addAttribute(A_CLASS,m_searchManager.getClass().getName());
  }
  Element solr=searchElement.addElement(N_SOLR);
  if (m_searchManager.getSolrServerConfiguration() != null) {
    CmsSolrConfiguration conf=m_searchManager.getSolrServerConfiguration();
    solr.addAttribute(A_ENABLED,new Boolean(conf.isEnabled()).toString());
    if (conf.getServerUrl() != null) {
      solr.addAttribute(A_SERVER_URL,conf.getServerUrl().toString());
    }
    if (conf.getHomeFolderPath() != null) {
      solr.addElement(N_HOME).addText(conf.getHomeFolderPath());
    }
    if (conf.getSolrFileName() != null) {
      solr.addElement(N_CONFIG_FILE).addText(conf.getSolrFileName());
    }
  }
  searchElement.addElement(N_DIRECTORY).addText(m_searchManager.getDirectory());
  searchElement.addElement(N_TIMEOUT).addText(String.valueOf(m_searchManager.getTimeout()));
  searchElement.addElement(N_OFFLINE_UPDATE_FREQUENCY).addText(String.valueOf(m_searchManager.getOfflineUpdateFrequency()));
  if (m_searchManager.getForceunlock() != null) {
    searchElement.addElement(N_FORCEUNLOCK).addText(m_searchManager.getForceunlock().toString());
  }
  searchElement.addElement(N_EXCERPT).addText(String.valueOf(m_searchManager.getMaxExcerptLength()));
  searchElement.addElement(N_EXTRACTION_CACHE_MAX_AGE).addText(String.valueOf(m_searchManager.getExtractionCacheMaxAge()));
  searchElement.addElement(N_MAX_MODIFICATIONS_BEFORE_COMMIT).addText(String.valueOf(m_searchManager.getMaxModificationsBeforeCommit()));
  searchElement.addElement(N_HIGHLIGHTER).addText(m_searchManager.getHighlighter().getClass().getName());
  Element documenttypesElement=searchElement.addElement(N_DOCUMENTTYPES);
  for (  CmsSearchDocumentType currSearchDocType : m_searchManager.getDocumentTypeConfigs()) {
    Element documenttypeElement=documenttypesElement.addElement(N_DOCUMENTTYPE);
    documenttypeElement.addElement(N_NAME).addText(currSearchDocType.getName());
    documenttypeElement.addElement(N_CLASS).addText(currSearchDocType.getClassName());
    Element mimetypesElement=documenttypeElement.addElement(N_MIMETYPES);
    Iterator<String> mimeTypesIterator=currSearchDocType.getMimeTypes().iterator();
    while (mimeTypesIterator.hasNext()) {
      mimetypesElement.addElement(N_MIMETYPE).addText(mimeTypesIterator.next());
    }
    Element restypesElement=documenttypeElement.addElement(N_RESOURCETYPES);
    Iterator<String> resTypesIterator=currSearchDocType.getResourceTypes().iterator();
    while (resTypesIterator.hasNext()) {
      restypesElement.addElement(N_RESOURCETYPE).addText(resTypesIterator.next());
    }
  }
  Element analyzersElement=searchElement.addElement(N_ANALYZERS);
  ArrayList<Locale> analyzerLocaleList=new ArrayList<Locale>(m_searchManager.getAnalyzers().keySet());
  Collections.sort(analyzerLocaleList,CmsLocaleComparator.getComparator());
  Iterator<Locale> analyzersLocaleInterator=analyzerLocaleList.iterator();
  while (analyzersLocaleInterator.hasNext()) {
    CmsSearchAnalyzer searchAnalyzer=m_searchManager.getCmsSearchAnalyzer(analyzersLocaleInterator.next());
    Element analyzerElement=analyzersElement.addElement(N_ANALYZER);
    analyzerElement.addElement(N_CLASS).addText(searchAnalyzer.getClassName());
    if (searchAnalyzer.getStemmerAlgorithm() != null) {
      analyzerElement.addElement(N_STEMMER).addText(searchAnalyzer.getStemmerAlgorithm());
    }
    analyzerElement.addElement(N_LOCALE).addText(searchAnalyzer.getLocale().toString());
  }
  Element indexesElement=searchElement.addElement(N_INDEXES);
  for (  A_CmsSearchIndex searchIndex : m_searchManager.getSearchIndexes()) {
    Element indexElement=indexesElement.addElement(N_INDEX);
    if (!searchIndex.getClass().equals(CmsLuceneIndex.class)) {
      indexElement.addAttribute(A_CLASS,searchIndex.getClass().getName());
    }
    indexElement.addElement(N_NAME).addText(searchIndex.getName());
    indexElement.addElement(N_REBUILD).addText(searchIndex.getRebuildMode());
    indexElement.addElement(N_PROJECT).addText(searchIndex.getProject());
    indexElement.addElement(N_LOCALE).addText(searchIndex.getLocale().toString());
    String fieldConfigurationName=searchIndex.getFieldConfigurationName();
    if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(fieldConfigurationName)) {
      indexElement.addElement(N_CONFIGURATION).addText(fieldConfigurationName);
    }
    Element sourcesElement=indexElement.addElement(N_SOURCES);
    Iterator<String> sourcesIterator=searchIndex.getSourceNames().iterator();
    while (sourcesIterator.hasNext()) {
      sourcesElement.addElement(N_SOURCE).addText(sourcesIterator.next());
    }
    CmsParameterConfiguration indexConfiguration=searchIndex.getConfiguration();
    if (indexConfiguration != null) {
      indexConfiguration.appendToXml(indexElement);
    }
  }
  Element indexsourcesElement=searchElement.addElement(N_INDEXSOURCES);
  for (  CmsSearchIndexSource searchIndexSource : m_searchManager.getSearchIndexSources().values()) {
    Element indexsourceElement=indexsourcesElement.addElement(N_INDEXSOURCE);
    indexsourceElement.addElement(N_NAME).addText(searchIndexSource.getName());
    Element indexerElement=indexsourceElement.addElement(N_INDEXER).addAttribute(N_CLASS,searchIndexSource.getIndexerClassName());
    for (    Entry<String,String> entry : searchIndexSource.getParams().entrySet()) {
      indexerElement.addElement(I_CmsXmlConfiguration.N_PARAM).addAttribute(I_CmsXmlConfiguration.A_NAME,entry.getKey()).addText(entry.getValue());
    }
    Element resourcesElement=indexsourceElement.addElement(N_RESOURCES);
    Iterator<String> resourceIterator=searchIndexSource.getResourcesNames().iterator();
    while (resourceIterator.hasNext()) {
      resourcesElement.addElement(N_RESOURCE).addText(resourceIterator.next());
    }
    Element doctypes_indexedElement=indexsourceElement.addElement(N_DOCUMENTTYPES_INDEXED);
    Iterator<String> doctypesIterator=searchIndexSource.getDocumentTypes().iterator();
    while (doctypesIterator.hasNext()) {
      doctypes_indexedElement.addElement(N_NAME).addText(doctypesIterator.next());
    }
  }
  Element fieldConfigurationsElement=searchElement.addElement(N_FIELDCONFIGURATIONS);
  for (  I_CmsSearchFieldConfiguration fieldConfiguration : m_searchManager.getFieldConfigurations()) {
    Element fieldConfigurationElement=fieldConfigurationsElement.addElement(N_FIELDCONFIGURATION);
    if (!fieldConfiguration.getClass().equals(CmsSearchFieldConfiguration.class)) {
      fieldConfigurationElement.addAttribute(A_CLASS,fieldConfiguration.getClass().getName());
    }
    fieldConfigurationElement.addElement(N_NAME).setText(fieldConfiguration.getName());
    if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(fieldConfiguration.getDescription())) {
      fieldConfigurationElement.addElement(N_DESCRIPTION).setText(fieldConfiguration.getDescription());
    }
    Element fieldsElement=fieldConfigurationElement.addElement(N_FIELDS);
    for (    I_CmsSearchField sfield : fieldConfiguration.getFields()) {
      CmsSearchField field=(CmsSearchField)sfield;
      Element fieldElement=fieldsElement.addElement(N_FIELD);
      fieldElement.addAttribute(A_NAME,field.getName());
      if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(field.getDisplayNameForConfiguration())) {
        fieldElement.addAttribute(A_DISPLAY,field.getDisplayNameForConfiguration());
      }
      if (field.isCompressed()) {
        fieldElement.addAttribute(A_STORE,CmsSearchField.STR_COMPRESS);
      }
 else {
        fieldElement.addAttribute(A_STORE,String.valueOf(field.isStored()));
      }
      String index;
      if (field.isIndexed()) {
        if (field.isTokenizedAndIndexed()) {
          index=CmsStringUtil.TRUE;
        }
 else {
          index=CmsSearchField.STR_UN_TOKENIZED;
        }
      }
 else {
        index=CmsStringUtil.FALSE;
      }
      fieldElement.addAttribute(A_INDEX,index);
      if (field.getBoost() != I_CmsSearchField.BOOST_DEFAULT) {
        fieldElement.addAttribute(A_BOOST,String.valueOf(field.getBoost()));
      }
      if (field.isInExcerptAndStored()) {
        fieldElement.addAttribute(A_EXCERPT,String.valueOf(true));
      }
      if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(field.getDefaultValue())) {
        fieldElement.addAttribute(A_DEFAULT,field.getDefaultValue());
      }
      if (field.getAnalyzer() != null) {
        String className=field.getAnalyzer().getClass().getName();
        if (className.startsWith(CmsSearchManager.LUCENE_ANALYZER)) {
          className=className.substring(CmsSearchManager.LUCENE_ANALYZER.length());
        }
        fieldElement.addAttribute(A_ANALYZER,className);
      }
      for (      I_CmsSearchFieldMapping mapping : field.getMappings()) {
        Element mappingElement=fieldElement.addElement(N_MAPPING);
        mappingElement.addAttribute(A_TYPE,mapping.getType().toString());
        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(mapping.getDefaultValue())) {
          mappingElement.addAttribute(A_DEFAULT,mapping.getDefaultValue());
        }
        if (!mapping.getClass().equals(CmsSearchFieldMapping.class) || (mapping.getType() == CmsSearchFieldMappingType.DYNAMIC)) {
          mappingElement.addAttribute(A_CLASS,mapping.getClass().getName());
        }
        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(mapping.getParam())) {
          mappingElement.setText(mapping.getParam());
        }
      }
    }
  }
  return searchElement;
}
