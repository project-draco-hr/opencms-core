{
  Method method=null;
  String methodName=null;
  boolean hasRed=false;
  boolean hasYellow=false;
  m_pageContext=pageContext;
  m_setupBean=setupBean;
  m_testResults=(List)new ArrayList();
  setGreen();
  try {
    Method[] methods=getClass().getMethods();
    for (int i=0; i < methods.length; i++) {
      method=methods[i];
      methodName=method.getName();
      if (method != null && methodName.startsWith("test")) {
        method.invoke(this,new Object[0]);
      }
    }
  }
 catch (  IllegalAccessException e) {
    System.out.println("[" + getClass().getName() + "] error executing test method: "+ methodName+ ". Method object enforces Java language access control and the underlying method is inaccessible.");
  }
catch (  IllegalArgumentException e) {
    System.out.println("[" + getClass().getName() + "] error executing test method: "+ methodName+ ". The method is an instance method and the specified object argument is not an instance of the class or interface declaring the underlying method (or of a subclass or implementor thereof); if the number of actual and formal parameters differ; if an unwrapping conversion for primitive arguments fails; or if, after possible unwrapping, a parameter value cannot be converted to the corresponding formal parameter type by a method invocation conversion.");
  }
catch (  InvocationTargetException e) {
    System.out.println("[" + getClass().getName() + "] error executing test method: "+ methodName+ ". The underlying method throws an exception.");
  }
catch (  NullPointerException e) {
    System.out.println("[" + getClass().getName() + "] error executing test method: "+ methodName+ ". The specified object is null and the method is an instance method.");
  }
catch (  ExceptionInInitializerError e) {
    System.out.println("[" + getClass().getName() + "] error executing test method: "+ methodName+ ". The initialization provoked by this method fails.");
  }
catch (  Exception e) {
    System.out.println("[" + getClass().getName() + "] error executing test method: "+ methodName+ ". "+ e.toString());
  }
  for (int i=0; i < m_testResults.size(); i++) {
    CmsSetupTestResult testResult=(CmsSetupTestResult)m_testResults.get(i);
    if (testResult.isRed()) {
      hasRed=true;
    }
 else     if (testResult.isYellow()) {
      hasYellow=true;
    }
  }
  if (hasRed) {
    setRed();
  }
 else   if (!hasRed && hasYellow) {
    setYellow();
  }
 else {
    setGreen();
  }
  CmsSetupUtils.writeVersionInfo(m_pageContext.getServletConfig().getServletContext().getServerInfo(),System.getProperty("java.version"),m_pageContext.getServletConfig().getServletContext().getRealPath("/"));
}
