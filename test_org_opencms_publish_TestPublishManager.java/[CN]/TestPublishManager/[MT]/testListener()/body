{
  CmsObject cms=getCmsObject();
  echo("Testing the publish event listener");
  String source="/folder2/subfolder21/image1.gif";
  String destination="/testListener_";
  int max=12;
  for (int i=0; i < max; i++) {
    cms.copyResource(source,destination + (i + 1) + ".gif",CmsResource.COPY_AS_NEW);
  }
  TestPublishEventListener firstListener=new TestPublishEventListener(cms.readResource(destination + "1.gif"));
  OpenCms.getPublishManager().addPublishListener(firstListener);
  TestPublishEventListener lastListener=new TestPublishEventListener(cms.readResource(destination + max + ".gif"));
  OpenCms.getPublishManager().addPublishListener(lastListener);
  long preEnqueueTime=System.currentTimeMillis();
  assertFalse(OpenCms.getPublishManager().isRunning());
  OpenCms.getPublishManager().stopPublishing();
  for (int i=0; i < max; i++) {
    OpenCms.getPublishManager().publishResource(cms,destination + (i + 1) + ".gif");
  }
  assertFalse(OpenCms.getPublishManager().isRunning());
  List queue=OpenCms.getPublishManager().getPublishQueue();
  CmsPublishJobEnqueued publishJob=(CmsPublishJobEnqueued)queue.get(queue.size() - 1);
  OpenCms.getPublishManager().abortPublishJob(cms,publishJob,true);
  OpenCms.getPublishManager().startPublishing();
  OpenCms.getPublishManager().waitWhileRunning();
  assertEquals(0,firstListener.getAborted());
  assertTrue(preEnqueueTime <= firstListener.getEnqueued());
  assertTrue(firstListener.getEnqueued() <= firstListener.getStarted());
  assertTrue(firstListener.getStarted() <= firstListener.getFinished());
  assertEquals(0,lastListener.getStarted());
  assertEquals(0,lastListener.getFinished());
  assertTrue(preEnqueueTime <= lastListener.getEnqueued());
  assertTrue(lastListener.getEnqueued() <= lastListener.getAborted());
  assertTrue(lastListener.getAborted() <= lastListener.getRemoved());
  int[] firstJobsInQueue=firstListener.getJobsInQueueCounter();
  int[] lastJobsInQueue=lastListener.getJobsInQueueCounter();
  assertEquals(1,firstJobsInQueue[0]);
  assertEquals(max,lastJobsInQueue[0]);
  assertEquals(max - 2,firstJobsInQueue[1]);
  assertEquals(0,lastJobsInQueue[1]);
  assertEquals(max - 2,firstJobsInQueue[2]);
  assertEquals(0,lastJobsInQueue[2]);
  assertEquals(0,firstJobsInQueue[3]);
  assertEquals(max,lastJobsInQueue[3]);
  assertEquals(0,firstJobsInQueue[4]);
  assertEquals(max - 1,lastJobsInQueue[4]);
  int[] firstJobsInHistory=firstListener.getJobsInHistoryCounter();
  int[] lastJobsInHistory=lastListener.getJobsInHistoryCounter();
  assertEquals(10,firstJobsInHistory[0]);
  assertEquals(10,firstJobsInHistory[1]);
  assertEquals(10,firstJobsInHistory[2]);
  assertEquals(0,firstJobsInHistory[3]);
  assertEquals(9,firstJobsInHistory[4]);
  assertEquals(10,lastJobsInHistory[0]);
  assertEquals(0,lastJobsInHistory[1]);
  assertEquals(0,lastJobsInHistory[2]);
  assertEquals(10,lastJobsInHistory[3]);
  assertEquals(10,lastJobsInHistory[4]);
  OpenCms.getPublishManager().publishProject(cms);
  OpenCms.getPublishManager().waitWhileRunning();
}
