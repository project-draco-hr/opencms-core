{
  uiBinder.createAndBindUi(this);
  m_passwordButton.setText(Messages.get().key(Messages.GUI_CHANGE_PASSWORD_BUTTON_0));
  m_passwordButton.setButtonStyle(ButtonStyle.TEXT,ButtonColor.BLUE);
  m_passwordButton.setUseMinWidth(true);
  m_passwordButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      CmsChangePasswordWidget.showDialog();
    }
  }
);
  m_tabPanel.add(m_basicTab,Messages.get().key(Messages.GUI_USERSETTINGS_TAB_BASIC_0));
  m_tabPanel.add(m_extendedTab,Messages.get().key(Messages.GUI_USERSETTINGS_TAB_EXTENDED_0));
  m_tabPanel.add(m_accountInfoTab,Messages.get().key(Messages.GUI_USERSETTINGS_TAB_ACCOUNT_0));
  FlexTable table=new FlexTable();
  table.setCellSpacing(5);
  table.setWidth("500px");
  m_accountInfoPanel.add(table);
  int i=0;
  for (  Map.Entry<String,String> entry : userSettings.getAccountInfo().entrySet()) {
    table.getCellFormatter().addStyleName(i,0,style.titleColumn());
    table.setText(i,0,entry.getKey());
    table.setText(i,1,entry.getValue());
    i+=1;
  }
  final FlowPanel[] tabs={m_basicSettingsPanel,m_extendedSettingsPanel,null};
  m_tabPanel.addSelectionHandler(new SelectionHandler<Integer>(){
    public void onSelection(    SelectionEvent<Integer> event){
      final Widget constTarget=tabs[event.getSelectedItem().intValue()];
      if (constTarget == null) {
        return;
      }
      Timer timer=new Timer(){
        @Override public void run(){
          CmsDomUtil.resizeAncestor(constTarget);
        }
      }
;
      timer.schedule(1);
    }
  }
);
  initWidget(m_tabPanel);
}
