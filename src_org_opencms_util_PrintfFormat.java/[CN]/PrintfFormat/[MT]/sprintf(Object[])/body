{
  Enumeration<ConversionSpecification> e=m_vFmt.elements();
  ConversionSpecification cs=null;
  char c=0;
  int i=0;
  StringBuffer sb=new StringBuffer();
  while (e.hasMoreElements()) {
    cs=e.nextElement();
    c=cs.getConversionCharacter();
    if (c == '\0') {
      sb.append(cs.getLiteral());
    }
 else     if (c == '%') {
      sb.append("%");
    }
 else {
      if (cs.isPositionalSpecification()) {
        i=cs.getArgumentPosition() - 1;
        if (cs.isPositionalFieldWidth()) {
          int ifw=cs.getArgumentPositionForFieldWidth() - 1;
          cs.setFieldWidthWithArg(((Integer)o[ifw]).intValue());
        }
        if (cs.isPositionalPrecision()) {
          int ipr=cs.getArgumentPositionForPrecision() - 1;
          cs.setPrecisionWithArg(((Integer)o[ipr]).intValue());
        }
      }
 else {
        if (cs.isVariableFieldWidth()) {
          cs.setFieldWidthWithArg(((Integer)o[i]).intValue());
          i++;
        }
        if (cs.isVariablePrecision()) {
          cs.setPrecisionWithArg(((Integer)o[i]).intValue());
          i++;
        }
      }
      if (o[i] instanceof Byte) {
        sb.append(cs.internalsprintf(((Byte)o[i]).byteValue()));
      }
 else       if (o[i] instanceof Short) {
        sb.append(cs.internalsprintf(((Short)o[i]).shortValue()));
      }
 else       if (o[i] instanceof Integer) {
        sb.append(cs.internalsprintf(((Integer)o[i]).intValue()));
      }
 else       if (o[i] instanceof Long) {
        sb.append(cs.internalsprintf(((Long)o[i]).longValue()));
      }
 else       if (o[i] instanceof Float) {
        sb.append(cs.internalsprintf(((Float)o[i]).floatValue()));
      }
 else       if (o[i] instanceof Double) {
        sb.append(cs.internalsprintf(((Double)o[i]).doubleValue()));
      }
 else       if (o[i] instanceof Character) {
        sb.append(cs.internalsprintf(((Character)o[i]).charValue()));
      }
 else       if (o[i] instanceof String) {
        sb.append(cs.internalsprintf((String)o[i]));
      }
 else {
        sb.append(cs.internalsprintf(o[i]));
      }
      if (!cs.isPositionalSpecification()) {
        i++;
      }
    }
  }
  return sb.toString();
}
