{
  String sx, sy, sz, ret;
  int savePrecision=m_precision;
  int i;
  char[] ca4, ca5;
  if (Double.isInfinite(x)) {
    if (x == Double.POSITIVE_INFINITY) {
      if (m_leadingSign) {
        ca4="+Inf".toCharArray();
      }
 else       if (m_leadingSpace) {
        ca4=" Inf".toCharArray();
      }
 else {
        ca4="Inf".toCharArray();
      }
    }
 else {
      ca4="-Inf".toCharArray();
    }
  }
 else   if (Double.isNaN(x)) {
    if (m_leadingSign) {
      ca4="+NaN".toCharArray();
    }
 else     if (m_leadingSpace) {
      ca4=" NaN".toCharArray();
    }
 else {
      ca4="NaN".toCharArray();
    }
  }
 else {
    if (!m_precisionSet) {
      m_precision=DEFAULT_DIGITS;
    }
    if (m_precision == 0) {
      m_precision=1;
    }
    int ePos=-1;
    if (m_conversionCharacter == 'g') {
      sx=eFormatString(x,'e').trim();
      ePos=sx.indexOf('e');
    }
 else {
      sx=eFormatString(x,'E').trim();
      ePos=sx.indexOf('E');
    }
    i=ePos + 1;
    int expon=0;
    if (sx.charAt(i) == '-') {
      for (++i; i < sx.length(); i++) {
        if (sx.charAt(i) != '0') {
          break;
        }
      }
      if (i < sx.length()) {
        expon=-Integer.parseInt(sx.substring(i));
      }
    }
 else {
      if (sx.charAt(i) == '+') {
        ++i;
      }
      for (; i < sx.length(); i++) {
        if (sx.charAt(i) != '0') {
          break;
        }
      }
      if (i < sx.length()) {
        expon=Integer.parseInt(sx.substring(i));
      }
    }
    if (!m_alternateForm) {
      if (expon >= -4 && expon < m_precision) {
        sy=fFormatString(x).trim();
      }
 else {
        sy=sx.substring(0,ePos);
      }
      i=sy.length() - 1;
      for (; i >= 0; i--) {
        if (sy.charAt(i) != '0') {
          break;
        }
      }
      if (i >= 0 && sy.charAt(i) == '.') {
        i--;
      }
      if (i == -1) {
        sz="0";
      }
 else       if (!Character.isDigit(sy.charAt(i))) {
        sz=sy.substring(0,i + 1) + "0";
      }
 else {
        sz=sy.substring(0,i + 1);
      }
      if (expon >= -4 && expon < m_precision) {
        ret=sz;
      }
 else {
        ret=sz + sx.substring(ePos);
      }
    }
 else {
      if (expon >= -4 && expon < m_precision) {
        ret=fFormatString(x).trim();
      }
 else {
        ret=sx;
      }
    }
    if (m_leadingSpace) {
      if (x >= 0) {
        ret=" " + ret;
      }
    }
    ca4=ret.toCharArray();
  }
  ca5=applyFloatPadding(ca4,false);
  m_precision=savePrecision;
  return new String(ca5);
}
