{
  char[] ca1, ca2, ca3;
  String sx;
  int i, j, k, p;
  int expon=0;
  int ePos, rPos, eSize;
  boolean minusSign=false;
  if (x > 0.0) {
    sx=Double.toString(x);
  }
 else   if (x < 0.0) {
    sx=Double.toString(-x);
    minusSign=true;
  }
 else {
    sx=Double.toString(x);
    if (sx.charAt(0) == '-') {
      minusSign=true;
      sx=sx.substring(1);
    }
  }
  ePos=sx.indexOf('E');
  if (ePos == -1) {
    ePos=sx.indexOf('e');
  }
  rPos=sx.indexOf('.');
  if (ePos != -1) {
    int ie=ePos + 1;
    expon=0;
    if (sx.charAt(ie) == '-') {
      for (++ie; ie < sx.length(); ie++) {
        if (sx.charAt(ie) != '0') {
          break;
        }
      }
      if (ie < sx.length()) {
        expon=-Integer.parseInt(sx.substring(ie));
      }
    }
 else {
      if (sx.charAt(ie) == '+') {
        ++ie;
      }
      for (; ie < sx.length(); ie++) {
        if (sx.charAt(ie) != '0') {
          break;
        }
      }
      if (ie < sx.length()) {
        expon=Integer.parseInt(sx.substring(ie));
      }
    }
  }
  if (rPos != -1) {
    expon+=rPos - 1;
  }
  if (m_precisionSet) {
    p=m_precision;
  }
 else {
    p=m_defaultDigits - 1;
  }
  if (rPos != -1 && ePos != -1) {
    ca1=(sx.substring(0,rPos) + sx.substring(rPos + 1,ePos)).toCharArray();
  }
 else   if (rPos != -1) {
    ca1=(sx.substring(0,rPos) + sx.substring(rPos + 1)).toCharArray();
  }
 else   if (ePos != -1) {
    ca1=sx.substring(0,ePos).toCharArray();
  }
 else {
    ca1=sx.toCharArray();
  }
  boolean carry=false;
  int i0=0;
  if (ca1[0] != '0') {
    i0=0;
  }
 else {
    for (i0=0; i0 < ca1.length; i0++) {
      if (ca1[i0] != '0') {
        break;
      }
    }
  }
  if (i0 + p < ca1.length - 1) {
    carry=checkForCarry(ca1,i0 + p + 1);
    if (carry) {
      carry=startSymbolicCarry(ca1,i0 + p,i0);
    }
    if (carry) {
      ca2=new char[i0 + p + 1];
      ca2[i0]='1';
      for (j=0; j < i0; j++) {
        ca2[j]='0';
      }
      for (i=i0, j=i0 + 1; j < p + 1; i++, j++) {
        ca2[j]=ca1[i];
      }
      expon++;
      ca1=ca2;
    }
  }
  if (Math.abs(expon) < 100 && !m_optionalL) {
    eSize=4;
  }
 else {
    eSize=5;
  }
  if (m_alternateForm || !m_precisionSet || m_precision != 0) {
    ca2=new char[2 + p + eSize];
  }
 else {
    ca2=new char[1 + eSize];
  }
  if (ca1[0] != '0') {
    ca2[0]=ca1[0];
    j=1;
  }
 else {
    for (j=1; j < (ePos == -1 ? ca1.length : ePos); j++) {
      if (ca1[j] != '0') {
        break;
      }
    }
    if ((ePos != -1 && j < ePos) || (ePos == -1 && j < ca1.length)) {
      ca2[0]=ca1[j];
      expon-=j;
      j++;
    }
 else {
      ca2[0]='0';
      j=2;
    }
  }
  if (m_alternateForm || !m_precisionSet || m_precision != 0) {
    ca2[1]='.';
    i=2;
  }
 else {
    i=1;
  }
  for (k=0; k < p && j < ca1.length; j++, i++, k++) {
    ca2[i]=ca1[j];
  }
  for (; i < ca2.length - eSize; i++) {
    ca2[i]='0';
  }
  ca2[i++]=eChar;
  if (expon < 0) {
    ca2[i++]='-';
  }
 else {
    ca2[i++]='+';
  }
  expon=Math.abs(expon);
  if (expon >= 100) {
switch (expon / 100) {
case 1:
      ca2[i]='1';
    break;
case 2:
  ca2[i]='2';
break;
case 3:
ca2[i]='3';
break;
case 4:
ca2[i]='4';
break;
case 5:
ca2[i]='5';
break;
case 6:
ca2[i]='6';
break;
case 7:
ca2[i]='7';
break;
case 8:
ca2[i]='8';
break;
case 9:
ca2[i]='9';
break;
default :
}
i++;
}
switch ((expon % 100) / 10) {
case 0:
ca2[i]='0';
break;
case 1:
ca2[i]='1';
break;
case 2:
ca2[i]='2';
break;
case 3:
ca2[i]='3';
break;
case 4:
ca2[i]='4';
break;
case 5:
ca2[i]='5';
break;
case 6:
ca2[i]='6';
break;
case 7:
ca2[i]='7';
break;
case 8:
ca2[i]='8';
break;
case 9:
ca2[i]='9';
break;
default :
}
i++;
switch (expon % 10) {
case 0:
ca2[i]='0';
break;
case 1:
ca2[i]='1';
break;
case 2:
ca2[i]='2';
break;
case 3:
ca2[i]='3';
break;
case 4:
ca2[i]='4';
break;
case 5:
ca2[i]='5';
break;
case 6:
ca2[i]='6';
break;
case 7:
ca2[i]='7';
break;
case 8:
ca2[i]='8';
break;
case 9:
ca2[i]='9';
break;
default :
}
int nZeros=0;
if (!m_leftJustify && m_leadingZeros) {
int xThousands=0;
if (m_thousands) {
int xlead=0;
if (ca2[0] == '+' || ca2[0] == '-' || ca2[0] == ' ') {
xlead=1;
}
int xdp=xlead;
for (; xdp < ca2.length; xdp++) {
if (ca2[xdp] == '.') {
break;
}
}
xThousands=(xdp - xlead) / 3;
}
if (m_fieldWidthSet) {
nZeros=m_fieldWidth - ca2.length;
}
if ((!minusSign && (m_leadingSign || m_leadingSpace)) || minusSign) {
nZeros--;
}
nZeros-=xThousands;
if (nZeros < 0) {
nZeros=0;
}
}
j=0;
if ((!minusSign && (m_leadingSign || m_leadingSpace)) || minusSign) {
ca3=new char[ca2.length + nZeros + 1];
j++;
}
 else {
ca3=new char[ca2.length + nZeros];
}
if (!minusSign) {
if (m_leadingSign) {
ca3[0]='+';
}
if (m_leadingSpace) {
ca3[0]=' ';
}
}
 else {
ca3[0]='-';
}
for (k=0; k < nZeros; j++, k++) {
ca3[j]='0';
}
for (i=0; i < ca2.length && j < ca3.length; i++, j++) {
ca3[j]=ca2[i];
}
int lead=0;
if (ca3[0] == '+' || ca3[0] == '-' || ca3[0] == ' ') {
lead=1;
}
int dp=lead;
for (; dp < ca3.length; dp++) {
if (ca3[dp] == '.') {
break;
}
}
int nThousands=dp / 3;
if (dp < ca3.length) {
ca3[dp]=m_dfs.getDecimalSeparator();
}
char[] ca4=ca3;
if (m_thousands && nThousands > 0) {
ca4=new char[ca3.length + nThousands + lead];
ca4[0]=ca3[0];
for (i=lead, k=lead; i < dp; i++) {
if (i > 0 && (dp - i) % 3 == 0) {
ca4[k]=m_dfs.getGroupingSeparator();
ca4[k + 1]=ca3[i];
k+=2;
}
 else {
ca4[k]=ca3[i];
k++;
}
}
for (; i < ca3.length; i++, k++) {
ca4[k]=ca3[i];
}
}
return ca4;
}
