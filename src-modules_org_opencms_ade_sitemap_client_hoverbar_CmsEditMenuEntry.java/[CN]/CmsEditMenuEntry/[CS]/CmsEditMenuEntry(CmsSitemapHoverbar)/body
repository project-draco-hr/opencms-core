{
  super(hoverbar);
  setImageClass(I_CmsImageBundle.INSTANCE.contextMenuIcons().properties());
  setLabel(Messages.get().key(Messages.GUI_HOVERBAR_EDIT_0));
  setActive(true);
  setCommand(new Command(){
    /** 
 * @see com.google.gwt.user.client.Command#execute()
 */
    public void execute(){
      final CmsSitemapController controller=getHoverbar().getController();
      final CmsClientSitemapEntry entry=controller.getEntry(getHoverbar().getSitePath());
      final CmsUUID infoId;
      if ((entry.getDefaultFileId() != null) && CmsSitemapView.getInstance().isNavigationMode()) {
        infoId=entry.getDefaultFileId();
      }
 else {
        infoId=entry.getId();
      }
      CmsRpcAction<CmsListInfoBean> action=new CmsRpcAction<CmsListInfoBean>(){
        @Override public void execute(){
          start(300,false);
          CmsCoreProvider.getVfsService().getPageInfo(infoId,this);
        }
        @Override protected void onResponse(        CmsListInfoBean result){
          stop(false);
          CmsEditEntryHandler handler=new CmsEditEntryHandler(controller,entry,CmsSitemapView.getInstance().isNavigationMode());
          handler.setPageInfo(result);
          A_CmsPropertyEditor editor=createEntryEditor(handler);
          editor.setPropertyNames(CmsSitemapView.getInstance().getController().getData().getAllPropertyNames());
          editor.start();
        }
      }
;
      action.execute();
    }
  }
);
}
