{
  String title;
  if (galleryFolder.getOwnProperties().containsKey(CmsClientProperty.PROPERTY_TITLE)) {
    title=galleryFolder.getOwnProperties().get(CmsClientProperty.PROPERTY_TITLE).getStructureValue();
  }
 else {
    title=CmsResource.getName(galleryFolder.getSitePath());
    if (title.endsWith("/")) {
      title=title.substring(0,title.length() - 1);
    }
  }
  CmsListInfoBean infoBean=new CmsListInfoBean(title,galleryFolder.getSitePath(),null);
  CmsListItemWidget result=new CmsGalleryListItemWidget(infoBean);
  result.setIcon(CmsIconUtil.getResourceIconClasses(galleryFolder.getResourceType(),galleryFolder.getSitePath(),false));
  result.addIconClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      CmsSitemapController controller=CmsSitemapView.getInstance().getController();
      CmsClientSitemapEntry entry=controller.getEntryById(getEntryId());
      CmsGalleryConfiguration configuration=new CmsGalleryConfiguration();
      List<String> typeNames=controller.getGalleryType(new Integer(entry.getResourceTypeId())).getContentTypeNames();
      configuration.setSearchTypes(typeNames);
      configuration.setResourceTypes(typeNames);
      configuration.setGalleryMode(GalleryMode.adeView);
      configuration.setTabConfiguration(CmsGalleryTabConfiguration.resolve("selectDoc"));
      configuration.setReferencePath(entry.getSitePath());
      configuration.setGalleryPath(entry.getSitePath());
      CmsGalleryPopup dialog=new CmsGalleryPopup(null,configuration);
      dialog.center();
    }
  }
);
  if ((CmsSitemapView.getInstance().getController().getEntryById(galleryFolder.getStructureId()) == null) || CmsSitemapView.getInstance().getController().getEntryById(galleryFolder.getStructureId()).isEditable()) {
    result.addTitleStyleName(I_CmsSitemapLayoutBundle.INSTANCE.sitemapItemCss().itemTitle());
    result.setTitleEditable(true);
    result.setTitleEditHandler(new I_CmsTitleEditHandler(){
      /** 
 * @see org.opencms.gwt.client.ui.CmsListItemWidget.I_CmsTitleEditHandler#handleEdit(org.opencms.gwt.client.ui.input.CmsLabel,com.google.gwt.user.client.ui.TextBox)
 */
      public void handleEdit(      CmsLabel titleLabel,      TextBox box){
        CmsClientSitemapEntry editEntry=CmsSitemapView.getInstance().getController().getEntryById(getEntryId());
        final String newTitle=box.getText();
        box.removeFromParent();
        if (CmsStringUtil.isEmpty(newTitle)) {
          titleLabel.setVisible(true);
          String dialogTitle=Messages.get().key(Messages.GUI_EDIT_TITLE_ERROR_DIALOG_TITLE_0);
          String dialogText=Messages.get().key(Messages.GUI_TITLE_CANT_BE_EMPTY_0);
          CmsAlertDialog alert=new CmsAlertDialog(dialogTitle,dialogText);
          alert.center();
          return;
        }
        String oldTitle=editEntry.getPropertyValue(CmsClientProperty.PROPERTY_TITLE);
        if (!oldTitle.equals(newTitle)) {
          CmsPropertyModification propMod=new CmsPropertyModification(editEntry.getId(),CmsClientProperty.PROPERTY_TITLE,newTitle,true);
          final List<CmsPropertyModification> propChanges=new ArrayList<CmsPropertyModification>();
          propChanges.add(propMod);
          CmsSitemapController controller=CmsSitemapView.getInstance().getController();
          if (editEntry.isNew() && !editEntry.isRoot()) {
            String urlName=controller.ensureUniqueName(CmsResource.getParentFolder(editEntry.getSitePath()),newTitle);
            controller.editAndChangeName(editEntry,urlName,propChanges,true,CmsReloadMode.reloadEntry);
          }
 else {
            controller.edit(editEntry,propChanges,CmsReloadMode.reloadEntry);
          }
        }
        titleLabel.setVisible(true);
      }
    }
);
  }
  return result;
}
