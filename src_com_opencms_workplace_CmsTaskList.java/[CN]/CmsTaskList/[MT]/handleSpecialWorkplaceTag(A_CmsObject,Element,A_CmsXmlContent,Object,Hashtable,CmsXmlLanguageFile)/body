{
  CmsXmlWpTemplateFile listdef=getTaskListDefinitions(cms);
  String listMethod=n.getAttribute("method");
  Method callingMethod=null;
  Vector list=new Vector();
  try {
    callingMethod=callingObject.getClass().getMethod(listMethod,new Class[]{A_CmsObject.class,CmsXmlLanguageFile.class});
    list=(Vector)callingMethod.invoke(callingObject,new Object[]{cms,lang});
  }
 catch (  NoSuchMethodException exc) {
    throwException("Could not find method " + listMethod + " in calling class "+ callingObject.getClass().getName()+ " for generating lasklist content.",CmsException.C_NOT_FOUND);
  }
catch (  InvocationTargetException targetEx) {
    Throwable e=targetEx.getTargetException();
    if (!(e instanceof CmsException)) {
      throwException("User method " + listMethod + " in calling class "+ callingObject.getClass().getName()+ " throwed an exception. "+ e,CmsException.C_UNKNOWN_EXCEPTION);
    }
 else {
      throw (CmsException)e;
    }
  }
catch (  Exception exc2) {
    throwException("User method " + listMethod + " in calling class "+ callingObject.getClass().getName()+ " was found but could not be invoked. "+ exc2,CmsException.C_XML_NO_USER_METHOD);
  }
  StringBuffer result=new StringBuffer();
  String priority;
  String projectname;
  String stateIcon;
  long startTime;
  long timeout;
  long now=new Date().getTime();
  for (int i=0; i < list.size(); i++) {
    A_CmsTask task=(A_CmsTask)list.elementAt(i);
    projectname=cms.readTask(task.getRoot()).getName();
    priority=listdef.getProcessedXmlDataValue("priority" + task.getPriority(),callingObject);
    startTime=task.getStartTime().getTime();
    timeout=task.getTimeOut().getTime();
    System.err.println("~~~ " + task.getName() + " "+ task.getState()+ " "+ task.getPercentage());
    if (task.getState() == C_TASK_STATE_ENDED) {
      if (timeout > now) {
        stateIcon=listdef.getProcessedXmlDataValue("alertok",callingObject);
      }
 else {
        stateIcon=listdef.getProcessedXmlDataValue("ok",callingObject);
      }
    }
 else     if (task.getPercentage() == 0) {
      stateIcon=listdef.getProcessedXmlDataValue("new",callingObject);
    }
 else {
      if (timeout > now) {
        stateIcon=listdef.getProcessedXmlDataValue("alert",callingObject);
      }
 else {
        stateIcon=listdef.getProcessedXmlDataValue("activ",callingObject);
      }
    }
    listdef.setXmlData("stateicon",stateIcon);
    listdef.setXmlData("priority",priority);
    listdef.setXmlData("task",task.getName());
    listdef.setXmlData("foruser",cms.readAgent(task).getName());
    listdef.setXmlData("forrole",cms.readGroup(task).getName());
    listdef.setXmlData("actuator",cms.readOwner(task).getName());
    listdef.setXmlData("due",Utils.getNiceDate(timeout));
    listdef.setXmlData("from",Utils.getNiceDate(startTime));
    listdef.setXmlData("project",projectname);
    result.append(listdef.getProcessedXmlDataValue("defaulttasklist",callingObject,parameters));
  }
  return result.toString();
}
