{
  CmsResource resource=null;
  List brokenLinks=null;
  Map offlineFilesLookup=null;
  List links=null;
  List validatableResources=null;
  Map invalidResources=new HashMap();
  String resourceName=null;
  int i=CmsDbUtil.UNKNOWN_ID, j=CmsDbUtil.UNKNOWN_ID;
  I_CmsResourceType resourceType=null;
  boolean foundBrokenLinks=false;
  report.println(Messages.get().container(Messages.RPT_HTMLLINK_VALIDATOR_BEGIN_0),I_CmsReport.FORMAT_HEADLINE);
  offlineFilesLookup=new HashMap();
  validatableResources=new ArrayList();
  for (i=0; i < offlineResources.size(); i++) {
    resource=(CmsResource)offlineResources.get(i);
    offlineFilesLookup.put(resource.getRootPath(),resource);
    try {
      resourceType=OpenCms.getResourceManager().getResourceType(resource.getTypeId());
      if ((resourceType instanceof I_CmsXmlDocumentLinkValidatable) && (resource.getState() != CmsResource.STATE_DELETED)) {
        validatableResources.add(resource);
      }
    }
 catch (    CmsException e) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_RETRIEVAL_RESOURCE_1,resourceName),e);
    }
  }
  foundBrokenLinks=false;
  for (i=0, j=validatableResources.size(); i < j; i++) {
    try {
      brokenLinks=null;
      resource=(CmsResource)validatableResources.get(i);
      resourceName=resource.getRootPath();
      resourceType=OpenCms.getResourceManager().getResourceType(resource.getTypeId());
      report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_SUCCESSION_2,new Integer(i + 1),new Integer(j)),I_CmsReport.FORMAT_NOTE);
      report.print(Messages.get().container(Messages.RPT_HTMLLINK_VALIDATING_0),I_CmsReport.FORMAT_NOTE);
      report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_ARGUMENT_1,cms.getRequestContext().removeSiteRoot(resourceName)));
      report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_DOTS_0));
      links=((I_CmsXmlDocumentLinkValidatable)resourceType).findLinks(cms,resource);
      if (links.size() > 0) {
        brokenLinks=validateLinks(links,offlineFilesLookup);
      }
      if (brokenLinks != null && brokenLinks.size() > 0) {
        invalidResources.put(resourceName,brokenLinks);
        foundBrokenLinks=true;
        report.println(Messages.get().container(Messages.RPT_HTMLLINK_FOUND_BROKEN_LINKS_0),I_CmsReport.FORMAT_WARNING);
      }
 else {
        report.println(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_OK_0),I_CmsReport.FORMAT_OK);
      }
    }
 catch (    CmsException e) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_LINK_SEARCH_1,resourceName),e);
    }
  }
  if (foundBrokenLinks) {
    report.println(Messages.get().container(Messages.RPT_BROKEN_LINKS_SUMMARY_BEGIN_0),I_CmsReport.FORMAT_HEADLINE);
    Iterator outer=invalidResources.keySet().iterator();
    while (outer.hasNext()) {
      resourceName=(String)outer.next();
      brokenLinks=(List)invalidResources.get(resourceName);
      report.println(Messages.get().container(Messages.RPT_BROKEN_LINKS_IN_1,resourceName),I_CmsReport.FORMAT_NOTE);
      Iterator inner=brokenLinks.iterator();
      while (inner.hasNext()) {
        report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_ARGUMENT_1,inner.next()),I_CmsReport.FORMAT_WARNING);
      }
      report.println();
    }
    report.println(Messages.get().container(Messages.RPT_BROKEN_LINKS_SUMMARY_END_0),I_CmsReport.FORMAT_HEADLINE);
    report.println(Messages.get().container(Messages.RPT_HTMLLINK_VALIDATOR_ERROR_0),I_CmsReport.FORMAT_ERROR);
  }
  report.println(Messages.get().container(Messages.RPT_HTMLLINK_VALIDATOR_END_0),I_CmsReport.FORMAT_HEADLINE);
  return invalidResources;
}
