{
  Vector changedResources=null;
  Vector changedModuleMasters=null;
  boolean success=false;
  m_driverManager.clearcache();
synchronized (m_driverManager) {
    try {
      m_driverManager.publishProject(this,m_context,publishList,report);
      if (CmsXmlTemplateLoader.getOnlineElementCache() != null) {
        CmsXmlTemplateLoader.getOnlineElementCache().cleanupCache(changedResources,changedModuleMasters);
      }
      m_driverManager.clearcache();
      success=true;
    }
 catch (    Exception e) {
      String stamp1="[" + this.getClass().getName() + ".publishProject()/1] Project:"+ m_context.currentProject().getId()+ " Time:"+ new Date();
      String stamp2="[" + this.getClass().getName() + ".publishProject()/1] User: "+ m_context.currentUser().toString();
      if (OpenCms.getLog(this).isErrorEnabled()) {
        OpenCms.getLog(this).error(stamp1);
        OpenCms.getLog(this).error(stamp2,e);
      }
    }
 finally {
      if (!success) {
        if (CmsXmlTemplateLoader.getOnlineElementCache() != null) {
          CmsXmlTemplateLoader.getOnlineElementCache().clearCache();
        }
      }
      if (m_context.currentProject().getId() == m_context.currentProject().getId() && (m_context.currentProject().getType() == I_CmsConstants.C_PROJECT_TYPE_TEMPORARY)) {
        m_context.setCurrentProject(I_CmsConstants.C_PROJECT_ONLINE_ID);
      }
      Map eventData=(Map)new HashMap();
      eventData.put("report",report);
      eventData.put("publishHistoryId",publishList.getPublishHistoryId().toString());
      eventData.put("context",m_context);
      CmsEvent exportPointEvent=new CmsEvent(this,I_CmsEventListener.EVENT_PUBLISH_PROJECT,eventData,false);
      OpenCms.fireCmsEvent(exportPointEvent);
    }
  }
}
