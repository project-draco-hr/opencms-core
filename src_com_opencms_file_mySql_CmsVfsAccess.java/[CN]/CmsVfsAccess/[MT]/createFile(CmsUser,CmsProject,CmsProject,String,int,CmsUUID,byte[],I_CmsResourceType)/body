{
  if (filename.length() > C_MAX_LENGTH_RESOURCE_NAME) {
    throw new CmsException("[" + this.getClass().getName() + "] "+ "Resourcename too long(>"+ C_MAX_LENGTH_RESOURCE_NAME+ ") ",CmsException.C_BAD_NAME);
  }
  int state=C_STATE_NEW;
  try {
    readFileHeader(project.getId(),filename,false);
    throw new CmsException("[" + this.getClass().getName() + "] ",CmsException.C_FILE_EXISTS);
  }
 catch (  CmsException e) {
    if (e.getType() == CmsException.C_RESOURCE_DELETED) {
      removeFile(project.getId(),filename);
      state=C_STATE_CHANGED;
    }
    if (e.getType() == CmsException.C_FILE_EXISTS) {
      throw e;
    }
  }
  String usedPool;
  String usedStatement;
  if (project.getId() == onlineProject.getId()) {
    usedPool=m_poolNameOnline;
    usedStatement="_ONLINE";
  }
 else {
    usedPool=m_poolName;
    usedStatement="";
  }
  CmsUUID resourceId=new CmsUUID();
  CmsUUID fileId=new CmsUUID();
  PreparedStatement statement=null;
  PreparedStatement statementFileWrite=null;
  Connection con=null;
  try {
    con=DriverManager.getConnection(usedPool);
    statement=con.prepareStatement(m_SqlQueries.get("C_RESOURCES_WRITE" + usedStatement));
    statement.setString(1,resourceId.toString());
    statement.setString(2,parentId.toString());
    statement.setString(3,filename);
    statement.setInt(4,resourceType.getResourceType());
    statement.setInt(5,flags);
    statement.setString(6,user.getId().toString());
    statement.setString(7,user.getDefaultGroupId().toString());
    statement.setInt(8,project.getId());
    statement.setString(9,fileId.toString());
    statement.setInt(10,C_ACCESS_DEFAULT_FLAGS);
    statement.setInt(11,state);
    statement.setString(12,CmsUUID.getNullUUID().toString());
    statement.setInt(13,resourceType.getLauncherType());
    statement.setString(14,resourceType.getLauncherClass());
    statement.setTimestamp(15,new Timestamp(System.currentTimeMillis()));
    statement.setTimestamp(16,new Timestamp(System.currentTimeMillis()));
    statement.setInt(17,contents.length);
    statement.setString(18,user.getId().toString());
    statement.executeUpdate();
    statementFileWrite=con.prepareStatement(m_SqlQueries.get("C_FILES_WRITE" + usedStatement));
    statementFileWrite.setString(1,fileId.toString());
    statementFileWrite.setBytes(2,contents);
    statementFileWrite.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CmsException("[" + this.getClass().getName() + "] "+ e.getMessage(),CmsException.C_SQL_ERROR,e);
  }
 finally {
    m_SqlQueries.closeAll(con,statement,null);
    m_SqlQueries.closeAll(null,statementFileWrite,null);
  }
  return readFile(project.getId(),onlineProject.getId(),filename);
}
