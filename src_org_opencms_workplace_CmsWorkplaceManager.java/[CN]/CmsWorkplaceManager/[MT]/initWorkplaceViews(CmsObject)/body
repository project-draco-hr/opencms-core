{
  List<CmsResource> viewFolders;
  try {
    viewFolders=cms.getSubFolders(CmsWorkplace.VFS_PATH_VIEWS);
  }
 catch (  CmsException e) {
    if ((OpenCms.getRunLevel() > OpenCms.RUNLEVEL_2_INITIALIZING) && LOG.isErrorEnabled()) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_WORKPLACE_INIT_NO_VIEWS_1,CmsWorkplace.VFS_PATH_VIEWS),e);
    }
    viewFolders=new ArrayList<CmsResource>();
  }
  m_views=new ArrayList<CmsWorkplaceView>(viewFolders.size());
  for (int i=0; i < viewFolders.size(); i++) {
    CmsFolder folder=(CmsFolder)viewFolders.get(i);
    String folderPath=cms.getSitePath(folder);
    try {
      String order=cms.readPropertyObject(folderPath,CmsPropertyDefinition.PROPERTY_NAVPOS,false).getValue();
      String key=cms.readPropertyObject(folderPath,CmsPropertyDefinition.PROPERTY_NAVTEXT,false).getValue();
      String viewUri=cms.readPropertyObject(folderPath,CmsPropertyDefinition.PROPERTY_DEFAULT_FILE,false).getValue();
      if (viewUri == null) {
        viewUri=folderPath;
      }
 else       if (!viewUri.startsWith("/")) {
        viewUri=folderPath + viewUri;
      }
      if (order == null) {
        order="" + i;
      }
      Float orderValue;
      try {
        orderValue=Float.valueOf(order);
      }
 catch (      @SuppressWarnings("unused") NumberFormatException e) {
        orderValue=Float.valueOf(i);
      }
      if (key == null) {
        key="View " + i;
        continue;
      }
      CmsWorkplaceView view=new CmsWorkplaceView(key,viewUri,orderValue);
      m_views.add(view);
      if (CmsLog.INIT.isInfoEnabled()) {
        CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_WORKPLACE_VIEW_1,view.getUri()));
      }
    }
 catch (    CmsException e) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_READING_VIEW_FOLDER_FAILED_1,folderPath),e);
    }
  }
  Collections.sort(m_views);
  return m_views;
}
