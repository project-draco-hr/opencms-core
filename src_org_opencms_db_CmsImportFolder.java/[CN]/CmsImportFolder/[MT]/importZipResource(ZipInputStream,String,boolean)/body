{
  boolean isFolder=false;
  int j, r, stop, size;
  int entries=0;
  byte[] buffer=null;
  boolean resourceExists;
  while (true) {
    j=0;
    stop=0;
    ZipEntry entry=zipStreamIn.getNextEntry();
    if (entry == null) {
      break;
    }
    entries++;
    String actImportPath=importPath;
    String title=CmsResource.getName(entry.getName());
    String filename=m_cms.getRequestContext().getFileTranslator().translateResource(entry.getName());
    StringTokenizer st=new StringTokenizer(filename,"/\\");
    int count=st.countTokens();
    String[] path=new String[count];
    if (filename.endsWith("\\") || filename.endsWith("/")) {
      isFolder=true;
    }
 else {
      isFolder=false;
    }
    while (st.hasMoreTokens()) {
      path[j]=st.nextToken();
      j++;
    }
    stop=isFolder ? path.length : (path.length - 1);
    if (noSubFolder) {
      stop=0;
    }
    for (r=0; r < stop; r++) {
      try {
        CmsResource createdFolder=m_cms.createResource(actImportPath + path[r],CmsResourceTypeFolder.RESOURCE_TYPE_ID);
        m_importedResources.add(createdFolder);
      }
 catch (      CmsException e) {
      }
      actImportPath+=path[r];
      actImportPath+="/";
    }
    if (!isFolder) {
      int type=OpenCms.getResourceManager().getDefaultTypeForName(path[path.length - 1]).getTypeId();
      size=new Long(entry.getSize()).intValue();
      if (size == -1) {
        buffer=CmsFileUtil.readFully(zipStreamIn,false);
      }
 else {
        buffer=CmsFileUtil.readFully(zipStreamIn,size,false);
      }
      filename=actImportPath + path[path.length - 1];
      try {
        m_cms.lockResource(filename);
        m_cms.readResource(filename);
        resourceExists=true;
      }
 catch (      CmsException e) {
        resourceExists=false;
      }
      int plainId=OpenCms.getResourceManager().getResourceType(CmsResourceTypePlain.getStaticTypeName()).getTypeId();
      if (resourceExists) {
        CmsResource res=m_cms.readResource(filename,CmsResourceFilter.ALL);
        CmsFile file=m_cms.readFile(res);
        byte[] contents=file.getContents();
        try {
          m_cms.replaceResource(filename,res.getTypeId(),buffer,new ArrayList<CmsProperty>(0));
          m_importedResources.add(res);
        }
 catch (        CmsSecurityException e) {
          m_cms.replaceResource(filename,plainId,buffer,new ArrayList<CmsProperty>(0));
          m_importedResources.add(res);
        }
catch (        CmsDbSqlException sqlExc) {
          file.setContents(contents);
          m_cms.writeFile(file);
          throw sqlExc;
        }
      }
 else {
        String newResName=actImportPath + path[path.length - 1];
        if (title.lastIndexOf('.') != -1) {
          title=title.substring(0,title.lastIndexOf('.'));
        }
        List<CmsProperty> properties=new ArrayList<CmsProperty>(1);
        CmsProperty titleProp=new CmsProperty();
        titleProp.setName(CmsPropertyDefinition.PROPERTY_TITLE);
        if (OpenCms.getWorkplaceManager().isDefaultPropertiesOnStructure()) {
          titleProp.setStructureValue(title);
        }
 else {
          titleProp.setResourceValue(title);
        }
        properties.add(titleProp);
        try {
          m_importedResources.add(m_cms.createResource(newResName,type,buffer,properties));
        }
 catch (        CmsSecurityException e) {
          m_importedResources.add(m_cms.createResource(newResName,plainId,buffer,properties));
        }
catch (        CmsDbSqlException sqlExc) {
          m_cms.lockResource(newResName);
          m_cms.deleteResource(newResName,CmsResource.DELETE_PRESERVE_SIBLINGS);
          throw sqlExc;
        }
      }
    }
    zipStreamIn.closeEntry();
  }
  zipStreamIn.close();
  if (entries > 0) {
    m_validZipFile=true;
  }
}
