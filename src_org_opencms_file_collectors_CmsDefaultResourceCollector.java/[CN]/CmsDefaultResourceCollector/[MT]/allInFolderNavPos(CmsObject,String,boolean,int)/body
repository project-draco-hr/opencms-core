{
  CmsCollectorData data=new CmsCollectorData(param);
  String foldername=CmsResource.getFolderPath(data.getFileName());
  CmsResourceFilter filter=CmsResourceFilter.DEFAULT_FILES.addRequireType(data.getType()).addExcludeFlags(CmsResource.FLAG_TEMPFILE);
  if (data.isExcludeTimerange() && !cms.getRequestContext().getCurrentProject().isOnlineProject()) {
    filter=filter.addExcludeTimerange();
  }
  List<CmsResource> foundResources=cms.readResources(foldername,filter,readSubTree);
  CmsJspNavBuilder navBuilder=new CmsJspNavBuilder(cms);
  Map<CmsJspNavElement,CmsResource> navElementMap=new HashMap<CmsJspNavElement,CmsResource>();
  for (int i=0, n=foundResources.size(); i < n; i++) {
    CmsResource resource=foundResources.get(i);
    CmsJspNavElement navElement=navBuilder.getNavigationForResource(cms.getSitePath(resource));
    if ((navElement != null) && (navElement.getNavPosition() != Float.MAX_VALUE)) {
      navElementMap.put(navElement,resource);
    }
 else     if (LOG.isInfoEnabled()) {
      LOG.info(Messages.get().getBundle().key(Messages.LOG_RESOURCE_WITHOUT_NAVPROP_1,cms.getSitePath(resource)));
    }
  }
  List<CmsJspNavElement> navElementList=new ArrayList<CmsJspNavElement>(navElementMap.keySet());
  List<CmsResource> result=new ArrayList<CmsResource>();
  Collections.sort(navElementList);
  for (int i=0, n=navElementList.size(); i < n; i++) {
    CmsJspNavElement navElement=navElementList.get(i);
    result.add(navElementMap.get(navElement));
  }
  return shrinkToFit(result,data.getCount(),numResults);
}
