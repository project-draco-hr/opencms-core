{
  CmsCollectorData data=new CmsCollectorData(param);
  String foldername=CmsResource.getFolderPath(data.getFileName());
  CmsResourceFilter filter=CmsResourceFilter.DEFAULT.addRequireType(data.getType()).addExcludeFlags(CmsResource.FLAG_TEMPFILE);
  List<CmsResource> foundResources=cms.readResources(foldername,filter,readSubTree);
  Map<CmsJspNavElement,CmsResource> navElementMap=new HashMap<CmsJspNavElement,CmsResource>();
  for (int i=0, n=foundResources.size(); i < n; i++) {
    CmsResource resource=foundResources.get(i);
    CmsJspNavElement navElement=CmsJspNavBuilder.getNavigationForResource(cms,cms.getSitePath(resource));
    if ((navElement != null) && (navElement.getNavPosition() != Float.MAX_VALUE)) {
      navElementMap.put(navElement,resource);
    }
 else     if (LOG.isInfoEnabled()) {
      LOG.info(Messages.get().getBundle().key(Messages.LOG_RESOURCE_WITHOUT_NAVPROP_1,cms.getSitePath(resource)));
    }
  }
  List<CmsResource> result=null;
  if (navElementMap.size() == foundResources.size()) {
    List<CmsJspNavElement> navElementList=new ArrayList<CmsJspNavElement>(navElementMap.keySet());
    result=new ArrayList<CmsResource>();
    Collections.sort(navElementList);
    for (int i=0, n=navElementList.size(); i < n; i++) {
      CmsJspNavElement navElement=navElementList.get(i);
      result.add(navElementMap.get(navElement));
    }
  }
 else {
    result=foundResources;
    Collections.sort(result,I_CmsResource.COMPARE_DATE_RELEASED);
  }
  return shrinkToFit(result,data.getCount());
}
