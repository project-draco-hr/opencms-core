{
  Connection conn=null;
  PreparedStatement stmt=null;
  CmsUUID backupPkId=new CmsUUID();
  byte[] content=null;
  int versionId;
  String lastModifiedName="";
  String createdName="";
  try {
    CmsUser lastModified=m_driverManager.getUserDriver().readUser(resource.getUserLastModified());
    lastModifiedName=lastModified.getName();
    CmsUser created=m_driverManager.getUserDriver().readUser(resource.getUserCreated());
    createdName=created.getName();
  }
 catch (  CmsException e) {
    lastModifiedName=resource.getUserCreated().toString();
    createdName=resource.getUserLastModified().toString();
  }
  try {
    conn=m_sqlManager.getConnectionForBackup();
    versionId=internalReadNextVersionId(resource);
    if (resource.isFile()) {
      if (!this.internalValidateBackupResource(resource,tagId)) {
        if (resource instanceof CmsFile) {
          content=((CmsFile)resource).getContents();
        }
        internalWriteBackupFileContent(backupPkId,resource,content,tagId,versionId);
        stmt=m_sqlManager.getPreparedStatement(conn,"C_RESOURCES_WRITE_BACKUP");
        stmt.setString(1,resource.getResourceId().toString());
        stmt.setInt(2,resource.getTypeId());
        stmt.setInt(3,resource.getFlags());
        stmt.setString(4,resource.getFileId().toString());
        stmt.setInt(5,resource.getLoaderId());
        stmt.setLong(6,publishDate);
        stmt.setString(7,resource.getUserCreated().toString());
        stmt.setLong(8,resource.getDateLastModified());
        stmt.setString(9,resource.getUserLastModified().toString());
        stmt.setInt(10,resource.getState());
        stmt.setInt(11,resource.getLength());
        stmt.setString(12,CmsUUID.getNullUUID().toString());
        stmt.setInt(13,publishProject.getId());
        stmt.setInt(14,1);
        stmt.setInt(15,tagId);
        stmt.setInt(16,versionId);
        stmt.setString(17,backupPkId.toString());
        stmt.setString(18,createdName);
        stmt.setString(19,lastModifiedName);
        stmt.executeUpdate();
        m_sqlManager.closeAll(null,stmt,null);
      }
    }
    stmt=m_sqlManager.getPreparedStatement(conn,"C_STRUCTURE_WRITE_BACKUP");
    stmt.setString(1,resource.getStructureId().toString());
    stmt.setString(2,resource.getParentStructureId().toString());
    stmt.setString(3,resource.getResourceId().toString());
    stmt.setString(4,resource.getName());
    stmt.setInt(5,resource.getState());
    stmt.setLong(6,resource.getDateReleased());
    stmt.setLong(7,resource.getDateExpired());
    stmt.setInt(8,tagId);
    stmt.setInt(9,versionId);
    stmt.setString(10,backupPkId.toString());
    stmt.executeUpdate();
    writeBackupProperties(publishProject,resource,properties,backupPkId,tagId,versionId);
    List existingBackups=readBackupFileHeaders(resource.getResourceId());
    if (existingBackups.size() > maxVersions) {
      deleteBackups(existingBackups,maxVersions);
    }
  }
 catch (  SQLException e) {
    throw m_sqlManager.getCmsException(this,null,CmsException.C_SQL_ERROR,e,false);
  }
catch (  Exception e) {
    throw m_sqlManager.getCmsException(this,null,CmsException.C_UNKNOWN_EXCEPTION,e,false);
  }
 finally {
    m_sqlManager.closeAll(conn,stmt,null);
  }
  content=null;
}
