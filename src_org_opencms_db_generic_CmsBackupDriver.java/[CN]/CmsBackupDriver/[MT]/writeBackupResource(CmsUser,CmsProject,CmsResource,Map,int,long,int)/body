{
  Connection conn=null;
  PreparedStatement stmt=null;
  CmsUUID backupPkId=new CmsUUID();
  byte[] content=null;
  int versionId;
  String lastModifiedName="";
  String createdName="";
  try {
    CmsUser lastModified=m_driverManager.getUserDriver().readUser(resource.getUserLastModified());
    lastModifiedName="[" + lastModified.getName() + "] "+ lastModified.getFirstname()+ " "+ lastModified.getLastname();
    CmsUser created=m_driverManager.getUserDriver().readUser(resource.getUserCreated());
    createdName=created.getName() + " " + created.getFirstname()+ " "+ created.getLastname();
  }
 catch (  CmsException e) {
    lastModifiedName=resource.getUserCreated().toString();
    createdName=resource.getUserLastModified().toString();
  }
  try {
    conn=m_sqlManager.getConnectionForBackup();
    if (resource.isFile()) {
      if (!this.existsBackupResource(resource,tagId)) {
        content=((CmsFile)resource).getContents();
        writeBackupFileContent(backupPkId,resource.getFileId(),content,tagId);
        stmt=m_sqlManager.getPreparedStatement(conn,"C_RESOURCES_WRITE_BACKUP");
        stmt.setString(1,resource.getResourceId().toString());
        stmt.setInt(2,resource.getType());
        stmt.setInt(3,resource.getFlags());
        stmt.setString(4,resource.getFileId().toString());
        stmt.setInt(5,resource.getLoaderId());
        stmt.setTimestamp(6,new Timestamp(publishDate));
        stmt.setString(7,resource.getUserCreated().toString());
        stmt.setTimestamp(8,new Timestamp(resource.getDateLastModified()));
        stmt.setString(9,resource.getUserLastModified().toString());
        stmt.setInt(10,resource.getState());
        stmt.setInt(11,resource.getLength());
        stmt.setString(12,CmsUUID.getNullUUID().toString());
        stmt.setInt(13,publishProject.getId());
        stmt.setInt(14,1);
        stmt.setInt(15,tagId);
        stmt.setString(16,backupPkId.toString());
        stmt.setString(17,createdName);
        stmt.setString(18,lastModifiedName);
        stmt.executeUpdate();
        m_sqlManager.closeAll(null,stmt,null);
      }
    }
    versionId=nextVersionId(resource);
    stmt=m_sqlManager.getPreparedStatement(conn,"C_STRUCTURE_WRITE_BACKUP");
    stmt.setString(1,resource.getId().toString());
    stmt.setString(2,resource.getParentId().toString());
    stmt.setString(3,resource.getResourceId().toString());
    stmt.setString(4,resource.getResourceName());
    stmt.setInt(5,resource.getState());
    stmt.setInt(6,tagId);
    stmt.setInt(7,versionId);
    stmt.setString(8,backupPkId.toString());
    stmt.executeUpdate();
    this.writeBackupProperties(publishProject,resource,properties,backupPkId,tagId);
    List existingBackups=readAllBackupFileHeaders(resource.getId());
    if (existingBackups.size() > maxVersions) {
      deleteBackups(existingBackups,maxVersions);
    }
  }
 catch (  SQLException e) {
    throw m_sqlManager.getCmsException(this,null,CmsException.C_SQL_ERROR,e,false);
  }
catch (  Exception e) {
    throw m_sqlManager.getCmsException(this,null,CmsException.C_UNKNOWN_EXCEPTION,e,false);
  }
 finally {
    m_sqlManager.closeAll(conn,stmt,null);
  }
}
