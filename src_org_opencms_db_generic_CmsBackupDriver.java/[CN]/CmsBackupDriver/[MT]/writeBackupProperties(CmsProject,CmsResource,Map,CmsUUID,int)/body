{
  Connection conn=null;
  PreparedStatement stmt=null;
  try {
    conn=m_sqlManager.getConnectionForBackup();
    stmt=m_sqlManager.getPreparedStatement(conn,"C_PROPERTIES_CREATE_BACKUP");
    Iterator keys=properties.keySet().iterator();
    String key=null;
    boolean hasBatch=false;
    while (keys.hasNext()) {
      hasBatch=true;
      key=(String)keys.next();
      CmsPropertydefinition propdef=m_driverManager.getVfsDriver().readPropertydefinition(key,publishProject.getId(),resource.getType());
      String value=(String)properties.get(key);
      if (propdef == null) {
        throw new CmsException("[" + this.getClass().getName() + "] "+ key,CmsException.C_NOT_FOUND);
      }
 else {
        stmt.setString(1,backupId.toString());
        stmt.setInt(2,m_sqlManager.nextId(m_sqlManager.get("C_TABLE_PROPERTIES_BACKUP")));
        stmt.setInt(3,propdef.getId());
        stmt.setString(4,resource.getResourceId().toString());
        stmt.setString(5,resource.getFullResourceName());
        stmt.setString(6,m_sqlManager.validateNull(value));
        stmt.setInt(7,tagId);
        stmt.addBatch();
      }
    }
    if (hasBatch) {
      stmt.executeBatch();
    }
  }
 catch (  SQLException e) {
    throw m_sqlManager.getCmsException(this,null,CmsException.C_SQL_ERROR,e,false);
  }
catch (  Exception e) {
    throw m_sqlManager.getCmsException(this,null,CmsException.C_UNKNOWN_EXCEPTION,e,false);
  }
 finally {
    m_sqlManager.closeAll(conn,stmt,null);
  }
}
