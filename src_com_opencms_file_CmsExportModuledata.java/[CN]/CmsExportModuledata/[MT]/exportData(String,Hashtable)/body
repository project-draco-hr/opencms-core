{
  System.out.println("Export Module " + classname);
  Enumeration keys=exportedChannels.keys();
  int subId=getContentDefinition(classname,new Class[]{CmsObject.class},new Object[]{m_cms}).getSubId();
  int masterNr=1;
  while (keys.hasMoreElements()) {
    int channelId=Integer.parseInt((String)keys.nextElement());
    try {
      Vector allDatasets=new Vector();
      allDatasets=(Vector)Class.forName(classname).getMethod("readAllByChannel",new Class[]{CmsObject.class,Integer.class,Integer.class}).invoke(null,new Object[]{m_cms,new Integer(channelId),new Integer(subId)});
      for (int i=0; i < allDatasets.size(); i++) {
        CmsMasterDataSet curDataset=(CmsMasterDataSet)allDatasets.elementAt(i);
        writeExportManifestEntries(classname,curDataset,masterNr,subId);
        masterNr++;
      }
    }
 catch (    InvocationTargetException ite) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(A_OpenCms.C_OPENCMS_INFO,"[CmsExportModuledata] " + classname + ".readAllByChannel: Invocation target exception!");
      }
    }
catch (    NoSuchMethodException nsm) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(A_OpenCms.C_OPENCMS_INFO,"[CmsExportModuledata] " + classname + ".readAllByChannel: Requested method was not found!");
      }
    }
catch (    Exception e) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(A_OpenCms.C_OPENCMS_INFO,"[CmsExportModuledata] " + classname + ".readAllByChannel: Other exception! "+ e);
        A_OpenCms.log(A_OpenCms.C_OPENCMS_INFO,e.getMessage());
      }
    }
  }
}
