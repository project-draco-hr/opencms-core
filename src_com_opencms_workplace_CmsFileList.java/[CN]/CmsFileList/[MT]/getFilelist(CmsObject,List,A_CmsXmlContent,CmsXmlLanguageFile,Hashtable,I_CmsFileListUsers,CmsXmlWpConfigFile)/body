{
  StringBuffer output=new StringBuffer();
  String title=null;
  int contextNumber=0;
  String[] tagList={C_CONTEXT_LINK,C_CONTEXT_MENU,C_CONTEXT_NUMBER,C_FILELIST_ICON_VALUE,C_FILELIST_LINK_VALUE,C_FILELIST_LOCK_VALUE,C_FILELIST_NAME_VALUE,C_FILELIST_TITLE_VALUE,C_FILELIST_TYPE_VALUE,C_FILELIST_CHANGED_VALUE,C_FILELIST_SIZE_VALUE,C_FILELIST_STATE_VALUE,C_FILELIST_OWNER_VALUE,C_FILELIST_GROUP_VALUE,C_FILELIST_ACCESS_VALUE,C_FILELIST_LOCKED_VALUE,C_NAME_FILEFOLDER,C_LOCKEDBY,C_FILELIST_CLASS_VALUE};
  String servlets=CmsXmlTemplateLoader.getRequest(cms.getRequestContext()).getServletUrl();
  String currentFilelist=CmsWorkplaceAction.getCurrentFolder(CmsXmlTemplateLoader.getRequest(cms.getRequestContext()).getOriginalRequest());
  if ((currentFilelist == null) || (currentFilelist.length() == 0)) {
    currentFilelist="/";
  }
  CmsXmlWpTemplateFile template=(CmsXmlWpTemplateFile)doc;
  Iterator en=null;
  CmsResource file;
  CmsResource res;
  int filelist=getDefaultPreferences(cms);
  filelist=callingObject.modifyDisplayedColumns(cms,filelist);
  template=checkDisplayedColumns(filelist,template,"");
  template=checkDisplayedColumns(filelist,template,C_FILELIST_SUFFIX_VALUE);
  output.append(template.getProcessedDataValue(C_LIST_HEAD,callingObject));
  for (int i=0; i < tagList.length; i++) {
    template.setData(tagList[i],"");
  }
  en=list.iterator();
  while (en.hasNext()) {
    res=(CmsResource)en.next();
    if (checkAccess(cms,res)) {
      template.setData("PREVIOUS",currentFilelist);
      if (res.isFolder()) {
        template.setData(C_FILELIST_CLASS_VALUE,getStyle(cms,res));
        template.fastSetXmlData(C_CONTEXT_LINK,cms.readAbsolutePath(res));
        template.fastSetXmlData(C_CONTEXT_MENU,getContextMenue(cms,res,template));
        template.fastSetXmlData(C_CONTEXT_NUMBER,new Integer(contextNumber++).toString());
        I_CmsResourceType type=cms.getResourceType(res.getType());
        String icon=getIcon(cms,type,config);
        template.fastSetXmlData(C_FILELIST_ICON_VALUE,CmsXmlTemplateLoader.getRequest(cms.getRequestContext()).getServletUrl() + config.getWpPicturePath() + icon);
        if (res.getState() != I_CmsConstants.C_STATE_DELETED) {
          template.fastSetXmlData(C_FILELIST_LINK_VALUE,cms.readAbsolutePath(res));
        }
 else {
          template.fastSetXmlData(C_FILELIST_LINK_VALUE,"#");
        }
        template.fastSetXmlData(C_FILELIST_LOCK_VALUE,template.getProcessedDataValue(getLock(cms,res,template,lang),callingObject));
        if ((filelist & C_FILELIST_NAME) != 0) {
          template.fastSetXmlData(C_FILELIST_NAME_VALUE,res.getName());
        }
        if ((filelist & C_FILELIST_TITLE) != 0) {
          title="";
          try {
            title=CmsEncoder.escapeXml(cms.readProperty(cms.readAbsolutePath(res),I_CmsConstants.C_PROPERTY_TITLE));
          }
 catch (          CmsException e) {
          }
          if (title == null) {
            title="";
          }
          template.fastSetXmlData(C_FILELIST_TITLE_VALUE,title);
        }
        if ((filelist & C_FILELIST_TYPE) != 0) {
          String typename=type.getResourceTypeName();
          typename=lang.getLanguageValue("fileicon." + typename);
          template.fastSetXmlData(C_FILELIST_TYPE_VALUE,typename);
        }
        if ((filelist & C_FILELIST_DATE_LASTMODIFIED) != 0) {
          long time=res.getDateLastModified();
          template.fastSetXmlData(C_FILELIST_CHANGED_VALUE,getNiceDate(time));
        }
        if ((filelist & C_FILELIST_SIZE) != 0) {
          template.fastSetXmlData(C_FILELIST_SIZE_VALUE,"");
        }
        if ((filelist & C_FILELIST_STATE) != 0) {
          template.fastSetXmlData(C_FILELIST_STATE_VALUE,getState(cms,res,lang));
        }
        if ((filelist & C_FILELIST_LOCKEDBY) != 0) {
          CmsLock lock=cms.getLock(res);
          if (lock.isNullLock()) {
            template.fastSetXmlData(C_FILELIST_LOCKED_VALUE,"");
          }
 else {
            template.fastSetXmlData(C_FILELIST_LOCKED_VALUE,cms.lockedBy(res).getName());
          }
        }
        callingObject.getCustomizedColumnValues(cms,template,res,lang);
        template.fastSetXmlData(C_NAME_FILEFOLDER,template.getProcessedDataValue(getName(cms,res),this));
      }
 else {
        file=res;
        template.fastSetXmlData(C_FILELIST_CLASS_VALUE,getStyle(cms,file));
        template.fastSetXmlData(C_CONTEXT_LINK,cms.readAbsolutePath(res));
        template.fastSetXmlData(C_CONTEXT_MENU,getContextMenue(cms,res,template));
        template.fastSetXmlData(C_CONTEXT_NUMBER,new Integer(contextNumber++).toString());
        I_CmsResourceType type=cms.getResourceType(file.getType());
        String icon=getIcon(cms,type,config);
        template.fastSetXmlData(C_FILELIST_ICON_VALUE,config.getWpPicturePath() + icon);
        if (res.getState() != I_CmsConstants.C_STATE_DELETED) {
          template.fastSetXmlData(C_FILELIST_LINK_VALUE,servlets + cms.readAbsolutePath(file));
        }
 else {
          template.fastSetXmlData(C_FILELIST_LINK_VALUE,"#");
        }
        template.fastSetXmlData(C_FILELIST_LOCK_VALUE,template.getProcessedDataValue(getLock(cms,file,template,lang),callingObject));
        if ((filelist & C_FILELIST_NAME) != 0) {
          template.fastSetXmlData(C_FILELIST_NAME_VALUE,file.getName());
        }
        if ((filelist & C_FILELIST_TITLE) != 0) {
          title="";
          try {
            title=CmsEncoder.escapeXml(cms.readProperty(cms.readAbsolutePath(file),I_CmsConstants.C_PROPERTY_TITLE));
          }
 catch (          CmsException e) {
          }
          if (title == null) {
            title="";
          }
          template.fastSetXmlData(C_FILELIST_TITLE_VALUE,title);
        }
        if ((filelist & C_FILELIST_TYPE) != 0) {
          String typename=type.getResourceTypeName();
          typename=lang.getLanguageValue("fileicon." + typename);
          template.fastSetXmlData(C_FILELIST_TYPE_VALUE,typename);
        }
        if ((filelist & C_FILELIST_DATE_LASTMODIFIED) != 0) {
          long time=file.getDateLastModified();
          template.fastSetXmlData(C_FILELIST_CHANGED_VALUE,getNiceDate(time));
        }
        if ((filelist & C_FILELIST_SIZE) != 0) {
          template.fastSetXmlData(C_FILELIST_SIZE_VALUE,new Integer(file.getLength()).toString());
        }
        if ((filelist & C_FILELIST_STATE) != 0) {
          template.fastSetXmlData(C_FILELIST_STATE_VALUE,getState(cms,file,lang));
        }
        if ((filelist & C_FILELIST_PERMISSIONS) != 0) {
          CmsLock lock=cms.getLock(file);
          if (lock.isNullLock()) {
            template.fastSetXmlData(C_FILELIST_LOCKED_VALUE,"");
          }
 else {
            template.fastSetXmlData(C_FILELIST_LOCKED_VALUE,cms.lockedBy(file).getName());
          }
        }
        callingObject.getCustomizedColumnValues(cms,template,res,lang);
        template.fastSetXmlData(C_NAME_FILEFOLDER,template.getProcessedDataValue(getName(cms,file),this));
      }
      output.append(template.getProcessedDataValue(C_LIST_ENTRY,callingObject));
    }
  }
  return output.toString();
}
