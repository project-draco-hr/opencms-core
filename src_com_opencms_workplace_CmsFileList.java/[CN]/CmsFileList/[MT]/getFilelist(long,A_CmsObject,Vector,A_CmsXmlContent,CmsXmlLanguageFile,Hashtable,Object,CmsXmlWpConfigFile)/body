{
  Hashtable preferences=new Hashtable();
  StringBuffer output=new StringBuffer();
  String foldername;
  String currentFolder;
  String title=null;
  int contextNumber=0;
  String servlets=((HttpServletRequest)cms.getRequestContext().getRequest().getOriginalRequest()).getServletPath();
  CmsXmlWpTemplateFile template=(CmsXmlWpTemplateFile)doc;
  Enumeration enum;
  CmsFile file;
  CmsFolder folder;
  CmsResource res;
  HttpSession session=((HttpServletRequest)cms.getRequestContext().getRequest().getOriginalRequest()).getSession(true);
  preferences=(Hashtable)session.getValue(C_ADDITIONAL_INFO_PREFERENCES);
  if (preferences == null) {
    preferences=getDefaultPreferences();
  }
  int filelist=((Integer)preferences.get(C_USERPREF_FILELIST)).intValue();
  template=checkDisplayedColumns(filelist,template,"");
  output.append(template.getProcessedXmlDataValue(C_LIST_HEAD,callingObject));
  enum=list.elements();
  while (enum.hasMoreElements()) {
    long starttime=System.currentTimeMillis();
    res=(CmsResource)enum.nextElement();
    if (res.isFolder()) {
      folder=(CmsFolder)res;
      template.setXmlData(C_CLASS_VALUE,getStyle(cms,folder));
      template.setXmlData(C_CONTEXT_LINK,res.getAbsolutePath());
      template.setXmlData(C_CONTEXT_MENU,getContextMenue(cms,res,template));
      template.setXmlData(C_CONTEXT_NUMBER,new Integer(contextNumber++).toString());
      A_CmsResourceType type=cms.getResourceType(folder.getType());
      String icon=icon=getIcon(cms,type,config);
      template.setXmlData(C_ICON_VALUE,config.getWpPictureUrl() + icon);
      if (res.getState() != C_STATE_DELETED) {
        template.setXmlData(C_LINK_VALUE,folder.getAbsolutePath());
      }
 else {
        template.setXmlData(C_LINK_VALUE,"#");
      }
      template.setXmlData(C_LOCK_VALUE,template.getProcessedXmlDataValue(getLock(cms,folder,template,lang),callingObject));
      template.setXmlData(C_NAME_VALUE,folder.getName());
      template.setXmlData(C_NAME_FILEFOLDER,template.getProcessedXmlDataValue(getName(cms,folder),this));
      title="";
      try {
        title=cms.readMetainformation(folder.getAbsolutePath(),C_METAINFO_TITLE);
      }
 catch (      CmsException e) {
      }
      if (title == null) {
        title="";
      }
      template.setXmlData(C_TITLE_VALUE,title);
      String typename=type.getResourceName();
      typename=lang.getDataValue("fileicon." + typename);
      template.setXmlData(C_TYPE_VALUE,typename);
      long time=folder.getDateLastModified();
      template.setXmlData(C_CHANGED_VALUE,getNiceDate(time));
      template.setXmlData(C_SIZE_VALUE,"");
      template.setXmlData(C_STATE_VALUE,getState(cms,folder,lang));
      A_CmsUser owner=cms.readOwner(folder);
      template.setXmlData(C_OWNER_VALUE,owner.getName());
      A_CmsGroup group=cms.readGroup(folder);
      template.setXmlData(C_GROUP_VALUE,group.getName());
      int access=folder.getAccessFlags();
      template.setXmlData(C_ACCESS_VALUE,getAccessFlags(access));
      int lockedby=folder.isLockedBy();
      if (lockedby == C_UNKNOWN_ID) {
        template.setXmlData(C_LOCKED_VALUE,"");
      }
 else {
        template.setXmlData(C_LOCKED_VALUE,cms.lockedBy(folder).getName());
      }
      template=checkDisplayedColumns(filelist,template,C_SUFFIX_VALUE);
      output.append(template.getProcessedXmlDataValue(C_LIST_ENTRY,callingObject));
    }
 else {
      file=(CmsFile)res;
      System.err.println("Starting filelist " + res.getName());
      template.setXmlData(C_CLASS_VALUE,getStyle(cms,file));
      System.err.println((System.currentTimeMillis() - timer) + " Set Style");
      template.setXmlData(C_CONTEXT_LINK,res.getAbsolutePath());
      template.setXmlData(C_CONTEXT_MENU,getContextMenue(cms,res,template));
      template.setXmlData(C_CONTEXT_NUMBER,new Integer(contextNumber++).toString());
      A_CmsResourceType type=cms.getResourceType(file.getType());
      String icon=getIcon(cms,type,config);
      template.setXmlData(C_ICON_VALUE,config.getWpPictureUrl() + icon);
      System.err.println((System.currentTimeMillis() - timer) + " Set Icon");
      if (res.getState() != C_STATE_DELETED) {
        template.setXmlData(C_LINK_VALUE,servlets + file.getAbsolutePath());
      }
 else {
        template.setXmlData(C_LINK_VALUE,"#");
      }
      System.err.println((System.currentTimeMillis() - timer) + " Set Link");
      template.setXmlData(C_LOCK_VALUE,template.getProcessedXmlDataValue(getLock(cms,file,template,lang),callingObject));
      System.err.println((System.currentTimeMillis() - timer) + " Set Lock");
      template.setXmlData(C_NAME_VALUE,file.getName());
      template.setXmlData(C_NAME_FILEFOLDER,template.getProcessedXmlDataValue(getName(cms,file),this));
      System.err.println((System.currentTimeMillis() - timer) + " Set Filename");
      title="";
      try {
        title=cms.readMetainformation(file.getAbsolutePath(),C_METAINFO_TITLE);
      }
 catch (      CmsException e) {
      }
      if (title == null) {
        title="";
      }
      template.setXmlData(C_TITLE_VALUE,title);
      System.err.println((System.currentTimeMillis() - timer) + " Set Title");
      type=cms.getResourceType(file.getType());
      String typename=type.getResourceName();
      typename=lang.getDataValue("fileicon." + typename);
      template.setXmlData(C_TYPE_VALUE,typename);
      System.err.println((System.currentTimeMillis() - timer) + " Set Time");
      long time=file.getDateLastModified();
      template.setXmlData(C_CHANGED_VALUE,getNiceDate(time));
      System.err.println((System.currentTimeMillis() - timer) + " Set Date");
      template.setXmlData(C_SIZE_VALUE,new Integer(file.getLength()).toString());
      System.err.println((System.currentTimeMillis() - timer) + " Set Size");
      template.setXmlData(C_STATE_VALUE,getState(cms,file,lang));
      System.err.println((System.currentTimeMillis() - timer) + " Set State");
      A_CmsUser owner=cms.readOwner(file);
      template.setXmlData(C_OWNER_VALUE,owner.getName());
      System.err.println((System.currentTimeMillis() - timer) + " Set Owner");
      A_CmsGroup group=cms.readGroup(file);
      template.setXmlData(C_GROUP_VALUE,group.getName());
      System.err.println((System.currentTimeMillis() - timer) + " Set Group");
      int access=file.getAccessFlags();
      template.setXmlData(C_ACCESS_VALUE,getAccessFlags(access));
      System.err.println((System.currentTimeMillis() - timer) + " Set Flags");
      int lockedby=file.isLockedBy();
      if (lockedby == C_UNKNOWN_ID) {
        template.setXmlData(C_LOCKED_VALUE,"");
      }
 else {
        template.setXmlData(C_LOCKED_VALUE,cms.lockedBy(file).getName());
      }
      System.err.println((System.currentTimeMillis() - timer) + " Set Lockedby");
      template=checkDisplayedColumns(filelist,template,C_SUFFIX_VALUE);
      System.err.println((System.currentTimeMillis() - timer) + " Checkoutput");
      output.append(template.getProcessedXmlDataValue(C_LIST_ENTRY,callingObject));
      System.err.println((System.currentTimeMillis() - timer) + " Create Output");
      System.err.println("Time for generating " + res.getName() + ":"+ (System.currentTimeMillis() - starttime));
    }
  }
  System.err.println("Time used to build filelist: " + ((System.currentTimeMillis() - timer)));
  return output.toString();
}
