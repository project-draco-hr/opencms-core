{
  StringBuffer output=new StringBuffer();
  String foldername;
  String currentFolder;
  String title=null;
  int contextNumber=0;
  String[] tagList={C_CONTEXT_LINK,C_CONTEXT_MENU,C_CONTEXT_NUMBER,C_FILELIST_ICON_VALUE,C_FILELIST_LINK_VALUE,C_FILELIST_LOCK_VALUE,C_FILELIST_NAME_VALUE,C_FILELIST_TITLE_VALUE,C_FILELIST_TYPE_VALUE,C_FILELIST_CHANGED_VALUE,C_FILELIST_SIZE_VALUE,C_FILELIST_STATE_VALUE,C_FILELIST_OWNER_VALUE,C_FILELIST_GROUP_VALUE,C_FILELIST_ACCESS_VALUE,C_FILELIST_LOCKED_VALUE,C_NAME_FILEFOLDER,C_LOCKEDBY,C_FILELIST_CLASS_VALUE};
  String servlets=((HttpServletRequest)cms.getRequestContext().getRequest().getOriginalRequest()).getServletPath();
  I_CmsSession session=cms.getRequestContext().getSession(true);
  String currentFilelist=(String)session.getValue(C_PARA_FILELIST);
  if ((currentFilelist == null) || (currentFilelist.length() == 0)) {
    currentFilelist="/";
  }
  CmsXmlWpTemplateFile template=(CmsXmlWpTemplateFile)doc;
  Enumeration enum;
  CmsResource file;
  CmsFolder folder;
  CmsResource res;
  int filelist=getDefaultPreferences(cms);
  filelist=callingObject.modifyDisplayedColumns(cms,filelist);
  template=checkDisplayedColumns(filelist,template,"");
  template=checkDisplayedColumns(filelist,template,C_FILELIST_SUFFIX_VALUE);
  output.append(template.getProcessedDataValue(C_LIST_HEAD,callingObject));
  for (int i=0; i < tagList.length; i++) {
    template.setData(tagList[i],"");
  }
  enum=list.elements();
  while (enum.hasMoreElements()) {
    res=(CmsResource)enum.nextElement();
    if (checkAccess(cms,res)) {
      template.setData("PREVIOUS",currentFilelist);
      if (res.isFolder()) {
        template.setData(C_FILELIST_CLASS_VALUE,getStyle(cms,res));
        template.fastSetXmlData(C_CONTEXT_LINK,res.getAbsolutePath());
        template.fastSetXmlData(C_CONTEXT_MENU,getContextMenue(cms,res,template));
        template.fastSetXmlData(C_CONTEXT_NUMBER,new Integer(contextNumber++).toString());
        I_CmsResourceType type=cms.getResourceType(res.getType());
        String icon=getIcon(cms,type,config);
        template.fastSetXmlData(C_FILELIST_ICON_VALUE,config.getWpPictureUrl() + icon);
        if (res.getState() != C_STATE_DELETED) {
          template.fastSetXmlData(C_FILELIST_LINK_VALUE,res.getAbsolutePath());
        }
 else {
          template.fastSetXmlData(C_FILELIST_LINK_VALUE,"#");
        }
        template.fastSetXmlData(C_FILELIST_LOCK_VALUE,template.getProcessedDataValue(getLock(cms,res,template,lang),callingObject));
        if ((filelist & C_FILELIST_NAME) != 0) {
          template.fastSetXmlData(C_FILELIST_NAME_VALUE,res.getName());
        }
        if ((filelist & C_FILELIST_TITLE) != 0) {
          title="";
          try {
            title=cms.readProperty(res.getAbsolutePath(),C_PROPERTY_TITLE);
          }
 catch (          CmsException e) {
          }
          if (title == null) {
            title="";
          }
          template.fastSetXmlData(C_FILELIST_TITLE_VALUE,title);
        }
        if ((filelist & C_FILELIST_TYPE) != 0) {
          String typename=type.getResourceTypeName();
          typename=lang.getDataValue("fileicon." + typename);
          template.fastSetXmlData(C_FILELIST_TYPE_VALUE,typename);
        }
        if ((filelist & C_FILELIST_CHANGED) != 0) {
          long time=res.getDateLastModified();
          template.fastSetXmlData(C_FILELIST_CHANGED_VALUE,getNiceDate(time));
        }
        if ((filelist & C_FILELIST_SIZE) != 0) {
          template.fastSetXmlData(C_FILELIST_SIZE_VALUE,"");
        }
        if ((filelist & C_FILELIST_STATE) != 0) {
          template.fastSetXmlData(C_FILELIST_STATE_VALUE,getState(cms,res,lang));
        }
        if ((filelist & C_FILELIST_OWNER) != 0) {
          CmsUser owner=cms.readOwner(res);
          template.fastSetXmlData(C_FILELIST_OWNER_VALUE,owner.getName());
        }
        if ((filelist & C_FILELIST_GROUP) != 0) {
          CmsGroup group=cms.readGroup(res);
          template.fastSetXmlData(C_FILELIST_GROUP_VALUE,group.getName());
        }
        if ((filelist & C_FILELIST_ACCESS) != 0) {
          int access=res.getAccessFlags();
          template.fastSetXmlData(C_FILELIST_ACCESS_VALUE,getAccessFlags(access));
        }
        if ((filelist & C_FILELIST_LOCKED) != 0) {
          int lockedby=res.isLockedBy();
          if (lockedby == C_UNKNOWN_ID) {
            template.fastSetXmlData(C_FILELIST_LOCKED_VALUE,"");
          }
 else {
            template.fastSetXmlData(C_FILELIST_LOCKED_VALUE,cms.lockedBy(res).getName());
          }
        }
        callingObject.getCustomizedColumnValues(cms,template,res,lang);
        template.fastSetXmlData(C_NAME_FILEFOLDER,template.getProcessedDataValue(getName(cms,res),this));
      }
 else {
        file=res;
        template.fastSetXmlData(C_FILELIST_CLASS_VALUE,getStyle(cms,file));
        template.fastSetXmlData(C_CONTEXT_LINK,res.getAbsolutePath());
        template.fastSetXmlData(C_CONTEXT_MENU,getContextMenue(cms,res,template));
        template.fastSetXmlData(C_CONTEXT_NUMBER,new Integer(contextNumber++).toString());
        I_CmsResourceType type=cms.getResourceType(file.getType());
        String icon=getIcon(cms,type,config);
        template.fastSetXmlData(C_FILELIST_ICON_VALUE,config.getWpPictureUrl() + icon);
        if (res.getState() != C_STATE_DELETED) {
          template.fastSetXmlData(C_FILELIST_LINK_VALUE,servlets + file.getAbsolutePath());
        }
 else {
          template.fastSetXmlData(C_FILELIST_LINK_VALUE,"#");
        }
        template.fastSetXmlData(C_FILELIST_LOCK_VALUE,template.getProcessedDataValue(getLock(cms,file,template,lang),callingObject));
        if ((filelist & C_FILELIST_NAME) != 0) {
          template.fastSetXmlData(C_FILELIST_NAME_VALUE,file.getName());
        }
        if ((filelist & C_FILELIST_TITLE) != 0) {
          title="";
          try {
            title=cms.readProperty(file.getAbsolutePath(),C_PROPERTY_TITLE);
          }
 catch (          CmsException e) {
          }
          if (title == null) {
            title="";
          }
          template.fastSetXmlData(C_FILELIST_TITLE_VALUE,title);
        }
        if ((filelist & C_FILELIST_TYPE) != 0) {
          String typename=type.getResourceTypeName();
          typename=lang.getDataValue("fileicon." + typename);
          template.fastSetXmlData(C_FILELIST_TYPE_VALUE,typename);
        }
        if ((filelist & C_FILELIST_CHANGED) != 0) {
          long time=file.getDateLastModified();
          template.fastSetXmlData(C_FILELIST_CHANGED_VALUE,getNiceDate(time));
        }
        if ((filelist & C_FILELIST_SIZE) != 0) {
          template.fastSetXmlData(C_FILELIST_SIZE_VALUE,new Integer(file.getLength()).toString());
        }
        if ((filelist & C_FILELIST_STATE) != 0) {
          template.fastSetXmlData(C_FILELIST_STATE_VALUE,getState(cms,file,lang));
        }
        if ((filelist & C_FILELIST_OWNER) != 0) {
          CmsUser owner=cms.readOwner(file);
          template.fastSetXmlData(C_FILELIST_OWNER_VALUE,owner.getName());
        }
        if ((filelist & C_FILELIST_GROUP) != 0) {
          CmsGroup group=cms.readGroup(file);
          template.fastSetXmlData(C_FILELIST_GROUP_VALUE,group.getName());
        }
        if ((filelist & C_FILELIST_ACCESS) != 0) {
          int access=file.getAccessFlags();
          template.fastSetXmlData(C_FILELIST_ACCESS_VALUE,getAccessFlags(access));
        }
        if ((filelist & C_FILELIST_ACCESS) != 0) {
          int lockedby=file.isLockedBy();
          if (lockedby == C_UNKNOWN_ID) {
            template.fastSetXmlData(C_FILELIST_LOCKED_VALUE,"");
          }
 else {
            template.fastSetXmlData(C_FILELIST_LOCKED_VALUE,cms.lockedBy(file).getName());
          }
        }
        callingObject.getCustomizedColumnValues(cms,template,res,lang);
        template.fastSetXmlData(C_NAME_FILEFOLDER,template.getProcessedDataValue(getName(cms,file),this));
      }
      output.append(template.getProcessedDataValue(C_LIST_ENTRY,callingObject));
    }
  }
  return output.toString();
}
