{
  ResultSet res=null;
  CmsTask task=null;
  PreparedStatement statement=null;
  Connection con=null;
  try {
    con=DriverManager.getConnection(m_poolName);
    statement=con.prepareStatement(m_SqlQueries.get("C_TASK_READ"));
    statement.setInt(1,id);
    res=statement.executeQuery();
    if (res.next()) {
      int autofinish=res.getInt(m_SqlQueries.get("C_TASK_AUTOFINISH"));
      java.sql.Timestamp endtime=SqlHelper.getTimestamp(res,m_SqlQueries.get("C_TASK_ENDTIME"));
      int escalationtype=res.getInt(m_SqlQueries.get("C_TASK_ESCALATIONTYPE"));
      id=res.getInt(m_SqlQueries.get("C_TASK_ID"));
      int initiatoruser=res.getInt(m_SqlQueries.get("C_TASK_INITIATORUSER"));
      int milestone=res.getInt(m_SqlQueries.get("C_TASK_MILESTONE"));
      String name=res.getString(m_SqlQueries.get("C_TASK_NAME"));
      int originaluser=res.getInt(m_SqlQueries.get("C_TASK_ORIGINALUSER"));
      int agentuser=res.getInt(m_SqlQueries.get("C_TASK_AGENTUSER"));
      int parent=res.getInt(m_SqlQueries.get("C_TASK_PARENT"));
      int percentage=res.getInt(m_SqlQueries.get("C_TASK_PERCENTAGE"));
      String permission=res.getString(m_SqlQueries.get("C_TASK_PERMISSION"));
      int priority=res.getInt(m_SqlQueries.get("C_TASK_PRIORITY"));
      int role=res.getInt(m_SqlQueries.get("C_TASK_ROLE"));
      int root=res.getInt(m_SqlQueries.get("C_TASK_ROOT"));
      java.sql.Timestamp starttime=SqlHelper.getTimestamp(res,m_SqlQueries.get("C_TASK_STARTTIME"));
      int state=res.getInt(m_SqlQueries.get("C_TASK_STATE"));
      int tasktype=res.getInt(m_SqlQueries.get("C_TASK_TASKTYPE"));
      java.sql.Timestamp timeout=SqlHelper.getTimestamp(res,m_SqlQueries.get("C_TASK_TIMEOUT"));
      java.sql.Timestamp wakeuptime=SqlHelper.getTimestamp(res,m_SqlQueries.get("C_TASK_WAKEUPTIME"));
      String htmllink=res.getString(m_SqlQueries.get("C_TASK_HTMLLINK"));
      task=new CmsTask(id,name,state,tasktype,root,parent,initiatoruser,role,agentuser,originaluser,starttime,wakeuptime,timeout,endtime,percentage,permission,priority,escalationtype,htmllink,milestone,autofinish);
    }
  }
 catch (  SQLException exc) {
    throw new CmsException(exc.getMessage(),CmsException.C_SQL_ERROR,exc);
  }
catch (  Exception exc) {
    throw new CmsException(exc.getMessage(),CmsException.C_UNKNOWN_EXCEPTION,exc);
  }
 finally {
    if (res != null) {
      try {
        res.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (con != null) {
      try {
        con.close();
      }
 catch (      SQLException exc) {
      }
    }
  }
  return task;
}
