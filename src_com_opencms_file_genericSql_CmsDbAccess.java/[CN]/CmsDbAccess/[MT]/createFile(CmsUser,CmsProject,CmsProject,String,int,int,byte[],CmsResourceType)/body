{
  int state=C_STATE_NEW;
  try {
    readFileHeader(project.getId(),filename);
  }
 catch (  CmsException e) {
    if (e.getType() == CmsException.C_RESOURCE_DELETED) {
      removeFile(project.getId(),filename);
      state=C_STATE_CHANGED;
    }
  }
  int resourceId=nextId(C_TABLE_RESOURCES);
  int fileId=nextId(C_TABLE_FILES);
  PreparedStatement statement=null;
  PreparedStatement statementFileWrite=null;
  try {
    statement=m_pool.getPreparedStatement(C_RESOURCES_WRITE_KEY);
    statement.setInt(1,resourceId);
    statement.setInt(2,parentId);
    statement.setString(3,filename);
    statement.setInt(4,resourceType.getResourceType());
    statement.setInt(5,flags);
    statement.setInt(6,user.getId());
    statement.setInt(7,user.getDefaultGroupId());
    statement.setInt(8,project.getId());
    statement.setInt(9,fileId);
    statement.setInt(10,C_ACCESS_DEFAULT_FLAGS);
    statement.setInt(11,state);
    statement.setInt(12,C_UNKNOWN_ID);
    statement.setInt(13,resourceType.getLauncherType());
    statement.setString(14,resourceType.getLauncherClass());
    statement.setTimestamp(15,new Timestamp(System.currentTimeMillis()));
    statement.setTimestamp(16,new Timestamp(System.currentTimeMillis()));
    statement.setInt(17,contents.length);
    statement.setInt(18,user.getId());
    statement.executeUpdate();
    statementFileWrite=m_pool.getPreparedStatement(C_FILES_WRITE_KEY);
    statementFileWrite.setInt(1,fileId);
    statementFileWrite.setBytes(2,contents);
    statementFileWrite.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CmsException("[" + this.getClass().getName() + "] "+ e.getMessage(),CmsException.C_SQL_ERROR,e);
  }
 finally {
    if (statement != null) {
      m_pool.putPreparedStatement(C_RESOURCES_WRITE_KEY,statement);
    }
    if (statementFileWrite != null) {
      m_pool.putPreparedStatement(C_FILES_WRITE_KEY,statementFileWrite);
    }
  }
  return readFile(project.getId(),onlineProject.getId(),filename);
}
