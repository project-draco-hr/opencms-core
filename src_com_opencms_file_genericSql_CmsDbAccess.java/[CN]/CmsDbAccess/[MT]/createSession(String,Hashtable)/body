{
  byte[] value=null;
  Connection con=null;
  PreparedStatement statement=null;
  try {
    StringBuffer notSerializable=new StringBuffer();
    ByteArrayOutputStream bout=new ByteArrayOutputStream();
    ObjectOutputStream oout=new ObjectOutputStream(bout);
    Enumeration keys=data.keys();
    while (keys.hasMoreElements()) {
      Object key=keys.nextElement();
      Object sessionValue=data.get(key);
      if (sessionValue instanceof Serializable) {
        oout.writeObject(key);
        oout.writeObject(sessionValue);
      }
 else {
        notSerializable.append(key);
        notSerializable.append("; ");
      }
    }
    oout.writeObject(data);
    oout.close();
    value=bout.toByteArray();
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[CmsDbAccess] warning, following entrys are not serializeable in the session: " + notSerializable.toString() + ".");
    }
    con=DriverManager.getConnection(m_poolName);
    statement=con.prepareStatement(m_cq.C_SESSION_CREATE);
    statement.setString(1,sessionId);
    statement.setTimestamp(2,new java.sql.Timestamp(System.currentTimeMillis()));
    statement.setBytes(3,value);
    statement.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CmsException("[" + this.getClass().getName() + "]"+ e.getMessage(),CmsException.C_SQL_ERROR,e);
  }
catch (  IOException e) {
    throw new CmsException("[" + this.getClass().getName() + "]:"+ CmsException.C_SERIALIZATION,e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (con != null) {
      try {
        con.close();
      }
 catch (      SQLException exc) {
      }
    }
  }
}
