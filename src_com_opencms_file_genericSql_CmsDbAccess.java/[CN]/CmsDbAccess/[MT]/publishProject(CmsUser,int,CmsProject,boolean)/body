{
  CmsAccessFilesystem discAccess=new CmsAccessFilesystem(m_exportpointStorage);
  CmsFolder currentFolder=null;
  CmsFile currentFile=null;
  CmsFolder newFolder=null;
  CmsFile newFile=null;
  Vector offlineFolders;
  Vector offlineFiles;
  Vector deletedFolders=new Vector();
  Hashtable folderIdIndex=new Hashtable();
  Vector changedResources=new Vector();
  CmsProject currentProject=readProject(projectId);
  int versionId=1;
  long publishDate=System.currentTimeMillis();
  if (enableHistory) {
    versionId=getBackupVersionId();
    backupProject(currentProject,versionId,publishDate,user);
  }
  offlineFolders=readFolders(projectId,false,true);
  for (int i=0; i < offlineFolders.size(); i++) {
    currentFolder=((CmsFolder)offlineFolders.elementAt(i));
    if (currentFolder.isLocked()) {
    }
 else     if (currentFolder.getState() == C_STATE_DELETED) {
      deletedFolders.addElement(currentFolder);
      changedResources.addElement(currentFolder.getAbsolutePath());
    }
 else     if (currentFolder.getState() == C_STATE_NEW) {
      String exportKey=checkExport(currentFolder.getAbsolutePath());
      if (exportKey != null) {
        discAccess.createFolder(currentFolder.getAbsolutePath(),exportKey);
      }
      Integer parentId=(Integer)folderIdIndex.get(new Integer(currentFolder.getParentId()));
      if (parentId == null) {
        CmsFolder currentOnlineParent=readFolder(onlineProject.getId(),currentFolder.getParent());
        parentId=new Integer(currentOnlineParent.getResourceId());
        folderIdIndex.put(new Integer(currentFolder.getParentId()),parentId);
      }
      try {
        newFolder=createFolder(user,onlineProject,onlineProject,currentFolder,parentId.intValue(),currentFolder.getAbsolutePath());
        newFolder.setState(C_STATE_UNCHANGED);
        updateResourcestate(newFolder);
      }
 catch (      CmsException e) {
        if (e.getType() == CmsException.C_FILE_EXISTS) {
          CmsFolder onlineFolder=null;
          try {
            onlineFolder=readFolder(onlineProject.getId(),currentFolder.getAbsolutePath());
          }
 catch (          CmsException exc) {
            throw exc;
          }
          PreparedStatement statement=null;
          Connection con=null;
          try {
            con=DriverManager.getConnection(m_poolNameOnline);
            statement=con.prepareStatement(m_cq.get("C_RESOURCES_UPDATE_ONLINE"));
            statement.setInt(1,currentFolder.getType());
            statement.setInt(2,currentFolder.getFlags());
            statement.setInt(3,currentFolder.getOwnerId());
            statement.setInt(4,currentFolder.getGroupId());
            statement.setInt(5,onlineFolder.getProjectId());
            statement.setInt(6,currentFolder.getAccessFlags());
            statement.setInt(7,C_STATE_UNCHANGED);
            statement.setInt(8,currentFolder.isLockedBy());
            statement.setInt(9,currentFolder.getLauncherType());
            statement.setString(10,currentFolder.getLauncherClassname());
            statement.setTimestamp(11,new Timestamp(currentFolder.getDateLastModified()));
            statement.setInt(12,currentFolder.getResourceLastModifiedBy());
            statement.setInt(13,0);
            statement.setInt(14,onlineFolder.getFileId());
            statement.setInt(15,onlineFolder.getResourceId());
            statement.executeUpdate();
            newFolder=readFolder(onlineProject.getId(),currentFolder.getAbsolutePath());
          }
 catch (          SQLException sqle) {
            throw new CmsException("[" + this.getClass().getName() + "] "+ sqle.getMessage(),CmsException.C_SQL_ERROR,sqle);
          }
 finally {
            if (statement != null) {
              try {
                statement.close();
              }
 catch (              SQLException exc) {
              }
            }
            if (con != null) {
              try {
                con.close();
              }
 catch (              SQLException exc) {
              }
            }
          }
        }
 else {
          throw e;
        }
      }
      folderIdIndex.put(new Integer(currentFolder.getResourceId()),new Integer(newFolder.getResourceId()));
      Hashtable props=new Hashtable();
      try {
        props=readAllProperties(projectId,currentFolder,currentFolder.getType());
        writeProperties(props,onlineProject.getId(),newFolder,newFolder.getType());
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[CmsDbAccess] error publishing, copy properties for " + newFolder.toString() + " Message= "+ exc.getMessage());
        }
      }
      if (enableHistory) {
        backupResource(projectId,currentFolder,new byte[0],props,versionId,publishDate);
      }
      currentFolder.setState(C_STATE_UNCHANGED);
      updateResourcestate(currentFolder);
    }
 else     if (currentFolder.getState() == C_STATE_CHANGED) {
      changedResources.addElement(currentFolder.getAbsolutePath());
      String exportKey=checkExport(currentFolder.getAbsolutePath());
      if (exportKey != null) {
        discAccess.createFolder(currentFolder.getAbsolutePath(),exportKey);
      }
      CmsFolder onlineFolder=null;
      try {
        onlineFolder=readFolder(onlineProject.getId(),currentFolder.getAbsolutePath());
      }
 catch (      CmsException exc) {
        if (exc.getType() == CmsException.C_NOT_FOUND) {
          Integer parentId=(Integer)folderIdIndex.get(new Integer(currentFolder.getParentId()));
          if (parentId == null) {
            CmsFolder currentOnlineParent=readFolder(onlineProject.getId(),currentFolder.getParent());
            parentId=new Integer(currentOnlineParent.getResourceId());
            folderIdIndex.put(new Integer(currentFolder.getParentId()),parentId);
          }
          onlineFolder=createFolder(user,onlineProject,onlineProject,currentFolder,parentId.intValue(),currentFolder.getAbsolutePath());
          onlineFolder.setState(C_STATE_UNCHANGED);
          updateResourcestate(onlineFolder);
        }
 else {
          throw exc;
        }
      }
      Connection con=null;
      PreparedStatement statement=null;
      try {
        con=DriverManager.getConnection(m_poolNameOnline);
        statement=con.prepareStatement(m_cq.get("C_RESOURCES_UPDATE_ONLINE"));
        statement.setInt(1,currentFolder.getType());
        statement.setInt(2,currentFolder.getFlags());
        statement.setInt(3,currentFolder.getOwnerId());
        statement.setInt(4,currentFolder.getGroupId());
        statement.setInt(5,onlineFolder.getProjectId());
        statement.setInt(6,currentFolder.getAccessFlags());
        statement.setInt(7,C_STATE_UNCHANGED);
        statement.setInt(8,currentFolder.isLockedBy());
        statement.setInt(9,currentFolder.getLauncherType());
        statement.setString(10,currentFolder.getLauncherClassname());
        statement.setTimestamp(11,new Timestamp(currentFolder.getDateLastModified()));
        statement.setInt(12,currentFolder.getResourceLastModifiedBy());
        statement.setInt(13,0);
        statement.setInt(14,onlineFolder.getFileId());
        statement.setInt(15,onlineFolder.getResourceId());
        statement.executeUpdate();
      }
 catch (      SQLException e) {
        throw new CmsException("[" + this.getClass().getName() + "] "+ e.getMessage(),CmsException.C_SQL_ERROR,e);
      }
 finally {
        if (statement != null) {
          try {
            statement.close();
          }
 catch (          SQLException exc) {
          }
        }
        if (con != null) {
          try {
            con.close();
          }
 catch (          SQLException exc) {
          }
        }
      }
      folderIdIndex.put(new Integer(currentFolder.getResourceId()),new Integer(onlineFolder.getResourceId()));
      Hashtable props=new Hashtable();
      try {
        deleteAllProperties(onlineProject.getId(),onlineFolder);
        props=readAllProperties(projectId,currentFolder,currentFolder.getType());
        writeProperties(props,onlineProject.getId(),onlineFolder,currentFolder.getType());
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[CmsDbAccess] error publishing, deleting properties for " + onlineFolder.toString() + " Message= "+ exc.getMessage());
        }
      }
      if (enableHistory) {
        backupResource(projectId,currentFolder,new byte[0],props,versionId,publishDate);
      }
      currentFolder.setState(C_STATE_UNCHANGED);
      updateResourcestate(currentFolder);
    }
  }
  offlineFiles=readFiles(projectId,false,true);
  for (int i=0; i < offlineFiles.size(); i++) {
    currentFile=((CmsFile)offlineFiles.elementAt(i));
    if (currentFile.isLocked()) {
    }
 else     if (currentFile.getName().startsWith(C_TEMP_PREFIX)) {
      deleteAllProperties(projectId,currentFile);
      removeFile(projectId,currentFile.getAbsolutePath());
    }
 else     if (currentFile.getState() == C_STATE_DELETED) {
      changedResources.addElement(currentFile.getAbsolutePath());
      String exportKey=checkExport(currentFile.getAbsolutePath());
      if (exportKey != null) {
        try {
          discAccess.removeResource(currentFile.getAbsolutePath(),exportKey);
        }
 catch (        Exception ex) {
        }
      }
      CmsFile currentOnlineFile=readFile(onlineProject.getId(),onlineProject.getId(),currentFile.getAbsolutePath());
      if (enableHistory) {
        Hashtable props=readAllProperties(projectId,currentFile,currentFile.getType());
        backupResource(projectId,currentFile,currentFile.getContents(),props,versionId,publishDate);
      }
      try {
        deleteAllProperties(onlineProject.getId(),currentOnlineFile);
        deleteAllProperties(projectId,currentFile);
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[CmsDbAccess] error publishing, deleting properties for " + currentOnlineFile.toString() + " Message= "+ exc.getMessage());
        }
      }
      try {
        deleteResource(currentOnlineFile);
        deleteResource(currentFile);
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[CmsDbAccess] error publishing, deleting resource for " + currentOnlineFile.toString() + " Message= "+ exc.getMessage());
        }
      }
    }
 else     if (currentFile.getState() == C_STATE_CHANGED) {
      changedResources.addElement(currentFile.getAbsolutePath());
      String exportKey=checkExport(currentFile.getAbsolutePath());
      if (exportKey != null) {
        discAccess.writeFile(currentFile.getAbsolutePath(),exportKey,currentFile.getContents());
      }
      CmsFile onlineFile=null;
      try {
        onlineFile=readFileHeader(onlineProject.getId(),currentFile.getAbsolutePath());
      }
 catch (      CmsException exc) {
        if (exc.getType() == CmsException.C_NOT_FOUND) {
          Integer parentId=(Integer)folderIdIndex.get(new Integer(currentFile.getParentId()));
          if (parentId == null) {
            CmsFolder currentOnlineParent=readFolder(onlineProject.getId(),currentFolder.getParent());
            parentId=new Integer(currentOnlineParent.getResourceId());
            folderIdIndex.put(new Integer(currentFile.getParentId()),parentId);
          }
          currentFile.setState(C_STATE_UNCHANGED);
          onlineFile=createFile(onlineProject,onlineProject,currentFile,user.getId(),parentId.intValue(),currentFile.getAbsolutePath(),false);
        }
      }
      Connection con=null;
      PreparedStatement statement=null;
      try {
        con=DriverManager.getConnection(m_poolNameOnline);
        statement=con.prepareStatement(m_cq.get("C_RESOURCES_UPDATE_ONLINE"));
        statement.setInt(1,currentFile.getType());
        statement.setInt(2,currentFile.getFlags());
        statement.setInt(3,currentFile.getOwnerId());
        statement.setInt(4,currentFile.getGroupId());
        statement.setInt(5,onlineFile.getProjectId());
        statement.setInt(6,currentFile.getAccessFlags());
        statement.setInt(7,C_STATE_UNCHANGED);
        statement.setInt(8,currentFile.isLockedBy());
        statement.setInt(9,currentFile.getLauncherType());
        statement.setString(10,currentFile.getLauncherClassname());
        statement.setTimestamp(11,new Timestamp(currentFile.getDateLastModified()));
        statement.setInt(12,currentFile.getResourceLastModifiedBy());
        statement.setInt(13,currentFile.getLength());
        statement.setInt(14,onlineFile.getFileId());
        statement.setInt(15,onlineFile.getResourceId());
        statement.executeUpdate();
        statement.close();
        statement=con.prepareStatement(m_cq.get("C_FILES_UPDATE_ONLINE"));
        statement.setBytes(1,currentFile.getContents());
        statement.setInt(2,onlineFile.getFileId());
        statement.executeUpdate();
        statement.close();
      }
 catch (      SQLException e) {
        throw new CmsException("[" + this.getClass().getName() + "] "+ e.getMessage(),CmsException.C_SQL_ERROR,e);
      }
 finally {
        if (statement != null) {
          try {
            statement.close();
          }
 catch (          SQLException exc) {
          }
        }
        if (con != null) {
          try {
            con.close();
          }
 catch (          SQLException exc) {
          }
        }
      }
      Hashtable props=new Hashtable();
      try {
        deleteAllProperties(onlineProject.getId(),onlineFile);
        props=readAllProperties(projectId,currentFile,currentFile.getType());
        writeProperties(props,onlineProject.getId(),onlineFile,currentFile.getType());
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[CmsDbAccess] error publishing, deleting properties for " + onlineFile.toString() + " Message= "+ exc.getMessage());
        }
      }
      if (enableHistory) {
        backupResource(projectId,currentFile,currentFile.getContents(),props,versionId,publishDate);
      }
      currentFile.setState(C_STATE_UNCHANGED);
      updateResourcestate(currentFile);
    }
 else     if (currentFile.getState() == C_STATE_NEW) {
      String exportKey=checkExport(currentFile.getAbsolutePath());
      if (exportKey != null) {
        discAccess.writeFile(currentFile.getAbsolutePath(),exportKey,currentFile.getContents());
      }
      Integer parentId=(Integer)folderIdIndex.get(new Integer(currentFile.getParentId()));
      if (parentId == null) {
        CmsFolder currentOnlineParent=readFolder(onlineProject.getId(),currentFile.getParent());
        parentId=new Integer(currentOnlineParent.getResourceId());
        folderIdIndex.put(new Integer(currentFile.getParentId()),parentId);
      }
      try {
        newFile=createFile(onlineProject,onlineProject,currentFile,user.getId(),parentId.intValue(),currentFile.getAbsolutePath(),false);
        newFile.setState(C_STATE_UNCHANGED);
        updateResourcestate(newFile);
      }
 catch (      CmsException e) {
        if (e.getType() == CmsException.C_FILE_EXISTS) {
          CmsFile onlineFile=null;
          try {
            onlineFile=readFileHeader(onlineProject.getId(),currentFile.getAbsolutePath());
          }
 catch (          CmsException exc) {
            throw exc;
          }
          Connection con=null;
          PreparedStatement statement=null;
          try {
            con=DriverManager.getConnection(m_poolNameOnline);
            statement=con.prepareStatement(m_cq.get("C_RESOURCES_UPDATE_ONLINE"));
            statement.setInt(1,currentFile.getType());
            statement.setInt(2,currentFile.getFlags());
            statement.setInt(3,currentFile.getOwnerId());
            statement.setInt(4,currentFile.getGroupId());
            statement.setInt(5,onlineFile.getProjectId());
            statement.setInt(6,currentFile.getAccessFlags());
            statement.setInt(7,C_STATE_UNCHANGED);
            statement.setInt(8,currentFile.isLockedBy());
            statement.setInt(9,currentFile.getLauncherType());
            statement.setString(10,currentFile.getLauncherClassname());
            statement.setTimestamp(11,new Timestamp(currentFile.getDateLastModified()));
            statement.setInt(12,currentFile.getResourceLastModifiedBy());
            statement.setInt(13,currentFile.getLength());
            statement.setInt(14,onlineFile.getFileId());
            statement.setInt(15,onlineFile.getResourceId());
            statement.executeUpdate();
            statement=con.prepareStatement(m_cq.get("C_FILES_UPDATE_ONLINE"));
            statement.setBytes(1,currentFile.getContents());
            statement.setInt(2,onlineFile.getFileId());
            statement.executeUpdate();
            statement.close();
            newFile=readFile(onlineProject.getId(),onlineProject.getId(),currentFile.getAbsolutePath());
          }
 catch (          SQLException sqle) {
            throw new CmsException("[" + this.getClass().getName() + "] "+ sqle.getMessage(),CmsException.C_SQL_ERROR,sqle);
          }
 finally {
            if (statement != null) {
              try {
                statement.close();
              }
 catch (              SQLException exc) {
              }
            }
            if (con != null) {
              try {
                con.close();
              }
 catch (              SQLException exc) {
              }
            }
          }
        }
 else {
          throw e;
        }
      }
      Hashtable props=new Hashtable();
      try {
        props=readAllProperties(projectId,currentFile,currentFile.getType());
        writeProperties(props,onlineProject.getId(),newFile,newFile.getType());
      }
 catch (      CmsException exc) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[CmsDbAccess] error publishing, copy properties for " + newFile.toString() + " Message= "+ exc.getMessage());
        }
      }
      if (enableHistory) {
        backupResource(projectId,currentFile,currentFile.getContents(),props,versionId,publishDate);
      }
      currentFile.setState(C_STATE_UNCHANGED);
      updateResourcestate(currentFile);
    }
  }
  for (int i=deletedFolders.size() - 1; i > -1; i--) {
    currentFolder=((CmsFolder)deletedFolders.elementAt(i));
    String exportKey=checkExport(currentFolder.getAbsolutePath());
    if (exportKey != null) {
      discAccess.removeResource(currentFolder.getAbsolutePath(),exportKey);
    }
    if (enableHistory) {
      Hashtable props=readAllProperties(projectId,currentFolder,currentFolder.getType());
      backupResource(projectId,currentFolder,new byte[0],props,versionId,publishDate);
    }
    CmsResource delOnlineFolder=readFolder(onlineProject.getId(),currentFolder.getAbsolutePath());
    try {
      deleteAllProperties(onlineProject.getId(),delOnlineFolder);
      deleteAllProperties(projectId,currentFolder);
    }
 catch (    CmsException exc) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,"[CmsDbAccess] error publishing, deleting properties for " + currentFolder.toString() + " Message= "+ exc.getMessage());
      }
    }
    removeFolderForPublish(onlineProject.getId(),currentFolder.getAbsolutePath());
    removeFolderForPublish(projectId,currentFolder.getAbsolutePath());
  }
  return changedResources;
}
