{
  boolean first=true;
  Vector tasks=new Vector();
  CmsTask task=null;
  ResultSet recset=null;
  String sqlstr="SELECT * FROM " + C_TABLENAME_TASK + " WHERE ";
  if (project != null) {
    sqlstr=sqlstr + C_TASK_ROOT + "="+ project.getTaskId();
    first=false;
  }
 else {
    sqlstr=sqlstr + C_TASK_ROOT + "<>0 AND "+ C_TASK_PARENT+ "<>0";
    first=false;
  }
  if (agent != null) {
    if (!first) {
      sqlstr=sqlstr + " AND ";
    }
    sqlstr=sqlstr + C_TASK_AGENTUSER + "="+ agent.getId();
    first=false;
  }
  if (owner != null) {
    if (!first) {
      sqlstr=sqlstr + " AND ";
    }
    sqlstr=sqlstr + this.C_TASK_INITIATORUSER + "="+ owner.getId();
    first=false;
  }
  if (role != null) {
    if (!first) {
      sqlstr=sqlstr + " AND ";
    }
    sqlstr=sqlstr + C_TASK_ROLE + "="+ role.getId();
    first=false;
  }
  sqlstr=sqlstr + getTaskTypeConditon(first,tasktype);
  if (orderBy != null) {
    if (!orderBy.equals("")) {
      sqlstr=sqlstr + " ORDER BY " + orderBy;
      if (orderBy != null) {
        if (!orderBy.equals("")) {
          sqlstr=sqlstr + " " + sort;
        }
      }
    }
  }
  Statement statement=null;
  try {
    statement=m_pool.getStatement();
    recset=statement.executeQuery(sqlstr);
    while (recset.next()) {
      task=new CmsTask(recset.getInt(C_TASK_ID),recset.getString(C_TASK_NAME),recset.getInt(C_TASK_STATE),recset.getInt(C_TASK_TASKTYPE),recset.getInt(C_TASK_ROOT),recset.getInt(C_TASK_PARENT),recset.getInt(C_TASK_INITIATORUSER),recset.getInt(C_TASK_ROLE),recset.getInt(C_TASK_AGENTUSER),recset.getInt(C_TASK_ORIGINALUSER),SqlHelper.getTimestamp(recset,C_TASK_STARTTIME),SqlHelper.getTimestamp(recset,C_TASK_WAKEUPTIME),SqlHelper.getTimestamp(recset,C_TASK_TIMEOUT),SqlHelper.getTimestamp(recset,C_TASK_ENDTIME),recset.getInt(C_TASK_PERCENTAGE),recset.getString(C_TASK_PERMISSION),recset.getInt(C_TASK_PRIORITY),recset.getInt(C_TASK_ESCALATIONTYPE),recset.getString(C_TASK_HTMLLINK),recset.getInt(C_TASK_MILESTONE),recset.getInt(C_TASK_AUTOFINISH));
      tasks.addElement(task);
    }
  }
 catch (  SQLException exc) {
    throw new CmsException(exc.getMessage(),CmsException.C_SQL_ERROR,exc);
  }
catch (  Exception exc) {
    throw new CmsException(exc.getMessage(),CmsException.C_UNKNOWN_EXCEPTION,exc);
  }
 finally {
    if (statement != null) {
      m_pool.putStatement(statement);
    }
  }
  return tasks;
}
