{
  try {
    if (json.has(JSON_LANGUAGES)) {
      JSONArray jsonLanguages=json.getJSONArray(JSON_LANGUAGES);
      for (int i=0; i < jsonLanguages.length(); i++) {
        JSONObject jsonLang=(JSONObject)jsonLanguages.get(i);
        CmsDocumentDependency lang=new CmsDocumentDependency(null,jsonLang.getString(JSON_PATH));
        lang.fromJSON(jsonLang,rootPath);
        addVariant(lang);
      }
    }
    if (json.has(JSON_ATTACHMENTS)) {
      JSONArray jsonAttachments=json.getJSONArray(JSON_ATTACHMENTS);
      for (int i=0; i < jsonAttachments.length(); i++) {
        try {
          JSONObject jsonAttachment=(JSONObject)jsonAttachments.get(i);
          CmsDocumentDependency att=new CmsDocumentDependency(null,jsonAttachment.getString(JSON_PATH));
          att.fromJSON(jsonAttachment,rootPath);
          if (jsonAttachment.has(JSON_LANGUAGES)) {
            JSONArray jsonAttLanguages=jsonAttachment.getJSONArray(JSON_LANGUAGES);
            for (int j=0; j < jsonAttLanguages.length(); j++) {
              JSONObject jsonAttLanguage=(JSONObject)jsonAttLanguages.get(j);
              CmsDocumentDependency attLang=new CmsDocumentDependency(null,jsonAttLanguage.getString(JSON_PATH));
              attLang.fromJSON(jsonAttLanguage,rootPath);
              att.addVariant(attLang);
            }
          }
          addAttachment(att);
        }
 catch (        Exception e) {
          LOG.error(e);
        }
      }
    }
  }
 catch (  Exception ex) {
    if (LOG.isErrorEnabled()) {
      LOG.error(ex.getLocalizedMessage(),ex);
    }
  }
}
