{
  super.onModuleLoad();
  m_instance=this;
  RootPanel rootPanel=RootPanel.get();
  m_editorMode=EditorMode.navigation;
  I_CmsSitemapLayoutBundle.INSTANCE.rootCss().ensureInjected();
  I_CmsSitemapLayoutBundle.INSTANCE.pageCss().ensureInjected();
  I_CmsSitemapLayoutBundle.INSTANCE.clipboardCss().ensureInjected();
  I_CmsSitemapLayoutBundle.INSTANCE.sitemapItemCss().ensureInjected();
  I_CmsSitemapLayoutBundle.INSTANCE.propertiesCss().ensureInjected();
  I_CmsImageBundle.INSTANCE.buttonCss().ensureInjected();
  rootPanel.addStyleName(I_CmsSitemapLayoutBundle.INSTANCE.rootCss().root());
  m_controller=new CmsSitemapController();
  m_controller.addChangeHandler(this);
  m_controller.addLoadHandler(this);
  m_toolbar=new CmsSitemapToolbar(m_controller);
  rootPanel.add(m_toolbar);
  rootPanel.add(new CmsToolbarPlaceHolder());
  CmsHeader title=new CmsHeader(Messages.get().key(Messages.GUI_EDITOR_TITLE_0),m_controller.getData().getSiteName());
  title.addStyleName(I_CmsSitemapLayoutBundle.INSTANCE.rootCss().pageCenter());
  rootPanel.add(title);
  final CmsPage page=new CmsPage();
  rootPanel.add(page);
  final Label loadingLabel=new Label(org.opencms.gwt.client.Messages.get().key(org.opencms.gwt.client.Messages.GUI_LOADING_0));
  page.add(loadingLabel);
  CmsClientSitemapEntry root=m_controller.getData().getRoot();
  CmsSitemapTreeItem rootItem=createSitemapItem(root);
  rootItem.onFinishLoading();
  rootItem.setOpen(true);
  m_tree=new CmsLazyTree<CmsSitemapTreeItem>(new I_CmsLazyOpenHandler<CmsSitemapTreeItem>(){
    /** 
 * @see org.opencms.gwt.client.ui.tree.I_CmsLazyOpenHandler#load(org.opencms.gwt.client.ui.tree.CmsLazyTreeItem)
 */
    public void load(    final CmsSitemapTreeItem target){
      m_controller.getChildren(target.getSitePath(),true);
    }
    /** 
 * @see org.opencms.gwt.client.ui.tree.I_CmsLazyOpenHandler#onOpen(com.google.gwt.event.logical.shared.OpenEvent)
 */
    public void onOpen(    OpenEvent<CmsSitemapTreeItem> event){
      CmsSitemapTreeItem target=event.getTarget();
      if (target.getLoadState() != CmsLazyTreeItem.LoadState.UNLOADED) {
        return;
      }
      target.onStartLoading();
      target.setOpen(false);
      load(target);
    }
  }
);
  m_inNavigationStyle=new CmsStyleVariable(m_tree);
  setEditorMode(EditorMode.navigation);
  if (m_controller.isEditable()) {
    CmsDNDHandler dndHandler=new CmsDNDHandler(new CmsSitemapDNDController(m_controller,m_toolbar));
    dndHandler.addTarget(m_tree);
    m_tree.setDNDHandler(dndHandler);
    m_tree.setDropEnabled(true);
    m_tree.setDNDTakeAll(true);
  }
  m_tree.truncate(TM_SITEMAP,920);
  m_tree.setAnimationEnabled(true);
  m_tree.addItem(rootItem);
  page.remove(loadingLabel);
  page.add(m_tree);
  m_controller.addPropertyUpdateHandler(new CmsStatusIconUpdateHandler());
  m_controller.recomputeProperties();
  rootItem.updateSitePath();
  if (!m_controller.isEditable()) {
    CmsNotification.get().sendSticky(CmsNotification.Type.WARNING,Messages.get().key(Messages.GUI_NO_EDIT_NOTIFICATION_1,m_controller.getData().getNoEditReason()));
    return;
  }
  String openPath=m_controller.getData().getOpenPath();
  if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(openPath)) {
    highlightPath(CmsResource.getFolderPath(openPath));
  }
}
