{
  CmsMacroResolver resolver=CmsMacroResolver.newInstance();
  resolver.addMacro("test","REPLACED");
  String content, result;
  content="<<This is a prefix >>%(test)-${test}<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>REPLACED-REPLACED<<This is a suffix>>",result);
  content="<<This is a prefix >>%{test}<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>%{test}<<This is a suffix>>",result);
  content="<<This is a prefix >>%(test}-%{test)-%{test}-${test)-$(test}-$(test)<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  content="${test}-%(test)<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("REPLACED-REPLACED<<This is a suffix>>",result);
  content="<<This is a prefix >>${test}-%(test)";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>REPLACED-REPLACED",result);
  content="<<This is a prefix >>%$<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>%$<<This is a suffix>>",result);
  content="%$<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("%$<<This is a suffix>>",result);
  content="%(${<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("%(${<<This is a suffix>>",result);
  content="<<This is a prefix >>$%";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>$%",result);
  content="<<This is a prefix >>%(${";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>%(${",result);
  content="<<This is a prefix >>%()${}<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >><<This is a suffix>>",result);
  content="<<This is a prefix >>%(unknown)${unknown}<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >><<This is a suffix>>",result);
  content="<<This is a prefix >>%(test${test<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>%(test${test<<This is a suffix>>",result);
  content="<<This is a prefix >>%${(%()${}";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>%${(",result);
  content="<<This is a prefix >>%(a${b}c)<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >><<This is a suffix>>",result);
  content="<<This is a prefix >>%(a${test}c)<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >><<This is a suffix>>",result);
  content="<<This is a prefix >>${a%(test)c}<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >><<This is a suffix>>",result);
  content="<<This is a prefix >>${a${test}c$}<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>${aREPLACEDc$}<<This is a suffix>>",result);
  content="<<This is a prefix >>%(a%(test)c%)<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>%(aREPLACEDc%)<<This is a suffix>>",result);
  content="<<This is a prefix >>${a${test}c)<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>${aREPLACEDc)<<This is a suffix>>",result);
  content="<<This is a prefix >>%(a%(test)c}<<This is a suffix>>";
  result=resolver.resolveMacros(content);
  assertEquals("<<This is a prefix >>%(aREPLACEDc}<<This is a suffix>>",result);
}
