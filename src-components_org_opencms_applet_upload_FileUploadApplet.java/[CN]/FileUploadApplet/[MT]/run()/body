{
  try {
    boolean ok=true;
    while (ok) {
      ok=true;
      m_message="";
      m_resources=0;
      m_step=0;
      if (m_fileSelector == null) {
        m_fileSelector=new UploadAppletFileChooser(this);
      }
      m_fileSelector.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
      m_fileSelector.setDialogTitle(m_actionOutputSelect);
      FileFilter imageFilter=new ImageFilter();
      FileFilter officeFilter=new OfficeFilter();
      FileFilter webFilter=new WebFilter();
      m_fileSelector.addChoosableFileFilter(imageFilter);
      m_fileSelector.addChoosableFileFilter(officeFilter);
      m_fileSelector.addChoosableFileFilter(webFilter);
      m_fileSelector.setAcceptAllFileFilterUsed(true);
      m_fileSelector.setMultiSelectionEnabled(true);
      m_fileSelector.setFileView(new ImageFileView(m_opencms,m_fileExtensions));
      m_fileSelector.setAccessory(new ImagePreview(m_fileSelector,m_messageNoPreview));
      if ((m_clientFolder != null) && !m_clientFolder.trim().equals("")) {
        File clientFolder=new File(m_clientFolder);
        if (clientFolder.exists() && clientFolder.isDirectory()) {
          m_fileSelector.setCurrentDirectory(clientFolder);
        }
      }
      m_action=m_actionOutputSelect;
      if ((m_fileFilterSelection != null) && !m_fileFilterSelection.trim().equals("")) {
        if (WebFilter.FILTER_ID.equals(m_fileFilterSelection)) {
          m_fileSelector.setFileFilter(webFilter);
        }
 else         if (OfficeFilter.FILTER_ID.equals(m_fileFilterSelection)) {
          m_fileSelector.setFileFilter(officeFilter);
        }
 else         if (ImageFilter.FILTER_ID.equals(m_fileFilterSelection)) {
          m_fileSelector.setFileFilter(imageFilter);
        }
      }
      repaint();
      m_overwrites=new ArrayList();
      int returnVal=m_fileSelector.showDialog(this,"OK");
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        m_outputMode=1;
        m_action=m_actionOutputCount;
        repaint();
        File[] files=m_fileSelector.getSelectedFiles();
        List fileNames=new ArrayList();
        for (int i=0; i < files.length; i++) {
          getRelativeFilePaths(files[i],fileNames);
        }
        if (m_overwrites.size() > 0) {
          files=subtractDuplicates(fileNames,m_overwrites);
          files=addOverwrites(files,((FileSelectionPanel)m_overwriteDialog.getControlPanel().getComponent(1)).getSelectedFiles());
        }
 else {
          fileNames=new ArrayList();
          for (int i=0; i < files.length; i++) {
            getFilesInTree(files[i],fileNames);
          }
          files=(File[])fileNames.toArray(new File[fileNames.size()]);
        }
        m_resources=countResources(files);
        m_outputMode=2;
        if (files.length > 0) {
          File targetFile=createZipFile(files);
          if ((targetFile == null) || ((m_maxsize > 0) && (targetFile.length() > m_maxsize))) {
            m_outputMode=4;
            if (targetFile == null) {
              m_message=m_messageOutputErrorZip;
            }
 else {
              m_message=m_messageOutputErrorSize + " " + targetFile.length()+ " > "+ m_maxsize;
            }
            m_action=m_actionOutputError;
            repaint();
            JOptionPane.showMessageDialog(this,m_message,m_action,JOptionPane.ERROR_MESSAGE);
          }
 else {
            m_outputMode=3;
            m_message=m_messageOutputUpload + " (" + targetFile.length() / 1024 + " kb)";
            repaint();
            FileUploadThread uploadThreat=new FileUploadThread();
            uploadThreat.init(this);
            uploadThreat.start();
            uploadZipFile(targetFile);
            ok=false;
          }
        }
 else {
          ok=false;
          getAppletContext().showDocument(new URL(m_redirectUrl),m_redirectTargetFrame);
        }
      }
 else {
        ok=false;
        getAppletContext().showDocument(new URL(m_redirectUrl),m_redirectTargetFrame);
      }
    }
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}
