{
  List<Logger> definedLoggers=new ArrayList<Logger>();
  List<Logger> packageLoggers=new ArrayList<Logger>();
  @SuppressWarnings("unchecked") List<Logger> curentloggerlist=Collections.list(LogManager.getCurrentLoggers());
  Iterator<Logger> it_curentlogger=curentloggerlist.iterator();
  while (it_curentlogger.hasNext()) {
    Logger log=it_curentlogger.next();
    String temp=log.getName().replace(OPENCMS_CLASS_PREFIX,"");
    if (temp.length() > 1) {
      temp=temp.substring(1);
    }
    if (temp.lastIndexOf(".") > 1) {
      Logger temp_logger=Logger.getLogger(OPENCMS_CLASS_PREFIX + "." + temp.substring(0,temp.indexOf(".")));
      temp_logger.setAdditivity(true);
      if (!packageLoggers.contains(temp_logger)) {
        packageLoggers.add(temp_logger);
      }
    }
    definedLoggers.add(log);
  }
  Iterator<Logger> it_logger=packageLoggers.iterator();
  while (it_logger.hasNext()) {
    Logger temp=it_logger.next();
    if (!definedLoggers.contains(temp)) {
      definedLoggers.add(temp);
    }
  }
  Collections.sort(definedLoggers,new Comparator<Object>(){
    public int compare(    Logger o1,    Logger o2){
      return String.CASE_INSENSITIVE_ORDER.compare(o1.getName(),o2.getName());
    }
    public int compare(    Object obj,    Object obj1){
      return compare((Logger)obj,(Logger)obj1);
    }
  }
);
  return definedLoggers;
}
