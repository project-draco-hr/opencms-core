{
  byte[] result=null;
  CmsElementDefinitionCollection mergedElDefs=new CmsElementDefinitionCollection(elDefs,m_elementDefinitions);
  A_CmsCacheDirectives cd=getCacheDirectives();
  CmsElementVariant variant=null;
  if (cd.isInternalCacheable()) {
    checkReadAccess(cms);
    if (cd.isTimeCritical() && (m_timestamp < cd.getTimeout().getLastChange())) {
      if (this.hasDependenciesVariants()) {
        CmsXmlTemplateLoader.getOnlineElementCache().getElementLocator().removeElementFromDependencies(mergedElDefs.get(elementName).getDescriptor(),this);
      }
      clearVariantCache();
    }
 else {
      variant=getVariant(cd.getCacheKey(cms,parameters));
      if ((variant != null) && variant.isTimeCritical() && variant.getNextTimeout() < System.currentTimeMillis()) {
        CmsXmlTemplateLoader.getOnlineElementCache().getElementLocator().removeVariantFromDependencies(m_className + "|" + m_templateName+ "|"+ cd.getCacheKey(cms,parameters),variant);
        variant=null;
      }
    }
    if (variant != null) {
      result=resolveVariant(cms,variant,elementCache,mergedElDefs,parameters);
    }
  }
  if (variant == null) {
    I_CmsTemplate templateClass=null;
    try {
      templateClass=getTemplateClass(cms,m_className);
    }
 catch (    Throwable e) {
      if (OpenCms.getLog(this).isErrorEnabled()) {
        OpenCms.getLog(this).error("Could not load my template class \"" + m_className + "\"",e);
        return e.toString().getBytes();
      }
    }
    try {
      parameters.put("_ELDEFS_",mergedElDefs);
      String templateSelector=null;
      try {
        templateSelector=mergedElDefs.get(elementName).getTemplateSelector();
      }
 catch (      Exception e) {
      }
      try {
        String theTemplate=m_templateName;
        if (theTemplate == null) {
          try {
            theTemplate=mergedElDefs.get("body").getTemplateName();
          }
 catch (          Exception exc) {
            if (OpenCms.getLog(this).isErrorEnabled()) {
              OpenCms.getLog(this).error("Could not find the body element to get the default template file for " + this.toString(),exc);
            }
          }
        }
        result=templateClass.getContent(cms,theTemplate,elementName,parameters,templateSelector);
      }
 catch (      Exception e) {
        if (e instanceof CmsException) {
          CmsException ce=(CmsException)e;
          if (ce instanceof CmsSecurityException) {
            if (OpenCms.getLog(this).isDebugEnabled()) {
              OpenCms.getLog(this).debug("Access denied in getContent for template class " + m_className);
            }
          }
 else {
            if (OpenCms.getLog(this).isWarnEnabled()) {
              OpenCms.getLog(this).warn("Error in getContent() for template class " + m_className,e);
            }
          }
          throw ce;
        }
 else {
          if (OpenCms.getLog(this).isErrorEnabled()) {
            OpenCms.getLog(this).error("Non OpenCms error occured in getContent for template class " + m_className,e);
          }
          throw new CmsLegacyException(CmsLegacyException.C_UNKNOWN_EXCEPTION,e);
        }
      }
    }
 catch (    CmsException e) {
      throw e;
    }
  }
  return result;
}
