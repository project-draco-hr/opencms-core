{
  if (DEBUG > 2) {
    System.err.println("[" + this.getClass().getName() + ".deleteModule()] Starting to delete module "+ module);
  }
  if (!moduleExists(module)) {
    throw new CmsException("Module '" + module + "' does not exist",CmsException.C_REGISTRY_ERROR);
  }
  if (!hasAccess()) {
    throw new CmsSecurityException(CmsSecurityException.C_SECURITY_NO_REGISTRY_PERMISSIONS);
  }
  Vector deps=deleteCheckDependencies(module,replaceMode);
  if (deps.size() != 0) {
    throw new CmsException("There are dependencies for the module " + module + ": deletion is not allowed.",CmsException.C_REGISTRY_ERROR);
  }
  Class eventClass=getModuleMaintenanceEventClass(module);
  try {
    Class declaration[]={CmsObject.class};
    Object arguments[]={m_cms};
    Method eventMethod=eventClass.getMethod(C_EVENT_METHOD_NAME_DELETE,declaration);
    eventMethod.invoke(null,arguments);
  }
 catch (  Exception exc) {
  }
  if (this.getModuleType(module).equals(CmsRegistry.C_MODULE_TYPE_SIMPLE)) {
    String additionalResources=this.getModuleParameterString(module,I_CmsConstants.C_MODULE_PROPERTY_ADDITIONAL_RESOURCES);
    Vector resources=new Vector();
    if (additionalResources != null && !additionalResources.equals("")) {
      StringTokenizer additionalResourceTokens=null;
      additionalResourceTokens=new StringTokenizer(additionalResources,I_CmsConstants.C_MODULE_PROPERTY_ADDITIONAL_RESOURCES_SEPARATOR);
      while (additionalResourceTokens.hasMoreTokens()) {
        String currentResource=additionalResourceTokens.nextToken().trim();
        if (!"-".equals(currentResource)) {
          if (DEBUG > 0) {
            System.err.println("Adding resource: " + currentResource);
          }
          resources.add(currentResource);
        }
      }
    }
    resources.add(I_CmsWpConstants.C_VFS_PATH_MODULES + module + "/");
    for (int i=resources.size() - 1; i >= 0; i--) {
      String currentResource=null;
      try {
        currentResource=(String)resources.elementAt(i);
        if (DEBUG > 1) {
          System.err.println("[" + this.getClass().getName() + ".deleteModule()] Deleting resource "+ currentResource);
        }
        m_cms.lockResource(currentResource);
        m_cms.deleteResource(currentResource,I_CmsConstants.C_DELETE_OPTION_IGNORE_SIBLINGS);
        report.print(report.key("report.deleting"),I_CmsReport.C_FORMAT_NOTE);
        report.println(currentResource);
      }
 catch (      CmsException exc) {
        if (DEBUG > 0) {
          System.err.println("[" + this.getClass().getName() + ".deleteModule()] Exception "+ exc+ " deleting resource "+ currentResource);
        }
        report.println(exc);
      }
    }
  }
 else {
    Vector resourceNames=new Vector();
    Vector missingFiles=new Vector();
    Vector wrongChecksum=new Vector();
    Vector filesInUse=new Vector();
    Vector resourceCodes=new Vector();
    deleteGetConflictingFileNames(module,resourceNames,missingFiles,wrongChecksum,filesInUse,new Vector());
    getModuleFiles(module,resourceNames,resourceCodes);
    for (int i=resourceNames.size() - 1; i >= 0; i--) {
      try {
        String currentResource=(String)resourceNames.elementAt(i);
        if ((!exclusion.contains(currentResource)) && (!filesInUse.contains(currentResource))) {
          m_cms.lockResource(currentResource);
          m_cms.deleteResource(currentResource,I_CmsConstants.C_DELETE_OPTION_IGNORE_SIBLINGS);
          report.print(report.key("report.deleting"),I_CmsReport.C_FORMAT_NOTE);
          report.println(currentResource);
        }
      }
 catch (      CmsException exc) {
        report.println(exc);
      }
    }
  }
  Element moduleElement=getModuleElement(module);
  moduleElement.getParentNode().removeChild(moduleElement);
  saveRegistry();
  try {
    init(false);
  }
 catch (  Exception exc) {
    throw new CmsException("couldn't init registry",CmsException.C_REGISTRY_ERROR,exc);
  }
  if (DEBUG > 2) {
    System.err.println("[" + this.getClass().getName() + ".deleteModule()] Finished for module "+ module);
  }
}
