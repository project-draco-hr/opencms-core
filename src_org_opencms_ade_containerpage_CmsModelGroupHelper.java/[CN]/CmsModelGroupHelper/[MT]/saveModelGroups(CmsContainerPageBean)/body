{
  Map<String,List<CmsContainerBean>> containersByParent=getContainerByParent(page);
  Map<String,String> modelInstances=new HashMap<String,String>();
  Set<String> descendingInstances=new HashSet<String>();
  for (  CmsContainerElementBean element : page.getElements()) {
    String modelGroupId=null;
    if (element.getIndividualSettings().containsKey(CmsContainerElement.MODEL_GROUP_ID) || element.isModelGroup()) {
      modelGroupId=element.getIndividualSettings().get(CmsContainerElement.MODEL_GROUP_ID);
      modelInstances.put(element.getInstanceId(),modelGroupId);
      Set<String> childInstances=collectDescendingInstances(element.getInstanceId(),containersByParent);
      descendingInstances.addAll(childInstances);
      CmsResource modelGroup=null;
      try {
        modelGroup=m_cms.readResource(new CmsUUID(modelGroupId));
        ensureLock(modelGroup);
        String title=element.getIndividualSettings().get(CmsContainerElement.MODEL_GROUP_TITLE);
        String description=element.getIndividualSettings().get(CmsContainerElement.MODEL_GROUP_DESCRIPTION);
        String groupType="";
        if (Boolean.valueOf(element.getIndividualSettings().get(CmsContainerElement.USE_AS_COPY_MODEL)).booleanValue()) {
          groupType=CmsContainerElement.USE_AS_COPY_MODEL;
        }
        if (hasChangedProperty(modelGroup,title,description,groupType)) {
          List<CmsProperty> props=new ArrayList<CmsProperty>();
          if (title == null) {
            title="";
          }
          props.add(new CmsProperty(CmsPropertyDefinition.PROPERTY_TITLE,title,title));
          if (description == null) {
            description="";
          }
          props.add(new CmsProperty(CmsPropertyDefinition.PROPERTY_DESCRIPTION,description,description));
          if (groupType == null) {
            groupType="";
          }
          props.add(new CmsProperty(CmsPropertyDefinition.PROPERTY_TEMPLATE_ELEMENTS,groupType,groupType));
          m_cms.writePropertyObjects(modelGroup,props);
        }
        List<CmsContainerBean> modelContainers=new ArrayList<CmsContainerBean>();
        CmsContainerElementBean baseElement=element.clone();
        CmsContainerBean baseContainer=new CmsContainerBean(MODEL_GROUP_BASE_CONTAINER,MODEL_GROUP_BASE_CONTAINER,null,Collections.singletonList(baseElement));
        modelContainers.add(baseContainer);
        for (        String childInstance : childInstances) {
          if (containersByParent.containsKey(childInstance)) {
            modelContainers.addAll(containersByParent.get(childInstance));
          }
        }
        CmsContainerPageBean modelPage=new CmsContainerPageBean(modelContainers);
        CmsXmlContainerPage xmlCnt=CmsXmlContainerPageFactory.unmarshal(m_cms,m_cms.readFile(modelGroup));
        xmlCnt.save(m_cms,modelPage,true);
        tryUnlock(modelGroup);
      }
 catch (      CmsException e) {
        LOG.error("Error saving model group resource.",e);
      }
    }
  }
  List<CmsContainerBean> containers=new ArrayList<CmsContainerBean>();
  for (  CmsContainerBean container : page.getContainers().values()) {
    if ((container.getParentInstanceId() == null) || !descendingInstances.contains(container.getParentInstanceId())) {
      List<CmsContainerElementBean> elements=new ArrayList<CmsContainerElementBean>();
      for (      CmsContainerElementBean element : container.getElements()) {
        if (modelInstances.containsKey(element.getInstanceId())) {
          CmsUUID modelId=new CmsUUID(modelInstances.get(element.getInstanceId()));
          CmsContainerElementBean replacer=new CmsContainerElementBean(modelId,element.getFormatterId(),element.getIndividualSettings(),false);
          elements.add(replacer);
        }
 else {
          elements.add(element);
        }
      }
      containers.add(new CmsContainerBean(container.getName(),container.getType(),container.getParentInstanceId(),container.getMaxElements(),elements));
    }
  }
  return new CmsContainerPageBean(containers);
}
