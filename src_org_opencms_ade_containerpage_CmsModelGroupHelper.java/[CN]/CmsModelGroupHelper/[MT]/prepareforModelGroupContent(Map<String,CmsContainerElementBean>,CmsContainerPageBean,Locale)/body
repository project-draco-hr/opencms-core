{
  for (  Entry<String,CmsContainerElementBean> entry : elements.entrySet()) {
    CmsContainerElementBean element=entry.getValue();
    CmsContainerPageBean modelPage=null;
    String modelInstanceId=null;
    boolean foundInstance=false;
    if (CmsModelGroupHelper.isModelGroupResource(element.getResource())) {
      modelPage=getContainerPageBean(element.getResource());
      CmsContainerElementBean baseElement=getModelBaseElement(modelPage);
      if (baseElement == null) {
        break;
      }
      String baseInstanceId=baseElement.getInstanceId();
      String originalInstanceId=element.getInstanceId();
      element=getModelReplacementElement(element,baseElement,true);
      List<CmsContainerBean> modelContainers=readModelContainers(baseInstanceId,originalInstanceId,modelPage);
      if (!m_isEditingModelGroups && baseElement.isCopyModel()) {
        modelContainers=createNewElementsForModelGroup(m_cms,modelContainers,locale);
      }
      modelContainers.addAll(page.getContainers().values());
      page=new CmsContainerPageBean(modelContainers);
      entry.setValue(element);
      m_sessionCache.setCacheContainerElement(element.editorHash(),element);
    }
 else {
      Map<String,String> settings=new HashMap<String,String>(element.getIndividualSettings());
      String source=settings.get(CmsContainerpageService.SOURCE_CONTAINERPAGE_ID_SETTING);
      settings.remove(CmsContainerpageService.SOURCE_CONTAINERPAGE_ID_SETTING);
      if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(source)) {
        try {
          CmsUUID sourceId=new CmsUUID(source);
          CmsResource sourcePage=m_cms.readResource(sourceId);
          if (CmsResourceTypeXmlContainerPage.isContainerPage(sourcePage)) {
            CmsXmlContainerPage xmlCnt=CmsXmlContainerPageFactory.unmarshal(m_cms,m_cms.readFile(sourcePage));
            modelPage=xmlCnt.getContainerPage(m_cms);
            modelInstanceId=element.getInstanceId();
          }
          settings.remove(CmsContainerElement.ELEMENT_INSTANCE_ID);
          element=CmsContainerElementBean.cloneWithSettings(element,settings);
          if (modelPage != null) {
            Map<String,List<CmsContainerBean>> containerByParent=new HashMap<String,List<CmsContainerBean>>();
            for (            CmsContainerBean container : modelPage.getContainers().values()) {
              if (container.getParentInstanceId() != null) {
                if (!containerByParent.containsKey(container.getParentInstanceId())) {
                  containerByParent.put(container.getParentInstanceId(),new ArrayList<CmsContainerBean>());
                }
                containerByParent.get(container.getParentInstanceId()).add(container);
              }
              if (!foundInstance) {
                for (                CmsContainerElementBean child : container.getElements()) {
                  if (modelInstanceId == null) {
                    if (child.getId().equals(element.getId())) {
                      modelInstanceId=child.getInstanceId();
                      foundInstance=true;
                      Map<String,String> setting=new HashMap<String,String>(child.getIndividualSettings());
                      setting.remove(CmsContainerElement.ELEMENT_INSTANCE_ID);
                      element=CmsContainerElementBean.cloneWithSettings(element,setting);
                      break;
                    }
                  }
 else {
                    if (modelInstanceId.equals(child.getInstanceId())) {
                      foundInstance=true;
                      break;
                    }
                  }
                }
              }
            }
            if (foundInstance && containerByParent.containsKey(modelInstanceId)) {
              List<CmsContainerBean> modelContainers=collectModelStructure(modelInstanceId,element.getInstanceId(),containerByParent);
              modelContainers=createNewElementsForModelGroup(m_cms,modelContainers,locale);
              modelContainers.addAll(page.getContainers().values());
              page=new CmsContainerPageBean(modelContainers);
            }
          }
          entry.setValue(element);
          m_sessionCache.setCacheContainerElement(element.editorHash(),element);
        }
 catch (        Exception e) {
          LOG.info(e.getLocalizedMessage(),e);
        }
      }
    }
  }
  return page;
}
