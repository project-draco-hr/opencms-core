{
  try {
    CmsCmisResourceHelper helper=getResourceHelper();
    Set<String> filterCollection=splitFilter(filter);
    int skip=(skipCount == null ? 0 : skipCount.intValue());
    if (skip < 0) {
      skip=0;
    }
    int max=(maxItems == null ? Integer.MAX_VALUE : maxItems.intValue());
    if (max < 0) {
      max=Integer.MAX_VALUE;
    }
    CmsObject cms=getCmsObject(context);
    CmsUUID structureId=new CmsUUID(folderId);
    CmsResource folder=cms.readResource(structureId);
    if (!folder.isFolder()) {
      throw new CmisObjectNotFoundException("Not a folder!");
    }
    if (context.isObjectInfoRequired()) {
      helper.collectObjectData(context,cms,folder,null,false,false,includeRelationships);
    }
    ObjectInFolderListImpl result=new ObjectInFolderListImpl();
    String folderSitePath=cms.getRequestContext().getSitePath(folder);
    List<CmsResource> children=cms.getResourcesInFolder(folderSitePath,CmsResourceFilter.DEFAULT);
    CmsObjectListLimiter<CmsResource> limiter=new CmsObjectListLimiter<CmsResource>(children,maxItems,skipCount);
    List<ObjectInFolderData> resultObjects=new ArrayList<ObjectInFolderData>();
    for (    CmsResource child : limiter) {
      ObjectInFolderDataImpl objectInFolder=new ObjectInFolderDataImpl();
      objectInFolder.setObject(helper.collectObjectData(context,cms,child,filterCollection,includeAllowableActions,false,includeRelationships));
      if (includePathSegment) {
        objectInFolder.setPathSegment(child.getName());
      }
      resultObjects.add(objectInFolder);
    }
    result.setObjects(resultObjects);
    result.setNumItems(BigInteger.valueOf(children.size()));
    result.setHasMoreItems(Boolean.valueOf(limiter.hasMore()));
    return result;
  }
 catch (  CmsException e) {
    handleCmsException(e);
    return null;
  }
}
