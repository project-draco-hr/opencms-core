{
  RepositoryInfoImpl repositoryInfo=new RepositoryInfoImpl();
  repositoryInfo.setId(m_id);
  repositoryInfo.setName(getName());
  repositoryInfo.setDescription(getDescription());
  repositoryInfo.setCmisVersionSupported("1.0");
  repositoryInfo.setProductName("OpenCms");
  repositoryInfo.setProductVersion(OpenCms.getSystemInfo().getVersion());
  repositoryInfo.setVendorName("Alkacon Software GmbH");
  repositoryInfo.setRootFolder(m_root.getStructureId().toString());
  repositoryInfo.setThinClientUri("");
  repositoryInfo.setPrincipalAnonymous(OpenCms.getDefaultUsers().getUserGuest());
  repositoryInfo.setChangesIncomplete(Boolean.TRUE);
  RepositoryCapabilitiesImpl capabilities=new RepositoryCapabilitiesImpl();
  capabilities.setCapabilityAcl(CapabilityAcl.DISCOVER);
  capabilities.setAllVersionsSearchable(Boolean.FALSE);
  capabilities.setCapabilityJoin(CapabilityJoin.NONE);
  capabilities.setSupportsMultifiling(Boolean.FALSE);
  capabilities.setSupportsUnfiling(Boolean.FALSE);
  capabilities.setSupportsVersionSpecificFiling(Boolean.FALSE);
  capabilities.setIsPwcSearchable(Boolean.FALSE);
  capabilities.setIsPwcUpdatable(Boolean.FALSE);
  capabilities.setCapabilityQuery(getIndex() != null ? CapabilityQuery.FULLTEXTONLY : CapabilityQuery.NONE);
  capabilities.setCapabilityChanges(CapabilityChanges.NONE);
  capabilities.setCapabilityContentStreamUpdates(CapabilityContentStreamUpdates.ANYTIME);
  capabilities.setSupportsGetDescendants(Boolean.TRUE);
  capabilities.setSupportsGetFolderTree(Boolean.TRUE);
  capabilities.setCapabilityRendition(CapabilityRenditions.READ);
  repositoryInfo.setCapabilities(capabilities);
  AclCapabilitiesDataImpl aclCapability=new AclCapabilitiesDataImpl();
  aclCapability.setSupportedPermissions(SupportedPermissions.BOTH);
  aclCapability.setAclPropagation(AclPropagation.REPOSITORYDETERMINED);
  List<PermissionDefinition> permissions=new ArrayList<PermissionDefinition>();
  permissions.add(createPermission(CMIS_READ,"Read"));
  permissions.add(createPermission(CMIS_WRITE,"Write"));
  permissions.add(createPermission(CMIS_ALL,"All"));
  aclCapability.setPermissionDefinitionData(permissions);
  PermissionMappings m=new PermissionMappings();
  m.add(PermissionMapping.CAN_CREATE_DOCUMENT_FOLDER,CMIS_WRITE);
  m.add(PermissionMapping.CAN_CREATE_FOLDER_FOLDER,CMIS_WRITE);
  m.add(PermissionMapping.CAN_DELETE_CONTENT_DOCUMENT,CMIS_WRITE);
  m.add(PermissionMapping.CAN_DELETE_OBJECT,CMIS_WRITE);
  m.add(PermissionMapping.CAN_DELETE_TREE_FOLDER,CMIS_WRITE);
  m.add(PermissionMapping.CAN_GET_ACL_OBJECT,CMIS_READ);
  m.add(PermissionMapping.CAN_GET_ALL_VERSIONS_VERSION_SERIES,CMIS_READ);
  m.add(PermissionMapping.CAN_GET_CHILDREN_FOLDER,CMIS_READ);
  m.add(PermissionMapping.CAN_GET_DESCENDENTS_FOLDER,CMIS_READ);
  m.add(PermissionMapping.CAN_GET_FOLDER_PARENT_OBJECT,CMIS_READ);
  m.add(PermissionMapping.CAN_GET_PARENTS_FOLDER,CMIS_READ);
  m.add(PermissionMapping.CAN_GET_PROPERTIES_OBJECT,CMIS_READ);
  m.add(PermissionMapping.CAN_MOVE_OBJECT,CMIS_WRITE);
  m.add(PermissionMapping.CAN_MOVE_SOURCE,CMIS_WRITE);
  m.add(PermissionMapping.CAN_MOVE_TARGET,CMIS_WRITE);
  m.add(PermissionMapping.CAN_SET_CONTENT_DOCUMENT,CMIS_WRITE);
  m.add(PermissionMapping.CAN_UPDATE_PROPERTIES_OBJECT,CMIS_WRITE);
  m.add(PermissionMapping.CAN_VIEW_CONTENT_OBJECT,CMIS_READ);
  aclCapability.setPermissionMappingData(m);
  repositoryInfo.setAclCapabilities(aclCapability);
  return repositoryInfo;
}
