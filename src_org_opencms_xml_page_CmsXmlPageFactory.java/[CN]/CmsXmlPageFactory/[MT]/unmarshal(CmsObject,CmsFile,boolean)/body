{
  byte[] content=file.getContents();
  String fileName=cms.getSitePath(file);
  boolean allowRelative=false;
  try {
    allowRelative=Boolean.valueOf(cms.readPropertyObject(fileName,CmsXmlPage.C_PROPERTY_ALLOW_RELATIVE,false).getValue()).booleanValue();
  }
 catch (  CmsException e) {
  }
  String encoding=null;
  try {
    encoding=cms.readPropertyObject(fileName,CmsPropertyDefinition.PROPERTY_CONTENT_ENCODING,true).getValue();
  }
 catch (  CmsException e) {
  }
  if (encoding == null) {
    encoding=OpenCms.getSystemInfo().getDefaultEncoding();
  }
 else {
    encoding=CmsEncoder.lookupEncoding(encoding,null);
    if (encoding == null) {
      throw new CmsXmlException(Messages.get().container(Messages.ERR_XML_PAGE_FACT_INVALID_ENC_1,fileName));
    }
  }
  CmsXmlPage newPage;
  if (content.length > 0) {
    if (keepEncoding) {
      newPage=unmarshal(content,encoding,new CmsXmlEntityResolver(cms));
    }
 else {
      try {
        String contentStr=new String(content,encoding);
        newPage=unmarshal(contentStr,encoding,new CmsXmlEntityResolver(cms));
      }
 catch (      UnsupportedEncodingException e) {
        throw new CmsXmlException(Messages.get().container(Messages.ERR_XML_PAGE_FACT_INVALID_ENC_1,fileName),e);
      }
    }
  }
 else {
    newPage=new CmsXmlPage(cms.getRequestContext().getLocale(),encoding);
  }
  newPage.setFile(file);
  newPage.setAllowRelativeLinks(allowRelative);
  return newPage;
}
