{
  int onlineProjectId=I_CmsConstants.C_UNKNOWN_ID;
  int offlineProjectId=I_CmsConstants.C_UNKNOWN_ID;
  try {
    offlineProjectId=cms.getRequestContext().currentProject().getId();
    onlineProjectId=cms.onlineProject().getId();
  }
 catch (  CmsException exc) {
  }
  if (!isOnlineProject(cms)) {
    try {
      if ((cms.getRequestContext().currentUser().getId().equals(dataset.m_userId)) || cms.isAdmin()) {
        return offlineProjectId;
      }
    }
 catch (    CmsException exc) {
    }
    String statement_key="read_channel_offline";
    PreparedStatement stmt=null;
    ResultSet res=null;
    Connection conn=null;
    try {
      cms.setContextToCos();
      conn=m_SqlQueries.getConnection();
      stmt=m_SqlQueries.getPreparedStatement(conn,statement_key);
      stmt.setString(1,dataset.m_masterId.toString());
      res=stmt.executeQuery();
      while (res.next()) {
        int channeldId=res.getInt(1);
        Vector resources=new Vector();
        try {
          resources=cms.getResourcesWithProperty(I_CmsConstants.C_PROPERTY_CHANNELID,channeldId + "",I_CmsConstants.C_TYPE_FOLDER);
        }
 catch (        CmsException exc) {
        }
        if (resources.size() >= 1) {
          int resProjectId=((CmsResource)resources.get(0)).getProjectId();
          if (resProjectId == offlineProjectId) {
            return offlineProjectId;
          }
        }
      }
    }
  finally {
      cms.setContextToVfs();
      m_SqlQueries.closeAll(conn,stmt,res);
    }
  }
  return onlineProjectId;
}
