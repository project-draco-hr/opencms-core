{
  CmsLazyTree<CmsLazyTreeItem> tree=new CmsLazyTree<CmsLazyTreeItem>(new A_CmsLazyOpenHandler<CmsLazyTreeItem>(){
    /** 
 * @see org.opencms.gwt.client.ui.tree.I_CmsLazyOpenHandler#load(org.opencms.gwt.client.ui.tree.CmsLazyTreeItem)
 */
    public void load(    final CmsLazyTreeItem target){
      CmsVfsEntryBean entry=target.getData();
      String path=entry.getRootPath();
      AsyncCallback<List<CmsVfsEntryBean>> callback=new AsyncCallback<List<CmsVfsEntryBean>>(){
        /** 
 * @see com.google.gwt.user.client.rpc.AsyncCallback#onFailure(java.lang.Throwable)
 */
        public void onFailure(        Throwable caught){
        }
        /** 
 * @see com.google.gwt.user.client.rpc.AsyncCallback#onSuccess(java.lang.Object)
 */
        public void onSuccess(        List<CmsVfsEntryBean> result){
          for (          CmsVfsEntryBean childEntry : result) {
            CmsLazyTreeItem item=createItem(childEntry);
            target.addChild(item);
          }
          target.onFinishLoading();
          target.setOpen(true,false);
          onContentChange();
        }
      }
;
      m_tabHandler.getSubFolders(path,callback);
    }
  }
);
  tree.addOpenHandler(new OpenHandler<CmsLazyTreeItem>(){
    public void onOpen(    OpenEvent<CmsLazyTreeItem> event){
      Set<CmsUUID> ids=getOpenElementIds();
      CmsVfsEntryBean entry=event.getTarget().getData();
      ids.add(entry.getStructureId());
      getTabHandler().onChangeTreeState(ids);
      onContentChange();
    }
  }
);
  tree.addCloseHandler(new CloseHandler<CmsLazyTreeItem>(){
    public void onClose(    CloseEvent<CmsLazyTreeItem> event){
      Set<CmsUUID> ids=getOpenElementIds();
      CmsVfsEntryBean entry=event.getTarget().getData();
      ids.remove(entry.getStructureId());
      getTabHandler().onChangeTreeState(ids);
    }
  }
);
  return tree;
}
