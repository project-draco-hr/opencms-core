{
  CmsListItemWidget itemWidget=createListItemWidget(resourceBean);
  final CmsStyleVariable styleVar=new CmsStyleVariable(itemWidget);
  styleVar.setValue(CSS.itemToKeep());
  final CmsCheckBox checkbox=new CmsCheckBox();
  CmsTreeItem row;
  row=new CmsTreeItem(true,checkbox,itemWidget);
  if (isSubItem) {
    checkbox.getElement().getStyle().setVisibility(Visibility.HIDDEN);
  }
  row.setOpen(false);
  row.addStyleName(CSS.publishRow());
  if (!isSubItem) {
    ClickHandler checkboxHandler=new ClickHandler(){
      /** 
 * @see com.google.gwt.event.dom.client.ClickHandler#onClick(com.google.gwt.event.dom.client.ClickEvent)
 */
      public void onClick(      ClickEvent event){
        boolean checked=checkbox.isChecked();
        m_model.signal(checked ? Signal.publish : Signal.unpublish,resourceBean.getId());
      }
    }
;
    checkbox.addClickHandler(checkboxHandler);
    final boolean hasProblem=CmsPublishDataModel.hasProblems(resourceBean);
    if (hasProblem) {
      checkbox.setChecked(false);
      checkbox.setEnabled(false);
    }
    final CmsCheckBox remover=new CmsCheckBox();
    final CmsPublishItemSelectionController controller=new CmsPublishItemSelectionController(resourceBean.getId(),checkbox,remover,styleVar,hasProblem);
    m_controllersById.put(resourceBean.getId(),controller);
    remover.setTitle(Messages.get().key(Messages.GUI_PUBLISH_REMOVE_BUTTON_0));
    remover.addClickHandler(new ClickHandler(){
      /** 
 * @see com.google.gwt.event.dom.client.ClickHandler#onClick(com.google.gwt.event.dom.client.ClickEvent)
 */
      public void onClick(      ClickEvent e){
        boolean remove=remover.isChecked();
        m_model.signal(remove ? Signal.remove : Signal.unremove,resourceBean.getId());
      }
    }
);
    itemWidget.addButtonToFront(remover);
    controller.update(status);
  }
  return row;
}
