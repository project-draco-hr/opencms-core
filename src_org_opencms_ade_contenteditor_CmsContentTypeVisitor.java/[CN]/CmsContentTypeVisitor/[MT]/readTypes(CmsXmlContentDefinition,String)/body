{
  String typeName=CmsContentService.getTypeUri(xmlContentDefinition);
  if (m_registeredTypes.containsKey(typeName)) {
    return m_registeredTypes.get(typeName);
  }
  CmsType type=new CmsType(typeName);
  type.setChoiceMaxOccurrence(xmlContentDefinition.getChoiceMaxOccurs());
  m_registeredTypes.put(typeName,type);
  CmsType choiceType=null;
  if (type.isChoice()) {
    choiceType=new CmsType(typeName + "/" + CmsType.CHOICE_ATTRIBUTE_NAME);
    m_registeredTypes.put(choiceType.getId(),choiceType);
    type.addAttribute(CmsType.CHOICE_ATTRIBUTE_NAME,choiceType,1,xmlContentDefinition.getChoiceMaxOccurs());
  }
  ArrayList<DisplayTypeEvaluator> evaluators=new ArrayList<DisplayTypeEvaluator>();
  for (  I_CmsXmlSchemaType subType : xmlContentDefinition.getTypeSequence()) {
    String subTypeName=null;
    String childPath=path + "/" + subType.getName();
    String subAttributeName=CmsContentService.getAttributeName(subType.getName(),typeName);
    DisplayTypeEvaluator ev=readConfiguration((A_CmsXmlContentValue)subType,childPath);
    ev.setAttributeName(subAttributeName);
    evaluators.add(ev);
    CmsType subEntityType;
    if (subType.isSimpleType()) {
      subTypeName=CmsContentService.TYPE_NAME_PREFIX + subType.getTypeName();
      if (!m_registeredTypes.containsKey(subTypeName)) {
        subEntityType=new CmsType(subTypeName);
        m_registeredTypes.put(subTypeName,subEntityType);
      }
 else {
        subEntityType=m_registeredTypes.get(subTypeName);
      }
    }
 else {
      CmsXmlContentDefinition subTypeDefinition=((CmsXmlNestedContentDefinition)subType).getNestedContentDefinition();
      subTypeName=CmsContentService.getTypeUri(subTypeDefinition);
      subEntityType=readTypes(subTypeDefinition,childPath);
    }
    if (choiceType != null) {
      choiceType.addAttribute(subAttributeName,subEntityType,subType.getMinOccurs(),subType.getMaxOccurs());
    }
 else {
      type.addAttribute(subAttributeName,subEntityType,subType.getMinOccurs(),subType.getMaxOccurs());
    }
  }
  DisplayType predecessor=null;
  for (int i=0; i < evaluators.size(); i++) {
    DisplayTypeEvaluator ev=evaluators.get(i);
    DisplayType successor=((i + 1) < evaluators.size()) ? evaluators.get(i + 1).getProposedType() : null;
    CmsAttributeConfiguration evaluated=ev.getEvaluatedConfiguration(predecessor,successor);
    m_attributeConfigurations.put(ev.getAttributeName(),evaluated);
    if (evaluated.isLocaleSynchronized()) {
      m_localeSynchronizations.add(ev.getAttributeName());
    }
    if (evaluated.isDynamicallyLoaded()) {
      m_dynamicallyLoaded.add(ev.getAttributeName());
    }
    predecessor=DisplayType.valueOf(evaluated.getDisplayType());
  }
  return type;
}
