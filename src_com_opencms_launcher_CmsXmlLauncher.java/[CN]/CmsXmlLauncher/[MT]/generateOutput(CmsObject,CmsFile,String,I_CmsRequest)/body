{
  byte[] output=null;
  Hashtable newParameters=new Hashtable();
  boolean elementCacheEnabled=cms.getRequestContext().isElementCacheEnabled();
  CmsElementCache elementCache=null;
  String uri=cms.getRequestContext().getUri();
  CmsUriDescriptor uriDesc=null;
  CmsUriLocator uriLoc=null;
  CmsUri cmsUri=null;
  String templateClass=null;
  String templateName=null;
  CmsXmlControlFile doc=null;
  if (elementCacheEnabled) {
    elementCache=cms.getRequestContext().getElementCache();
    uriDesc=new CmsUriDescriptor(uri);
    uriLoc=elementCache.getUriLocator();
    cmsUri=uriLoc.get(uriDesc);
  }
  String replace=req.getParameter(C_ELEMENT_REPLACE);
  boolean elementreplace=false;
  CmsElementDefinition replaceDef=null;
  if (replace != null) {
    int index=replace.indexOf(":");
    if (index != -1) {
      elementreplace=true;
      cmsUri=null;
      replaceDef=new CmsElementDefinition(replace.substring(0,index),"com.opencms.template.CmsXmlTemplate",replace.substring(index + 1),null,new Hashtable());
    }
  }
  if (cmsUri == null || !elementCacheEnabled) {
    try {
      doc=new CmsXmlControlFile(cms,file);
    }
 catch (    Exception e) {
      handleException(cms,e,"There was an error while parsing XML page file " + cms.readAbsolutePath(file));
      return "".getBytes();
    }
    if (!elementCacheEnabled && (replaceDef != null)) {
      doc.setElementClass(replaceDef.getName(),replaceDef.getClassName());
      doc.setElementTemplate(replaceDef.getName(),replaceDef.getTemplateName());
    }
    templateClass=doc.getTemplateClass();
    if (templateClass == null || "".equals(templateClass)) {
      templateClass=startTemplateClass;
    }
    if (templateClass == null || "".equals(templateClass)) {
      templateClass="com.opencms.template.CmsXmlTemplate";
    }
    templateName=doc.getMasterTemplate();
    if (templateName != null && !"".equals(templateName)) {
      templateName=Utils.mergeAbsolutePath(cms.readAbsolutePath(file),templateName);
    }
    Enumeration masterTemplateParams=doc.getParameterNames();
    while (masterTemplateParams.hasMoreElements()) {
      String paramName=(String)masterTemplateParams.nextElement();
      String paramValue=doc.getParameter(paramName);
      newParameters.put(C_ROOT_TEMPLATE_NAME + "." + paramName,paramValue);
    }
    Enumeration elementDefinitions=doc.getElementDefinitions();
    while (elementDefinitions.hasMoreElements()) {
      String elementName=(String)elementDefinitions.nextElement();
      if (doc.isElementClassDefined(elementName)) {
        newParameters.put(elementName + "._CLASS_",doc.getElementClass(elementName));
      }
      if (doc.isElementTemplateDefined(elementName)) {
        String template=doc.getElementTemplate(elementName);
        template=doc.validateBodyPath(cms,template,file);
        if (I_CmsConstants.C_XML_BODY_ELEMENT.equalsIgnoreCase(elementName)) {
          if (template != null) {
            cms.getRequestContext().setAttribute(I_CmsConstants.C_XML_BODY_ELEMENT,template);
          }
        }
        newParameters.put(elementName + "._TEMPLATE_",template);
      }
      if (doc.isElementTemplSelectorDefined(elementName)) {
        newParameters.put(elementName + "._TEMPLATESELECTOR_",doc.getElementTemplSelector(elementName));
      }
      Enumeration parameters=doc.getElementParameterNames(elementName);
      while (parameters.hasMoreElements()) {
        String paramName=(String)parameters.nextElement();
        String paramValue=doc.getElementParameter(elementName,paramName);
        if (paramValue != null) {
          newParameters.put(elementName + "." + paramName,paramValue);
        }
 else {
          if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
            A_OpenCms.log(C_OPENCMS_INFO,getClassName() + "Empty parameter \"" + paramName+ "\" found.");
          }
        }
      }
    }
  }
  String datafor=req.getParameter("datafor");
  if (datafor == null) {
    datafor="";
  }
 else {
    if (!"".equals(datafor)) {
      datafor=datafor + ".";
    }
  }
  Enumeration urlParameterNames=req.getParameterNames();
  while (urlParameterNames.hasMoreElements()) {
    String pname=(String)urlParameterNames.nextElement();
    String paramValue=req.getParameter(pname);
    if (paramValue != null) {
      if ((!"datafor".equals(pname)) && (!"_clearcache".equals(pname))) {
        newParameters.put(datafor + pname,paramValue);
      }
    }
 else {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(C_OPENCMS_INFO,getClassName() + "Empty URL parameter \"" + pname+ "\" found.");
      }
    }
  }
  if (elementCacheEnabled && cmsUri == null) {
    CmsElementDescriptor elemDesc=new CmsElementDescriptor(templateClass,templateName);
    CmsElementDefinitionCollection eldefs=doc.getElementDefinitionCollection();
    if (elementreplace) {
      eldefs.add(replaceDef);
      String readAccessGroup=cms.getReadingpermittedGroup(cms.getRequestContext().currentProject().getId(),templateName);
      cmsUri=new CmsUri(elemDesc,readAccessGroup,eldefs,Utils.isHttpsResource(cms,file));
    }
 else {
      cmsUri=new CmsUri(elemDesc,cms.getReadingpermittedGroup(cms.getRequestContext().currentProject().getId(),templateName),eldefs,Utils.isHttpsResource(cms,file));
      elementCache.getUriLocator().put(uriDesc,cmsUri);
    }
  }
  if (elementCacheEnabled) {
    if (cms.getMode() == C_MODUS_ONLINE) {
      String scheme=((HttpServletRequest)cms.getRequestContext().getRequest().getOriginalRequest()).getScheme();
      boolean httpsReq="https".equalsIgnoreCase(scheme);
      if (cmsUri.isHttpsResource() != httpsReq) {
        if (httpsReq) {
        }
 else         if (CmsObject.getStaticExportProperties().isStaticExportEnabled() || "false_ssl".equals(CmsObject.getStaticExportProperties().getStaticExportEnabledValue())) {
          throw new CmsException(" " + cms.readAbsolutePath(file) + " needs a https request",CmsException.C_HTTPS_REQUEST_ERROR);
        }
      }
    }
    if (elementreplace) {
      output=cmsUri.callCanonicalRoot(elementCache,cms,newParameters);
    }
 else {
      output=elementCache.callCanonicalRoot(cms,newParameters);
    }
  }
 else {
    try {
      CmsFile masterTemplate=loadMasterTemplateFile(cms,templateName,doc);
      I_CmsTemplate tmpl=getTemplateClass(cms,templateClass);
      if (!(tmpl instanceof I_CmsXmlTemplate)) {
        String errorMessage="Error in " + cms.readAbsolutePath(file) + ": "+ templateClass+ " is not a XML template class.";
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(C_OPENCMS_CRITICAL,getClassName() + errorMessage);
        }
        throw new CmsException(errorMessage,CmsException.C_XML_WRONG_TEMPLATE_CLASS);
      }
      output=callCanonicalRoot(cms,(I_CmsTemplate)tmpl,masterTemplate,newParameters);
    }
 catch (    CmsException e) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(C_OPENCMS_INFO,"[CmsXmlLauncher] There were exceptions while generating output for " + cms.readAbsolutePath(file));
        A_OpenCms.log(C_OPENCMS_INFO,"[CmsXmlLauncher] Clearing template file cache for this file.");
      }
      doc.removeFromFileCache();
      throw e;
    }
  }
  return output;
}
