{
  I_CmsRequest req=cms.getRequestContext().getRequest();
  String clearcache=req.getParameter("_clearcache");
  if (clearcache != null) {
    if ("all".equals(clearcache) || "file".equals(clearcache)) {
      A_CmsXmlContent.clearFileCache();
    }
  }
  byte[] result=null;
  CmsXmlControlFile doc=null;
  try {
    doc=new CmsXmlControlFile(cms,file);
  }
 catch (  Exception e) {
    handleException(cms,e,"There was an error while parsing XML file " + file.getAbsolutePath());
    return;
  }
  String templateClass=doc.getTemplateClass();
  if (templateClass == null || "".equals(templateClass)) {
    templateClass=startTemplateClass;
  }
  if (templateClass == null || "".equals(templateClass)) {
    templateClass="com.opencms.template.CmsXmlTemplate";
  }
  String templateName=doc.getMasterTemplate();
  CmsFile masterTemplate=loadMasterTemplateFile(cms,templateName,doc);
  I_CmsTemplate tmpl=getTemplateClass(cms,templateClass);
  if (!(tmpl instanceof I_CmsXmlTemplate)) {
    String errorMessage="Error in " + file.getAbsolutePath() + ": "+ templateClass+ " is not a XML template class.";
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(C_OPENCMS_CRITICAL,getClassName() + errorMessage);
    }
    throw new CmsException(errorMessage,CmsException.C_XML_WRONG_TEMPLATE_CLASS);
  }
  Hashtable newParameters=new Hashtable();
  Enumeration elementDefinitions=doc.getElementDefinitions();
  while (elementDefinitions.hasMoreElements()) {
    String elementName=(String)elementDefinitions.nextElement();
    if (doc.isElementClassDefined(elementName)) {
      newParameters.put(elementName + "._CLASS_",doc.getElementClass(elementName));
    }
    if (doc.isElementTemplateDefined(elementName)) {
      newParameters.put(elementName + "._TEMPLATE_",doc.getElementTemplate(elementName));
    }
    Enumeration parameters=doc.getParameterNames(elementName);
    while (parameters.hasMoreElements()) {
      String paramName=(String)parameters.nextElement();
      String paramValue=doc.getParameter(elementName,paramName);
      newParameters.put(elementName + "." + paramName,paramValue);
    }
  }
  String datafor=req.getParameter("datafor");
  if (datafor == null) {
    datafor="";
  }
 else   if (!"".equals(datafor)) {
    datafor=datafor + ".";
  }
  Enumeration urlParameterNames=req.getParameterNames();
  while (urlParameterNames.hasMoreElements()) {
    String pname=(String)urlParameterNames.nextElement();
    if ((!"datafor".equals(pname)) && (!"_clearcache".equals(pname))) {
      newParameters.put(datafor + pname,req.getParameter(pname));
    }
  }
  try {
    result=callCanonicalRoot(cms,(I_CmsTemplate)tmpl,masterTemplate,newParameters);
  }
 catch (  CmsException e) {
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(C_OPENCMS_INFO,"[CmsXmlLauncher] There were exceptions while generating output for " + file.getAbsolutePath());
      A_OpenCms.log(C_OPENCMS_INFO,"[CmsXmlLauncher] Clearing template file cache for this file.");
    }
    doc.clearFileCache(doc);
    throw e;
  }
  if (result != null) {
    writeBytesToResponse(cms,result);
  }
}
