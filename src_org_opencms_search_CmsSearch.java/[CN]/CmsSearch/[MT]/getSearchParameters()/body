{
  StringBuffer params=new StringBuffer(128);
  params.append("?action=search&query=");
  params.append(CmsEncoder.encodeParameter(m_parameters.getQuery()));
  params.append("&matchesPerPage=");
  params.append(getMatchesPerPage());
  params.append("&displayPages=");
  params.append(getDisplayPages());
  params.append("&index=");
  params.append(CmsEncoder.encodeParameter(m_parameters.getIndex()));
  Sort sort=m_parameters.getSort();
  if (sort != CmsSearchParameters.SORT_DEFAULT) {
    params.append("&sort=");
    if (sort == CmsSearchParameters.SORT_TITLE) {
      params.append("title");
    }
 else     if (sort == CmsSearchParameters.SORT_DATE_CREATED) {
      params.append("date-created");
    }
 else     if (sort == CmsSearchParameters.SORT_DATE_LASTMODIFIED) {
      params.append("date-lastmodified");
    }
  }
  if (m_parameters.getCategories() != null) {
    params.append("&category=");
    Iterator it=m_parameters.getCategories().iterator();
    while (it.hasNext()) {
      params.append(it.next());
      if (it.hasNext()) {
        params.append(',');
      }
    }
  }
  if (m_parameters.getRoots() != null) {
    params.append("&searchRoots=");
    Iterator it=m_parameters.getRoots().iterator();
    while (it.hasNext()) {
      params.append(CmsEncoder.encode((String)it.next()));
      if (it.hasNext()) {
        params.append(',');
      }
    }
  }
  int todo=0;
  return params.toString();
}
