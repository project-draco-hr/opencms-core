{
  if (m_cms != null && m_result == null && m_index != null && CmsStringUtil.isNotEmpty(m_query)) {
    if ((this.getQueryLength() > 0) && (m_query.trim().length() < this.getQueryLength())) {
      m_lastException=new CmsSearchException("Search query too short, enter at least " + this.getQueryLength() + " characters!");
      return m_result;
    }
    try {
      List result;
      String[] searchRoots=null;
      if (m_searchRoot != null) {
        searchRoots=new String[]{m_searchRoot};
      }
      String[] fields=m_fields;
      if ((fields == null) || (fields.length == 0)) {
        fields=CmsSearchIndex.C_DOC_META_FIELDS;
      }
      result=m_index.search(m_cms,searchRoots,m_query,m_sortOrder,fields,m_page,m_matchesPerPage);
      if (result.size() > 1) {
        Integer searchResultCount=(Integer)result.get(result.size() - 1);
        m_searchResultCount=searchResultCount.intValue();
        m_result=result.subList(0,result.size() - 1);
        m_pageCount=m_searchResultCount / m_matchesPerPage;
        if ((m_searchResultCount % m_matchesPerPage) != 0) {
          m_pageCount++;
        }
        String url=m_cms.getRequestContext().getUri() + getSearchParameters() + "&page=";
        if (m_page > 1) {
          m_prevUrl=url + (m_page - 1);
        }
        if (m_page < m_pageCount) {
          m_nextUrl=url + (m_page + 1);
        }
      }
 else {
        m_result=Collections.EMPTY_LIST;
        m_searchResultCount=0;
        m_pageCount=0;
        m_prevUrl=null;
        m_nextUrl=null;
      }
    }
 catch (    Exception exc) {
      if (OpenCms.getLog(this).isDebugEnabled()) {
        OpenCms.getLog(this).debug("[" + this.getClass().getName() + "] "+ "Searching failed",exc);
      }
      m_result=null;
      m_searchResultCount=0;
      m_pageCount=0;
      m_lastException=exc;
    }
  }
  return m_result;
}
