{
  Date jobStart=new Date();
  String finishMessage;
  String linkcheck=(String)parameters.get(PARAM_LINKCHECK);
  String jobName=(String)parameters.get(PARAM_JOBNAME);
  CmsProject project=cms.getRequestContext().getCurrentProject();
  CmsLogReport report=new CmsLogReport(cms.getRequestContext().getLocale(),CmsPublishScheduledJob.class);
  try {
    if (Boolean.valueOf(linkcheck).booleanValue()) {
      OpenCms.getPublishManager().validateRelations(cms,OpenCms.getPublishManager().getPublishList(cms),report);
    }
    Iterator<String> iter=cms.readProjectResources(project).iterator();
    while (iter.hasNext()) {
      String resource=iter.next();
      CmsLock lock=cms.getLock(resource);
      if ((lock != null) && lock.isInProject(cms.getRequestContext().getCurrentProject()) && !lock.isOwnedBy(cms.getRequestContext().getCurrentUser())) {
        cms.changeLock(resource);
      }
    }
    OpenCms.getPublishManager().publishProject(cms,report);
    OpenCms.getPublishManager().waitWhileRunning();
    finishMessage=Messages.get().getBundle().key(Messages.LOG_PUBLISH_FINISHED_1,project.getName());
  }
 catch (  CmsException e) {
    finishMessage=Messages.get().getBundle().key(Messages.LOG_PUBLISH_FAILED_2,project.getName(),e.getMessageContainer().key());
    report.addError(finishMessage);
  }
 finally {
    long lastTime=report.getLastEntryTime();
    long beforeLastTime=0;
    while (lastTime != beforeLastTime) {
      wait(30000);
      beforeLastTime=lastTime;
      lastTime=report.getLastEntryTime();
    }
    String jobId="";
    Iterator<CmsScheduledJobInfo> iter=OpenCms.getScheduleManager().getJobs().iterator();
    while (iter.hasNext()) {
      CmsScheduledJobInfo jobInfo=iter.next();
      if (jobInfo.getJobName().equals(jobName)) {
        jobId=jobInfo.getId();
      }
    }
    OpenCms.getScheduleManager().unscheduleJob(cms,jobId);
    if (report.hasWarning() || report.hasError()) {
      try {
        String userName=(String)parameters.get(PARAM_USER);
        CmsUser user=cms.readUser(userName);
        CmsPublishNotification notification=new CmsPublishNotification(cms,user,report);
        DateFormat df=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT);
        notification.addMacro("jobStart",df.format(jobStart));
        notification.send();
      }
 catch (      Exception e) {
        LOG.error(Messages.get().getBundle().key(Messages.LOG_PUBLISH_SEND_NOTIFICATION_FAILED_0),e);
      }
    }
  }
  return finishMessage;
}
