{
  List<CmsProperty> properties1;
  if (resource1 instanceof I_CmsHistoryResource) {
    properties1=cms.readHistoryPropertyObjects((I_CmsHistoryResource)resource1);
  }
 else {
    if (Integer.parseInt(version1) < 0) {
      CmsProject prj=cms.getRequestContext().getCurrentProject();
      try {
        cms.getRequestContext().setCurrentProject(cms.readProject(CmsProject.ONLINE_PROJECT_ID));
        properties1=cms.readPropertyObjects(resource1,false);
      }
  finally {
        cms.getRequestContext().setCurrentProject(prj);
      }
    }
 else {
      properties1=cms.readPropertyObjects(resource1,false);
    }
  }
  List<CmsProperty> properties2;
  if (resource2 instanceof I_CmsHistoryResource) {
    properties2=cms.readHistoryPropertyObjects((I_CmsHistoryResource)resource2);
  }
 else {
    if (Integer.parseInt(version2) < 0) {
      CmsProject prj=cms.getRequestContext().getCurrentProject();
      try {
        cms.getRequestContext().setCurrentProject(cms.readProject(CmsProject.ONLINE_PROJECT_ID));
        properties2=cms.readPropertyObjects(resource2,false);
      }
  finally {
        cms.getRequestContext().setCurrentProject(prj);
      }
    }
 else {
      properties2=cms.readPropertyObjects(resource2,false);
    }
  }
  List<CmsAttributeComparison> comparedProperties=new ArrayList<CmsAttributeComparison>();
  List<CmsProperty> removedProperties=new ArrayList<CmsProperty>(properties1);
  removedProperties.removeAll(properties2);
  List<CmsProperty> addedProperties=new ArrayList<CmsProperty>(properties2);
  addedProperties.removeAll(properties1);
  List<CmsProperty> retainedProperties=new ArrayList<CmsProperty>(properties2);
  retainedProperties.retainAll(properties1);
  CmsProperty prop;
  Iterator<CmsProperty> i=addedProperties.iterator();
  while (i.hasNext()) {
    prop=i.next();
    comparedProperties.add(new CmsAttributeComparison(prop.getName(),"",prop.getValue(),CmsResourceComparison.TYPE_ADDED));
  }
  i=removedProperties.iterator();
  while (i.hasNext()) {
    prop=i.next();
    comparedProperties.add(new CmsAttributeComparison(prop.getName(),prop.getValue(),"",CmsResourceComparison.TYPE_REMOVED));
  }
  i=retainedProperties.iterator();
  while (i.hasNext()) {
    prop=i.next();
    String value1=properties1.get(properties1.indexOf(prop)).getValue();
    String value2=properties2.get(properties2.indexOf(prop)).getValue();
    if (value1.equals(value2)) {
      comparedProperties.add(new CmsAttributeComparison(prop.getName(),value1,value2,CmsResourceComparison.TYPE_UNCHANGED));
    }
 else {
      comparedProperties.add(new CmsAttributeComparison(prop.getName(),value1,value2,CmsResourceComparison.TYPE_CHANGED));
    }
  }
  return comparedProperties;
}
