{
  List<Element> groupNodes;
  Element currentElement;
  String name, description, flags, parentgroup;
  try {
    groupNodes=m_docXml.selectNodes("//" + A_CmsImport.N_GROUPDATA);
    for (int i=0; i < groupNodes.size(); i++) {
      currentElement=groupNodes.get(i);
      name=getChildElementTextValue(currentElement,A_CmsImport.N_NAME);
      name=OpenCms.getImportExportManager().translateGroup(name);
      description=getChildElementTextValue(currentElement,A_CmsImport.N_DESCRIPTION);
      flags=getChildElementTextValue(currentElement,A_CmsImport.N_FLAGS);
      parentgroup=getChildElementTextValue(currentElement,A_CmsImport.N_PARENTGROUP);
      if ((parentgroup != null) && (parentgroup.length() > 0)) {
        parentgroup=OpenCms.getImportExportManager().translateGroup(parentgroup);
      }
      importGroup(name,description,flags,parentgroup);
    }
    while (!m_groupsToCreate.empty()) {
      Stack<Map<String,String>> tempStack=m_groupsToCreate;
      m_groupsToCreate=new Stack<Map<String,String>>();
      while (tempStack.size() > 0) {
        Map<String,String> groupdata=tempStack.pop();
        name=groupdata.get(A_CmsImport.N_NAME);
        description=groupdata.get(A_CmsImport.N_DESCRIPTION);
        flags=groupdata.get(A_CmsImport.N_FLAGS);
        parentgroup=groupdata.get(A_CmsImport.N_PARENTGROUP);
        importGroup(name,description,flags,parentgroup);
      }
    }
  }
 catch (  CmsImportExportException e) {
    throw e;
  }
catch (  Exception e) {
    m_report.println(e);
    CmsMessageContainer message=Messages.get().container(Messages.ERR_IMPORTEXPORT_ERROR_IMPORTING_GROUPS_0);
    if (LOG.isDebugEnabled()) {
      LOG.debug(message.key(),e);
    }
    throw new CmsImportExportException(message,e);
  }
}
