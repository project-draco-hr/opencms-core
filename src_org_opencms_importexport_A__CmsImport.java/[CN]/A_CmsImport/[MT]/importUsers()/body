{
  List userNodes;
  List groupNodes;
  List userGroups;
  Element currentElement, currentGroup;
  Map userInfo=new HashMap();
  String name, description, flags, password, firstname, lastname, email, address, pwd, infoNode, defaultGroup;
  try {
    userNodes=m_docXml.selectNodes("//" + A_CmsImport.N_USERDATA);
    for (int i=0; i < userNodes.size(); i++) {
      currentElement=(Element)userNodes.get(i);
      name=getChildElementTextValue(currentElement,A_CmsImport.N_NAME);
      name=OpenCms.getImportExportManager().translateUser(name);
      pwd=getChildElementTextValue(currentElement,A_CmsImport.N_PASSWORD);
      password=new String(Base64.decodeBase64(pwd.trim().getBytes()));
      description=getChildElementTextValue(currentElement,A_CmsImport.N_DESCRIPTION);
      flags=getChildElementTextValue(currentElement,A_CmsImport.N_FLAGS);
      firstname=getChildElementTextValue(currentElement,A_CmsImport.N_FIRSTNAME);
      lastname=getChildElementTextValue(currentElement,A_CmsImport.N_LASTNAME);
      email=getChildElementTextValue(currentElement,A_CmsImport.N_EMAIL);
      address=getChildElementTextValue(currentElement,A_CmsImport.N_TAG_ADDRESS);
      defaultGroup=getChildElementTextValue(currentElement,A_CmsImport.N_DEFAULTGROUP);
      infoNode=getChildElementTextValue(currentElement,A_CmsImport.N_USERINFO);
      try {
        byte[] value=getFileBytes(infoNode);
        ByteArrayInputStream bin=new ByteArrayInputStream(value);
        ObjectInputStream oin=new ObjectInputStream(bin);
        userInfo=(Map)oin.readObject();
      }
 catch (      IOException ioex) {
        m_report.println(ioex);
      }
catch (      ClassCastException ccex) {
        m_report.println(ccex);
      }
catch (      ClassNotFoundException cnfex) {
        m_report.println(cnfex);
      }
      groupNodes=currentElement.selectNodes("*/" + A_CmsImport.N_GROUPNAME);
      userGroups=new ArrayList();
      for (int j=0; j < groupNodes.size(); j++) {
        currentGroup=(Element)groupNodes.get(j);
        String userInGroup=getChildElementTextValue(currentGroup,A_CmsImport.N_NAME);
        userInGroup=OpenCms.getImportExportManager().translateGroup(userInGroup);
        userGroups.add(userInGroup);
      }
      if (CmsStringUtil.isNotEmpty(defaultGroup)) {
        userInfo.put(CmsUserSettings.ADDITIONAL_INFO_DEFAULTGROUP,defaultGroup);
      }
      if (description != null) {
        userInfo.put(CmsUserSettings.ADDITIONAL_INFO_DESCRIPTION,description);
      }
      if (address != null) {
        userInfo.put(CmsUserSettings.ADDITIONAL_INFO_ADDRESS,address);
      }
      importUser(name,flags,password,firstname,lastname,email,0,userInfo,userGroups);
    }
  }
 catch (  CmsImportExportException e) {
    throw e;
  }
catch (  Exception e) {
    m_report.println(e);
    CmsMessageContainer message=Messages.get().container(Messages.ERR_IMPORTEXPORT_ERROR_IMPORTING_USERS_0);
    if (LOG.isDebugEnabled()) {
      LOG.debug(message.key(),e);
    }
    throw new CmsImportExportException(message,e);
  }
}
