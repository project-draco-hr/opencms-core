{
  Iterator keys=m_linkStorage.keySet().iterator();
  int linksSize=m_linkStorage.size();
  int i=0;
  CmsResource resource=null;
  String link=null;
  String key=null;
  try {
    while (keys.hasNext()) {
      try {
        key=(String)keys.next();
        link=(String)m_linkStorage.get(key);
        List properties=(List)m_linkPropertyStorage.get(key);
        CmsProperty.setAutoCreatePropertyDefinitions(properties,true);
        m_report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_SUCCESSION_2,String.valueOf(++i),String.valueOf(linksSize)),I_CmsReport.C_FORMAT_NOTE);
        m_report.print(Messages.get().container(Messages.RPT_CONVERT_LINK_0),I_CmsReport.C_FORMAT_NOTE);
        m_report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_ARGUMENT_1,key + " "));
        m_report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_DOTS_0));
        if (link.startsWith("/")) {
          CmsResource target=m_cms.readResource(link);
          resource=new CmsResource(new CmsUUID(),target.getResourceId(),key,target.getTypeId(),target.isFolder(),0,m_cms.getRequestContext().currentProject().getId(),I_CmsConstants.C_STATE_NEW,target.getDateCreated(),target.getUserCreated(),target.getDateLastModified(),target.getUserLastModified(),CmsResource.DATE_RELEASED_DEFAULT,CmsResource.DATE_EXPIRED_DEFAULT,1,0);
          m_cms.importResource(key,resource,null,properties);
          m_report.println(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_OK_0),I_CmsReport.C_FORMAT_OK);
          if (LOG.isInfoEnabled()) {
            LOG.info(Messages.get().key(Messages.LOG_CONVERT_LINK_DOTS_OK_3,String.valueOf(i),String.valueOf(linksSize),key));
          }
        }
 else {
          m_cms.createResource(key,CmsResourceTypePointer.getStaticTypeId(),link.getBytes(),properties);
          m_report.println(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_OK_0),I_CmsReport.C_FORMAT_OK);
          if (LOG.isInfoEnabled()) {
            LOG.info(Messages.get().key(Messages.LOG_CONVERT_LINK_OK_3,String.valueOf(i),String.valueOf(linksSize),key));
          }
        }
      }
 catch (      CmsException e) {
        m_report.println();
        m_report.print(Messages.get().container(Messages.RPT_CONVERT_LINK_NOTFOUND_1,link),I_CmsReport.C_FORMAT_WARNING);
        if (LOG.isErrorEnabled()) {
          LOG.error(Messages.get().key(Messages.ERR_IMPORTEXPORT_LINK_CONVERSION_FAILED_2,key,link),e);
        }
      }
    }
  }
  finally {
    if (m_linkStorage != null) {
      m_linkStorage.clear();
    }
    m_linkStorage=null;
    if (m_linkPropertyStorage != null) {
      m_linkPropertyStorage.clear();
    }
    m_linkPropertyStorage=null;
  }
}
