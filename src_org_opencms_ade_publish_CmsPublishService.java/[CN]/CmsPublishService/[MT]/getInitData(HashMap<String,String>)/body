{
  CmsPublishData result=null;
  CmsObject cms=getCmsObject();
  boolean canOverrideWorkflow=true;
  try {
    String closeLink=getRequest().getParameter(CmsDialog.PARAM_CLOSELINK);
    String confirmStr=getRequest().getParameter(PARAM_CONFIRM);
    boolean confirm=Boolean.parseBoolean(confirmStr);
    Map<String,CmsWorkflow> workflows=OpenCms.getWorkflowManager().getWorkflows(cms);
    if (workflows.isEmpty()) {
      throw new Exception("No workflow available for the current user");
    }
    String workflowId=getRequest().getParameter(PARAM_WORKFLOW_ID);
    if (CmsStringUtil.isEmptyOrWhitespaceOnly(workflowId) || !workflows.containsKey(workflowId)) {
      workflowId=getLastWorkflowForUser();
      if (CmsStringUtil.isEmptyOrWhitespaceOnly(workflowId) || !workflows.containsKey(workflowId)) {
        workflowId=workflows.values().iterator().next().getId();
      }
    }
 else {
      canOverrideWorkflow=false;
    }
    setLastWorkflowForUser(workflowId);
    String projectParam=getRequest().getParameter(PARAM_PUBLISH_PROJECT_ID);
    String filesParam=getRequest().getParameter(CmsMultiDialog.PARAM_RESOURCELIST);
    if (CmsStringUtil.isEmptyOrWhitespaceOnly(filesParam)) {
      filesParam=getRequest().getParameter(CmsDialog.PARAM_RESOURCE);
    }
    if (!CmsStringUtil.isEmptyOrWhitespaceOnly(filesParam)) {
      params.put(CmsPublishOptions.PARAM_FILES,filesParam);
    }
    boolean useCurrentPage=params.containsKey(CmsPublishOptions.PARAM_START_WITH_CURRENT_PAGE);
    CmsPublishOptions options=getCachedOptions();
    List<CmsProjectBean> projects=OpenCms.getWorkflowManager().getManageableProjects(cms,params);
    boolean foundProject=false;
    CmsUUID selectedProject=null;
    if (useCurrentPage) {
      selectedProject=CmsCurrentPageProject.ID;
      foundProject=true;
    }
 else     if (!CmsStringUtil.isEmptyOrWhitespaceOnly(filesParam)) {
      params.put(CmsPublishOptions.PARAM_ENABLE_INCLUDE_CONTENTS,Boolean.TRUE.toString());
      params.put(CmsPublishOptions.PARAM_INCLUDE_CONTENTS,Boolean.TRUE.toString());
      selectedProject=CmsDirectPublishProject.ID;
      foundProject=true;
    }
 else {
      if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(projectParam) && CmsUUID.isValidUUID(projectParam)) {
        selectedProject=new CmsUUID(projectParam);
        for (        CmsProjectBean project : projects) {
          if (selectedProject.equals(project.getId())) {
            foundProject=true;
            if (project.isWorkflowProject()) {
              canOverrideWorkflow=false;
              workflowId=OpenCms.getWorkflowManager().getWorkflowForWorkflowProject(selectedProject);
            }
            break;
          }
        }
      }
      if (!foundProject) {
        selectedProject=options.getProjectId();
        for (        CmsProjectBean project : projects) {
          if (selectedProject.equals(project.getId())) {
            foundProject=true;
            if (project.isWorkflowProject()) {
              canOverrideWorkflow=false;
              workflowId=OpenCms.getWorkflowManager().getWorkflowForWorkflowProject(selectedProject);
            }
            break;
          }
        }
      }
    }
    if (foundProject) {
      options.setProjectId(selectedProject);
    }
 else {
      options.setProjectId(CmsUUID.getNullUUID());
    }
    options.setParameters(params);
    result=new CmsPublishData(options,projects,getResourceGroups(workflows.get(workflowId),options,canOverrideWorkflow),workflows,workflowId);
    result.setCloseLink(closeLink);
    result.setShowConfirmation(confirm);
  }
 catch (  Throwable e) {
    error(e);
  }
  return result;
}
