{
  m_document=document;
  m_contentDefinition=definition;
  m_encoding=CmsEncoder.lookupEncoding(encoding,encoding);
  m_elementLocales=new HashMap<String,Set<Locale>>();
  m_elementNames=new HashMap<Locale,Set<String>>();
  m_locales=new HashSet<Locale>();
  m_cntPages=new HashMap<Locale,CmsContainerPageBean>();
  clearBookmarks();
  for (Iterator<Element> itCntPages=CmsXmlGenericWrapper.elementIterator(m_document.getRootElement()); itCntPages.hasNext(); ) {
    Element cntPage=itCntPages.next();
    try {
      Locale locale=CmsLocaleManager.getLocale(cntPage.attribute(CmsXmlContentDefinition.XSD_ATTRIBUTE_VALUE_LANGUAGE).getValue());
      addLocale(locale);
      List<CmsContainerBean> containers=new ArrayList<CmsContainerBean>();
      for (Iterator<Element> itCnts=CmsXmlGenericWrapper.elementIterator(cntPage,XmlNode.CONTAINER.getName()); itCnts.hasNext(); ) {
        Element container=itCnts.next();
        int cntIndex=CmsXmlUtils.getXpathIndexInt(container.getUniquePath(cntPage));
        String cntPath=CmsXmlUtils.createXpathElement(container.getName(),cntIndex);
        I_CmsXmlSchemaType cntSchemaType=definition.getSchemaType(container.getName());
        I_CmsXmlContentValue cntValue=cntSchemaType.createValue(this,container,locale);
        addBookmark(cntPath,locale,true,cntValue);
        CmsXmlContentDefinition cntDef=((CmsXmlNestedContentDefinition)cntSchemaType).getNestedContentDefinition();
        Element name=container.element(XmlNode.NAME.getName());
        createBookmark(name,locale,container,cntPath,cntDef);
        Element type=container.element(XmlNode.TYPE.getName());
        createBookmark(type,locale,container,cntPath,cntDef);
        List<CmsContainerElementBean> elements=new ArrayList<CmsContainerElementBean>();
        for (Iterator<Element> itElems=CmsXmlGenericWrapper.elementIterator(container,XmlNode.ELEMENT.getName()); itElems.hasNext(); ) {
          Element element=itElems.next();
          int elemIndex=CmsXmlUtils.getXpathIndexInt(element.getUniquePath(container));
          String elemPath=CmsXmlUtils.concatXpath(cntPath,CmsXmlUtils.createXpathElement(element.getName(),elemIndex));
          I_CmsXmlSchemaType elemSchemaType=cntDef.getSchemaType(element.getName());
          I_CmsXmlContentValue elemValue=elemSchemaType.createValue(this,element,locale);
          addBookmark(elemPath,locale,true,elemValue);
          CmsXmlContentDefinition elemDef=((CmsXmlNestedContentDefinition)elemSchemaType).getNestedContentDefinition();
          Element uri=element.element(XmlNode.URI.getName());
          createBookmark(uri,locale,element,elemPath,elemDef);
          Element uriLink=uri.element(CmsXmlPage.NODE_LINK);
          CmsUUID elementId=null;
          if (uriLink == null) {
          }
 else {
            elementId=new CmsLink(uriLink).getStructureId();
          }
          Element formatter=element.element(XmlNode.FORMATTER.getName());
          createBookmark(formatter,locale,element,elemPath,elemDef);
          Element formatterLink=formatter.element(CmsXmlPage.NODE_LINK);
          CmsUUID formatterId=null;
          if (formatterLink == null) {
          }
 else {
            formatterId=new CmsLink(formatterLink).getStructureId();
          }
          Map<String,String> propertiesMap=new HashMap<String,String>();
          for (Iterator<Element> itProps=CmsXmlGenericWrapper.elementIterator(element,XmlNode.PROPERTIES.getName()); itProps.hasNext(); ) {
            Element property=itProps.next();
            int propIndex=CmsXmlUtils.getXpathIndexInt(property.getUniquePath(element));
            String propPath=CmsXmlUtils.concatXpath(elemPath,CmsXmlUtils.createXpathElement(property.getName(),propIndex));
            I_CmsXmlSchemaType propSchemaType=elemDef.getSchemaType(property.getName());
            I_CmsXmlContentValue propValue=propSchemaType.createValue(this,property,locale);
            addBookmark(propPath,locale,true,propValue);
            CmsXmlContentDefinition propDef=((CmsXmlNestedContentDefinition)propSchemaType).getNestedContentDefinition();
            Element propName=property.element(XmlNode.NAME.getName());
            createBookmark(propName,locale,property,propPath,propDef);
            Element value=property.element(XmlNode.VALUE.getName());
            int valueIndex=CmsXmlUtils.getXpathIndexInt(value.getUniquePath(property));
            String valuePath=CmsXmlUtils.concatXpath(propPath,CmsXmlUtils.createXpathElement(value.getName(),valueIndex));
            I_CmsXmlSchemaType valueSchemaType=propDef.getSchemaType(value.getName());
            I_CmsXmlContentValue valueValue=valueSchemaType.createValue(this,value,locale);
            addBookmark(valuePath,locale,true,valueValue);
            CmsXmlContentDefinition valueDef=((CmsXmlNestedContentDefinition)valueSchemaType).getNestedContentDefinition();
            String val=null;
            Element string=value.element(XmlNode.STRING.getName());
            if (string != null) {
              createBookmark(string,locale,value,valuePath,valueDef);
              val=string.getTextTrim();
            }
 else {
              Element valueUri=value.element(XmlNode.URI.getName());
              createBookmark(valueUri,locale,value,valuePath,valueDef);
              Element valueUriLink=valueUri.element(CmsXmlPage.NODE_LINK);
              val=new CmsLink(valueUriLink).getStructureId().toString();
            }
            propertiesMap.put(propName.getTextTrim(),val);
          }
          if (elementId != null) {
            elements.add(new CmsContainerElementBean(elementId,formatterId,propertiesMap));
          }
        }
        containers.add(new CmsContainerBean(name.getText(),type.getText(),-1,elements));
      }
      m_cntPages.put(locale,new CmsContainerPageBean(locale,containers));
    }
 catch (    NullPointerException e) {
      LOG.error(org.opencms.xml.content.Messages.get().getBundle().key(org.opencms.xml.content.Messages.LOG_XMLCONTENT_INIT_BOOKMARKS_0),e);
    }
  }
}
