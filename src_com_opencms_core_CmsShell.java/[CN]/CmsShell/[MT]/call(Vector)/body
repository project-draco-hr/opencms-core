{
  if ((command == null) || (command.size() == 0)) {
    return;
  }
  String splittet[]=new String[command.size()];
  String toCall;
  command.copyInto(splittet);
  toCall=splittet[0];
  Class paramClasses[]=new Class[splittet.length - 1];
  String params[]=new String[splittet.length - 1];
  for (int z=0; z < splittet.length - 1; z++) {
    params[z]=splittet[z + 1];
    paramClasses[z]=String.class;
  }
  try {
    getClass().getMethod(toCall,paramClasses).invoke(this,params);
  }
 catch (  Exception exc) {
    if (exc instanceof InvocationTargetException) {
      Throwable ex=((InvocationTargetException)exc).getTargetException();
      System.err.println("Got Exception while useing reflection:");
      ex.printStackTrace();
    }
 else {
      printException(exc);
    }
  }
}
