{
  String source, destination, type, uuidresource, userlastmodified, usercreated, flags, timestamp;
  long datelastmodified, datecreated;
  List<Element> fileNodes, acentryNodes;
  Element currentElement, currentEntry;
  List<CmsProperty> properties=null;
  List<String> deleteProperties=OpenCms.getImportExportManager().getIgnoredProperties();
  if (deleteProperties == null) {
    deleteProperties=new ArrayList<String>();
  }
  List<String> immutableResources=OpenCms.getImportExportManager().getImmutableResources();
  if (immutableResources == null) {
    immutableResources=Collections.EMPTY_LIST;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().getBundle().key(Messages.LOG_IMPORTEXPORT_IMMUTABLE_RESOURCES_SIZE_1,Integer.toString(immutableResources.size())));
  }
  m_convertToXmlPage=OpenCms.getImportExportManager().convertToXmlPage();
  try {
    fileNodes=m_docXml.selectNodes("//" + A_CmsImport.N_FILE);
    int importSize=fileNodes.size();
    for (int i=0; i < fileNodes.size(); i++) {
      m_report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_SUCCESSION_2,String.valueOf(i + 1),String.valueOf(importSize)));
      currentElement=fileNodes.get(i);
      source=getChildElementTextValue(currentElement,A_CmsImport.N_SOURCE);
      destination=getChildElementTextValue(currentElement,A_CmsImport.N_DESTINATION);
      type=getChildElementTextValue(currentElement,A_CmsImport.N_TYPE);
      uuidresource=getChildElementTextValue(currentElement,A_CmsImport.N_UUIDRESOURCE);
      timestamp=getChildElementTextValue(currentElement,A_CmsImport.N_DATELASTMODIFIED);
      if (timestamp != null) {
        datelastmodified=Long.parseLong(timestamp);
      }
 else {
        datelastmodified=System.currentTimeMillis();
      }
      userlastmodified=getChildElementTextValue(currentElement,A_CmsImport.N_USERLASTMODIFIED);
      timestamp=getChildElementTextValue(currentElement,A_CmsImport.N_DATECREATED);
      if (timestamp != null) {
        datecreated=Long.parseLong(timestamp);
      }
 else {
        datecreated=System.currentTimeMillis();
      }
      usercreated=getChildElementTextValue(currentElement,A_CmsImport.N_USERCREATED);
      flags=getChildElementTextValue(currentElement,A_CmsImport.N_FLAGS);
      String translatedName=m_cms.getRequestContext().addSiteRoot(m_importPath + destination);
      if (CmsResourceTypeFolder.RESOURCE_TYPE_NAME.equals(type)) {
        translatedName+="/";
      }
      translatedName=m_cms.getRequestContext().getDirectoryTranslator().translateResource(translatedName);
      boolean resourceNotImmutable=checkImmutable(translatedName,immutableResources);
      translatedName=m_cms.getRequestContext().removeSiteRoot(translatedName);
      if (resourceNotImmutable) {
        m_report.print(Messages.get().container(Messages.RPT_IMPORTING_0),I_CmsReport.FORMAT_NOTE);
        m_report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_ARGUMENT_1,translatedName));
        properties=readPropertiesFromManifest(currentElement,deleteProperties);
        CmsResource res=importResource(source,destination,type,uuidresource,datelastmodified,userlastmodified,datecreated,usercreated,flags,properties);
        List<CmsAccessControlEntry> aceList=new ArrayList<CmsAccessControlEntry>();
        if (res != null) {
          acentryNodes=currentElement.selectNodes("*/" + A_CmsImport.N_ACCESSCONTROL_ENTRY);
          for (int j=0; j < acentryNodes.size(); j++) {
            currentEntry=acentryNodes.get(j);
            String id=getChildElementTextValue(currentEntry,A_CmsImport.N_ACCESSCONTROL_PRINCIPAL);
            String acflags=getChildElementTextValue(currentEntry,A_CmsImport.N_FLAGS);
            String allowed=getChildElementTextValue(currentEntry,A_CmsImport.N_ACCESSCONTROL_PERMISSIONSET + "/" + A_CmsImport.N_ACCESSCONTROL_ALLOWEDPERMISSIONS);
            String denied=getChildElementTextValue(currentEntry,A_CmsImport.N_ACCESSCONTROL_PERMISSIONSET + "/" + A_CmsImport.N_ACCESSCONTROL_DENIEDPERMISSIONS);
            try {
              String principalId=new CmsUUID().toString();
              String principal=id.substring(id.indexOf('.') + 1,id.length());
              if (id.startsWith(I_CmsPrincipal.PRINCIPAL_GROUP)) {
                principal=OpenCms.getImportExportManager().translateGroup(principal);
                principalId=m_cms.readGroup(principal).getId().toString();
              }
 else {
                principal=OpenCms.getImportExportManager().translateUser(principal);
                principalId=m_cms.readUser(principal).getId().toString();
              }
              aceList.add(getImportAccessControlEntry(res,principalId,allowed,denied,acflags));
            }
 catch (            CmsDataAccessException e) {
            }
          }
          importAccessControlEntries(res,aceList);
        }
 else {
          m_report.print(Messages.get().container(Messages.RPT_SKIPPING_0),I_CmsReport.FORMAT_NOTE);
          m_report.println(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_ARGUMENT_1,translatedName));
        }
      }
 else {
        m_report.print(Messages.get().container(Messages.RPT_SKIPPING_0),I_CmsReport.FORMAT_NOTE);
        m_report.println(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_ARGUMENT_1,translatedName));
      }
    }
  }
 catch (  Exception e) {
    m_report.println(e);
    m_report.addError(e);
    CmsMessageContainer message=Messages.get().container(Messages.ERR_IMPORTEXPORT_ERROR_IMPORTING_RESOURCES_0);
    if (LOG.isDebugEnabled()) {
      LOG.debug(message.key(),e);
    }
    throw new CmsImportExportException(message,e);
  }
}
