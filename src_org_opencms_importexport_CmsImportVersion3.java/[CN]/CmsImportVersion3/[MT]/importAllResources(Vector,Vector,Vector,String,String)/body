{
  String source, destination, type, uuidstructure, uuidresource, uuidcontent, userlastmodified, usercreated, flags, timestamp;
  long datelastmodified, datecreated;
  int resType;
  List fileNodes, acentryNodes;
  Element currentElement, currentEntry;
  List properties=null;
  if (m_importingChannelData) {
    m_cms.getRequestContext().saveSiteRoot();
    m_cms.setContextToCos();
  }
  if (excludeList == null) {
    excludeList=new Vector();
  }
  List deleteProperties=OpenCms.getImportExportManager().getIgnoredProperties();
  if (deleteProperties == null) {
    deleteProperties=new ArrayList();
  }
  List immutableResources=OpenCms.getImportExportManager().getImmutableResources();
  if (immutableResources == null) {
    immutableResources=new ArrayList();
  }
  m_convertToXmlPage=OpenCms.getImportExportManager().convertToXmlPage();
  try {
    fileNodes=m_docXml.selectNodes("//" + I_CmsConstants.C_EXPORT_TAG_FILE);
    int importSize=fileNodes.size();
    for (int i=0; i < fileNodes.size(); i++) {
      m_report.print(" ( " + (i + 1) + " / "+ importSize+ " ) ");
      currentElement=(Element)fileNodes.get(i);
      source=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_SOURCE);
      destination=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DESTINATION);
      type=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_TYPE);
      if (C_RESOURCE_TYPE_NEWPAGE_NAME.equals(type)) {
        resType=C_RESOURCE_TYPE_NEWPAGE_ID;
      }
 else {
        resType=m_cms.getResourceTypeId(type);
      }
      uuidstructure=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_UUIDSTRUCTURE);
      uuidresource=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_UUIDRESOURCE);
      uuidcontent=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_UUIDCONTENT);
      if ((timestamp=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DATELASTMODIFIED)) != null) {
        datelastmodified=Long.parseLong(timestamp);
      }
 else {
        datelastmodified=System.currentTimeMillis();
      }
      userlastmodified=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_USERLASTMODIFIED);
      if ((timestamp=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DATECREATED)) != null) {
        datecreated=Long.parseLong(timestamp);
      }
 else {
        datecreated=System.currentTimeMillis();
      }
      usercreated=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_USERCREATED);
      flags=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_FLAGS);
      String translatedName=m_cms.getRequestContext().addSiteRoot(m_importPath + destination);
      if (CmsResourceTypeFolder.C_RESOURCE_TYPE_NAME.equals(type)) {
        translatedName+=I_CmsConstants.C_FOLDER_SEPARATOR;
      }
      translatedName=m_cms.getRequestContext().getDirectoryTranslator().translateResource(translatedName);
      boolean resourceNotImmutable=checkImmutable(translatedName,immutableResources);
      translatedName=m_cms.getRequestContext().removeSiteRoot(translatedName);
      if (resourceNotImmutable && (!excludeList.contains(translatedName))) {
        m_report.print(m_report.key("report.importing"),I_CmsReport.C_FORMAT_NOTE);
        m_report.print(translatedName);
        m_report.print(m_report.key("report.dots"));
        properties=readPropertiesFromManifest(currentElement,resType,propertyName,propertyValue,deleteProperties);
        CmsResource res=importResource(source,destination,type,uuidstructure,uuidresource,uuidcontent,datelastmodified,userlastmodified,datecreated,usercreated,flags,properties,writtenFilenames,fileCodes);
        if (res != null) {
          acentryNodes=currentElement.selectNodes("*/" + I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ENTRY);
          for (int j=0; j < acentryNodes.size(); j++) {
            currentEntry=(Element)acentryNodes.get(j);
            String id=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_PRINCIPAL);
            String acflags=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_FLAGS);
            String allowed=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ALLOWEDPERMISSIONS);
            String denied=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_DENIEDPERMISSIONS);
            addImportAccessControlEntry(res,id,allowed,denied,acflags);
          }
          importAccessControlEntries(res);
        }
 else {
          m_report.print(m_report.key("report.skipping"),I_CmsReport.C_FORMAT_NOTE);
          m_report.println(translatedName);
        }
      }
 else {
        m_report.print(m_report.key("report.skipping"),I_CmsReport.C_FORMAT_NOTE);
        m_report.println(translatedName);
      }
    }
  }
 catch (  Exception exc) {
    m_report.println(exc);
    throw new CmsException(CmsException.C_UNKNOWN_EXCEPTION,exc);
  }
 finally {
    if (m_importingChannelData) {
      m_cms.getRequestContext().restoreSiteRoot();
    }
  }
}
