{
  List modes=extractModes(mode);
  if (modes.contains(PARAM_ENABLED)) {
    m_modeEnabled=true;
  }
  if (modes.contains(PARAM_XHTML)) {
    m_modeEnabled=true;
    m_modeXhtml=true;
  }
  if (modes.contains(PARAM_WORD)) {
    m_modeEnabled=true;
    m_modeWord=true;
  }
  m_encoding=encoding;
  if (m_modeEnabled) {
    m_tidy=new Tidy();
    m_tidy.setXHTML(m_modeXhtml);
    m_tidy.setWord2000(m_modeWord);
    Properties additionalTags=new Properties();
    additionalTags.put("new-empty-tags","o:smarttagtype");
    additionalTags.put("new-inline-tags","o:smarttagtype");
    m_tidy.getConfiguration().addProps(additionalTags);
    m_tidy.setInputEncoding(encoding);
    m_tidy.setOutputEncoding(encoding);
    m_tidy.setTidyMark(false);
    m_tidy.setMakeClean(false);
    m_tidy.setNumEntities(true);
    m_tidy.setPrintBodyOnly(true);
    m_tidy.setForceOutput(true);
    m_tidy.setQuiet(true);
    m_tidy.setShowWarnings(false);
    m_tidy.setHideComments(false);
    m_tidy.setBreakBeforeBR(false);
    m_tidy.setWrapAttVals(false);
    m_tidy.setWraplen(100);
    m_tidy.setSpaces(0);
    if (m_modeWord) {
      m_clearStyle=new Pattern[m_cleanupPatterns.length];
      for (int i=0; i < m_cleanupPatterns.length; i++) {
        m_clearStyle[i]=Pattern.compile(m_cleanupPatterns[i]);
      }
    }
    m_replaceStyle=new Pattern[m_replacePatterns.length];
    for (int i=0; i < m_replacePatterns.length; i++) {
      m_replaceStyle[i]=Pattern.compile(m_replacePatterns[i]);
    }
  }
}
