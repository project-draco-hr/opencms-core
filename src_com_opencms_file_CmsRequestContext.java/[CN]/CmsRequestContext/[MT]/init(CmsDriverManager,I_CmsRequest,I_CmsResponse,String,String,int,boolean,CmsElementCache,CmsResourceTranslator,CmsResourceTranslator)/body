{
  m_driverManager=driverManager;
  m_req=req;
  m_resp=resp;
  m_links=new Vector();
  m_dependencies=new Vector();
  CmsProject project=null;
  try {
    m_user=m_driverManager.readUser(null,null,user);
  }
 catch (  CmsException ex) {
  }
  if (m_user == null) {
    m_user=m_driverManager.readWebUser(null,null,user);
  }
  if (m_user.getDisabled() == true) {
    m_user=null;
  }
  try {
    project=setCurrentProject(currentProjectId);
  }
 catch (  CmsException exc) {
    project=setCurrentProject(I_CmsConstants.C_PROJECT_ONLINE_ID);
  }
  m_currentGroup=m_driverManager.readGroup(m_user,currentGroup);
  m_streaming=streaming;
  m_elementCache=elementCache;
  m_directoryTranslator=directoryTranslator;
  m_fileTranslator=fileTranslator;
  if (req != null) {
    try {
      HttpServletRequest httpReq=(HttpServletRequest)req.getOriginalRequest();
      String accLangs=null;
      if (httpReq != null) {
        accLangs=httpReq.getHeader("Accept-Language");
      }
      if (accLangs != null) {
        StringTokenizer toks=new StringTokenizer(accLangs,",");
        while (toks.hasMoreTokens()) {
          String current=toks.nextToken().trim();
          if (current.indexOf("-") > -1) {
            current=current.substring(0,current.indexOf("-"));
          }
          if (current.indexOf(";") > -1) {
            current=current.substring(0,current.indexOf(";"));
          }
          m_language.addElement(current);
        }
      }
    }
 catch (    UnsupportedOperationException e) {
    }
    initEncoding();
  }
}
