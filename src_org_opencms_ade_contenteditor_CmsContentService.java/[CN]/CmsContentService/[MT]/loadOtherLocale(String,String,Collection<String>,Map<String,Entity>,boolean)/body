{
  CmsContentDefinition definition=null;
  try {
    CmsObject cms=getCmsObject();
    CmsUUID structureId=CmsContentDefinition.entityIdToUuid(entityId);
    CmsResource resource=cms.readResource(structureId,CmsResourceFilter.IGNORE_EXPIRATION);
    Locale contentLocale=CmsLocaleManager.getLocale(CmsContentDefinition.getLocaleFromId(entityId));
    CmsFile file=cms.readFile(resource);
    CmsXmlContent content=CmsXmlContentFactory.unmarshal(cms,file);
    long timer=0;
    if (LOG.isDebugEnabled()) {
      timer=System.currentTimeMillis();
    }
    if (CmsStringUtil.isEmptyOrWhitespaceOnly(entityId)) {
      entityId=CmsContentDefinition.uuidToEntityId(file.getStructureId(),contentLocale.toString());
    }
    boolean performedAutoCorrection=checkAutoCorrection(cms,content);
    if (performedAutoCorrection) {
      content.initDocument();
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_TAKE_UNMARSHALING_TIME_1,"" + (System.currentTimeMillis() - timer)));
    }
    if (content.hasLocale(contentLocale) && newLocale) {
      content.removeLocale(contentLocale);
    }
    if (!content.hasLocale(contentLocale)) {
      content.addLocale(cms,contentLocale);
    }
    Locale lastEdited=CmsLocaleManager.getLocale(lastLocale);
    synchronizeLocaleIndependentFields(file,content,skipPaths,editedEntities.values(),lastEdited);
    Map<String,String> syncValues=new HashMap<String,String>();
    skipPaths=new HashSet<String>();
    evaluateSyncLocaleValues(content,syncValues,skipPaths);
    Set<String> entityIds=new HashSet<String>(editedEntities.keySet());
    if (!entityIds.contains(entityId)) {
      entityIds.add(entityId);
    }
    CmsContentTypeVisitor contentLocaleVisitor=new CmsContentTypeVisitor(cms,file,contentLocale);
    for (    String localeEntityId : entityIds) {
      Locale locale=CmsLocaleManager.getLocale(CmsContentDefinition.getLocaleFromId(localeEntityId));
      CmsContentTypeVisitor visitor;
      if (locale.equals(contentLocale)) {
        visitor=contentLocaleVisitor;
      }
 else {
        visitor=new CmsContentTypeVisitor(cms,file,locale);
      }
      if (LOG.isDebugEnabled()) {
        timer=System.currentTimeMillis();
      }
      visitor.visitTypes(content.getContentDefinition(),getWorkplaceLocale(cms));
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_TAKE_VISITING_TYPES_TIME_1,"" + (System.currentTimeMillis() - timer)));
      }
      Element element=content.getLocaleNode(locale);
      if (LOG.isDebugEnabled()) {
        timer=System.currentTimeMillis();
      }
      Entity entity=readEntity(content,element,locale,localeEntityId,"",getTypeUri(content.getContentDefinition()),visitor,false);
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_TAKE_READING_ENTITY_TIME_1,"" + (System.currentTimeMillis() - timer)));
      }
      editedEntities.put(localeEntityId,entity);
    }
    List<String> contentLocales=new ArrayList<String>();
    for (    Locale locale : content.getLocales()) {
      contentLocales.add(locale.toString());
    }
    Locale workplaceLocale=OpenCms.getWorkplaceManager().getWorkplaceLocale(cms);
    TreeMap<String,String> availableLocales=new TreeMap<String,String>();
    for (    Locale availableLocale : OpenCms.getLocaleManager().getAvailableLocales(cms,file)) {
      availableLocales.put(availableLocale.toString(),availableLocale.getDisplayName(workplaceLocale));
    }
    String title=cms.readPropertyObject(file,CmsPropertyDefinition.PROPERTY_TITLE,false).getValue();
    try {
      CmsGallerySearchResult searchResult=CmsGallerySearch.searchById(cms,file.getStructureId(),contentLocale);
      title=searchResult.getTitle();
    }
 catch (    CmsException e) {
      LOG.warn(e.getLocalizedMessage(),e);
    }
    String typeName=OpenCms.getResourceManager().getResourceType(file.getTypeId()).getTypeName();
    boolean autoUnlock=OpenCms.getWorkplaceManager().shouldAcaciaUnlock();
    return new CmsContentDefinition(entityId,editedEntities,contentLocaleVisitor.getAttributeConfigurations(),contentLocaleVisitor.getWidgetConfigurations(),contentLocaleVisitor.getComplexWidgetData(),contentLocaleVisitor.getTypes(),contentLocaleVisitor.getTabInfos(),contentLocale.toString(),contentLocales,availableLocales,contentLocaleVisitor.getLocaleSynchronizations(),syncValues,skipPaths,title,cms.getSitePath(file),typeName,performedAutoCorrection,autoUnlock);
  }
 catch (  Exception e) {
    error(e);
  }
  return definition;
}
