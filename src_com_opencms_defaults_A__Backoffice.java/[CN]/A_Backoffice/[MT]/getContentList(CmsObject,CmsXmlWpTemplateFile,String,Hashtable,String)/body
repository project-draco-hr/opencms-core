{
  byte[] processResult=null;
  I_CmsSession session=(CmsSession)cms.getRequestContext().getSession(true);
  Class cdClass=getContentDefinitionClass();
  String action=(String)parameters.get("action");
  System.err.println("getContentList: action: " + action);
  String filterParam=(String)session.getValue("filterparameter");
  if (filterParam == "") {
    filterParam=null;
  }
  String filterMethodName=(String)session.getValue("filter");
  if (filterMethodName == null) {
    filterMethodName="0";
  }
  System.err.println("getContentList: filter " + filterMethodName + " filterparam "+ filterParam);
  templateSelector="list";
  String tableHead="";
  String singleRow="";
  String allEntrys="";
  String entry="";
  String url="";
  int columns=0;
  Vector columnsVector=new Vector();
  String fieldNamesMethod="getFieldNames";
  Class paramClasses[]={CmsObject.class};
  Object params[]={cms};
  columnsVector=(Vector)getContentMethodObject(cms,cdClass,fieldNamesMethod,paramClasses,params);
  columns=columnsVector.size();
  String moduleName="";
  moduleName=(String)getClass().toString();
  moduleName=moduleName.substring(5);
  moduleName=moduleName.trim();
  moduleName=moduleName.replace('.','_');
  CmsXmlLanguageFile lang=new CmsXmlLanguageFile(cms);
  for (int i=0; i < columns; i++) {
    tableHead+=(template.getDataValue("tabledatabegin")) + lang.getLanguageValue(moduleName + ".label." + columnsVector.elementAt(i).toString().toLowerCase().trim()) + (template.getDataValue("tabledataend"));
  }
  template.setData("tableheadline",tableHead);
  Vector tableContent=new Vector();
  try {
    Vector filterMethods=(Vector)cdClass.getMethod("getFilterMethods",new Class[]{CmsObject.class}).invoke(null,new Object[]{cms});
    FilterMethod filterMethod=null;
    FilterMethod filterName=(FilterMethod)filterMethods.elementAt(Integer.parseInt(filterMethodName));
    filterMethodName=filterName.getFilterName();
    for (int i=0; i < filterMethods.size(); i++) {
      FilterMethod currentFilter=(FilterMethod)filterMethods.elementAt(i);
      if (currentFilter.getFilterName().equals(filterMethodName)) {
        filterMethod=currentFilter;
        break;
      }
    }
    if (filterMethod == null) {
      filterMethod=(FilterMethod)filterMethods.firstElement();
    }
    tableContent=(Vector)cdClass.getMethod("applyFilter",new Class[]{CmsObject.class,FilterMethod.class,String.class}).invoke(null,new Object[]{cms,filterMethod,filterParam});
  }
 catch (  InvocationTargetException ite) {
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice: apply filter throwed an InvocationTargetException!");
    }
    templateSelector="error";
    template.setData("filtername",filterMethodName);
    template.setData("filtererror",ite.getTargetException().getMessage());
  }
catch (  NoSuchMethodException nsm) {
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice: apply filter method was not found!");
    }
    templateSelector="error";
    template.setData("filtername",filterMethodName);
    template.setData("filtererror",nsm.getMessage());
    session.removeValue("filterparameter");
  }
catch (  Exception e) {
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice: apply filter: Other Exception!");
    }
    templateSelector="error";
    template.setData("filtername",filterMethodName);
    template.setData("filtererror",e.getMessage());
    session.removeValue("filterparameter");
  }
  int rows=tableContent.size();
  Vector fieldMethods=new Vector();
  try {
    fieldMethods=(Vector)cdClass.getMethod("getFieldMethods",new Class[]{CmsObject.class}).invoke(null,new Object[]{cms});
  }
 catch (  Exception exc) {
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice getContentList: getFieldMethods throwed an exception");
    }
    templateSelector="error";
    template.setData("filtername",filterMethodName);
    template.setData("filtererror",exc.getMessage());
  }
  String fieldEntry="";
  String id="";
  for (int i=0; i < rows; i++) {
    entry="";
    singleRow="";
    Object entryObject=new Object();
    entryObject=tableContent.elementAt(i);
    for (int j=0; j < columns; j++) {
      Method getMethod=null;
      try {
        getMethod=(Method)fieldMethods.elementAt(j);
      }
 catch (      Exception e) {
        if (A_OpenCms.isLogging()) {
          A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Could not get field method - check for correct spelling!");
        }
      }
      try {
        Object fieldEntryObject=null;
        fieldEntryObject=getMethod.invoke(entryObject,new Object[0]);
        if (fieldEntryObject != null) {
          fieldEntry=fieldEntryObject.toString();
        }
 else {
          fieldEntry=null;
        }
      }
 catch (      InvocationTargetException ite) {
        if (A_OpenCms.isLogging()) {
          A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice content definition object throwed an InvocationTargetException!");
        }
      }
catch (      Exception e) {
        if (A_OpenCms.isLogging()) {
          A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice content definition object: Other exception!");
        }
      }
      try {
        id=(String)cdClass.getMethod("getUniqueId",new Class[]{CmsObject.class}).invoke(entryObject,new Object[]{cms});
      }
 catch (      InvocationTargetException ite) {
        if (A_OpenCms.isLogging()) {
          A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice: getUniqueId throwed an InvocationTargetException!");
        }
      }
catch (      NoSuchMethodException nsm) {
        if (A_OpenCms.isLogging()) {
          A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice: getUniqueId method was not found!");
        }
      }
catch (      Exception e) {
        if (A_OpenCms.isLogging()) {
          A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice: getUniqueId: Other exception!");
        }
      }
      if (id != null) {
        template.setData("uniqueid",id);
      }
      if (fieldEntry != null) {
        try {
          url=getUrl(cms,null,null,null);
        }
 catch (        Exception e) {
          url="";
        }
        if (!url.equals("")) {
          entry+=(template.getDataValue("tabledatabegin")) + (template.getProcessedDataValue("url",this,parameters)) + fieldEntry+ (template.getDataValue("tabledataend"));
        }
 else {
          entry+=(template.getDataValue("tabledatabegin")) + fieldEntry + (template.getDataValue("tabledataend"));
        }
      }
 else {
        entry+=(template.getDataValue("tabledatabegin")) + "" + (template.getDataValue("tabledataend"));
      }
    }
    try {
      id=(String)cdClass.getMethod("getUniqueId",new Class[]{CmsObject.class}).invoke(entryObject,new Object[]{cms});
    }
 catch (    InvocationTargetException ite) {
      if (A_OpenCms.isLogging()) {
        A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice: getUniqueId throwed an InvocationTargetException!");
      }
    }
catch (    NoSuchMethodException nsm) {
      if (A_OpenCms.isLogging()) {
        A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice: getUniqueId method was not found!");
      }
    }
catch (    Exception e) {
      if (A_OpenCms.isLogging()) {
        A_OpenCms.log(C_OPENCMS_INFO,getClassName() + ": Backoffice: getUniqueId: Other exception!");
      }
    }
    if (id != null) {
      template.setData("uniqueid",id);
    }
    setLockstates(template,cdClass,entryObject);
    template.setData("entry",entry);
    singleRow=template.getProcessedDataValue("singlerow",this);
    allEntrys+=(template.getDataValue("tablerowbegin")) + singleRow + (template.getDataValue("tablerowend"));
  }
  template.setData("tablecontent","" + allEntrys);
  session.putValue("selectbox",filterMethodName);
  processResult=startProcessing(cms,template,elementName,parameters,templateSelector);
  return processResult;
}
