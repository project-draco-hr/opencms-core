{
  Map<CmsUUID,CmsElementView> viewMap=OpenCms.getADEManager().getElementViews(A_CmsUI.getCmsObject());
  List<CmsElementView> viewList=new ArrayList<CmsElementView>(viewMap.values());
  Collections.sort(viewList,new Comparator<CmsElementView>(){
    public int compare(    CmsElementView arg0,    CmsElementView arg1){
      return ComparisonChain.start().compare(arg0.getOrder(),arg1.getOrder()).result();
    }
  }
);
  m_viewSelector.setItemCaptionMode(ItemCaptionMode.EXPLICIT);
  m_typeHelper=createTypeHelper();
  m_typeHelper.precomputeTypeLists(A_CmsUI.getCmsObject(),m_folderResource.getRootPath(),A_CmsUI.getCmsObject().getRequestContext().removeSiteRoot(m_folderResource.getRootPath()),viewList,null);
  for (  CmsElementView view : viewList) {
    if (view.hasPermission(A_CmsUI.getCmsObject(),m_folderResource)) {
      List<CmsResourceTypeBean> typeBeans=m_typeHelper.getPrecomputedTypes(view);
      if (typeBeans.isEmpty()) {
        continue;
      }
      m_viewSelector.addItem(view.getId());
      m_viewSelector.setItemCaption(view.getId(),view.getTitle(A_CmsUI.getCmsObject(),A_CmsUI.get().getLocale()));
    }
  }
  if (m_viewSelector.getItem(startId) == null) {
    startId=(CmsUUID)(m_viewSelector.getItemIds().iterator().next());
  }
  m_viewSelector.addValueChangeListener(new ValueChangeListener(){
    private static final long serialVersionUID=1L;
    public void valueChange(    ValueChangeEvent event){
      CmsElementView selectedView=OpenCms.getADEManager().getElementViews(A_CmsUI.getCmsObject()).get(event.getProperty().getValue());
      init(selectedView,true);
      VaadinService.getCurrentRequest().getWrappedSession().setAttribute(SETTING_STANDARD_VIEW,(event.getProperty().getValue()));
    }
  }
);
  return OpenCms.getADEManager().getElementViews(A_CmsUI.getCmsObject()).get(startId);
}
