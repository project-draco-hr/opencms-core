{
  m_shortcutActions=new HashMap<Action,Runnable>();
  m_shortcutActions.put(ACTION_DELETE,new Runnable(){
    public void run(){
      if (!m_fileTable.getSelectedIds().isEmpty()) {
        I_CmsDialogContext context1=createDialogContext();
        context1.start("Delete",new CmsDeleteDialog(context1));
      }
    }
  }
);
  m_shortcutActions.put(ACTION_FOLDER_UP,new Runnable(){
    public void run(){
      showParentFolder();
    }
  }
);
  m_shortcutActions.put(ACTION_PROPERTIES,new Runnable(){
    public void run(){
      I_CmsWorkplaceAction propAction=new CmsPropertiesDialogAction();
      I_CmsDialogContext context=createDialogContext();
      if (propAction.getVisibility(A_CmsUI.getCmsObject(),context.getResources()).isActive()) {
        propAction.executeAction(context);
      }
    }
  }
);
  m_shortcutActions.put(ACTION_RENAME,new Runnable(){
    public void run(){
      if ((m_fileTable.getSelectedIds().size() == 1) && isPropertyEditable(CmsResourceTableProperty.PROPERTY_RESOURCE_NAME)) {
        CmsUUID id=m_fileTable.getSelectedIds().iterator().next();
        editItemProperty(id,CmsResourceTableProperty.PROPERTY_RESOURCE_NAME);
      }
    }
  }
);
  m_shortcutActions.put(ACTION_SELECT_ALL,new Runnable(){
    public void run(){
      m_fileTable.selectAll();
    }
  }
);
  m_fileTable=new CmsFileTable();
  m_fileTable.setSizeFull();
  m_fileTable.setMenuBuilder(new MenuBuilder());
  m_fileTable.addItemClickListener(new ItemClickListener(){
    private static final long serialVersionUID=1L;
    public void itemClick(    ItemClickEvent event){
      handleFileItemClick(event);
    }
  }
);
  m_uploadArea=new CmsUploadAreaExtension(m_fileTable);
  m_uploadArea.addUploadListener(new I_UploadListener(){
    public void onUploadFinished(    List<String> uploadedFiles){
      updateAll();
    }
  }
);
  m_treeContainer=new HierarchicalContainer();
  addTreeContainerProperties(CmsResourceTableProperty.PROPERTY_RESOURCE_NAME,CmsResourceTableProperty.PROPERTY_STATE,CmsResourceTableProperty.PROPERTY_TYPE_ICON_RESOURCE,CmsResourceTableProperty.PROPERTY_INSIDE_PROJECT);
  m_fileTree=new Tree();
  m_fileTree.addStyleName(OpenCmsTheme.SIMPLE_DRAG);
  m_fileTree.addStyleName(OpenCmsTheme.FULL_WIDTH_PADDING);
  m_fileTree.setWidth("100%");
  m_fileTree.setContainerDataSource(m_treeContainer);
  m_fileTree.setItemIconPropertyId(CmsResourceTableProperty.PROPERTY_TYPE_ICON_RESOURCE);
  m_fileTree.setItemCaptionPropertyId(CmsResourceTableProperty.PROPERTY_RESOURCE_NAME);
  m_fileTree.addExpandListener(new ExpandListener(){
    private static final long serialVersionUID=1L;
    public void nodeExpand(    ExpandEvent event){
      readTreeLevel((CmsUUID)event.getItemId());
    }
  }
);
  m_fileTree.addCollapseListener(new CollapseListener(){
    private static final long serialVersionUID=1L;
    public void nodeCollapse(    CollapseEvent event){
      clearTreeLevel((CmsUUID)event.getItemId());
    }
  }
);
  m_fileTree.addItemClickListener(new ItemClickListener(){
    private static final long serialVersionUID=1L;
    public void itemClick(    ItemClickEvent event){
      readFolder((CmsUUID)event.getItemId());
    }
  }
);
  m_fileTree.setItemStyleGenerator(new ItemStyleGenerator(){
    private static final long serialVersionUID=1L;
    public String getStyle(    Tree source,    Object itemId){
      return CmsFileTable.getStateStyle(source.getContainerDataSource().getItem(itemId));
    }
  }
);
  m_fileTree.setNullSelectionAllowed(false);
  ExplorerDropHandler handler=new ExplorerDropHandler();
  m_fileTable.setDropHandler(handler);
  m_fileTable.setDragMode(TableDragMode.MULTIROW);
  m_fileTree.setDropHandler(handler);
  m_fileTree.setDragMode(TreeDragMode.NONE);
  m_siteSelector=createSiteSelect(A_CmsUI.getCmsObject());
  m_infoPath=new TextField();
  A_CmsFocusShortcutListener shortcutListener=new A_CmsFocusShortcutListener("Open path",KeyCode.ENTER,null){
    private static final long serialVersionUID=1L;
    @Override public void blur(    BlurEvent event){
      super.blur(event);
      showCrumbs(true);
    }
    @Override public void focus(    FocusEvent event){
      super.focus(event);
      showCrumbs(false);
    }
    @Override public void handleAction(    Object sender,    Object target){
      openPath(m_infoPath.getValue());
    }
  }
;
  shortcutListener.installOn(m_infoPath);
  m_crumbs=new CssLayout();
  m_crumbs.setPrimaryStyleName(OpenCmsTheme.CRUMBS);
  m_crumbListener=new ClickListener(){
    private static final long serialVersionUID=1L;
    public void buttonClick(    ClickEvent event){
      openPath((String)event.getButton().getData());
    }
  }
;
  m_searchField=new TextField();
  m_searchField.setIcon(FontOpenCms.FILTER);
  m_searchField.setInputPrompt(Messages.get().getBundle(UI.getCurrent().getLocale()).key(Messages.GUI_EXPLORER_FILTER_0));
  m_searchField.addStyleName(ValoTheme.TEXTFIELD_INLINE_ICON);
  m_searchField.addTextChangeListener(new TextChangeListener(){
    private static final long serialVersionUID=1L;
    public void textChange(    TextChangeEvent event){
      filterTable(event.getText());
    }
  }
);
  m_openedPaths=(Map<String,String>)UI.getCurrent().getSession().getAttribute(OPENED_PATHS);
  if (m_openedPaths == null) {
    m_openedPaths=new HashMap<String,String>();
    String startSite=CmsAppWorkplaceUi.get().getWorkplaceSettings().getUserSettings().getStartSite();
    while (startSite.endsWith("/")) {
      startSite=startSite.substring(0,startSite.length() - 1);
    }
    String startFolder=CmsAppWorkplaceUi.get().getWorkplaceSettings().getUserSettings().getStartFolder();
    m_openedPaths.put(startSite,startFolder);
  }
}
