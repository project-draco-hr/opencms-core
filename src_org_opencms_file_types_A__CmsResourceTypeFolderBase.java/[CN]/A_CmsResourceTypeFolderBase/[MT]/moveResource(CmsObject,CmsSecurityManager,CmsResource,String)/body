{
  String dest=cms.getRequestContext().addSiteRoot(destination);
  if (!CmsResource.isFolder(dest)) {
    dest=dest.concat("/");
  }
  if (resource.getRootPath().equals(dest)) {
    throw new CmsVfsException(org.opencms.file.Messages.get().container(org.opencms.file.Messages.ERR_MOVE_SAME_NAME_1,destination));
  }
  if (dest.startsWith(resource.getRootPath())) {
    throw new CmsVfsException(org.opencms.file.Messages.get().container(org.opencms.file.Messages.ERR_MOVE_SAME_FOLDER_2,cms.getSitePath(resource),destination));
  }
  dest=validateFoldername(dest);
  List<CmsProject> projects=OpenCms.getOrgUnitManager().getAllManageableProjects(cms,"",true);
  CmsProject project;
  List<String> projectResources;
  Iterator<String> itProjectResources;
  String projectResourceRootPathTarget;
  String moveResourceRootPath=resource.getRootPath();
  Iterator<CmsProject> itProjects=projects.iterator();
  CmsObject projectCms=OpenCms.initCmsObject(cms);
  CmsRequestContext context=projectCms.getRequestContext();
  context.setSiteRoot("/");
  List<CmsProjectResourceMoveData> projectResourceMoveList=new ArrayList<CmsProjectResourceMoveData>();
  while (itProjects.hasNext()) {
    project=itProjects.next();
    context.setCurrentProject(project);
    projectResources=cms.readProjectResources(project);
    itProjectResources=projectResources.iterator();
    while (itProjectResources.hasNext()) {
      projectResourceRootPathTarget=itProjectResources.next();
      if (projectResourceRootPathTarget.startsWith(moveResourceRootPath)) {
        CmsResource deleteProjectResource=null;
        CmsResource addProjectResource=null;
        String projectResourceRootPathSource=resource.getRootPath() + projectResourceRootPathTarget.substring(moveResourceRootPath.length());
        projectResourceRootPathTarget=dest + projectResourceRootPathTarget.substring(moveResourceRootPath.length());
        if (projectResourceRootPathTarget.equals(moveResourceRootPath)) {
          deleteProjectResource=resource;
        }
 else {
          deleteProjectResource=projectCms.readResource(projectResourceRootPathSource,CmsResourceFilter.ALL);
        }
        addProjectResource=new CmsResource(resource.getStructureId(),resource.getResourceId(),projectResourceRootPathTarget,resource.getTypeId(),resource.isFolder(),resource.getFlags(),resource.getProjectLastModified(),resource.getState(),resource.getDateCreated(),resource.getUserCreated(),resource.getDateLastModified(),resource.getUserLastModified(),resource.getDateReleased(),resource.getDateExpired(),resource.getSiblingCount(),resource.getLength(),resource.getDateContent(),resource.getVersion());
        projectResourceMoveList.add(new CmsProjectResourceMoveData(project,deleteProjectResource,addProjectResource));
      }
    }
  }
  CmsProjectResourceMoveData projectResourceMoveData;
  Iterator<CmsProjectResourceMoveData> projectMoveResourceIt=projectResourceMoveList.iterator();
  while (projectMoveResourceIt.hasNext()) {
    projectResourceMoveData=projectMoveResourceIt.next();
    context.setCurrentProject(projectResourceMoveData.getProject());
    securityManager.removeResourceFromProject(context,projectResourceMoveData.getSourceResource());
  }
  try {
    securityManager.moveResource(cms.getRequestContext(),resource,dest);
    projectMoveResourceIt=projectResourceMoveList.iterator();
    while (projectMoveResourceIt.hasNext()) {
      projectResourceMoveData=projectMoveResourceIt.next();
      context.setCurrentProject(projectResourceMoveData.getProject());
      securityManager.copyResourceToProject(context,projectResourceMoveData.getTargetResource());
    }
  }
 catch (  CmsException consistancyCheck) {
    projectMoveResourceIt=projectResourceMoveList.iterator();
    while (projectMoveResourceIt.hasNext()) {
      projectResourceMoveData=projectMoveResourceIt.next();
      context.setCurrentProject(projectResourceMoveData.getProject());
      securityManager.copyResourceToProject(context,projectResourceMoveData.getSourceResource());
    }
    throw consistancyCheck;
  }
}
