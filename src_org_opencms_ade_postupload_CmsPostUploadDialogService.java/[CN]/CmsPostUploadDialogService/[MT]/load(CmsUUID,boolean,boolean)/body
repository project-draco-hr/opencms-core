{
  try {
    CmsResource res=getCmsObject().readResource(id);
    List<CmsProperty> properties=getCmsObject().readPropertyObjects(res,false);
    String title=CmsProperty.get(CmsPropertyDefinition.PROPERTY_TITLE,properties).getValue();
    if (title == null) {
      title=res.getName();
    }
    String description=CmsProperty.get(CmsPropertyDefinition.PROPERTY_DESCRIPTION,properties).getValue();
    if (description == null) {
      description=getCmsObject().getSitePath(res);
    }
    CmsListInfoBean listInfo=CmsVfsService.getPageInfo(getCmsObject(),res);
    CmsPostUploadDialogPanelBean result=new CmsPostUploadDialogPanelBean(id,listInfo);
    I_CmsResourceType type=OpenCms.getResourceManager().getResourceType(res.getTypeId());
    String typeName=type.getTypeName();
    listInfo.setResourceType(typeName);
    CmsExplorerTypeSettings settings=OpenCms.getWorkplaceManager().getExplorerTypeSetting(typeName);
    List<String> defaultProperties=settings.getProperties();
    while (properties.isEmpty() && !CmsStringUtil.isEmptyOrWhitespaceOnly(settings.getReference())) {
      settings=OpenCms.getWorkplaceManager().getExplorerTypeSetting(settings.getReference());
      defaultProperties=settings.getProperties();
    }
    Map<String,CmsXmlContentProperty> propertyDefinitions=new LinkedHashMap<String,CmsXmlContentProperty>();
    Map<String,CmsClientProperty> clientProperties=new LinkedHashMap<String,CmsClientProperty>();
    CmsXmlContentProperty fileNamePropDef=new CmsXmlContentProperty(CmsPropertyModification.FILE_NAME_PROPERTY,"string","string","","","","",Messages.get().getBundle(OpenCms.getWorkplaceManager().getWorkplaceLocale(getCmsObject())).key(Messages.GUI_UPLOAD_FILE_NAME_0),"","","false");
    propertyDefinitions.put(CmsPropertyModification.FILE_NAME_PROPERTY,fileNamePropDef);
    clientProperties.put(CmsPropertyModification.FILE_NAME_PROPERTY,new CmsClientProperty(CmsPropertyModification.FILE_NAME_PROPERTY,res.getName(),res.getName()));
    CmsADEConfigData configData=OpenCms.getADEManager().lookupConfiguration(getCmsObject(),res.getRootPath());
    Map<String,CmsXmlContentProperty> propertyConfiguration=configData.getPropertyConfigurationAsMap();
    Set<String> propertiesToShow=new HashSet<String>();
    propertiesToShow.addAll(defaultProperties);
    if (addBasicProperties) {
      propertiesToShow.addAll(propertyConfiguration.keySet());
    }
    for (    String propertyName : propertiesToShow) {
      CmsXmlContentProperty propDef=null;
      if (useConfiguration) {
        propDef=propertyConfiguration.get(propertyName);
      }
      if (propDef == null) {
        propDef=new CmsXmlContentProperty(propertyName,"string","string","","","","",null,"","","false");
      }
      propertyDefinitions.put(propertyName,propDef);
      CmsProperty property=CmsProperty.get(propertyName,properties);
      if (property != null) {
        CmsClientProperty clientProperty=new CmsClientProperty(propertyName,property.getStructureValue(),property.getResourceValue());
        clientProperties.put(clientProperty.getName(),clientProperty);
      }
    }
    propertyDefinitions=CmsXmlContentPropertyHelper.resolveMacrosInProperties(propertyDefinitions,CmsMacroResolver.newWorkplaceLocaleResolver(getCmsObject()));
    result.setPropertyDefinitions(propertyDefinitions);
    result.setProperties(clientProperties);
    return result;
  }
 catch (  CmsException e) {
    error(e);
    return null;
  }
}
