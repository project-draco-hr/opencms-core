{
  String user=m_ui.getUser();
  String password=m_ui.getPassword();
  CmsMessageContainer message=CmsLoginHelper.validateUserAndPasswordNotEmpty(user,password);
  CmsLoginMessage loginMessage=OpenCms.getLoginManager().getLoginMessage();
  String storedMessage=null;
  if ((loginMessage != null) && !loginMessage.isLoginCurrentlyForbidden() && loginMessage.isActive()) {
    storedMessage=loginMessage.getMessage();
  }
  if (message != null) {
    String errorMessage=message.key(m_params.getLocale());
    displayError(errorMessage,true);
    return;
  }
  String ou=m_ui.getOrgUnit();
  String realUser=CmsStringUtil.joinPaths(ou,user);
  String pcType=m_ui.getPcType();
  CmsObject currentCms=A_CmsUI.getCmsObject();
  CmsUser userObj=null;
  try {
    try {
      userObj=currentCms.readUser(realUser,password);
    }
 catch (    CmsException e) {
      LOG.warn(e.getLocalizedMessage(),e);
      message=org.opencms.workplace.Messages.get().container(org.opencms.workplace.Messages.GUI_LOGIN_FAILED_0);
      displayError(message.key(m_params.getLocale()),true);
      return;
    }
    if (OpenCms.getLoginManager().canLockBecauseOfInactivity(currentCms,userObj)) {
      boolean locked=null != userObj.getAdditionalInfo().get(KEY_ACCOUNT_LOCKED);
      if (locked) {
        displayError(CmsInactiveUserMessages.getLockoutText(A_CmsUI.get().getLocale()),false);
        return;
      }
    }
    if (OpenCms.getLoginManager().requiresPasswordChange(currentCms,userObj)) {
      CmsChangePasswordDialog passwordDialog=new CmsChangePasswordDialog(currentCms,userObj,A_CmsUI.get().getLocale());
      A_CmsUI.get().setContentToDialog(Messages.get().getBundle(A_CmsUI.get().getLocale()).key(Messages.GUI_PWCHANGE_HEADER_0) + userObj.getSimpleName(),passwordDialog);
    }
    currentCms.loginUser(realUser,password);
    OpenCms.getSessionManager().updateSessionInfo(currentCms,(HttpServletRequest)VaadinService.getCurrentRequest());
    if ((loginMessage != null) && loginMessage.isLoginCurrentlyForbidden()) {
      storedMessage=org.opencms.workplace.Messages.get().container(org.opencms.workplace.Messages.GUI_LOGIN_SUCCESS_WITH_MESSAGE_2,loginMessage.getMessage(),new Date(loginMessage.getTimeEnd())).key(A_CmsUI.get().getLocale());
    }
    if (storedMessage != null) {
      OpenCms.getSessionManager().sendBroadcast(null,storedMessage,currentCms.getRequestContext().getCurrentUser());
    }
    CmsWorkplaceSettings settings=CmsLoginHelper.initSiteAndProject(currentCms);
    CmsLoginHelper.setCookieData(pcType,user,ou,(VaadinServletRequest)(VaadinService.getCurrentRequest()),(VaadinServletResponse)(VaadinService.getCurrentResponse()));
    VaadinService.getCurrentRequest().getWrappedSession().setAttribute(CmsWorkplaceManager.SESSION_WORKPLACE_SETTINGS,settings);
    String loginTarget=getLoginTarget(currentCms,settings,m_params.getRequestedResource());
    final CmsLoginTargetInfo targetInfo=new CmsLoginTargetInfo(loginTarget,user,password);
    if (OpenCms.getLoginManager().requiresUserDataCheck(currentCms,userObj)) {
      I_CmsDialogContext context=new A_CmsDialogContext(ContextType.appToolbar,null,null){
        @Override public void finish(        CmsProject project,        String siteRoot){
          finish(null);
        }
        @Override public void finish(        Collection<CmsUUID> result){
          m_ui.openLoginTarget(targetInfo);
        }
        public void focus(        CmsUUID structureId){
        }
        public List<CmsUUID> getAllStructureIdsInView(){
          return null;
        }
        @Override public void start(        String title,        Component dialog,        DialogWidth style){
          if (dialog != null) {
            m_window=CmsBasicDialog.prepareWindow(style);
            m_window.setCaption(title);
            m_window.setContent(dialog);
            UI.getCurrent().addWindow(m_window);
            if (dialog instanceof CmsBasicDialog) {
              ((CmsBasicDialog)dialog).initActionHandler(m_window);
            }
          }
        }
      }
;
      CmsUser u=currentCms.readUser(userObj.getId());
      u.setAdditionalInfo(CmsUserSettings.ADDITIONAL_INFO_LAST_USER_DATA_CHECK,Long.toString(System.currentTimeMillis()));
      currentCms.writeUser(u);
      CmsUserDataDialog dialog=new CmsUserDataDialog(context,true);
      context.start(dialog.getTitle(UI.getCurrent().getLocale()),dialog);
    }
 else {
      m_ui.openLoginTarget(targetInfo);
    }
  }
 catch (  Exception e) {
    if (e instanceof CmsException) {
      CmsMessageContainer exceptionMessage=((CmsException)e).getMessageContainer();
      if (org.opencms.security.Messages.ERR_LOGIN_FAILED_DISABLED_2 == exceptionMessage.getKey()) {
        message=org.opencms.workplace.Messages.get().container(org.opencms.workplace.Messages.GUI_LOGIN_FAILED_DISABLED_0);
      }
 else       if (org.opencms.security.Messages.ERR_LOGIN_FAILED_TEMP_DISABLED_4 == exceptionMessage.getKey()) {
        message=org.opencms.workplace.Messages.get().container(org.opencms.workplace.Messages.GUI_LOGIN_FAILED_TEMP_DISABLED_0);
      }
 else       if (org.opencms.security.Messages.ERR_LOGIN_FAILED_WITH_MESSAGE_1 == exceptionMessage.getKey()) {
        CmsLoginMessage loginMessage2=OpenCms.getLoginManager().getLoginMessage();
        if (loginMessage2 != null) {
          message=org.opencms.workplace.Messages.get().container(org.opencms.workplace.Messages.GUI_LOGIN_FAILED_WITH_MESSAGE_1,loginMessage2.getMessage());
        }
      }
    }
    if (message == null) {
      if (e instanceof CmsCustomLoginException) {
        message=((CmsCustomLoginException)e).getMessageContainer();
      }
 else {
        message=org.opencms.workplace.Messages.get().container(org.opencms.workplace.Messages.GUI_LOGIN_FAILED_0);
      }
    }
    if (e instanceof CmsException) {
      CmsJspLoginBean.logLoginException(currentCms.getRequestContext(),user,(CmsException)e);
    }
 else {
      LOG.error(e.getLocalizedMessage(),e);
    }
    displayError(message.key(m_params.getLocale()),false);
    return;
  }
}
