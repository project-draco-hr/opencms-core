{
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().getBundle().key(Messages.LOG_SCRUBBING_EXPORT_FOLDERS_1,publishHistoryId));
  }
  Set<String> scrubbedFolders=new HashSet<String>();
  Set<String> scrubbedFiles=new HashSet<String>();
  CmsObject cms;
  try {
    cms=OpenCms.initCmsObject(OpenCms.getDefaultUsers().getUserExport());
  }
 catch (  CmsException e) {
    LOG.error(Messages.get().getBundle().key(Messages.LOG_INIT_FAILED_0),e);
    return Collections.emptyList();
  }
  List<CmsPublishedResource> publishedResources;
  try {
    publishedResources=cms.readPublishedResources(publishHistoryId);
  }
 catch (  CmsException e) {
    LOG.error(Messages.get().getBundle().key(Messages.LOG_READING_CHANGED_RESOURCES_FAILED_1,publishHistoryId),e);
    return Collections.emptyList();
  }
  publishedResources=addMovedLinkSources(cms,publishedResources);
  Iterator<CmsPublishedResource> itPubRes=publishedResources.iterator();
  while (itPubRes.hasNext()) {
    CmsPublishedResource res=itPubRes.next();
    if (res.getState().isUnchanged()) {
      continue;
    }
    scrubResource(cms,res,scrubbedFolders,scrubbedFiles);
  }
  return publishedResources;
}
