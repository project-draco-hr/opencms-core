{
  checkPermissionsForMassEdit(cms);
  Set<CmsUUID> allKeys=new HashSet<CmsUUID>();
  Multimap<CmsUUID,CmsAlias> toDeleteMap=ArrayListMultimap.create();
  for (  CmsAlias alias : toDelete) {
    toDeleteMap.put(alias.getStructureId(),alias);
    allKeys.add(alias.getStructureId());
  }
  Multimap<CmsUUID,CmsAlias> toAddMap=ArrayListMultimap.create();
  for (  CmsAlias alias : toAdd) {
    toAddMap.put(alias.getStructureId(),alias);
    allKeys.add(alias.getStructureId());
  }
  for (  CmsUUID structureId : allKeys) {
    Set<CmsAlias> aliasesToSave=new HashSet<CmsAlias>(getAliasesForStructureId(cms,structureId));
    Collection<CmsAlias> toDeleteForId=toDeleteMap.get(structureId);
    if ((toDeleteForId != null) && !toDeleteForId.isEmpty()) {
      aliasesToSave.removeAll(toDeleteForId);
    }
    saveAliases(cms,structureId,new ArrayList<CmsAlias>(aliasesToSave));
  }
  for (  CmsUUID structureId : allKeys) {
    Set<CmsAlias> aliasesToSave=new HashSet<CmsAlias>(getAliasesForStructureId(cms,structureId));
    Collection<CmsAlias> toAddForId=toAddMap.get(structureId);
    if ((toAddForId != null) && !toAddForId.isEmpty()) {
      aliasesToSave.addAll(toAddForId);
    }
    saveAliases(cms,structureId,new ArrayList<CmsAlias>(aliasesToSave));
  }
}
