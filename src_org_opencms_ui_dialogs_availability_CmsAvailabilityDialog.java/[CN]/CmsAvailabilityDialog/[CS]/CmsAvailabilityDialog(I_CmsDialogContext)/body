{
  super();
  m_dialogContext=dialogContext;
  CmsObject cms=dialogContext.getCms();
  CmsVaadinUtils.readAndLocalizeDesign(this,OpenCms.getWorkplaceManager().getMessages(A_CmsUI.get().getLocale()),null);
  List<CmsResource> resources=dialogContext.getResources();
  m_notificationIntervalField.addValidator(new Validator(){
    /** 
 * Serial version id. 
 */
    private static final long serialVersionUID=1L;
    public void validate(    Object value) throws InvalidValueException {
      String strValue=((String)value).trim();
      if (!strValue.matches("[0-9]*")) {
        throw new InvalidValueException(CmsVaadinUtils.getMessageText(org.opencms.ui.Messages.GUI_VALIDATOR_EMPTY_OR_NUMBER_0));
      }
    }
  }
);
  boolean hasSiblings=false;
  for (  CmsResource resource : m_dialogContext.getResources()) {
    hasSiblings|=resource.getSiblingCount() > 1;
    if (hasSiblings) {
      break;
    }
  }
  m_modifySiblingsField.setVisible(hasSiblings);
  if (resources.size() == 1) {
    CmsResource onlyResource=resources.get(0);
    if (onlyResource.getDateReleased() != CmsResource.DATE_RELEASED_DEFAULT) {
      m_releasedField.setValue(new Date(onlyResource.getDateReleased()));
    }
    if (onlyResource.getDateExpired() != CmsResource.DATE_EXPIRED_DEFAULT) {
      m_expiredField.setValue(new Date(onlyResource.getDateExpired()));
    }
    initNotification();
    Map<CmsPrincipalBean,String> responsibles=m_availabilityInfo.getResponsibles();
    if (!responsibles.isEmpty()) {
      m_responsiblesPanel.setVisible(true);
      m_notificationPanel.setVisible(true);
      for (      Map.Entry<CmsPrincipalBean,String> entry : responsibles.entrySet()) {
        CmsPrincipalBean principal=entry.getKey();
        String icon=principal.isGroup() ? CmsWorkplace.getResourceUri("buttons/group.png") : CmsWorkplace.getResourceUri("buttons/user.png");
        String subtitle="";
        if (entry.getValue() != null) {
          subtitle=cms.getRequestContext().removeSiteRoot(entry.getValue());
        }
        CmsResourceInfo infoWidget=new CmsResourceInfo(entry.getKey().getName(),subtitle,icon);
        m_responsiblesContainer.addComponent(infoWidget);
      }
    }
  }
 else {
    boolean showNotification=false;
    resourceLoop:     for (    CmsResource resource : resources) {
      try {
        List<CmsAccessControlEntry> aces=cms.getAccessControlEntries(cms.getSitePath(resource));
        for (        CmsAccessControlEntry ace : aces) {
          if (ace.isResponsible()) {
            showNotification=true;
            break resourceLoop;
          }
        }
      }
 catch (      CmsException e) {
        LOG.error(e.getLocalizedMessage(),e);
      }
    }
    m_notificationPanel.setVisible(showNotification);
  }
  m_notificationEnabledField.setValue(m_initialNotificationEnabled);
  m_notificationIntervalField.setValue(m_initialNotificationInterval);
  boolean hasFolders=false;
  for (  CmsResource resource : resources) {
    if (resource.isFolder()) {
      hasFolders=true;
    }
  }
  m_subresourceModificationField.setVisible(hasFolders);
  initResetCheckbox(m_resetReleased,m_releasedField);
  initResetCheckbox(m_resetExpired,m_expiredField);
  m_okButton.addClickListener(new ClickListener(){
    private static final long serialVersionUID=1L;
    @SuppressWarnings("synthetic-access") public void buttonClick(    ClickEvent event){
      if (validate()) {
        try {
          changeAvailability();
          m_dialogContext.finish(null);
        }
 catch (        Throwable t) {
          m_dialogContext.error(t);
        }
      }
    }
  }
);
  m_cancelButton.addClickListener(new ClickListener(){
    private static final long serialVersionUID=1L;
    @SuppressWarnings("synthetic-access") public void buttonClick(    ClickEvent event){
      m_dialogContext.finish(null);
    }
  }
);
  displayResourceInfo(m_dialogContext.getResources());
}
