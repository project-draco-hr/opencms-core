{
  if ((tabInfos == null) || (tabInfos.size() < 2)) {
    renderForm(entity,context,parentHandler,attributeIndex);
    return null;
  }
 else {
    context.getElement().getStyle().setHeight(600,Unit.PX);
    context.getElement().setAttribute("typeof",entity.getTypeName());
    context.getElement().setAttribute("about",entity.getId());
    context.getElement().getStyle().setPadding(0,Unit.PX);
    CmsTabbedPanel<FlowPanel> tabbedPanel=new CmsTabbedPanel<FlowPanel>(CmsTabbedPanelStyle.classicTabs);
    final TabSizeHandler tabSizeHandler=new TabSizeHandler(tabbedPanel,context);
    tabbedPanel.addSelectionHandler(tabSizeHandler);
    if (entity instanceof HasValueChangeHandlers) {
      ((HasValueChangeHandlers<I_Entity>)entity).addValueChangeHandler(tabSizeHandler);
    }
    Scheduler.get().scheduleFixedDelay(new RepeatingCommand(){
      private int counter=0;
      /** 
 * @see com.google.gwt.core.client.Scheduler.RepeatingCommand#execute()
 */
      public boolean execute(){
        tabSizeHandler.adjustContextHeight();
        counter++;
        return counter < 6;
      }
    }
,200);
    AttributeHandler.setResizeHandler(tabSizeHandler);
    tabbedPanel.addSelectionHandler(new TabSelectionHandler(tabbedPanel));
    tabbedPanel.getElement().getStyle().setBorderWidth(0,Unit.PX);
    Iterator<TabInfo> tabIt=tabInfos.iterator();
    TabInfo currentTab=tabIt.next();
    TabInfo nextTab=tabIt.next();
    FlowPanel tabPanel=createTab();
    tabbedPanel.addNamed(tabPanel,currentTab.getTabName(),currentTab.getTabId());
    I_Type entityType=m_vie.getType(entity.getTypeName());
    List<String> attributeNames=entityType.getAttributeNames();
    AttributeValueView lastCompactView=null;
    boolean collapsed=currentTab.isCollapsed() && ((nextTab != null) && attributeNames.get(1).endsWith("/" + nextTab.getStartName()));
    for (    final String attributeName : attributeNames) {
      if (!m_widgetService.isVisible(attributeName)) {
        continue;
      }
      if ((nextTab != null) && attributeName.endsWith("/" + nextTab.getStartName())) {
        currentTab=nextTab;
        nextTab=tabIt.hasNext() ? tabIt.next() : null;
        tabPanel=createTab();
        tabbedPanel.addNamed(tabPanel,currentTab.getTabName(),currentTab.getTabId());
        if (currentTab.isCollapsed()) {
          int currentIndex=attributeNames.indexOf(attributeName);
          collapsed=((currentIndex + 1) == attributeNames.size()) || ((nextTab != null) && attributeNames.get(currentIndex + 1).endsWith("/" + nextTab.getStartName()));
        }
        if (lastCompactView != null) {
          lastCompactView.setCompactMode(AttributeValueView.COMPACT_MODE_WIDE);
        }
      }
      AttributeHandler handler=new AttributeHandler(m_vie,entity,attributeName,m_widgetService);
      parentHandler.setHandler(attributeIndex,attributeName,handler);
      I_Type attributeType=entityType.getAttributeType(attributeName);
      int minOccurrence=entityType.getAttributeMinOccurrence(attributeName);
      I_EntityAttribute attribute=entity.getAttribute(attributeName);
      if (collapsed && (attribute != null) && !attributeType.isSimpleType()&& (minOccurrence == 1)&& (entityType.getAttributeMaxOccurrence(attributeName) == 1)) {
        I_EntityRenderer renderer=m_widgetService.getRendererForAttribute(attributeName,attributeType);
        renderer.renderForm(attribute.getComplexValue(),tabPanel,handler,0);
      }
 else {
        ValuePanel attributeElement=new ValuePanel();
        tabPanel.add(attributeElement);
        if ((attribute == null) && (minOccurrence > 0)) {
          attribute=createEmptyAttribute(entity,attributeName,handler,minOccurrence);
        }
        lastCompactView=renderAttribute(entityType,attributeType,attribute,handler,attributeElement,attributeName,lastCompactView);
      }
      handler.updateButtonVisisbility();
    }
    if (lastCompactView != null) {
      lastCompactView.setCompactMode(AttributeValueView.COMPACT_MODE_WIDE);
    }
    context.add(tabbedPanel);
    return tabbedPanel;
  }
}
