{
  CmsMacroResolver resolver=CmsMacroResolver.newInstance();
  resolver.addMacro(C_MACRO_LISTINDEX,Integer.toString(index));
  resolver.addMacro(C_MACRO_MICROSITEFOLDER,microSiteFolder);
  String type=(String)properties.get(resolver.resolveMacros(C_PROPERTY_LAYOUT_TYPE));
  if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(type) && !"none".equals(type)) {
    CmsTemplateContentListItem listItem=new CmsTemplateContentListItem();
    listItem.setType(type);
    StringBuffer keyPrefix=new StringBuffer(8);
    keyPrefix.append("layout.").append(type).append(".").append(displayArea);
    String collector=(String)properties.get(resolver.resolveMacros(C_PROPERTY_LAYOUT_COLLECTOR));
    if (CmsStringUtil.isEmptyOrWhitespaceOnly(collector)) {
      collector=messages.key(keyPrefix + ".collector");
    }
    listItem.setCollector(collector);
    String count=(String)properties.get(resolver.resolveMacros(C_PROPERTY_LAYOUT_COUNT));
    String defaultCount=messages.key(keyPrefix + ".count");
    if (CmsStringUtil.isEmptyOrWhitespaceOnly(count)) {
      count=defaultCount;
    }
    try {
      listItem.setCount(Integer.parseInt(count));
    }
 catch (    NumberFormatException e) {
      listItem.setCount(Integer.parseInt(defaultCount));
    }
    String folder=(String)properties.get(resolver.resolveMacros(C_PROPERTY_LAYOUT_FOLDER));
    if (CmsStringUtil.isEmptyOrWhitespaceOnly(folder)) {
      folder=messages.key(keyPrefix + ".folder");
    }
    listItem.setFolder(resolver.resolveMacros(folder));
    String variation=(String)properties.get(resolver.resolveMacros(C_PROPERTY_LAYOUT_VARIATION));
    if (CmsStringUtil.isEmptyOrWhitespaceOnly(variation)) {
      variation="";
    }
 else {
      variation="." + variation;
    }
    String listElement=messages.key(keyPrefix + ".listelement" + variation);
    listItem.setListElement(listElement);
    listItem.setDisplayArea(displayArea);
    return listItem;
  }
 else {
    return null;
  }
}
