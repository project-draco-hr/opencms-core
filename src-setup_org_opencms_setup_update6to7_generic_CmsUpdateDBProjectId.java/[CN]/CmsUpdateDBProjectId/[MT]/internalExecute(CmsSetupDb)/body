{
  System.out.println(new Exception().getStackTrace()[0].toString());
  generateUUIDs(dbCon);
  createHistProjectsTable(dbCon);
  Map uuids=getUUIDs(dbCon);
  for (Iterator it=TABLES_LIST.iterator(); it.hasNext(); ) {
    String tablename=(String)it.next();
    if (needsUpdating(dbCon,tablename)) {
      addUUIDColumnToTable(dbCon,tablename,TEMP_UUID_COLUMN);
      boolean isInResourcesList=RESOURCES_TABLES_LIST.contains(tablename);
      Iterator entries=uuids.entrySet().iterator();
      while (entries.hasNext()) {
        Map.Entry entry=(Map.Entry)entries.next();
        if (entry.getKey() != null && entry.getValue() != null) {
          if (isInResourcesList) {
            fillUUIDSColumn(dbCon,tablename,TEMP_UUID_COLUMN,(String)entry.getValue(),COLUMN_PROJECT_LASTMODIFIED,(String)entry.getKey());
          }
 else {
            fillUUIDSColumn(dbCon,tablename,TEMP_UUID_COLUMN,(String)entry.getValue(),COLUMN_PROJECT_ID,(String)entry.getKey());
          }
        }
      }
      if (isInResourcesList) {
        Map replacer=Collections.singletonMap("${tablename}",tablename);
        List params=Collections.singletonList(CmsUUID.getNullUUID().toString());
        String query=readQuery(QUERY_UPDATE_NULL_PROJECTID);
        dbCon.updateSqlStatement(query,replacer,params);
        dropColumn(dbCon,tablename,COLUMN_PROJECT_LASTMODIFIED);
        renameColumn(dbCon,tablename,COLUMN_TEMP_PROJECT_UUID,COLUMN_PROJECT_LASTMODIFIED);
      }
 else {
        dropColumn(dbCon,tablename,COLUMN_PROJECT_ID);
        renameColumn(dbCon,tablename,COLUMN_TEMP_PROJECT_UUID,COLUMN_PROJECT_ID);
        if (tablename.equals("CMS_PROJECTRESOURCES")) {
          addPrimaryKey(dbCon,tablename,getColumnProjectIdResourcePath());
        }
        if (tablename.equals("CMS_PROJECTS")) {
          addPrimaryKey(dbCon,tablename,COLUMN_PROJECT_ID);
        }
      }
    }
 else {
      System.out.println("table " + tablename + " does not need to be updated");
    }
  }
  CmsSetupDBWrapper db=null;
  boolean update=false;
  try {
    db=dbCon.executeSqlStatement(readQuery(QUERY_SELECT_COUNT_HISTORY_TABLE),null);
    if (db.getResultSet().next()) {
      if (db.getResultSet().getInt("COUNT") <= 0) {
        update=true;
      }
    }
  }
  finally {
    if (db != null) {
      db.close();
    }
  }
  if (update) {
    System.out.println("table " + HISTORY_PROJECTS_TABLE + " has no content, create a dummy entry");
    CmsUUID userId=CmsUUID.getNullUUID();
    try {
      db=dbCon.executeSqlStatement(readQuery(QUERY_READ_ADMIN_USER),null);
      if (db.getResultSet().next()) {
        userId=new CmsUUID(db.getResultSet().getString(1));
      }
    }
  finally {
      if (db != null) {
        db.close();
      }
    }
    CmsUUID groupId=CmsUUID.getNullUUID();
    try {
      db=dbCon.executeSqlStatement(readQuery(QUERY_READ_ADMIN_GROUP),null);
      if (db.getResultSet().next()) {
        groupId=new CmsUUID(db.getResultSet().getString(1));
      }
    }
  finally {
      if (db != null) {
        db.close();
      }
    }
    int pubTag=1;
    String query=readQuery(QUERY_READ_MAX_PUBTAG);
    try {
      db=dbCon.executeSqlStatement(query,null);
      if (db.getResultSet().next()) {
        pubTag=db.getResultSet().getInt(1);
      }
    }
  finally {
      if (db != null) {
        db.close();
      }
    }
    List params=new ArrayList();
    params.add(new CmsUUID().toString());
    params.add("updateWizardDummyProject");
    params.add("dummy project just for having an entry");
    params.add(new Integer(1));
    params.add(userId.toString());
    params.add(groupId.toString());
    params.add(groupId.toString());
    params.add(new Long(System.currentTimeMillis()));
    params.add(new Integer(pubTag));
    params.add(new Long(System.currentTimeMillis()));
    params.add(userId.toString());
    params.add(CmsOrganizationalUnit.SEPARATOR);
    query=readQuery(QUERY_INSERT_CMS_HISTORY_TABLE);
    dbCon.updateSqlStatement(query,null,params);
  }
 else {
    System.out.println("table " + HISTORY_PROJECTS_TABLE + " has content");
  }
}
