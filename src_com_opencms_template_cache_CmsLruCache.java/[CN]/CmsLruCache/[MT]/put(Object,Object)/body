{
  int hashIndex=(key.hashCode() & 0x7FFFFFFF) % m_maxSize;
  CacheItem item=m_cache[hashIndex];
  CacheItem newItem=null;
  Vector returnValue=null;
  if (C_DEBUG) {
    System.err.println("put in cache:   " + key);
  }
  if (item != null) {
    while (item.chain != null) {
      if (item.key.equals(key)) {
        item.value=value;
        return null;
      }
      item=item.chain;
    }
    if (item.key.equals(key)) {
      item.value=value;
      return null;
    }
    if (m_size >= m_maxSize) {
      CacheItem helper=head.next;
      if (item == head) {
        newItem=item;
        returnValue=new Vector(2);
        returnValue.add(0,item.key);
        returnValue.add(1,item.value);
      }
 else {
        newItem=head;
        returnValue=new Vector(2);
        returnValue.add(0,head.key);
        returnValue.add(1,head.value);
        removeFromTable(head);
        newItem.chain=null;
        item.chain=newItem;
      }
      newItem.next=null;
      head=helper;
      head.previous=null;
    }
 else {
      m_size++;
      newItem=new CacheItem();
      item.chain=newItem;
    }
  }
 else {
    if (head != null) {
      if (m_size >= m_maxSize) {
        CacheItem helper=head.next;
        newItem=head;
        returnValue=new Vector(2);
        returnValue.add(0,head.key);
        returnValue.add(1,head.value);
        removeFromTable(head);
        newItem.next=null;
        newItem.chain=null;
        head=helper;
        head.previous=null;
      }
 else {
        m_size++;
        newItem=new CacheItem();
      }
    }
 else {
      newItem=new CacheItem();
      m_size++;
      head=newItem;
      tail=newItem;
    }
    item=m_cache[hashIndex]=newItem;
  }
  newItem.key=key;
  newItem.value=value;
  if (tail != newItem) {
    tail.next=newItem;
    newItem.previous=tail;
    tail=newItem;
  }
  return returnValue;
}
