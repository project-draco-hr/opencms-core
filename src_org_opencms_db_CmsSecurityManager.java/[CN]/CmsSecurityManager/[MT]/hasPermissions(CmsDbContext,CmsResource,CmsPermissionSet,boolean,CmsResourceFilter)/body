{
  if (!filter.isValid(dbc.getRequestContext(),resource)) {
    return PERM_FILTERED;
  }
  String cacheKey=m_keyGenerator.getCacheKeyForUserPermissions(String.valueOf(filter.requireVisible()),dbc,resource,requiredPermissions);
  Integer cacheResult=(Integer)m_permissionCache.get(cacheKey);
  if (cacheResult != null) {
    return cacheResult.intValue();
  }
  int denied=0;
  if (dbc.currentProject().isOnlineProject()) {
    denied|=CmsPermissionSet.PERMISSION_WRITE;
  }
  boolean canIgnorePermissions=hasRole(dbc,CmsRole.VFS_MANAGER);
  boolean writeRequired=requiredPermissions.requiresWritePermission() || requiredPermissions.requiresControlPermission();
  if (writeRequired && !canIgnorePermissions && (resource.getTypeId() == CmsResourceTypeJsp.getStaticTypeId())) {
    if (!hasRole(dbc,CmsRole.DEVELOPER)) {
      denied|=CmsPermissionSet.PERMISSION_WRITE;
      denied|=CmsPermissionSet.PERMISSION_CONTROL;
    }
  }
  if (writeRequired) {
    CmsLock lock=m_driverManager.getLock(dbc,resource);
    if (checkLock || !lock.isNullLock()) {
      if (!dbc.currentUser().getId().equals(lock.getUserId())) {
        return PERM_NOTLOCKED;
      }
    }
  }
  CmsPermissionSetCustom permissions;
  if (canIgnorePermissions) {
    permissions=new CmsPermissionSetCustom(~0);
  }
 else {
    permissions=m_driverManager.getPermissions(dbc,resource,dbc.currentUser());
  }
  permissions.denyPermissions(denied);
  if ((permissions.getPermissions() & CmsPermissionSet.PERMISSION_VIEW) == 0) {
    if (filter.requireVisible()) {
      requiredPermissions=new CmsPermissionSet(requiredPermissions.getAllowedPermissions() | CmsPermissionSet.PERMISSION_VIEW,requiredPermissions.getDeniedPermissions());
    }
 else {
      permissions.setPermissions(permissions.getAllowedPermissions() | CmsPermissionSet.PERMISSION_VIEW,permissions.getDeniedPermissions() & ~CmsPermissionSet.PERMISSION_VIEW);
    }
  }
  Integer result;
  if ((requiredPermissions.getPermissions() & (permissions.getPermissions())) == requiredPermissions.getPermissions()) {
    result=PERM_ALLOWED_INTEGER;
  }
 else {
    result=PERM_DENIED_INTEGER;
  }
  m_permissionCache.put(cacheKey,result);
  if ((result != PERM_ALLOWED_INTEGER) && LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().key(Messages.LOG_NO_PERMISSION_RESOURCE_USER_4,new Object[]{dbc.getRequestContext().removeSiteRoot(resource.getRootPath()),dbc.currentUser().getName(),requiredPermissions.getPermissionString(),permissions.getPermissionString()}));
  }
  return result.intValue();
}
