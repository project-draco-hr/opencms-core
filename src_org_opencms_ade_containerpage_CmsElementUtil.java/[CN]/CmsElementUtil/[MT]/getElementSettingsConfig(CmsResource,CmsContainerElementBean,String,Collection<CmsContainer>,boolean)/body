{
  Locale requestLocale=m_cms.getRequestContext().getLocale();
  m_cms.getRequestContext().setLocale(m_locale);
  element.initResource(m_cms);
  if (element.getResource().isFolder()) {
    return null;
  }
  CmsContainerElementData elementData=getBaseElementData(page,element);
  if (!element.isGroupContainer(m_cms) && !element.isInheritedContainer(m_cms)) {
    CmsFormatterConfiguration formatterConfiguraton=getFormatterConfiguration(element.getResource());
    Map<String,Map<String,CmsFormatterConfig>> formatters=new HashMap<String,Map<String,CmsFormatterConfig>>();
    for (    CmsContainer cnt : containers) {
      if (cnt.getName().equals(containerId)) {
        Map<String,CmsFormatterConfig> containerFormatters=new LinkedHashMap<String,CmsFormatterConfig>();
        boolean missesFormatterSetting=!elementData.getSettings().containsKey(CmsFormatterConfig.getSettingsKeyForContainer(cnt.getName()));
        boolean allowNestedCnt=allowNested && checkContainerTreeLevel(cnt,containers);
        Map<String,I_CmsFormatterBean> formatterSelection=formatterConfiguraton.getFormatterSelection(cnt.getType(),cnt.getWidth(),allowNestedCnt);
        for (        Entry<String,I_CmsFormatterBean> formatterEntry : formatterSelection.entrySet()) {
          I_CmsFormatterBean formatter=formatterEntry.getValue();
          String id=formatterEntry.getKey();
          if (missesFormatterSetting && ((element.getFormatterId() == null) || element.getFormatterId().equals(formatter.getJspStructureId()))) {
            elementData.getSettings().put(CmsFormatterConfig.getSettingsKeyForContainer(cnt.getName()),id);
            missesFormatterSetting=false;
          }
          String label=formatter.getNiceName();
          if (formatterEntry.getKey().startsWith(CmsFormatterConfig.SCHEMA_FORMATTER_ID)) {
            label=Messages.get().getBundle().key(Messages.GUI_SCHEMA_FORMATTER_LABEL_0) + " [" + CmsResource.getName(formatter.getJspRootPath())+ "]";
          }
          if (CmsStringUtil.isEmptyOrWhitespaceOnly(label)) {
            label=id;
          }
          CmsFormatterConfig config=new CmsFormatterConfig(id);
          Set<String> cssResources=new LinkedHashSet<String>();
          for (          String cssSitePath : formatter.getCssHeadIncludes()) {
            cssResources.add(OpenCms.getLinkManager().getOnlineLink(m_cms,cssSitePath));
          }
          config.setCssResources(cssResources);
          config.setInlineCss(formatter.getInlineCss());
          config.setLabel(label);
          Map<String,CmsXmlContentProperty> settingsConfig=new LinkedHashMap<String,CmsXmlContentProperty>(formatter.getSettings());
          settingsConfig=CmsXmlContentPropertyHelper.resolveMacrosForPropertyInfo(m_cms,page,element.getResource(),settingsConfig);
          config.setSettingConfig(settingsConfig);
          config.setJspRootPath(formatter.getJspRootPath());
          containerFormatters.put(id,config);
        }
        formatters.put(cnt.getName(),containerFormatters);
      }
    }
    elementData.setFormatters(formatters);
  }
  m_cms.getRequestContext().setLocale(requestLocale);
  return elementData;
}
