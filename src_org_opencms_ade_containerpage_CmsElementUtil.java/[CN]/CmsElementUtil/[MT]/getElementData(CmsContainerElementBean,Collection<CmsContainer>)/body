{
  Locale requestLocale=m_cms.getRequestContext().getLocale();
  m_cms.getRequestContext().setLocale(m_locale);
  element.initResource(m_cms);
  CmsResourceUtil resUtil=new CmsResourceUtil(m_cms,element.getResource());
  CmsContainerElementData elementBean=new CmsContainerElementData();
  elementBean.setClientId(element.editorHash());
  elementBean.setSitePath(resUtil.getFullPath());
  elementBean.setLastModifiedDate(element.getResource().getDateLastModified());
  elementBean.setLastModifiedByUser(m_cms.readUser(element.getResource().getUserLastModified()).getName());
  elementBean.setNavText(resUtil.getNavText());
  elementBean.setTitle(resUtil.getTitle());
  elementBean.setResourceType(OpenCms.getResourceManager().getResourceType(element.getResource().getTypeId()).getTypeName());
  Set<String> cssResources=new LinkedHashSet<String>();
  for (  String cssSitePath : CmsJspTagHeadIncludes.getCSSHeadIncludes(m_cms,element.getResource())) {
    cssResources.add(OpenCms.getLinkManager().getOnlineLink(m_cms,cssSitePath));
  }
  elementBean.setCssResources(cssResources);
  Map<String,CmsXmlContentProperty> settingConfig=CmsXmlContentPropertyHelper.getPropertyInfo(m_cms,element.getResource());
  elementBean.setSettings(CmsXmlContentPropertyHelper.convertPropertiesToClientFormat(m_cms,element.getIndividualSettings(),settingConfig));
  elementBean.setSettingConfig(new LinkedHashMap<String,CmsXmlContentProperty>(settingConfig));
  elementBean.setViewPermission(element.isInMemoryOnly() || m_cms.hasPermissions(element.getResource(),CmsPermissionSet.ACCESS_VIEW,false,CmsResourceFilter.DEFAULT_ONLY_VISIBLE));
  String noEditReason="";
  if (CmsResourceTypeXmlContent.isXmlContent(element.getResource())) {
    if (!element.isInMemoryOnly()) {
      noEditReason=CmsEncoder.escapeHtml(resUtil.getNoEditReason(OpenCms.getWorkplaceManager().getWorkplaceLocale(m_cms)));
    }
  }
 else {
    noEditReason=org.opencms.jsp.Messages.get().getBundle().key(org.opencms.jsp.Messages.GUI_ELEMENT_RESOURCE_CAN_NOT_BE_EDITED_0);
  }
  elementBean.setNoEditReason(noEditReason);
  elementBean.setStatus(resUtil.getStateAbbreviation());
  Map<String,String> contents=new HashMap<String,String>();
  if (element.isGroupContainer(m_cms)) {
    Set<String> types=new HashSet<String>();
    Map<String,CmsContainer> containersByName=new HashMap<String,CmsContainer>();
    for (    CmsContainer container : containers) {
      types.add(container.getType());
      containersByName.put(container.getName(),container);
    }
    CmsXmlGroupContainer xmlGroupContainer=CmsXmlGroupContainerFactory.unmarshal(m_cms,element.getResource(),m_req);
    CmsGroupContainerBean groupContainer=xmlGroupContainer.getGroupContainer(m_cms,m_locale);
    elementBean.setGroupContainer(true);
    elementBean.setTypes(groupContainer.getTypes());
    elementBean.setDescription(groupContainer.getDescription());
    if (groupContainer.getTypes().isEmpty()) {
      if (groupContainer.getElements().isEmpty()) {
        String emptySub="<div>NEW AND EMPTY</div>";
        for (        String name : containersByName.keySet()) {
          contents.put(name,emptySub);
        }
      }
 else {
        return null;
      }
    }
 else {
      for (      CmsContainer cnt : containersByName.values()) {
        String type=cnt.getType();
        if (groupContainer.getTypes().contains(type)) {
          contents.put(cnt.getName(),"<div>should not be used</div>");
        }
      }
    }
    List<String> subItems=new ArrayList<String>();
    for (    CmsContainerElementBean subElement : groupContainer.getElements()) {
      subItems.add(subElement.editorHash());
    }
    elementBean.setSubItems(subItems);
  }
 else {
    Map<String,String> contentsByName=getContentsByContainerName(element,containers);
    contents=contentsByName;
  }
  elementBean.setContents(contents);
  m_cms.getRequestContext().setLocale(requestLocale);
  return elementBean;
}
