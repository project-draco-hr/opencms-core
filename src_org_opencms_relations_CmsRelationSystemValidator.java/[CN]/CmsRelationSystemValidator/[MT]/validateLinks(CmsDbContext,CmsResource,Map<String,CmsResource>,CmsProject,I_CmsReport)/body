{
  List<CmsRelation> brokenRelations=new ArrayList<CmsRelation>();
  Map<String,Boolean> validatedLinks=new HashMap<String,Boolean>();
  List<CmsRelation> relations=null;
  try {
    if (!resource.getState().isDeleted()) {
      relations=m_driverManager.getRelationsForResource(dbc,resource,CmsRelationFilter.TARGETS);
    }
 else {
      CmsProject currentProject=dbc.currentProject();
      dbc.getRequestContext().setCurrentProject(project);
      try {
        relations=m_driverManager.getRelationsForResource(dbc,resource,CmsRelationFilter.SOURCES);
      }
  finally {
        dbc.getRequestContext().setCurrentProject(currentProject);
      }
    }
  }
 catch (  CmsException e) {
    LOG.error(Messages.get().getBundle().key(Messages.LOG_LINK_SEARCH_1,resource),e);
    if (report != null) {
      report.println(Messages.get().container(Messages.LOG_LINK_SEARCH_1,dbc.removeSiteRoot(resource.getRootPath())),I_CmsReport.FORMAT_ERROR);
    }
    return brokenRelations;
  }
  boolean first=true;
  Iterator<CmsRelation> itRelations=relations.iterator();
  while (itRelations.hasNext()) {
    CmsRelation relation=itRelations.next();
    String link;
    if (!resource.getState().isDeleted()) {
      link=relation.getTargetPath();
    }
 else {
      link=relation.getSourcePath();
    }
    boolean isValidLink=true;
    if (CmsStringUtil.isEmptyOrWhitespaceOnly(link)) {
      continue;
    }
    if (validatedLinks.keySet().contains(link)) {
      if (validatedLinks.get(link).booleanValue()) {
        brokenRelations.add(relation);
      }
      continue;
    }
    try {
      if (!resource.getState().isDeleted()) {
        try {
          link=m_driverManager.getVfsDriver().readResource(new CmsDbContext(),project.getUuid(),relation.getTargetId(),true).getRootPath();
        }
 catch (        CmsVfsResourceNotFoundException e) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(Messages.get().getBundle().key(Messages.LOG_LINK_VALIDATION_READBYID_FAILED_2,relation.getTargetId().toString(),project.getName()),e);
          }
          m_driverManager.getVfsDriver().readResource(new CmsDbContext(),project.getUuid(),relation.getTargetPath(),true);
        }
      }
 else {
        isValidLink=false;
        if (fileLookup.containsKey(link)) {
          CmsResource offlineResource=fileLookup.get(link);
          if (offlineResource.getState().isDeleted()) {
            isValidLink=true;
          }
        }
      }
    }
 catch (    CmsException e) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_LINK_VALIDATION_READBYPATH_FAILED_2,relation.getTargetPath(),project.getName()),e);
      }
      if (!fileLookup.containsKey(link)) {
        isValidLink=false;
        if (LOG.isDebugEnabled()) {
          LOG.debug(Messages.get().getBundle().key(Messages.LOG_LINK_VALIDATION_RESOURCENOTINLOOKUP_1,link));
        }
      }
    }
 finally {
      if (!resource.getState().isDeleted() && fileLookup.containsKey(link)) {
        CmsResource offlineResource=fileLookup.get(link);
        if (offlineResource.getState().isDeleted()) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(Messages.get().getBundle().key(Messages.LOG_LINK_VALIDATION_RESOURCEDELETED_1,link));
          }
          isValidLink=false;
        }
      }
    }
    if (!isValidLink) {
      if (first) {
        if (report != null) {
          report.println(Messages.get().container(Messages.RPT_HTMLLINK_FOUND_BROKEN_LINKS_0),I_CmsReport.FORMAT_WARNING);
        }
        first=false;
      }
      brokenRelations.add(relation);
      if (report != null) {
        if (!resource.getState().isDeleted()) {
          report.println(Messages.get().container(Messages.RPT_HTMLLINK_BROKEN_TARGET_2,relation.getSourcePath(),dbc.removeSiteRoot(link)),I_CmsReport.FORMAT_WARNING);
        }
 else {
          report.println(Messages.get().container(Messages.RPT_HTMLLINK_BROKEN_SOURCE_2,dbc.removeSiteRoot(link),relation.getTargetPath()),I_CmsReport.FORMAT_WARNING);
        }
      }
    }
    validatedLinks.put(link,Boolean.valueOf(!isValidLink));
  }
  return brokenRelations;
}
