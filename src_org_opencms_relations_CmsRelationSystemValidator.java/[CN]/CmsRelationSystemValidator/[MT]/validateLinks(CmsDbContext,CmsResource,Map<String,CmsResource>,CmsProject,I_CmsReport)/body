{
  List<CmsRelation> brokenRelations=new ArrayList<CmsRelation>();
  Map<String,Boolean> validatedLinks=new HashMap<String,Boolean>();
  List<CmsRelation> incomingRelationsOnline=new ArrayList<CmsRelation>();
  List<CmsRelation> outgoingRelationsOffline=new ArrayList<CmsRelation>();
  try {
    if (!resource.getState().isDeleted()) {
      outgoingRelationsOffline=m_driverManager.getRelationsForResource(dbc,resource,CmsRelationFilter.TARGETS);
    }
 else {
      CmsProject currentProject=dbc.currentProject();
      dbc.getRequestContext().setCurrentProject(project);
      try {
        incomingRelationsOnline=m_driverManager.getRelationsForResource(dbc,resource,CmsRelationFilter.SOURCES);
      }
  finally {
        dbc.getRequestContext().setCurrentProject(currentProject);
      }
    }
  }
 catch (  CmsException e) {
    LOG.error(Messages.get().getBundle().key(Messages.LOG_LINK_SEARCH_1,resource),e);
    if (report != null) {
      report.println(Messages.get().container(Messages.LOG_LINK_SEARCH_1,dbc.removeSiteRoot(resource.getRootPath())),I_CmsReport.FORMAT_ERROR);
    }
    return brokenRelations;
  }
  List<CmsRelation> relations=new ArrayList<CmsRelation>();
  relations.addAll(incomingRelationsOnline);
  relations.addAll(outgoingRelationsOffline);
  HashMultimap<String,String> outgoingRelationTargets=HashMultimap.create();
  for (  CmsRelation outRelation : outgoingRelationsOffline) {
    String sourcePath=outRelation.getSourcePath();
    String targetId=outRelation.getTargetId().toString();
    String targetPath=outRelation.getTargetPath();
    outgoingRelationTargets.put(sourcePath,targetId);
    outgoingRelationTargets.put(sourcePath,targetPath);
  }
  boolean first=true;
  Iterator<CmsRelation> itRelations=relations.iterator();
  while (itRelations.hasNext()) {
    CmsRelation relation=itRelations.next();
    String link;
    if (!resource.getState().isDeleted()) {
      link=relation.getTargetPath();
    }
 else {
      link=relation.getSourcePath();
    }
    if (CmsStringUtil.isEmptyOrWhitespaceOnly(link)) {
      continue;
    }
    if (validatedLinks.keySet().contains(link)) {
      if (validatedLinks.get(link).booleanValue()) {
        brokenRelations.add(relation);
      }
      continue;
    }
    boolean result;
    if (resource.getState().isDeleted()) {
      result=checkLinkForDeletedLinkTarget(relation,link,fileLookup,outgoingRelationTargets);
    }
 else {
      result=checkLinkForNewOrChangedLinkSource(dbc,resource,relation,link,project,fileLookup);
    }
    boolean isValidLink=result;
    if (!isValidLink) {
      if (first) {
        if (report != null) {
          report.println(Messages.get().container(Messages.RPT_HTMLLINK_FOUND_BROKEN_LINKS_0),I_CmsReport.FORMAT_WARNING);
        }
        first=false;
      }
      brokenRelations.add(relation);
      if (report != null) {
        if (!resource.getState().isDeleted()) {
          report.println(Messages.get().container(Messages.RPT_HTMLLINK_BROKEN_TARGET_2,relation.getSourcePath(),dbc.removeSiteRoot(link)),I_CmsReport.FORMAT_WARNING);
        }
 else {
          report.println(Messages.get().container(Messages.RPT_HTMLLINK_BROKEN_SOURCE_2,dbc.removeSiteRoot(link),relation.getTargetPath()),I_CmsReport.FORMAT_WARNING);
        }
      }
    }
    validatedLinks.put(link,Boolean.valueOf(!isValidLink));
  }
  return brokenRelations;
}
