{
  System.out.println(new Exception().getStackTrace()[0].toString());
  if (dbCon.hasTableOrColumn(TABLE_CMS_OFFLINE_CONTENTS,COLUMN_CMS_OFFLINE_CONTENTS_CONTENT_ID)) {
    for (Iterator it=CMS_OFFLINE_CONTENTS_QUERIES_LIST.iterator(); it.hasNext(); ) {
      String query=readQuery((String)it.next());
      dbCon.updateSqlStatement(query,null,null);
    }
  }
 else {
    System.out.println("no column " + COLUMN_CMS_OFFLINE_CONTENTS_CONTENT_ID + " in table "+ TABLE_CMS_OFFLINE_CONTENTS);
  }
  for (Iterator it=CMS_PROPERTYDEF_LIST.iterator(); it.hasNext(); ) {
    String table=(String)it.next();
    if (!dbCon.hasTableOrColumn(table,COLUMN_CMS_PROPERTYDEF_TYPE)) {
      String query=readQuery(QUERY_PROPERTYDEF_TYPE);
      HashMap replacer=new HashMap();
      replacer.put(REPLACEMENT_TABLENAME,table);
      dbCon.updateSqlStatement(query,replacer,null);
      replacer.clear();
    }
 else {
      System.out.println("column " + COLUMN_CMS_PROPERTYDEF_TYPE + " in table "+ table+ " already exists");
    }
  }
  for (Iterator it=CMS_STRUCTURE_LIST.iterator(); it.hasNext(); ) {
    String table=(String)it.next();
    if (!dbCon.hasTableOrColumn(table,COLUMN_CMS_STRUCTURE_STRUCTURE_VERSION)) {
      String addColumn=readQuery(QUERY_CMS_STRUCTURE_ADD_STRUCTURE_VERSION);
      HashMap replacer=new HashMap();
      replacer.put(REPLACEMENT_TABLENAME,table);
      dbCon.updateSqlStatement(addColumn,replacer,null);
      String structureVersion=readQuery(QUERY_SELECT_CMS_STRUCTURE_VERSION);
      CmsSetupDBWrapper db=null;
      try {
        db=dbCon.executeSqlStatement(structureVersion,replacer);
        while (db.getResultSet().next()) {
          String updateQuery=readQuery(QUERY_UPDATE_STRUCTURE_VERSION);
          String structureId=db.getResultSet().getString("STRUCTURE_ID");
          int version=db.getResultSet().getInt("STRUCTURE_VERSION");
          List params=new ArrayList();
          params.add(new Integer(version));
          params.add(structureId);
          dbCon.updateSqlStatement(updateQuery,replacer,params);
        }
      }
  finally {
        if (db != null) {
          db.close();
        }
      }
    }
 else {
      System.out.println("column " + COLUMN_CMS_STRUCTURE_STRUCTURE_VERSION + " in table "+ table+ " already exists");
    }
  }
  if (dbCon.hasTableOrColumn(TABLE_CMS_PROJECTS,COLUMN_PROJECTS_TASK_ID)) {
    String dropTaskId=readQuery(QUERY_CMS_PROJECTS_DROP_TASK_ID);
    dbCon.updateSqlStatement(dropTaskId,null,null);
  }
 else {
    System.out.println("no column " + COLUMN_PROJECTS_TASK_ID + " in table "+ TABLE_CMS_PROJECTS);
  }
  if (dbCon.hasTableOrColumn(TABLE_CMS_PROJECTS,COLUMN_PROJECTS_PROJECT_NAME)) {
    String changeProjectName=readQuery(QUERY_CMS_PROJECTS_CHANGE_PROJECT_NAME);
    dbCon.updateSqlStatement(changeProjectName,null,null);
  }
 else {
    System.out.println("no column " + COLUMN_PROJECTS_PROJECT_NAME + " in table "+ TABLE_CMS_PROJECTS);
  }
  if (dbCon.hasTableOrColumn(TABLE_CMS_PROJECTS,null)) {
    String updateProjectFlags=readQuery(QUERY_CMS_PROJECTS_UPDATE_PROJECT_FLAGS);
    dbCon.updateSqlStatement(updateProjectFlags,null,null);
  }
 else {
    System.out.println("table " + TABLE_CMS_PROJECTS + " does not exists");
  }
  for (Iterator it=CMS_RESOURCES_LIST.iterator(); it.hasNext(); ) {
    String table=(String)it.next();
    HashMap replacer=new HashMap();
    replacer.put(REPLACEMENT_TABLENAME,table);
    if (!dbCon.hasTableOrColumn(table,COLUMN_RESOURCES_DATE_CONTENT)) {
      String addDateContent=readQuery(QUERY_UPDATE_RESOURCES_DATE_CONTENT);
      dbCon.updateSqlStatement(addDateContent,replacer,null);
    }
 else {
      System.out.println("column " + COLUMN_RESOURCES_DATE_CONTENT + " in table "+ table+ " already exists");
    }
    if (!dbCon.hasTableOrColumn(table,COLUMN_RESOURCES_RESOURCE_VERSION)) {
      String addResourceVersion=readQuery(QUERY_UPDATE_RESOURCES_RESOURCE_VERSION);
      dbCon.updateSqlStatement(addResourceVersion,replacer,null);
    }
 else {
      System.out.println("column " + COLUMN_RESOURCES_RESOURCE_VERSION + " in table "+ table+ " already exists");
    }
  }
}
