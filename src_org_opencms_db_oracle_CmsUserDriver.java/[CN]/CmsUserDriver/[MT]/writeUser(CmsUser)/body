{
  byte[] value=null;
  PreparedStatement stmt=null;
  PreparedStatement stmt2=null;
  PreparedStatement nextStmt=null;
  PreparedStatement trimStmt=null;
  ResultSet res=null;
  Connection conn=null;
  try {
    value=serializeAdditionalUserInfo(user.getAdditionalInfo());
    conn=m_sqlManager.getConnection();
    stmt=m_sqlManager.getPreparedStatement(conn,"C_ORACLE_USERSWRITE");
    stmt.setString(1,m_sqlManager.validateNull(user.getDescription()));
    stmt.setString(2,m_sqlManager.validateNull(user.getFirstname()));
    stmt.setString(3,m_sqlManager.validateNull(user.getLastname()));
    stmt.setString(4,m_sqlManager.validateNull(user.getEmail()));
    stmt.setTimestamp(5,new Timestamp(user.getLastlogin()));
    stmt.setTimestamp(6,new Timestamp(user.getLastUsed()));
    stmt.setInt(7,user.getFlags());
    stmt.setString(8,user.getDefaultGroupId().toString());
    stmt.setString(9,m_sqlManager.validateNull(user.getAddress()));
    stmt.setString(10,m_sqlManager.validateNull(user.getSection()));
    stmt.setInt(11,user.getType());
    stmt.setString(12,user.getId().toString());
    stmt.executeUpdate();
    stmt.close();
    stmt=null;
    stmt2=m_sqlManager.getPreparedStatement(conn,"C_ORACLE_USERSFORUPDATE");
    stmt2.setString(1,user.getId().toString());
    conn.setAutoCommit(false);
    res=((DelegatingResultSet)stmt2.executeQuery()).getInnermostDelegate();
    try {
      while (res.next()) {
        oracle.sql.BLOB blobnew=((OracleResultSet)res).getBLOB("USER_INFO");
        trimStmt=m_sqlManager.getPreparedStatement(conn,"C_TRIMBLOB");
        trimStmt.setBlob(1,blobnew);
        trimStmt.setInt(2,0);
        trimStmt.execute();
        trimStmt.close();
        ByteArrayInputStream instream=new ByteArrayInputStream(value);
        OutputStream outstream=blobnew.getBinaryOutputStream();
        byte[] chunk=new byte[blobnew.getChunkSize()];
        int i=-1;
        while ((i=instream.read(chunk)) != -1) {
          outstream.write(chunk,0,i);
        }
        instream.close();
        outstream.close();
      }
      nextStmt=m_sqlManager.getPreparedStatement(conn,"C_COMMIT");
      nextStmt.execute();
      nextStmt.close();
      nextStmt=null;
      conn.setAutoCommit(true);
    }
 catch (    IOException e) {
      throw m_sqlManager.getCmsException(this,null,CmsException.C_SERIALIZATION,e,false);
    }
    stmt2.close();
    res.close();
    stmt2=null;
    res=null;
  }
 catch (  SQLException e) {
    throw m_sqlManager.getCmsException(this,null,CmsException.C_SQL_ERROR,e,false);
  }
catch (  IOException e) {
    throw m_sqlManager.getCmsException(this,"[CmsAccessUserInfoMySql/addUserInformation(id,object)]:",CmsException.C_SERIALIZATION,e,false);
  }
 finally {
    if (res != null) {
      try {
        res.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (stmt2 != null) {
      try {
        nextStmt=m_sqlManager.getPreparedStatement(conn,"C_ROLLBACK");
        nextStmt.execute();
      }
 catch (      SQLException se) {
      }
      try {
        stmt2.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (nextStmt != null) {
      try {
        nextStmt.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException exc) {
      }
    }
  }
}
