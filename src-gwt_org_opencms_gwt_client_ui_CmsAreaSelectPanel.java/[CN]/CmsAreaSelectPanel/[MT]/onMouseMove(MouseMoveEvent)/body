{
  int secondX=event.getRelativeX(getElement());
  int secondY=event.getRelativeY(getElement());
  cacheElementSize();
  secondX=(secondX < 0) ? 0 : ((secondX > m_elementWidth) ? m_elementWidth : secondX);
  secondY=(secondY < 0) ? 0 : ((secondY > m_elementHeight) ? m_elementHeight : secondY);
switch (m_state) {
case SELECTING:
    if (m_heightToWidth > 0) {
      int tempX=getXForY(secondX,secondY);
      if (((tempX > secondX) && (secondX > m_firstX)) || ((tempX < secondX) && (secondX < m_firstX))) {
        secondY=getYForX(secondX,secondY);
      }
 else {
        secondX=tempX;
      }
    }
  positionX(secondX);
positionY(secondY);
fireChangeEvent(false);
break;
case DRAGGING:
moveTo(secondX - m_moveOffsetX,secondY - m_moveOffsetY);
fireChangeEvent(false);
break;
case RESIZE_HEIGHT:
if (m_heightToWidth > 0) {
int tempX=getXForY(secondX,secondY);
if ((tempX < 0) || (tempX > m_elementWidth)) {
tempX=secondX;
secondY=getYForX(secondX,secondY);
}
positionX(tempX);
}
positionY(secondY);
fireChangeEvent(false);
break;
case RESIZE_WIDTH:
if (m_heightToWidth > 0) {
int tempY=getYForX(secondX,secondY);
if ((tempY < 0) || (tempY > m_elementWidth)) {
tempY=secondY;
secondX=getXForY(secondX,secondY);
}
positionY(getYForX(secondX,secondY));
}
positionX(secondX);
fireChangeEvent(false);
break;
case SELECTED:
m_mouseOverArea=m_currentSelection.getArea(secondX,secondY,30);
if (m_mouseOverArea == null) {
m_markerStyle.setCursor(Cursor.DEFAULT);
break;
}
switch (m_mouseOverArea) {
case BORDER_LEFT:
case BORDER_RIGHT:
m_markerStyle.setCursor(Cursor.E_RESIZE);
break;
case BORDER_TOP:
case BORDER_BOTTOM:
m_markerStyle.setCursor(Cursor.N_RESIZE);
break;
case CENTER:
m_markerStyle.setCursor(Cursor.MOVE);
break;
case CORNER_BOTTOM_RIGHT:
case CORNER_TOP_LEFT:
m_markerStyle.setCursor(Cursor.NW_RESIZE);
break;
case CORNER_TOP_RIGHT:
case CORNER_BOTTOM_LEFT:
m_markerStyle.setCursor(Cursor.NE_RESIZE);
break;
default :
}
break;
case EMPTY:
default :
}
}
