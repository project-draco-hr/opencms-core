{
  String version=OpenCms.getSystemInfo().getVersionNumber();
  String expectedVersion="9.4";
  assertTrue("OpenCms Version number not set correctly, expected prefix [" + expectedVersion + "] but was ["+ version.substring(0,expectedVersion.length())+ "]"+ version.substring(expectedVersion.length()),version.startsWith(expectedVersion));
  String versionId=OpenCms.getSystemInfo().getVersionId();
  if (versionId.startsWith("Manual")) {
    assertEquals("Unexpected version ID '" + versionId + "'","Manual build",versionId);
    Map<String,String[]> info=OpenCms.getSystemInfo().getBuildInfo();
    String[] value;
    value=info.get("build.number");
    assertEquals("(not set)",value[0]);
    assertEquals("Build Number",value[1]);
    value=info.get("build.date");
    assertEquals("(not set)",value[0]);
    assertEquals("Build Date",value[1]);
    value=info.get("build.info");
    assertEquals("Static version file",value[0]);
    assertEquals("build.info",value[1]);
  }
 else   if (versionId.startsWith("Release") || versionId.startsWith("Nightly")) {
    Map<String,String[]> info=OpenCms.getSystemInfo().getBuildInfo();
    assertNotNull("build.number not set",info.get("build.number"));
    assertNotNull("build.date not set",info.get("build.date"));
    assertNotNull("build.type not set",info.get("build.type"));
    assertNotNull("build.system not set",info.get("build.system"));
    assertNotNull("build.gitid not set",info.get("build.gitid"));
    assertNotNull("build.gitbranch not set",info.get("build.gitbranch"));
    assertTrue(info.get("build.gitid")[0].length() == 7);
    assertEquals("Jenkins CI",info.get("build.system")[0]);
  }
 else {
    fail("No valid version information for test cases found, version id is '" + OpenCms.getSystemInfo().getVersionId() + "'\n\nThis indicates manual unexpected changes in 'src/org/opencms/main/version.properties'");
  }
}
