{
  String nodeName=null;
  boolean createTemplateTags=false;
  Hashtable templateElements=new Hashtable();
  boolean found=false;
  for (int i=0; i < m_webAppNames.size(); i++) {
    if (content.indexOf((String)m_webAppNames.get(i)) != -1) {
      found=true;
    }
  }
  if (content.indexOf("<edittemplate>") != -1 || content.indexOf("<EDITTEMPLATE>") != -1) {
    found=true;
  }
  if (found) {
    InputStream in=new ByteArrayInputStream(content.getBytes());
    String editString, templateString;
    try {
      InputSource source=new InputSource(in);
      Document doc=CmsXmlUtils.unmarshalHelper(source,null);
      nodeName="edittemplate";
      Element root=doc.getRootElement();
      List editNodes=root.elements(nodeName.toLowerCase());
      editNodes.addAll(root.elements(nodeName.toUpperCase()));
      if (editNodes.size() < 1) {
        if (DEBUG > 0) {
          System.err.println("[" + this.getClass().getName() + ".convertPageBody()]: No <edittemplate> found, creating it.");
        }
        createTemplateTags=true;
        nodeName="TEMPLATE";
        List templateNodes=root.elements(nodeName.toLowerCase());
        List attributes;
        templateNodes.addAll(root.elements(nodeName.toUpperCase()));
        Element templateTag;
        for (int i=0; i < templateNodes.size(); i++) {
          templateTag=(Element)templateNodes.get(i);
          editString=templateTag.getText();
          templateString=editString;
          try {
            templateString=CmsXmlTemplateLinkConverter.convertFromImport(templateString,m_webappUrl,fileName);
          }
 catch (          CmsException e) {
            throw new CmsLegacyException("[" + this.getClass().getName() + ".convertPageBody()] can't parse the content: ",e);
          }
          attributes=((Element)templateNodes.get(i)).attributes();
          String templateName="";
          if (attributes.size() > 0) {
            templateName=((Attribute)attributes.get(0)).getName();
          }
          nodeName="edittemplate";
          Element newNode=DocumentHelper.createElement(nodeName.toLowerCase());
          if (newNode == null) {
            newNode=root.addElement(nodeName.toUpperCase());
          }
          newNode.addCDATA(editString);
          attributes=newNode.attributes();
          if (!templateName.equals("")) {
            newNode.addAttribute("name",templateName);
          }
          ((Element)root.elements("XMLTEMPLATE").get(0)).add(newNode);
          if (templateName.equals("")) {
            templateName="noNameKey";
          }
          templateElements.put(templateName,templateString);
        }
        while (templateNodes.size() > 0) {
          ((Element)root.elements("XMLTEMPLATE").get(0)).remove((Element)templateNodes.get(0));
        }
      }
      Element editTemplate;
      for (int i=0; i < editNodes.size(); i++) {
        editTemplate=(Element)editNodes.get(i);
        editString=editTemplate.getText();
        for (int k=0; k < m_webAppNames.size(); k++) {
          editString=CmsStringUtil.substitute(editString,(String)m_webAppNames.get(k),CmsStringUtil.MACRO_OPENCMS_CONTEXT + "/");
        }
        editTemplate.clearContent();
        editTemplate.addCDATA(editString);
      }
      content=CmsXmlUtils.marshal(doc,OpenCms.getSystemInfo().getDefaultEncoding());
      if (createTemplateTags) {
        content=content.substring(0,content.lastIndexOf("</XMLTEMPLATE>"));
        Enumeration en=templateElements.keys();
        while (en.hasMoreElements()) {
          String key=(String)en.nextElement();
          String value=(String)templateElements.get(key);
          if (key.equals("noNameKey")) {
            content+="\n<TEMPLATE><![CDATA[" + value;
          }
 else {
            content+="\n<TEMPLATE name=\"" + key + "\"><![CDATA["+ value;
          }
          content+="]]></TEMPLATE>\n";
        }
        content+="\n</XMLTEMPLATE>";
      }
    }
 catch (    Exception exc) {
    }
  }
  return content;
}
