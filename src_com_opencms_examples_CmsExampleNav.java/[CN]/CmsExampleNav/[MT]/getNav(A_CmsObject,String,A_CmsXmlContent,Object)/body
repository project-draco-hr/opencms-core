{
  CmsExampleNavFile xmlTemplateDocument=(CmsExampleNavFile)doc;
  String requestedUri=cms.getRequestContext().getUri();
  String servletPath=((HttpServletRequest)cms.getRequestContext().getRequest().getOriginalRequest()).getServletPath();
  StringBuffer result=new StringBuffer();
  Vector allFolders=cms.getSubFolders("/");
  Hashtable sortedFolders=new Hashtable();
  int numFolders=allFolders.size();
  int maxfolder=0;
  for (int i=0; i < numFolders; i++) {
    A_CmsResource currFolder=(A_CmsResource)allFolders.elementAt(i);
    String filename=currFolder.getAbsolutePath();
    String navpos=cms.readMetainformation(filename,C_METAINFO_NAVPOS);
    String navtext=cms.readMetainformation(filename,C_METAINFO_NAVTITLE);
    if (currFolder.getState() != C_STATE_DELETED) {
      if (navpos != null && navtext != null && (!"".equals(navpos)) && (!"".equals(navtext)) && ((!currFolder.getName().startsWith(C_TEMP_PREFIX)) || filename.equals(requestedUri))) {
        Integer npValue=new Integer(navpos);
        int npIntValue=npValue.intValue();
        if (maxfolder < npIntValue) {
          maxfolder=npIntValue;
        }
        sortedFolders.put(npValue,filename);
      }
    }
  }
  for (int i=1; i <= maxfolder; i++) {
    String currFolder=(String)sortedFolders.get(new Integer(i));
    if (currFolder != null && !"".equals(currFolder)) {
      String navtext=cms.readMetainformation(currFolder,C_METAINFO_NAVTITLE);
      result.append(xmlTemplateDocument.getSectionNavEntry(servletPath + currFolder + "index.html",navtext));
    }
    Vector allFiles=cms.getFilesInFolder(currFolder);
    Hashtable sortedNav=new Hashtable();
    int numFiles=allFiles.size();
    int maxindex=0;
    for (int j=0; j < numFiles; j++) {
      A_CmsResource currFile=(A_CmsResource)allFiles.elementAt(j);
      String filename=currFile.getAbsolutePath();
      String navpos=cms.readMetainformation(filename,C_METAINFO_NAVPOS);
      String navtext=cms.readMetainformation(filename,C_METAINFO_NAVTITLE);
      if (currFile.getState() != C_STATE_DELETED) {
        if (navpos != null && navtext != null && (!"".equals(navpos)) && (!"".equals(navtext)) && ((!currFile.getName().startsWith(C_TEMP_PREFIX)) || filename.equals(requestedUri))) {
          Integer npValue=new Integer(navpos);
          int npIntValue=npValue.intValue();
          if (maxindex < npIntValue) {
            maxindex=npIntValue;
          }
          sortedNav.put(npValue,filename);
        }
      }
    }
    for (int j=1; j <= maxindex; j++) {
      String filename=(String)sortedNav.get(new Integer(j));
      if (filename != null && !"".equals(filename)) {
        String navtext=cms.readMetainformation(filename,C_METAINFO_NAVTITLE);
        if (filename.equals(requestedUri)) {
          result.append(xmlTemplateDocument.getCurrentNavEntry(navtext));
        }
 else {
          result.append(xmlTemplateDocument.getOtherNavEntry(servletPath + filename,navtext));
        }
      }
    }
  }
  return result.toString().getBytes();
}
