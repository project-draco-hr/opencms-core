{
  I_CmsRbUserGroup userGroupRb=new CmsRbUserGroupCache(new CmsAccessUserGroup(new CmsAccessUserMySql(propertyDriver,propertyConnectString),new CmsAccessUserInfoMySql(propertyDriver,propertyConnectString),new CmsAccessGroupMySql(propertyDriver,propertyConnectString)));
  I_CmsRbMetadefinition metadefinitionRb=new CmsRbMetadefinitionCache(new CmsAccessMetadefinitionMySql(propertyDriver,propertyConnectString));
  I_CmsRbProperty propertyRb=new CmsRbProperty(new CmsAccessPropertyMySql(propertyDriver,propertyConnectString));
  I_CmsRbProject projectRb=new CmsRbProjectCache(new CmsAccessProjectMySql(propertyDriver,propertyConnectString));
  I_CmsRbTask taskRb=new CmsRbTask(new CmsAccessTask(propertyDriver,propertyConnectString));
  Hashtable mountPoints=(Hashtable)propertyRb.readProperty(C_PROPERTY_MOUNTPOINT);
  A_CmsMountPoint mountPoint;
  Hashtable mountedAccessModules=new Hashtable();
  Enumeration keys=mountPoints.keys();
  Object key;
  while (keys.hasMoreElements()) {
    key=keys.nextElement();
    mountPoint=(A_CmsMountPoint)mountPoints.get(key);
    if (mountPoint.getMountpointType() == C_MOUNTPOINT_MYSQL) {
      mountedAccessModules.put(key,new CmsAccessFileMySql(mountPoint));
    }
 else {
      mountedAccessModules.put(key,new CmsAccessFileFilesystem(mountPoint));
    }
  }
  I_CmsRbFile fileRb=new CmsRbFileCache(new CmsAccessFile(mountedAccessModules));
  return (new CmsResourceBroker(userGroupRb,fileRb,metadefinitionRb,propertyRb,projectRb,taskRb));
}
