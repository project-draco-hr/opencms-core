{
  m_cms=cms;
  m_report=report;
  m_parameters=parameters;
  Digester digester=new Digester();
  digester.setUseContextClassLoader(true);
  digester.setValidating(m_parameters.isXmlValidation());
  digester.setEntityResolver(new CmsXmlEntityResolver(null));
  digester.setRuleNamespaceURI(null);
  digester.setErrorHandler(new CmsXmlErrorHandler(CmsImportExportManager.EXPORT_MANIFEST));
  digester.push(this);
  addXmlDigesterRules(digester);
  InputStream stream=null;
  m_helper=new CmsImportHelper(m_parameters);
  try {
    m_helper.openFile();
    m_helper.cacheDtdSystemId(DTD_LOCATION,DTD_FILENAME,CmsConfigurationManager.DEFAULT_DTD_PREFIX);
    findContentFiles();
    stream=m_helper.getFileStream(CmsImportExportManager.EXPORT_MANIFEST);
    digester.parse(stream);
  }
 catch (  Exception ioe) {
    if (LOG.isErrorEnabled()) {
      LOG.error(Messages.get().getBundle().key(Messages.ERR_IMPORTEXPORT_ERROR_READING_FILE_1,CmsImportExportManager.EXPORT_MANIFEST),ioe);
    }
    getReport().println(ioe);
  }
 finally {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    @SuppressWarnings("unused") Exception e) {
    }
    m_helper.closeFile();
  }
}
