{
  byte[] output=null;
  Hashtable newParameters=new Hashtable();
  String uri=cms.getRequestContext().getUri();
  String absolutePath=cms.readAbsolutePath(file);
  String templateProp=cms.readProperty(absolutePath,I_CmsConstants.C_PROPERTY_TEMPLATE);
  String templateClassProp=cms.readProperty(absolutePath,"templateclass",false,I_CmsConstants.C_XML_CONTROL_DEFAULT_CLASS);
  String xmlTemplateContent=null;
  if (templateProp != null) {
    StringBuffer buf=new StringBuffer(256);
    buf.append("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n");
    buf.append("<PAGE>\n<class>");
    buf.append(I_CmsConstants.C_XML_CONTROL_DEFAULT_CLASS);
    buf.append("</class>\n<masterTemplate>");
    buf.append(templateProp);
    buf.append("</masterTemplate>\n<ELEMENTDEF name=\"body\">\n<CLASS>");
    buf.append(templateClassProp);
    buf.append("</CLASS>\n<TEMPLATE>");
    buf.append(uri);
    buf.append("</TEMPLATE>\n</ELEMENTDEF>\n</PAGE>\n");
    xmlTemplateContent=buf.toString();
    uri+=I_CmsConstants.C_XML_CONTROL_FILE_SUFFIX;
  }
  boolean elementCacheEnabled=CmsXmlTemplateLoader.isElementCacheEnabled(cms);
  CmsElementCache elementCache=null;
  CmsUriDescriptor uriDesc=null;
  CmsUriLocator uriLoc=null;
  CmsUri cmsUri=null;
  String templateClass=null;
  String templateName=null;
  CmsXmlControlFile doc=null;
  if (elementCacheEnabled) {
    elementCache=CmsXmlTemplateLoader.getElementCache(cms);
    uriDesc=new CmsUriDescriptor(uri);
    uriLoc=elementCache.getUriLocator();
    cmsUri=uriLoc.get(uriDesc);
  }
  String replace=req.getParameter(C_ELEMENT_REPLACE);
  boolean elementreplace=false;
  CmsElementDefinition replaceDef=null;
  if (replace != null) {
    int index=replace.indexOf(":");
    if (index != -1) {
      elementreplace=true;
      cmsUri=null;
      String elementName=replace.substring(0,index);
      String replaceUri=replace.substring(index + 1);
      replaceDef=new CmsElementDefinition(elementName,I_CmsConstants.C_XML_CONTROL_DEFAULT_CLASS,replaceUri,null,new Hashtable());
      newParameters.put(C_ELEMENT_REPLACE + "_VFS_" + elementName,cms.getRequestContext().addSiteRoot(replaceUri));
    }
  }
  if ((cmsUri == null) || !elementCacheEnabled) {
    try {
      if (xmlTemplateContent == null) {
        doc=new CmsXmlControlFile(cms,file);
      }
 else {
        doc=new CmsXmlControlFile(cms,uri,xmlTemplateContent);
      }
    }
 catch (    Exception e) {
      handleException(cms,e,"There was an error while parsing XML page file " + cms.readAbsolutePath(file));
      return "".getBytes();
    }
    if (!elementCacheEnabled && (replaceDef != null)) {
      doc.setElementClass(replaceDef.getName(),replaceDef.getClassName());
      doc.setElementTemplate(replaceDef.getName(),replaceDef.getTemplateName());
    }
    templateClass=doc.getTemplateClass();
    if (templateClass == null || "".equals(templateClass)) {
      templateClass=this.getClass().getName();
    }
    if (templateClass == null || "".equals(templateClass)) {
      templateClass=I_CmsConstants.C_XML_CONTROL_DEFAULT_CLASS;
    }
    templateName=doc.getMasterTemplate();
    if (templateName != null && !"".equals(templateName)) {
      templateName=CmsLinkManager.getAbsoluteUri(templateName,cms.readAbsolutePath(file));
    }
    Enumeration masterTemplateParams=doc.getParameterNames();
    while (masterTemplateParams.hasMoreElements()) {
      String paramName=(String)masterTemplateParams.nextElement();
      String paramValue=doc.getParameter(paramName);
      newParameters.put(I_CmsConstants.C_ROOT_TEMPLATE_NAME + "." + paramName,paramValue);
    }
    Enumeration elementDefinitions=doc.getElementDefinitions();
    while (elementDefinitions.hasMoreElements()) {
      String elementName=(String)elementDefinitions.nextElement();
      if (doc.isElementClassDefined(elementName)) {
        newParameters.put(elementName + "._CLASS_",doc.getElementClass(elementName));
      }
      if (doc.isElementTemplateDefined(elementName)) {
        String template=doc.getElementTemplate(elementName);
        if (xmlTemplateContent == null) {
          template=doc.validateBodyPath(cms,template,file);
        }
        if (I_CmsConstants.C_XML_BODY_ELEMENT.equalsIgnoreCase(elementName)) {
          if (template != null) {
            cms.getRequestContext().setAttribute(I_CmsConstants.C_XML_BODY_ELEMENT,template);
          }
        }
        newParameters.put(elementName + "._TEMPLATE_",template);
      }
      if (doc.isElementTemplSelectorDefined(elementName)) {
        newParameters.put(elementName + "._TEMPLATESELECTOR_",doc.getElementTemplSelector(elementName));
      }
      Enumeration parameters=doc.getElementParameterNames(elementName);
      while (parameters.hasMoreElements()) {
        String paramName=(String)parameters.nextElement();
        String paramValue=doc.getElementParameter(elementName,paramName);
        if (paramValue != null) {
          newParameters.put(elementName + "." + paramName,paramValue);
        }
 else {
          if (OpenCms.getLog(this).isInfoEnabled()) {
            OpenCms.getLog(this).info("Empty parameter \"" + paramName + "\" found.");
          }
        }
      }
    }
  }
  String datafor=req.getParameter("datafor");
  if (datafor == null) {
    datafor="";
  }
 else {
    if (!"".equals(datafor)) {
      datafor=datafor + ".";
    }
  }
  Enumeration urlParameterNames=req.getParameterNames();
  while (urlParameterNames.hasMoreElements()) {
    String pname=(String)urlParameterNames.nextElement();
    String paramValue=req.getParameter(pname);
    if (paramValue != null) {
      if ((!"datafor".equals(pname)) && (!"_clearcache".equals(pname))) {
        newParameters.put(datafor + pname,paramValue);
      }
    }
 else {
      if (OpenCms.getLog(this).isInfoEnabled()) {
        OpenCms.getLog(this).info("Empty URL parameter \"" + pname + "\" found.");
      }
    }
  }
  if (elementCacheEnabled && (cmsUri == null)) {
    CmsElementDescriptor elemDesc=new CmsElementDescriptor(templateClass,templateName);
    CmsElementDefinitionCollection eldefs=doc.getElementDefinitionCollection();
    if (elementreplace) {
      eldefs.add(replaceDef);
      cmsUri=new CmsUri(elemDesc,eldefs);
    }
 else {
      cmsUri=new CmsUri(elemDesc,eldefs);
      elementCache.getUriLocator().put(uriDesc,cmsUri);
    }
  }
  if (elementCacheEnabled) {
    if (elementreplace) {
      output=cmsUri.callCanonicalRoot(elementCache,cms,newParameters);
    }
 else {
      output=elementCache.callCanonicalRoot(cms,newParameters,uri);
    }
  }
 else {
    try {
      CmsFile masterTemplate=loadMasterTemplateFile(cms,templateName,doc);
      I_CmsTemplate tmpl=getTemplateClass(templateClass);
      if (!(tmpl instanceof I_CmsXmlTemplate)) {
        String errorMessage="Error in " + cms.readAbsolutePath(file) + ": "+ templateClass+ " is not a XML template class.";
        if (OpenCms.getLog(this).isErrorEnabled()) {
          OpenCms.getLog(this).error(errorMessage);
        }
        throw new CmsException(errorMessage,CmsException.C_XML_WRONG_TEMPLATE_CLASS);
      }
      clearLoaderCache(true,true);
      output=callCanonicalRoot(cms,tmpl,masterTemplate,newParameters);
    }
 catch (    CmsException e) {
      if (OpenCms.getLog(this).isWarnEnabled()) {
        OpenCms.getLog(this);
      }
      doc.removeFromFileCache();
      throw e;
    }
  }
  return output;
}
