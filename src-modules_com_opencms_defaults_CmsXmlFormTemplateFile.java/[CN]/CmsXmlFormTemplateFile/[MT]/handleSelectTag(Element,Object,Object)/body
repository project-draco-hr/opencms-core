{
  Hashtable parameters=(Hashtable)userObj;
  Vector values=new Vector();
  Vector names=new Vector();
  StringBuffer result=new StringBuffer();
  String selectClass=n.getAttribute(CmsWorkplaceDefault.C_SELECTBOX_CLASS);
  String selectName=n.getAttribute(CmsWorkplaceDefault.C_SELECTBOX_NAME);
  String selectMethod=n.getAttribute(CmsWorkplaceDefault.C_SELECTBOX_METHOD);
  String selectWidth=n.getAttribute(CmsWorkplaceDefault.C_SELECTBOX_WIDTH);
  String selectOnchange=n.getAttribute(CmsWorkplaceDefault.C_SELECTBOX_ONCHANGE);
  String selectSize=n.getAttribute(CmsWorkplaceDefault.C_SELECTBOX_SIZE);
  if ((selectSize == null) || (selectSize.length() == 0)) {
    selectSize="1";
  }
  CmsXmlTemplateFile inputdef=new CmsXmlTemplateFile(m_cms,CmsWorkplaceDefault.C_VFS_PATH_DEFAULT_INTERNAL + "HTMLFormDefs");
  if (selectClass == null || "".equals(selectClass)) {
    inputdef.setData(CmsWorkplaceDefault.C_SELECTBOX_CLASS,"");
  }
 else {
    inputdef.setData(CmsWorkplaceDefault.C_SELECTBOX_CLASSNAME,selectClass);
    inputdef.setData(CmsWorkplaceDefault.C_SELECTBOX_CLASS,inputdef.getProcessedData(CmsWorkplaceDefault.C_TAG_SELECTBOX_CLASS));
  }
  if (selectWidth == null || "".equals(selectWidth)) {
    inputdef.setData(CmsWorkplaceDefault.C_SELECTBOX_WIDTH,"");
  }
 else {
    inputdef.setData(CmsWorkplaceDefault.C_SELECTBOX_WIDTHNAME,selectWidth);
    inputdef.setData(CmsWorkplaceDefault.C_SELECTBOX_WIDTH,inputdef.getProcessedData(CmsWorkplaceDefault.C_TAG_SELECTBOX_WIDTH));
  }
  inputdef.setData(CmsWorkplaceDefault.C_SELECTBOX_NAME,selectName);
  inputdef.setData(CmsWorkplaceDefault.C_SELECTBOX_ONCHANGE,selectOnchange);
  inputdef.setData(CmsWorkplaceDefault.C_SELECTBOX_SIZE,selectSize);
  result.append(inputdef.getProcessedDataValue(CmsWorkplaceDefault.C_TAG_SELECTBOX_START));
  Method groupsMethod=null;
  int selectedOption=0;
  try {
    groupsMethod=callingObject.getClass().getMethod(selectMethod,new Class[]{CmsObject.class,Vector.class,Vector.class,Hashtable.class});
    selectedOption=((Integer)groupsMethod.invoke(callingObject,new Object[]{m_cms,values,names,parameters})).intValue();
  }
 catch (  NoSuchMethodException exc) {
    throwException("Could not find method " + selectMethod + " in calling class "+ callingObject.getClass().getName()+ " for generating select box content.",CmsLegacyException.C_NOT_FOUND);
  }
catch (  InvocationTargetException targetEx) {
    Throwable e=targetEx.getTargetException();
    if (!(e instanceof CmsException)) {
      throwException("User method " + selectMethod + " in calling class "+ callingObject.getClass().getName()+ " throwed an exception. "+ e,CmsLegacyException.C_UNKNOWN_EXCEPTION);
    }
 else {
      throw (CmsException)e;
    }
  }
catch (  Exception exc2) {
    throwException("User method " + selectMethod + " in calling class "+ callingObject.getClass().getName()+ " was found but could not be invoked. "+ exc2,CmsLegacyException.C_XML_NO_USER_METHOD);
  }
  int numValues=values.size();
  for (int i=0; i < numValues; i++) {
    inputdef.setData(CmsWorkplaceDefault.C_SELECTBOX_OPTIONNAME,(String)names.elementAt(i));
    inputdef.setData(CmsWorkplaceDefault.C_SELECTBOX_OPTIONVALUE,(String)values.elementAt(i));
    if (i == selectedOption) {
      result.append(inputdef.getProcessedDataValue(CmsWorkplaceDefault.C_TAG_SELECTBOX_SELOPTION));
    }
 else {
      result.append(inputdef.getProcessedDataValue(CmsWorkplaceDefault.C_TAG_SELECTBOX_OPTION));
    }
  }
  result.append(inputdef.getProcessedDataValue(CmsWorkplaceDefault.C_TAG_SELECTBOX_END));
  return result.toString();
}
