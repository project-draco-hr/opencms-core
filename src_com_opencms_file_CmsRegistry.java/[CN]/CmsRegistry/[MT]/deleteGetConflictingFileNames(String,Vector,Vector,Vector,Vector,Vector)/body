{
  Vector moduleFiles=new Vector();
  Vector moduleChecksums=new Vector();
  getModuleFiles(modulename,moduleFiles,moduleChecksums);
  Vector otherFiles=new Vector();
  Vector otherChecksums=new Vector();
  Enumeration modules=getModuleNames();
  while (modules.hasMoreElements()) {
    String module=(String)modules.nextElement();
    if (!module.equals(modulename)) {
      getModuleFiles(module,otherFiles,otherChecksums);
    }
  }
  for (int i=0; i < moduleFiles.size(); i++) {
    String currentFile=(String)moduleFiles.elementAt(i);
    String currentChecksum=(String)moduleChecksums.elementAt(i);
    CmsFile file=null;
    try {
      String resource=currentFile.substring(0,currentFile.indexOf("/",1) + 1);
      if (!resourcesForProject.contains(resource)) {
        resourcesForProject.addElement(resource);
      }
    }
 catch (    StringIndexOutOfBoundsException exc) {
    }
    if (!currentFile.endsWith("/")) {
      try {
        file=m_cms.readFile(currentFile);
      }
 catch (      CmsException exc) {
        missingFiles.addElement(currentFile);
      }
      if (otherFiles.contains(currentFile)) {
        filesInUse.addElement(currentFile);
      }
      if (file != null) {
        String digestContent;
        try {
          digestContent=com.opencms.util.Encoder.escape(new String(m_digest.digest(file.getContents()),m_cms.getRequestContext().getEncoding()),m_cms.getRequestContext().getEncoding());
        }
 catch (        UnsupportedEncodingException e) {
          digestContent=com.opencms.util.Encoder.escape(new String(m_digest.digest(file.getContents())),m_cms.getRequestContext().getEncoding());
        }
        if (!currentChecksum.equals(digestContent)) {
          wrongChecksum.addElement(currentFile);
        }
      }
    }
  }
  Vector files=null;
  if (this.getModuleType(modulename).equals(CmsRegistry.C_MODULE_TYPE_SIMPLE)) {
    String additionalResources=this.getModuleParameterString(modulename,I_CmsConstants.C_MODULE_PROPERTY_ADDITIONAL_RESOURCES);
    files=new Vector();
    if (additionalResources != null && !additionalResources.equals("")) {
      StringTokenizer additionalResourceTokens=null;
      additionalResourceTokens=new StringTokenizer(additionalResources,I_CmsConstants.C_MODULE_PROPERTY_ADDITIONAL_RESOURCES_SEPARATOR);
      while (additionalResourceTokens.hasMoreTokens()) {
        String currentResource=additionalResourceTokens.nextToken();
        if (DEBUG > 0) {
          System.err.println("Adding resource: " + currentResource);
          System.err.println("Adding resource: " + C_CONTENTBODYPATH.substring(0,C_CONTENTBODYPATH.length() - 1) + currentResource);
        }
        files.add(currentResource);
        files.add(C_CONTENTBODYPATH.substring(0,C_CONTENTBODYPATH.length() - 1) + currentResource);
      }
    }
  }
 else {
    files=m_cms.getFilesWithProperty("module",modulename + "_" + getModuleVersion(modulename));
  }
  int fileCount=files.size();
  for (int i=0; i < fileCount; i++) {
    String currentFile=(String)files.elementAt(i);
    if (!moduleFiles.contains(currentFile)) {
      if (!otherFiles.contains(currentFile)) {
        filesWithProperty.addElement(currentFile);
        try {
          String resource=currentFile.substring(0,currentFile.indexOf("/",1) + 1);
          if (!resourcesForProject.contains(resource)) {
            resourcesForProject.addElement(resource);
          }
        }
 catch (        StringIndexOutOfBoundsException exc) {
        }
      }
    }
  }
}
