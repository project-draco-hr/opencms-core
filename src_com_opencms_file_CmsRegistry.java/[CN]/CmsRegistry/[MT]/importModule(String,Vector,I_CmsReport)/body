{
  if (!hasAccess()) {
    throw new CmsException("No access to perform the action 'importModule'",CmsException.C_REGISTRY_ERROR);
  }
  Element newModule=getModuleElementFromImport(moduleZip);
  String newModuleName=newModule.getElementsByTagName("name").item(0).getFirstChild().getNodeValue();
  String newModuleVersion=newModule.getElementsByTagName("version").item(0).getFirstChild().getNodeValue();
  if (moduleExists(newModuleName)) {
    throw new CmsException("The module " + newModuleName + " exists already",CmsException.C_REGISTRY_ERROR);
  }
  Vector dependencies=checkDependencies(newModule,false);
  if (dependencies.size() != 0) {
    throw new CmsException("the dependencies for the module are not fulfilled.",CmsException.C_REGISTRY_ERROR);
  }
  if (I_CmsWpConstants.C_VFS_NEW_STRUCTURE && false) {
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_SYSTEM);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_MODULES);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_BODIES);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_WORKPLACE);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_MODULEDEMOS);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_GALLERIES);
    exclusion.add(I_CmsWpConstants.C_VFS_GALLERY_PICS);
    exclusion.add(I_CmsWpConstants.C_VFS_GALLERY_HTML);
    exclusion.add(I_CmsWpConstants.C_VFS_GALLERY_DOWNLOAD);
    exclusion.add(I_CmsWpConstants.C_VFS_GALLERY_EXTERNALLINKS);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_DEFAULT_BODIES);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_DEFAULT_INTERNAL);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_DEFAULT_TEMPLATES);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_HELP);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_LOCALES);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_SCRIPTS);
    exclusion.add(I_CmsWpConstants.C_VFS_PATH_SYSTEMPICS);
  }
  Vector resourceNames=new Vector();
  Vector resourceCodes=new Vector();
  String propertyName=null;
  String propertyValue=null;
  boolean isSimpleModule=false;
  try {
    isSimpleModule=CmsRegistry.C_MODULE_TYPE_SIMPLE.equals(newModule.getElementsByTagName("type").item(0).getFirstChild().getNodeValue());
  }
 catch (  Exception e) {
  }
  if (!isSimpleModule) {
    List deleteProperties=(List)A_OpenCms.getRuntimeProperty("compatibility.support.import.remove.propertytags");
    if ((deleteProperties != null) && (deleteProperties.contains("module"))) {
      propertyName=propertyValue=null;
    }
 else {
      propertyName="module";
      propertyValue=newModuleName + "_" + newModuleVersion;
    }
  }
  CmsImport cmsImport=new CmsImport(moduleZip,"/",m_cms,report);
  cmsImport.importResources(exclusion,resourceNames,resourceCodes,propertyName,propertyValue);
  Element regModules=(Element)(m_xmlReg.getElementsByTagName("modules").item(0));
  Node uploadDate=newModule.getOwnerDocument().createElement("uploaddate");
  uploadDate.appendChild(newModule.getOwnerDocument().createTextNode(m_dateFormat.format(new java.util.Date())));
  newModule.appendChild(uploadDate);
  Node uploadBy=newModule.getOwnerDocument().createElement("uploadedby");
  uploadBy.appendChild(newModule.getOwnerDocument().createTextNode(m_cms.getRequestContext().currentUser().getName()));
  newModule.appendChild(uploadBy);
  if (!isSimpleModule) {
    Node files=newModule.getOwnerDocument().createElement("files");
    for (int i=0; i < resourceNames.size(); i++) {
      Node file=newModule.getOwnerDocument().createElement("file");
      files.appendChild(file);
      Node name=newModule.getOwnerDocument().createElement("name");
      file.appendChild(name);
      Node checksum=newModule.getOwnerDocument().createElement("checksum");
      file.appendChild(checksum);
      name.appendChild(newModule.getOwnerDocument().createTextNode((String)resourceNames.elementAt(i)));
      checksum.appendChild(newModule.getOwnerDocument().createTextNode(com.opencms.util.Encoder.escape((String)resourceCodes.elementAt(i),m_cms.getRequestContext().getEncoding())));
    }
    newModule.appendChild(files);
  }
  Node newNode=getXmlParser().importNode(m_xmlReg,newModule);
  regModules.appendChild(newNode);
  saveRegistry();
  try {
    init();
  }
 catch (  Exception exc) {
    throw new CmsException("couldn't init registry",CmsException.C_REGISTRY_ERROR,exc);
  }
  Class eventClass=getModuleMaintenanceEventClass(newModuleName);
  try {
    Class declaration[]={CmsObject.class};
    Object arguments[]={m_cms};
    Method eventMethod=eventClass.getMethod(C_UPLOAD_EVENT_METHOD_NAME,declaration);
    eventMethod.invoke(null,arguments);
  }
 catch (  Exception exc) {
  }
}
