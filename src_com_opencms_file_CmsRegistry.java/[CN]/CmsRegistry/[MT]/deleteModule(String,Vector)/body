{
  if (!moduleExists(module)) {
    throw new CmsException("Module '" + module + "' does not exist",CmsException.C_REGISTRY_ERROR);
  }
  if (!hasAccess()) {
    throw new CmsException("No access to perform the action 'deleteModule'",CmsException.C_REGISTRY_ERROR);
  }
  Vector deps=deleteCheckDependencies(module);
  if (deps.size() != 0) {
    throw new CmsException("There are dependencies for the module " + module + ": deletion is not allowed.",CmsException.C_REGISTRY_ERROR);
  }
  Class eventClass=getModuleMaintenanceEventClass(module);
  try {
    Class declaration[]={CmsObject.class};
    Object arguments[]={m_cms};
    Method eventMethod=eventClass.getMethod(C_DELETE_EVENT_METHOD_NAME,declaration);
    eventMethod.invoke(null,arguments);
  }
 catch (  Exception exc) {
  }
  Vector resourceNames=new Vector();
  Vector missingFiles=new Vector();
  Vector wrongChecksum=new Vector();
  Vector filesInUse=new Vector();
  Vector resourceCodes=new Vector();
  deleteGetConflictingFileNames(module,resourceNames,missingFiles,wrongChecksum,filesInUse,new Vector());
  getModuleFiles(module,resourceNames,resourceCodes);
  for (int i=resourceNames.size() - 1; i >= 0; i--) {
    try {
      String currentResource=(String)resourceNames.elementAt(i);
      if ((!exclusion.contains(currentResource)) && (!filesInUse.contains(currentResource))) {
        m_cms.lockResource(currentResource,true);
        if (currentResource.endsWith("/")) {
          m_cms.deleteFolder(currentResource);
        }
 else {
          m_cms.deleteFile(currentResource);
        }
      }
    }
 catch (    CmsException exc) {
    }
  }
  Element moduleElement=getModuleElement(module);
  moduleElement.getParentNode().removeChild(moduleElement);
  saveRegistry();
  try {
    init();
  }
 catch (  Exception exc) {
    throw new CmsException("couldn't init registry",CmsException.C_REGISTRY_ERROR,exc);
  }
}
