{
  CmsModule sourceModule=OpenCms.getModuleManager().getModule(m_sourceModuleName);
  CmsModule targetModule=(CmsModule)sourceModule.clone();
  targetModule.setName(m_packageName);
  targetModule.setNiceName(m_niceName);
  targetModule.setDescription(m_description);
  targetModule.setAuthorEmail(m_authorEmail);
  targetModule.setAuthorName(m_authorName);
  targetModule.setGroup(m_group);
  targetModule.setActionClass(m_actionClass);
  try {
    String sourceModulePath=CmsWorkplace.VFS_PATH_MODULES + sourceModule.getName() + "/";
    String targetModulePath=CmsWorkplace.VFS_PATH_MODULES + targetModule.getName() + "/";
    String sourcePathPart=sourceModule.getName().replaceAll("\\.","/");
    String targetPathPart=targetModule.getName().replaceAll("\\.","/");
    String sourceClassesPath=targetModulePath + PATH_CLASSES + sourcePathPart+ "/";
    String targetClassesPath=targetModulePath + PATH_CLASSES + targetPathPart+ "/";
    getCmsObject().copyResource(sourceModulePath,targetModulePath);
    if (getCmsObject().existsResource(sourceClassesPath)) {
      createTargetClassesFolder(targetModule,sourceClassesPath,targetModulePath + PATH_CLASSES);
      deleteSourceClassesFolder(targetModulePath,sourcePathPart,targetPathPart);
    }
    cloneExportPoints(sourceModule,targetModule,sourcePathPart,targetPathPart);
    Map<String,String> descKeys=new HashMap<String,String>();
    Map<I_CmsResourceType,I_CmsResourceType> resTypeMap=cloneResourceTypes(sourceModule,targetModule,sourcePathPart,targetPathPart,descKeys);
    Map<String,String> iconPaths=new HashMap<String,String>();
    cloneExplorerTypes(targetModule,iconPaths,descKeys);
    cloneExplorerTypeIcons(iconPaths);
    adjustModuleResources(sourceModule,targetModule,sourcePathPart,targetPathPart,iconPaths);
    List<CmsResource> props=getCmsObject().readResources(targetClassesPath,CmsResourceFilter.DEFAULT_FILES);
    replacesMessages(descKeys,props);
    int type=OpenCms.getResourceManager().getResourceType(CmsVfsBundleManager.TYPE_XML_BUNDLE).getTypeId();
    CmsResourceFilter filter=CmsResourceFilter.requireType(type);
    List<CmsResource> resources=getCmsObject().readResources(targetModulePath,filter);
    replacesMessages(descKeys,resources);
    renameXmlVfsBundles(resources,targetModule,sourceModule.getName());
    List<CmsResource> allModuleResources=getCmsObject().readResources(targetModulePath,CmsResourceFilter.ALL);
    replacePath(sourceModulePath,targetModulePath,allModuleResources);
    CmsSearchReplaceThread t=initializePathThread();
    t.start();
    t.join();
    t=initializeNameThread();
    t.start();
    t.join();
    if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(m_formatterTargetModule) && !targetModule.getResourceTypes().isEmpty()) {
      replaceFormatterPaths(targetModule);
    }
    adjustModuleConfig(targetModule,resTypeMap);
    for (    String res : targetModule.getResources()) {
      OpenCms.getPublishManager().publishResource(getCmsObject(),res);
      OpenCms.getPublishManager().waitWhileRunning();
    }
    OpenCms.getModuleManager().addModule(getCmsObject(),targetModule);
    if (targetModule.getResourceTypes() != Collections.EMPTY_LIST) {
      OpenCms.getResourceManager().initialize(getCmsObject());
    }
    if (targetModule.getExplorerTypes() != Collections.EMPTY_LIST) {
      OpenCms.getWorkplaceManager().addExplorerTypeSettings(targetModule);
    }
    OpenCms.getWorkplaceManager().initialize(getCmsObject());
    OpenCms.fireCmsEvent(I_CmsEventListener.EVENT_CLEAR_CACHES,new HashMap<String,Object>());
    if (Boolean.valueOf(m_changeResourceTypes).booleanValue()) {
      changeResourceTypes(resTypeMap);
    }
    if (Boolean.valueOf(m_deleteModule).booleanValue()) {
      OpenCms.getModuleManager().deleteModule(getCmsObject(),sourceModule.getName(),false,null);
    }
  }
 catch (  CmsIllegalArgumentException e) {
    LOG.error(e.getMessage(),e);
  }
catch (  CmsException e) {
    LOG.error(e.getMessage(),e);
  }
catch (  Exception e) {
    LOG.error(e.getMessage(),e);
  }
}
