{
  String modPath=CmsWorkplace.VFS_PATH_MODULES + targetModule.getName() + "/"+ CmsADEManager.CONFIG_FILE_NAME;
  List<CmsResource> resources=new ArrayList<CmsResource>();
  if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(m_formatterTargetModule) && !targetModule.getResourceTypes().isEmpty()) {
    resources=getCmsObject().readResources(CmsWorkplace.VFS_PATH_MODULES + m_formatterTargetModule,CmsResourceFilter.requireType(OpenCms.getResourceManager().getResourceType(CmsFormatterConfigurationCache.TYPE_FORMATTER_CONFIG).getTypeId()));
  }
  try {
    CmsResource config=getCmsObject().readResource(modPath,CmsResourceFilter.requireType(OpenCms.getResourceManager().getResourceType(CmsADEManager.MODULE_CONFIG_TYPE).getTypeId()));
    resources.add(config);
  }
 catch (  CmsVfsResourceNotFoundException e) {
    LOG.info(e.getLocalizedMessage(),e);
  }
  for (  CmsResource resource : resources) {
    CmsFile file=getCmsObject().readFile(resource);
    String encoding=CmsLocaleManager.getResourceEncoding(getCmsObject(),file);
    String content=new String(file.getContents(),encoding);
    for (    Map.Entry<I_CmsResourceType,I_CmsResourceType> mapping : resTypeMap.entrySet()) {
      content=content.replaceAll(mapping.getKey().getTypeName(),mapping.getValue().getTypeName());
    }
    file.setContents(content.getBytes(encoding));
    lockResource(getCmsObject(),file);
    getCmsObject().writeFile(file);
  }
}
