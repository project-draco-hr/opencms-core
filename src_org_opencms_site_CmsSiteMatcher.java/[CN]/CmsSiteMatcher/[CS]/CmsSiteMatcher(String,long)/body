{
  if (serverString == null) {
    init(WILDCARD,WILDCARD,0,timeOffset);
    return;
  }
  serverString=serverString.trim();
  int pos=serverString.indexOf("#");
  if (pos > 0) {
    serverString=serverString.substring(0,pos);
  }
  pos=serverString.indexOf("?");
  if (pos > 0) {
    serverString=serverString.substring(0,pos);
  }
  if (serverString.endsWith("/")) {
    serverString=serverString.substring(0,serverString.length() - 1);
  }
  int serverPort;
  String serverProtocol, serverName;
  pos=serverString.indexOf("://");
  if (pos >= 0) {
    serverProtocol=serverString.substring(0,pos);
    serverString=serverString.substring(pos + 3);
  }
 else {
    serverProtocol=SCHEME_HTTP;
  }
  pos=serverString.indexOf(":");
  if (pos >= 0) {
    serverName=serverString.substring(0,pos);
    try {
      String port=serverString.substring(pos + 1);
      pos=port.indexOf("/");
      if (pos >= 0) {
        port=port.substring(0,pos);
      }
      serverPort=Integer.valueOf(port).intValue();
    }
 catch (    NumberFormatException e) {
      if (SCHEME_HTTPS.equals(serverProtocol)) {
        serverPort=PORT_HTTPS;
      }
 else {
        serverPort=PORT_HTTP;
      }
    }
  }
 else {
    serverName=serverString;
    if (SCHEME_HTTPS.equals(serverProtocol)) {
      serverPort=PORT_HTTPS;
    }
 else {
      serverPort=PORT_HTTP;
    }
  }
  pos=serverName.indexOf("/");
  if (pos >= 0) {
    serverName=serverName.substring(0,pos);
  }
  init(serverProtocol,serverName,serverPort,timeOffset);
}
