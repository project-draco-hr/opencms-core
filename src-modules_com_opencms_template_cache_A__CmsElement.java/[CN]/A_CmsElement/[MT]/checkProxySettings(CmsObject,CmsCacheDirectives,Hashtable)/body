{
  if (!(m_cacheDirectives.userSetProxyPrivate() && m_cacheDirectives.userSetProxyPublic())) {
    boolean proxyPublic=false;
    boolean proxyPrivate=false;
    boolean export=false;
    if (m_templateName == null) {
      proxyPublic=true;
      proxyPrivate=true;
      export=true;
    }
 else {
      try {
        if (m_cacheDirectives.isInternalCacheable() && (!m_cacheDirectives.isUserPartOfKey())) {
          CmsResource templ=cms.readResource(m_templateName);
          int accessflags=templ.getFlags();
          if (!((accessflags & I_CmsConstants.C_ACCESS_INTERNAL_READ) > 0)) {
            proxyPrivate=true;
            if ((!m_cacheDirectives.isParameterPartOfKey()) && (!m_cacheDirectives.isTimeCritical())) {
              export=true;
            }
          }
        }
      }
 catch (      Exception e) {
        if (CmsLog.getLog(this).isWarnEnabled()) {
          CmsLog.getLog(this).warn(toString() + " could not find out if the element is proxy cacheable",e);
        }
      }
    }
    if (!m_cacheDirectives.userSetProxyPrivate()) {
      ((CmsCacheDirectives)m_cacheDirectives).setProxyPrivateCacheable(proxyPrivate);
    }
    if (!m_cacheDirectives.userSetProxyPublic()) {
      ((CmsCacheDirectives)m_cacheDirectives).setProxyPublicCacheable(proxyPublic);
    }
    if (!m_cacheDirectives.userSetExport()) {
      ((CmsCacheDirectives)m_cacheDirectives).setExport(export);
    }
  }
  proxySettings.merge(m_cacheDirectives);
  Enumeration elementNames=m_elementDefinitions.getAllElementNames();
  while (elementNames.hasMoreElements()) {
    String name=(String)elementNames.nextElement();
    CmsElementDefinition currentDef=m_elementDefinitions.get(name);
    A_CmsElement currentEle=CmsXmlTemplateLoader.getElementCache().getElementLocator().get(cms,new CmsElementDescriptor(currentDef.getClassName(),currentDef.getTemplateName()),parameters);
    currentEle.checkProxySettings(cms,proxySettings,parameters);
  }
}
