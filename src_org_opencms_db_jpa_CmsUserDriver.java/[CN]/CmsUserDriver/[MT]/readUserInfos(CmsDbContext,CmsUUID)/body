{
  Map<String,Object> infos=new HashMap<String,Object>();
  try {
    Query q=m_sqlManager.createQuery(dbc,C_USERDATA_READ_1);
    q.setParameter(1,userId.toString());
    @SuppressWarnings("unchecked") List<CmsDAOUserData> res=q.getResultList();
    for (    CmsDAOUserData ud : res) {
      String key=ud.getDataKey();
      String type=ud.getDataType();
      byte[] value=ud.getDataValue();
      Object data=null;
      try {
        if (LOG.isDebugEnabled()) {
          LOG.debug(org.opencms.db.generic.Messages.get().getBundle().key(org.opencms.db.generic.Messages.LOG_DBG_READUSERINFO_2,key,type));
          if (value != null) {
            try {
              LOG.debug(org.opencms.db.generic.Messages.get().getBundle().key(org.opencms.db.generic.Messages.LOG_DBG_READUSERINFO_VALUE_1,new String(value)));
            }
 catch (            Exception e) {
            }
          }
 else {
            LOG.debug(org.opencms.db.generic.Messages.get().getBundle().key(org.opencms.db.generic.Messages.LOG_DBG_READUSERINFO_VALUE_1,null));
          }
        }
        data=CmsDataTypeUtil.dataDeserialize(value,type);
      }
 catch (      Exception e) {
        LOG.warn(Messages.get().container(Messages.ERR_READING_ADDITIONAL_INFO_1,userId.toString()).key(),e);
      }
      if (key != null) {
        infos.put(key,data);
      }
    }
  }
 catch (  PersistenceException e) {
    throw new CmsDataAccessException(Messages.get().container(Messages.ERR_JPA_PERSITENCE_1,e),e);
  }
  return infos;
}
