{
  List<CmsResource> result=new ArrayList<CmsResource>();
  StringBuffer conditions=new StringBuffer();
  List params=new ArrayList(5);
  prepareProjectCondition(projectId,mode,conditions,params);
  prepareResourceCondition(projectId,mode,conditions);
  prepareTypeCondition(projectId,type,mode,conditions,params);
  prepareTimeRangeCondition(projectId,lastModifiedAfter,lastModifiedBefore,conditions,params);
  prepareReleasedTimeRangeCondition(projectId,releasedAfter,releasedBefore,conditions,params);
  prepareExpiredTimeRangeCondition(projectId,expiredAfter,expiredBefore,conditions,params);
  preparePathCondition(projectId,parentPath,mode,conditions,params);
  prepareStateCondition(projectId,state,mode,conditions,params);
  try {
    StringBuffer queryBuf=new StringBuffer(256);
    queryBuf.append(m_sqlManager.readQuery(projectId,C_RESOURCES_READ_TREE));
    queryBuf.append(conditions);
    queryBuf.append(" ");
    queryBuf.append(m_sqlManager.readQuery(projectId,C_RESOURCES_ORDER_BY_PATH));
    Query q=m_sqlManager.createQueryFromJPQL(dbc,queryBuf.toString());
    for (int i=0; i < params.size(); i++) {
      q.setParameter(i + 1,params.get(i));
    }
    @SuppressWarnings("unchecked") List<Object[]> res=q.getResultList();
    for (    Object[] o : res) {
      CmsResource resource=createResource(o,projectId);
      result.add(resource);
    }
  }
 catch (  PersistenceException e) {
    throw new CmsDataAccessException(Messages.get().container(Messages.ERR_JPA_PERSITENCE,e),e);
  }
  return result;
}
