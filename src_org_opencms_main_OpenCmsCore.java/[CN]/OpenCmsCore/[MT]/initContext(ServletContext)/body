{
  String base=context.getInitParameter("opencms.home");
  if (base == null || "".equals(base)) {
    base=searchWebInfFolder(context.getRealPath("/"));
    if (base == null || "".equals(base)) {
      throwInitException(new CmsInitException(C_ERRORMSG + "OpenCms base folder could not be guessed. Please define init parameter \"opencms.home\" in servlet engine configuration.\n\n"));
    }
  }
  m_systemInfo.setWebInfPath(base);
  ExtendedProperties configuration=null;
  try {
    configuration=CmsSetupUtils.loadProperties(getSystemInfo().getConfigurationFilePath());
  }
 catch (  Exception e) {
    throwInitException(new CmsInitException(C_ERRORMSG + "Trouble reading property file " + getSystemInfo().getConfigurationFilePath()+ ".\n\n",e));
  }
  String logfile=(String)configuration.get("log.file");
  if (logfile != null) {
    logfile=getSystemInfo().getAbsolutePathRelativeToWebInf(logfile);
    configuration.put("log.file",logfile);
  }
  m_systemInfo.setLogFileName(logfile);
  m_log.init(configuration,getSystemInfo().getConfigurationFilePath());
  String servletMapping=context.getInitParameter("OpenCmsServlet");
  if (servletMapping == null) {
    m_instance=null;
    throw new CmsInitException("OpenCms servlet mapping not configured in 'web.xml'");
  }
  if (servletMapping.endsWith("/*")) {
    servletMapping=servletMapping.substring(0,servletMapping.length() - 2);
  }
  configuration.put("servlet.mapping",servletMapping);
  if (configuration.getBoolean("wizard.enabled",true)) {
    m_instance=null;
    throw new CmsInitException("OpenCms setup wizard is enabled, unable to start OpenCms context",CmsInitException.C_INIT_WIZARD_ENABLED);
  }
  if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
    getLog(CmsLog.CHANNEL_INIT).info(".");
    getLog(CmsLog.CHANNEL_INIT).info(".");
    getLog(CmsLog.CHANNEL_INIT).info(".");
    getLog(CmsLog.CHANNEL_INIT).info(".");
    printCopyrightInformation();
    getLog(CmsLog.CHANNEL_INIT).info(".                      ...............................................................");
    getLog(CmsLog.CHANNEL_INIT).info(". Startup time         : " + (new Date(System.currentTimeMillis())));
    getLog(CmsLog.CHANNEL_INIT).info(". OpenCms version      : " + getSystemInfo().getVersionName());
    getLog(CmsLog.CHANNEL_INIT).info(". OpenCms context      : " + getSystemInfo().getWebApplicationName());
    getLog(CmsLog.CHANNEL_INIT).info(". OpenCms servlet path : " + servletMapping);
    getLog(CmsLog.CHANNEL_INIT).info(". OpenCms base path    : " + getSystemInfo().getWebInfPath());
    getLog(CmsLog.CHANNEL_INIT).info(". OpenCms property file: " + getSystemInfo().getConfigurationFilePath());
    getLog(CmsLog.CHANNEL_INIT).info(". OpenCms logfile      : " + getSystemInfo().getLogFileName());
    getLog(CmsLog.CHANNEL_INIT).info(". Servlet container    : " + context.getServerInfo());
  }
  try {
    initConfiguration(configuration);
  }
 catch (  CmsException cmsex) {
    if (cmsex.getType() == CmsException.C_RB_INIT_ERROR) {
      throwInitException(new CmsInitException(C_ERRORMSG + "Could not connect to the database. Is the database up and running?\n\n",cmsex));
    }
  }
catch (  Exception exc) {
    throwInitException(new CmsInitException(C_ERRORMSG + "Trouble creating the com.opencms.core.CmsObject. Please check the root cause for more information.\n\n",exc));
  }
  m_staticExportManager=CmsStaticExportManager.initialize(configuration,null);
  m_sessionInfoManager=new CmsSessionInfoManager();
  if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
    getLog(CmsLog.CHANNEL_INIT).info(". Session storage      : initialized");
  }
  try {
    List resourceHandlers=OpenCms.getRegistry().getSystemSubNodes("requesthandler");
    Iterator i=resourceHandlers.iterator();
    while (i.hasNext()) {
      String currentClass=(String)i.next();
      try {
        I_CmsRequestHandler handler=(I_CmsRequestHandler)Class.forName(currentClass).newInstance();
        addRequestHandler(handler);
        if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
          getLog(CmsLog.CHANNEL_INIT).info(". Request handler class: " + currentClass + " instanciated");
        }
      }
 catch (      Exception e1) {
        if (getLog(CmsLog.CHANNEL_INIT).isWarnEnabled()) {
          getLog(CmsLog.CHANNEL_INIT).warn(". Request handler class: non-critical error " + e1.toString());
        }
      }
    }
  }
 catch (  Exception e2) {
    if (getLog(CmsLog.CHANNEL_INIT).isWarnEnabled()) {
      getLog(CmsLog.CHANNEL_INIT).warn(". Request handler class: non-critical error " + e2.toString());
    }
  }
  m_useBasicAuthentication=configuration.getBoolean("auth.basic",true);
  m_authenticationFormURI=configuration.getString("auth.form_uri",I_CmsWpConstants.C_VFS_PATH_WORKPLACE + "action/authenticate.html");
  if (m_sessionManager != null) {
    if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
      getLog(CmsLog.CHANNEL_INIT).info(". Session manager      : initialized");
    }
  }
 else {
    getLog(CmsLog.CHANNEL_INIT).error(". Session manager     : NOT initialized");
  }
}
