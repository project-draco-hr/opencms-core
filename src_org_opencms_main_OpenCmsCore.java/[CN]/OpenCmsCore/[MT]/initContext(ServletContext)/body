{
  String servletMapping=context.getInitParameter("OpenCmsServlet");
  if (servletMapping == null) {
    throwInitException(new CmsInitException("OpenCms servlet mapping not configured in 'web.xml', please set the 'OpenCmsServlet' parameter."));
  }
  String webInfPath=context.getInitParameter("opencms.home");
  if (CmsStringUtil.isEmpty(webInfPath)) {
    webInfPath=searchWebInfFolder(context.getRealPath("/"));
    if (CmsStringUtil.isEmpty(webInfPath)) {
      throwInitException(new CmsInitException(C_ERRORMSG + "OpenCms base folder could not be guessed. Please define init parameter \"opencms.home\" in servlet engine configuration.\n\n"));
    }
  }
  String defaultWebApplication=context.getInitParameter("DefaultWebApplication");
  if (defaultWebApplication == null) {
    defaultWebApplication="ROOT";
  }
  String webApplicationContext=context.getInitParameter("WebApplicationContext");
  getSystemInfo().init(webInfPath,servletMapping,webApplicationContext,defaultWebApplication);
  ExtendedProperties configuration=null;
  try {
    configuration=CmsPropertyUtils.loadProperties(getSystemInfo().getConfigurationFileRfsPath());
  }
 catch (  Exception e) {
    throwInitException(new CmsInitException(C_ERRORMSG + "Trouble reading property file " + getSystemInfo().getConfigurationFileRfsPath()+ ".\n\n",e));
  }
  if (configuration.getBoolean("wizard.enabled",true)) {
    throw new CmsInitException("OpenCms setup wizard is enabled, unable to start OpenCms",CmsInitException.C_INIT_WIZARD_ENABLED);
  }
  System.err.println("\n\nStarting OpenCms, version " + OpenCms.getSystemInfo().getVersionName() + " in web application '"+ getSystemInfo().getWebApplicationName()+ "'");
  for (int i=0; i < I_CmsConstants.C_COPYRIGHT.length; i++) {
    System.err.println(I_CmsConstants.C_COPYRIGHT[i]);
  }
  System.err.println();
  if (CmsLog.LOG.isInfoEnabled()) {
    CmsLog.LOG.info(".");
    CmsLog.LOG.info(".");
    CmsLog.LOG.info(".");
    CmsLog.LOG.info(".");
    CmsLog.LOG.info(". OpenCms version " + OpenCms.getSystemInfo().getVersionName());
    for (int i=0; i < I_CmsConstants.C_COPYRIGHT.length; i++) {
      CmsLog.LOG.info(". " + I_CmsConstants.C_COPYRIGHT[i]);
    }
    CmsLog.LOG.info(".                      ...............................................................");
    CmsLog.LOG.info(". Startup time         : " + (new Date(System.currentTimeMillis())));
    CmsLog.LOG.info(". Servlet container    : " + context.getServerInfo());
    CmsLog.LOG.info(". OpenCms version      : " + getSystemInfo().getVersionName());
    CmsLog.LOG.info(". OpenCms webapp name  : " + getSystemInfo().getWebApplicationName());
    CmsLog.LOG.info(". OpenCms servlet path : " + getSystemInfo().getServletPath());
    CmsLog.LOG.info(". OpenCms context      : " + getSystemInfo().getOpenCmsContext());
    CmsLog.LOG.info(". OpenCms WEB-INF path : " + getSystemInfo().getWebInfRfsPath());
    CmsLog.LOG.info(". OpenCms property file: " + getSystemInfo().getConfigurationFileRfsPath());
    CmsLog.LOG.info(". OpenCms log file     : " + getSystemInfo().getLogFileRfsPath());
  }
  try {
    initConfiguration(configuration);
  }
 catch (  Exception e) {
    throwInitException(new CmsInitException(C_ERRORMSG + "Unable to initialize the OpenCms configuration",e));
  }
  m_useBasicAuthentication=configuration.getBoolean("auth.basic",true);
  m_authenticationFormURI=configuration.getString("auth.form_uri",I_CmsWpConstants.C_VFS_PATH_WORKPLACE + "action/authenticate.html");
  if (m_sessionManager != null) {
    if (CmsLog.LOG.isInfoEnabled()) {
      CmsLog.LOG.info(". Session manager      : initialized");
    }
  }
 else {
    CmsLog.LOG.error(". Session manager      : NOT initialized");
  }
}
