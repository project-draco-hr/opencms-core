{
  String defaultEncoding=getSystemInfo().getDefaultEncoding();
  defaultEncoding=configuration.getString("defaultContentEncoding",defaultEncoding);
  if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
    getLog(CmsLog.CHANNEL_INIT).info(". OpenCms encoding     : " + defaultEncoding);
  }
  String systemEncoding=null;
  try {
    systemEncoding=System.getProperty("file.encoding");
  }
 catch (  SecurityException se) {
  }
  if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
    getLog(CmsLog.CHANNEL_INIT).info(". System file.encoding : " + systemEncoding);
  }
  if (!defaultEncoding.equals(systemEncoding)) {
    String msg="OpenCms startup failure: System file.encoding '" + systemEncoding + "' not equal to OpenCms encoding '"+ defaultEncoding+ "'";
    if (getLog(this).isFatalEnabled()) {
      getLog(this).fatal(OpenCmsCore.C_MSG_CRITICAL_ERROR + "1: " + msg);
    }
    throw new Exception(msg);
  }
  try {
    if (!java.nio.charset.Charset.isSupported(defaultEncoding)) {
      defaultEncoding=getSystemInfo().getDefaultEncoding();
    }
  }
 catch (  Throwable t) {
  }
  getSystemInfo().setDefaultEncoding(defaultEncoding);
  String ethernetAddress=configuration.getString("server.ethernet.address",CmsUUID.getDummyEthernetAddress());
  if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
    getLog(CmsLog.CHANNEL_INIT).info(". Ethernet address used: " + ethernetAddress);
  }
  CmsUUID.init(ethernetAddress);
  String serverName=configuration.getString("server.name","OpenCmsServer");
  getSystemInfo().setServerName(serverName);
  m_lockManager=CmsLockManager.getInstance();
  m_memoryMonitor=CmsMemoryMonitor.initialize(configuration);
  try {
    if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
      String jdkinfo=System.getProperty("java.vm.name") + " ";
      jdkinfo+=System.getProperty("java.vm.version") + " ";
      jdkinfo+=System.getProperty("java.vm.info") + " ";
      jdkinfo+=System.getProperty("java.vm.vendor") + " ";
      getLog(CmsLog.CHANNEL_INIT).info(". Java VM in use       : " + jdkinfo);
      String osinfo=System.getProperty("os.name") + " ";
      osinfo+=System.getProperty("os.version") + " ";
      osinfo+=System.getProperty("os.arch") + " ";
      getLog(CmsLog.CHANNEL_INIT).info(". Operating sytem      : " + osinfo);
    }
  }
 catch (  Exception e) {
    if (getLog(this).isErrorEnabled()) {
      getLog(this).error(OpenCmsCore.C_MSG_CRITICAL_ERROR + "2",e);
    }
    throw e;
  }
  m_defaultUsers=CmsDefaultUsers.initialize(configuration);
  try {
    if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
      getLog(CmsLog.CHANNEL_INIT).info(". Flex cache init      : starting");
    }
    new CmsFlexCache(configuration);
    if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
      getLog(CmsLog.CHANNEL_INIT).info(". Flex cache init      : finished");
    }
  }
 catch (  Exception e) {
    if (getLog(CmsLog.CHANNEL_INIT).isWarnEnabled()) {
      getLog(CmsLog.CHANNEL_INIT).warn(". Flex cache init      : non-critical error " + e.toString());
    }
  }
  CmsConfigurationManager configurationManager=new CmsConfigurationManager(getSystemInfo().getAbsoluteRfsPathRelativeToWebInf("config/"));
  configurationManager.loadXmlConfiguration();
  CmsSystemConfiguration systemConfiguration=(CmsSystemConfiguration)configurationManager.getConfiguration(CmsSystemConfiguration.class);
  getSystemInfo().setVersionHistorySettings(systemConfiguration.isVersionHistoryEnabled(),systemConfiguration.getVersionHistoryMaxCount());
  getSystemInfo().setMailSettings(systemConfiguration.getMailSettings());
  getSystemInfo().setSynchronizeSettings(new CmsSynchronizeSettings());
  m_resourceInitHandlers=systemConfiguration.getResourceInitHandlers();
  CmsVfsConfiguration vfsConfiguation=(CmsVfsConfiguration)configurationManager.getConfiguration(CmsVfsConfiguration.class);
  m_loaderManager=vfsConfiguation.getLoaderManager();
  List resourceTypes=vfsConfiguation.getResourceTypes();
  CmsImportExportConfiguration importExportConfiguration=(CmsImportExportConfiguration)configurationManager.getConfiguration(CmsImportExportConfiguration.class);
  m_importExportManager=importExportConfiguration.getImportExportManager();
  CmsWorkplaceConfiguration workplaceConfiguration=(CmsWorkplaceConfiguration)configurationManager.getConfiguration(CmsWorkplaceConfiguration.class);
  m_workplaceManager=workplaceConfiguration.getWorkplaceManager();
  addExportPoints(m_workplaceManager.getExportPoints());
  try {
    m_driverManager=CmsDriverManager.newInstance(configuration,resourceTypes);
  }
 catch (  Exception e) {
    if (getLog(this).isErrorEnabled()) {
      getLog(this).error(OpenCmsCore.C_MSG_CRITICAL_ERROR + "3",e);
    }
    throw new CmsException("Database init failed",CmsException.C_RB_INIT_ERROR,e);
  }
  try {
    Hashtable mimeTypes=m_driverManager.readMimeTypes();
    setMimeTypes(mimeTypes);
    if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
      getLog(CmsLog.CHANNEL_INIT).info(". Found mime types     : " + mimeTypes.size() + " entrys");
    }
    if (!new Boolean(System.getProperty("opencms.disableScheduler")).booleanValue()) {
      m_cronTable=new CmsCronTable(m_driverManager.readCronTable());
      m_scheduler=new CmsCronScheduler(this,m_cronTable);
      if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
        getLog(CmsLog.CHANNEL_INIT).info(". OpenCms scheduler    : enabled");
      }
    }
 else {
      if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
        getLog(CmsLog.CHANNEL_INIT).info(". OpenCms scheduler    : disabled");
      }
    }
  }
 catch (  Exception e) {
    if (getLog(this).isErrorEnabled()) {
      getLog(this).error(OpenCmsCore.C_MSG_CRITICAL_ERROR + "5",e);
    }
    throw e;
  }
  m_threadStore=new CmsThreadStore();
  m_linkManager=new CmsLinkManager();
  m_directoryTranslator=vfsConfiguation.getFolderTranslator();
  m_fileTranslator=vfsConfiguation.getFileTranslator();
  m_defaultFilenames=null;
  try {
    m_defaultFilenames=configuration.getStringArray("directory.default.files");
    for (int i=0; i < m_defaultFilenames.length; i++) {
      m_defaultFilenames[i]=m_defaultFilenames[i].trim();
      if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
        getLog(CmsLog.CHANNEL_INIT).info(". Default file         : " + (i + 1) + " - "+ m_defaultFilenames[i]);
      }
    }
  }
 catch (  Exception e) {
    if (getLog(CmsLog.CHANNEL_INIT).isWarnEnabled()) {
      getLog(CmsLog.CHANNEL_INIT).warn(". Default file         : non-critical error " + e.toString());
    }
  }
  if (m_defaultFilenames == null) {
    m_defaultFilenames=new String[0];
  }
  m_passwordValidatingClass=configuration.getString("passwordvalidatingclass","com.opencms.util.PasswordValidtation");
  if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
    getLog(CmsLog.CHANNEL_INIT).info(". Password validation  : " + m_passwordValidatingClass);
  }
  Boolean supportOldLocales=configuration.getBoolean("compatibility.support.oldlocales",new Boolean(false));
  setRuntimeProperty("compatibility.support.oldlocales",supportOldLocales);
  if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
    getLog(CmsLog.CHANNEL_INIT).info(". Old locale support   : " + (supportOldLocales.booleanValue() ? "enabled" : "disabled"));
  }
  String[] appNames=configuration.getStringArray("compatibility.support.webAppNames");
  if (appNames == null) {
    appNames=new String[0];
  }
  List webAppNamesOri=java.util.Arrays.asList(appNames);
  ArrayList webAppNames=new ArrayList();
  for (int i=0; i < webAppNamesOri.size(); i++) {
    String name=((String)webAppNamesOri.get(i)).trim();
    if (name != null && !"".equals(name)) {
      webAppNames.add(name);
      if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
        getLog(CmsLog.CHANNEL_INIT).info(". Old context path     : " + (i + 1) + " - "+ name);
      }
    }
  }
  if (getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) {
    getLog(CmsLog.CHANNEL_INIT).info(". Old context support  : " + ((webAppNames.size() > 0) ? "enabled" : "disabled"));
  }
  if (webAppNames == null) {
    webAppNames=new ArrayList();
  }
  if (!webAppNames.contains(getSystemInfo().getOpenCmsContext())) {
    webAppNames.add(getSystemInfo().getOpenCmsContext());
  }
  setRuntimeProperty("compatibility.support.webAppNames",webAppNames);
  CmsObject adminCms=initCmsObject(null,null,getDefaultUsers().getUserAdmin(),null);
  m_workplaceManager.initialize(adminCms);
  m_localeManager=systemConfiguration.getLocaleManager();
  m_localeManager.initialize(adminCms);
  m_siteManager=CmsSiteManager.initialize(configuration,adminCms);
  m_searchManager=CmsSearchManager.initialize(configuration,adminCms);
}
