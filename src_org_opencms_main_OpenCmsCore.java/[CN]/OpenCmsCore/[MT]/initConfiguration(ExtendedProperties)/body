{
  String systemEncoding=null;
  try {
    systemEncoding=System.getProperty("file.encoding");
  }
 catch (  SecurityException se) {
  }
  if (CmsLog.INIT.isInfoEnabled()) {
    CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_FILE_ENCODING_1,systemEncoding));
  }
  String ethernetAddress=configuration.getString("server.ethernet.address",CmsUUID.getDummyEthernetAddress());
  if (CmsLog.INIT.isInfoEnabled()) {
    CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_ETHERNET_ADDRESS_1,ethernetAddress));
  }
  CmsUUID.init(ethernetAddress);
  String serverName=configuration.getString("server.name","OpenCmsServer");
  getSystemInfo().setServerName(serverName);
  try {
    if (CmsLog.INIT.isInfoEnabled()) {
      String jdkinfo=System.getProperty("java.vm.name") + " ";
      jdkinfo+=System.getProperty("java.vm.version") + " ";
      jdkinfo+=System.getProperty("java.vm.info") + " ";
      jdkinfo+=System.getProperty("java.vm.vendor") + " ";
      CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_JAVA_VM_1,jdkinfo));
      String osinfo=System.getProperty("os.name") + " ";
      osinfo+=System.getProperty("os.version") + " ";
      osinfo+=System.getProperty("os.arch") + " ";
      CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_OPERATING_SYSTEM_1,osinfo));
    }
  }
 catch (  Exception e) {
    throw new CmsInitException(Messages.get().container(Messages.ERR_CRITICAL_INIT_PROP_0),e);
  }
  m_configurationManager=new CmsConfigurationManager(getSystemInfo().getAbsoluteRfsPathRelativeToWebInf(CmsSystemInfo.FOLDER_CONFIG));
  m_configurationManager.setConfiguration(configuration);
  try {
    m_configurationManager.loadXmlConfiguration();
  }
 catch (  Exception e) {
    throw new CmsInitException(Messages.get().container(Messages.ERR_CRITICAL_INIT_XML_0),e);
  }
  CmsSystemConfiguration systemConfiguration=(CmsSystemConfiguration)m_configurationManager.getConfiguration(CmsSystemConfiguration.class);
  CmsMemoryMonitorConfiguration memoryMonitorConfiguration=systemConfiguration.getCmsMemoryMonitorConfiguration();
  try {
    if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(memoryMonitorConfiguration.getClassName())) {
      m_memoryMonitor=(CmsMemoryMonitor)Class.forName(memoryMonitorConfiguration.getClassName()).newInstance();
    }
 else {
      m_memoryMonitor=new CmsMemoryMonitor();
    }
  }
 catch (  Exception e) {
    throw new CmsInitException(Messages.get().container(Messages.ERR_CRITICAL_INIT_MEMORY_MONITOR_1,memoryMonitorConfiguration.getClassName()),e);
  }
  m_memoryMonitor.initialize(systemConfiguration);
  CmsEventManager configuredEventManager=systemConfiguration.getEventManager();
  configuredEventManager.initialize(m_eventManager);
  m_eventManager=configuredEventManager;
  String setEncoding=systemConfiguration.getDefaultContentEncoding();
  String defaultEncoding=CmsEncoder.lookupEncoding(setEncoding,null);
  if (defaultEncoding == null) {
    throw new CmsInitException(Messages.get().container(Messages.ERR_CRITICAL_INIT_ENCODING_1,setEncoding));
  }
  if (CmsLog.INIT.isInfoEnabled()) {
    CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_OPENCMS_ENCODING_1,defaultEncoding));
  }
  getSystemInfo().setDefaultEncoding(defaultEncoding);
  getSystemInfo().setVersionHistorySettings(systemConfiguration.isHistoryEnabled(),systemConfiguration.getHistoryVersions(),systemConfiguration.getHistoryVersionsAfterDeletion());
  getSystemInfo().setMailSettings(systemConfiguration.getMailSettings());
  getSystemInfo().setHttpAuthenticationSettings(systemConfiguration.getHttpAuthenticationSettings());
  getSystemInfo().setNotificationTime(systemConfiguration.getNotificationTime());
  getSystemInfo().setNotificationProject(systemConfiguration.getNotificationProject());
  m_scheduleManager=systemConfiguration.getScheduleManager();
  m_resourceInitHandlers=systemConfiguration.getResourceInitHandlers();
  Iterator<I_CmsRequestHandler> it=systemConfiguration.getRequestHandlers().iterator();
  while (it.hasNext()) {
    I_CmsRequestHandler handler=it.next();
    addRequestHandler(handler);
    if (CmsLog.INIT.isInfoEnabled()) {
      CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_REQUEST_HANDLER_CLASS_1,handler.getClass().getName()));
    }
  }
  m_defaultUsers=systemConfiguration.getCmsDefaultUsers();
  m_siteManager=systemConfiguration.getSiteManager();
  CmsVfsConfiguration vfsConfiguation=(CmsVfsConfiguration)m_configurationManager.getConfiguration(CmsVfsConfiguration.class);
  m_resourceManager=vfsConfiguation.getResourceManager();
  m_xmlContentTypeManager=vfsConfiguation.getXmlContentTypeManager();
  m_defaultFiles=vfsConfiguation.getDefaultFiles();
  m_resourceManager.setTranslators(vfsConfiguation.getFolderTranslator(),vfsConfiguation.getFileTranslator());
  CmsFlexCache flexCache=null;
  try {
    if (CmsLog.INIT.isInfoEnabled()) {
      CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_FLEX_CACHE_STARTING_0));
    }
    CmsFlexCacheConfiguration flexCacheConfiguration=systemConfiguration.getCmsFlexCacheConfiguration();
    flexCache=new CmsFlexCache(flexCacheConfiguration);
    if (CmsLog.INIT.isInfoEnabled()) {
      CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_FLEX_CACHE_FINISHED_0));
    }
  }
 catch (  Exception e) {
    if (CmsLog.INIT.isWarnEnabled()) {
      CmsLog.INIT.warn(Messages.get().getBundle().key(Messages.INIT_FLEX_CACHE_ERROR_1,e.getMessage()));
    }
  }
  if (flexCache != null) {
    Iterator<I_CmsResourceLoader> i=m_resourceManager.getLoaders().iterator();
    while (i.hasNext()) {
      Object o=i.next();
      if (o instanceof I_CmsFlexCacheEnabledLoader) {
        ((I_CmsFlexCacheEnabledLoader)o).setFlexCache(flexCache);
      }
    }
  }
  CmsImportExportConfiguration importExportConfiguration=(CmsImportExportConfiguration)m_configurationManager.getConfiguration(CmsImportExportConfiguration.class);
  m_importExportManager=importExportConfiguration.getImportExportManager();
  m_staticExportManager=importExportConfiguration.getStaticExportManager();
  m_repositoryManager=importExportConfiguration.getRepositoryManager();
  CmsSearchConfiguration searchConfiguration=(CmsSearchConfiguration)m_configurationManager.getConfiguration(CmsSearchConfiguration.class);
  m_searchManager=searchConfiguration.getSearchManager();
  CmsWorkplaceConfiguration workplaceConfiguration=(CmsWorkplaceConfiguration)m_configurationManager.getConfiguration(CmsWorkplaceConfiguration.class);
  m_workplaceManager=workplaceConfiguration.getWorkplaceManager();
  addExportPoints(m_workplaceManager.getExportPoints());
  CmsModuleConfiguration moduleConfiguration=(CmsModuleConfiguration)m_configurationManager.getConfiguration(CmsModuleConfiguration.class);
  m_moduleManager=moduleConfiguration.getModuleManager();
  m_passwordHandler=systemConfiguration.getPasswordHandler();
  m_validationHandler=systemConfiguration.getValidationHandler();
  m_authorizationHandler=systemConfiguration.getAuthorizationHandler();
  m_loginManager=systemConfiguration.getLoginManager();
  m_publishEngine=new CmsPublishEngine(systemConfiguration.getRuntimeInfoFactory());
  m_securityManager=CmsSecurityManager.newInstance(m_configurationManager,systemConfiguration.getRuntimeInfoFactory(),m_publishEngine);
  m_publishManager=systemConfiguration.getPublishManager();
  m_roleManager=new CmsRoleManager(m_securityManager);
  m_orgUnitManager=new CmsOrgUnitManager(m_securityManager);
  m_threadStore=new CmsThreadStore(m_securityManager);
  m_linkManager=new CmsLinkManager(m_staticExportManager.getLinkSubstitutionHandler());
  m_runtimeProperties.putAll(systemConfiguration.getRuntimeProperties());
  I_CmsSessionStorageProvider sessionStorageProvider=systemConfiguration.getSessionStorageProvider();
  CmsObject adminCms;
  try {
    adminCms=initCmsObject(null,null,getDefaultUsers().getUserAdmin(),(String)null,(String)null);
  }
 catch (  CmsException e) {
    throw new CmsInitException(Messages.get().container(Messages.ERR_CRITICAL_INIT_ADMINCMS_0),e);
  }
  try {
    m_scheduleManager.initialize(initCmsObject(adminCms));
    m_localeManager=systemConfiguration.getLocaleManager();
    m_localeManager.initialize(initCmsObject(adminCms));
    m_siteManager.initialize(initCmsObject(adminCms));
    m_staticExportManager.initialize(initCmsObject(adminCms));
    m_xmlContentTypeManager.initialize(initCmsObject(adminCms));
    m_publishManager.setPublishEngine(m_publishEngine);
    m_publishManager.setSecurityManager(m_securityManager);
    m_publishManager.initialize(initCmsObject(adminCms));
    m_moduleManager.initialize(initCmsObject(adminCms),m_configurationManager);
    m_resourceManager.initialize(initCmsObject(adminCms));
    m_searchManager.initialize(initCmsObject(adminCms));
    m_workplaceManager.initialize(initCmsObject(adminCms));
    m_sessionManager.initialize(sessionStorageProvider);
    m_publishManager.startPublishing();
    CmsADECacheSettings adeCacheSettings=systemConfiguration.getAdeCacheSettings();
    if (adeCacheSettings == null) {
      adeCacheSettings=new CmsADECacheSettings();
    }
    I_CmsADEConfiguration adeConfiguration;
    String adeConfigurationClassName=systemConfiguration.getAdeConfiguration();
    if (adeConfigurationClassName == null) {
      adeConfiguration=new CmsADEDefaultConfiguration();
    }
 else {
      try {
        adeConfiguration=(I_CmsADEConfiguration)Class.forName(adeConfigurationClassName).newInstance();
      }
 catch (      Exception e) {
        throw new CmsInitException(org.opencms.main.Messages.get().container(org.opencms.main.Messages.ERR_CRITICAL_CLASS_CREATION_1,adeConfigurationClassName),e);
      }
    }
    m_adeCache=new CmsADECache(m_memoryMonitor,adeCacheSettings);
    m_adeManager=new CmsADEManager(adminCms,m_adeCache,adeConfiguration);
  }
 catch (  CmsException e) {
    throw new CmsInitException(Messages.get().container(Messages.ERR_CRITICAL_INIT_MANAGERS_0),e);
  }
}
