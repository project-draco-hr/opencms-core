{
  addStyleName(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarMove());
  setImageClass(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarMove());
  setTitle(Messages.get().key(Messages.GUI_HOVERBAR_MOVE_0));
  setButtonStyle(ButtonStyle.TRANSPARENT,null);
  hoverbar.addShowHandler(new I_CmsHoverbarShowHandler(){
    /** 
 * @see org.opencms.ade.sitemap.client.hoverbar.I_CmsHoverbarShowHandler#onShow(org.opencms.ade.sitemap.client.hoverbar.CmsHoverbarShowEvent)
 */
    public void onShow(    CmsHoverbarShowEvent event){
      m_sitePath=hoverbar.getSitePath();
      final CmsSitemapController controller=hoverbar.getController();
      CmsClientSitemapEntry entry=controller.getEntry(m_sitePath);
      if (CmsSitemapView.getInstance().isNavigationMode() && (entry != null)) {
        if (!entry.isInNavigation()) {
          CmsHoverbarMoveButton.this.setVisible(false);
        }
 else         if (controller.isRoot(m_sitePath)) {
          disable(Messages.get().key(Messages.GUI_DISABLED_ROOT_ITEM_0));
          CmsHoverbarMoveButton.this.setVisible(true);
        }
 else         if (entry.hasForeignFolderLock()) {
          disable("The entry folder is locked.");
          CmsHoverbarMoveButton.this.setVisible(true);
        }
 else {
          enable();
          m_mouseDownHandlerReg=addMouseDownHandler(CmsSitemapView.getInstance().getTree().getDnDHandler());
          CmsHoverbarMoveButton.this.setVisible(true);
        }
      }
 else {
        CmsHoverbarMoveButton.this.setVisible(false);
      }
    }
  }
);
  hoverbar.addHideHandler(new I_CmsHoverbarHideHandler(){
    /** 
 * @see org.opencms.ade.sitemap.client.hoverbar.I_CmsHoverbarHideHandler#onHide(org.opencms.ade.sitemap.client.hoverbar.CmsHoverbarHideEvent)
 */
    public void onHide(    CmsHoverbarHideEvent event){
      if (m_mouseDownHandlerReg != null) {
        m_mouseDownHandlerReg.removeHandler();
        m_mouseDownHandlerReg=null;
      }
    }
  }
);
}
