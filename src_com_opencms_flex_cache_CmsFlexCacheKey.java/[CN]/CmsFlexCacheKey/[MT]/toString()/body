{
  StringBuffer str=new StringBuffer(100);
  if (m_always < 0) {
    str.append("never");
    if (m_parseError) {
      str.append(";parse-error");
    }
    return str.toString();
  }
  if (m_noparams != null) {
    if (m_noparams.size() == 0) {
      str.append("no-params;");
    }
 else {
      str.append("no-params=(");
      Iterator i=m_noparams.iterator();
      while (i.hasNext()) {
        Object o=i.next();
        str.append(o);
        if (i.hasNext())         str.append(",");
      }
      str.append(");");
    }
  }
  if (m_always > 0) {
    str.append("always");
    if (m_parseError) {
      str.append(";parse-error");
    }
    return str.toString();
  }
  if (m_uri != null) {
    if (m_uri.equals("uri")) {
      str.append("uri;");
    }
 else {
      str.append("uri=(");
      str.append(m_uri);
      str.append(");");
    }
  }
  if (m_user >= 0) {
    if (m_user == Integer.MAX_VALUE) {
      str.append("user;");
    }
 else {
      str.append("user=(");
      str.append(m_user);
      str.append(");");
    }
  }
  if (m_groups != null) {
    if (m_groups.size() == 0) {
      str.append("groups;");
    }
 else {
      str.append("groups=(");
      Iterator i=m_groups.iterator();
      while (i.hasNext()) {
        str.append(i.next());
        if (i.hasNext())         str.append(",");
      }
      str.append(");");
    }
  }
  if (m_params != null) {
    if (m_params.size() == 0) {
      str.append("params;");
    }
 else {
      str.append("params=(");
      Iterator i=m_params.keySet().iterator();
      while (i.hasNext()) {
        Object o=i.next();
        str.append(o);
        try {
          String param[]=(String[])m_params.get(o);
          if (!"&?&".equals(param[0])) {
            str.append("=");
            str.append(param[0]);
          }
        }
 catch (        Exception e) {
          if (DEBUG)           System.err.println("Exception! o=" + o + "  Exception is "+ e);
        }
        if (i.hasNext())         str.append(",");
      }
      str.append(");");
    }
  }
  if (m_timeout >= 0) {
    str.append("timeout=(");
    str.append(m_timeout);
    str.append(");");
  }
  if (m_publish) {
    str.append("publish-clear;");
  }
  if (m_schemes != null) {
    if (m_schemes.size() == 0) {
      str.append("schemes;");
    }
 else {
      str.append("schemes=(");
      Iterator i=m_schemes.iterator();
      while (i.hasNext()) {
        str.append(i.next());
        if (i.hasNext())         str.append(",");
      }
      str.append(");");
    }
  }
  if (m_ports != null) {
    if (m_ports.size() == 0) {
      str.append("ports;");
    }
 else {
      str.append("ports=(");
      Iterator i=m_ports.iterator();
      while (i.hasNext()) {
        str.append(i.next());
        if (i.hasNext())         str.append(",");
      }
      str.append(");");
    }
  }
  if (m_parseError) {
    str.append("parse-error;");
  }
  return str.toString();
}
