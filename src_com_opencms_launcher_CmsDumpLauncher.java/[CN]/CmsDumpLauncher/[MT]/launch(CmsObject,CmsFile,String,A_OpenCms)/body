{
  byte[] result=null;
  CmsElementCache elementCache=null;
  boolean elementCacheEnabled=cms.getRequestContext().isElementCacheEnabled();
  String uri=cms.getRequestContext().getUri();
  CmsUri cmsUri=null;
  String templateClass;
  if (file.getResourceName().equals("explorer_files.html")) {
    templateClass="com.opencms.workplace.CmsNewExplorerFileList";
  }
 else {
    templateClass="com.opencms.template.CmsDumpTemplate";
  }
  if (elementCacheEnabled) {
    elementCache=cms.getRequestContext().getElementCache();
    CmsUriDescriptor uriDesc=new CmsUriDescriptor(uri);
    CmsUriLocator uriLoc=elementCache.getUriLocator();
    cmsUri=uriLoc.get(uriDesc);
    if (cmsUri == null) {
      CmsElementDescriptor elemDesc=new CmsElementDescriptor(templateClass,cms.readAbsolutePath(file));
      String readAccessGroup=cms.getReadingpermittedGroup(cms.getRequestContext().currentProject().getId(),cms.readAbsolutePath(file));
      cmsUri=new CmsUri(elemDesc,readAccessGroup,(CmsElementDefinitionCollection)null,Utils.isHttpsResource(cms,file));
      elementCache.getUriLocator().put(uriDesc,cmsUri);
    }
  }
  Hashtable newParameters=new Hashtable();
  I_CmsRequest req=cms.getRequestContext().getRequest();
  String datafor=req.getParameter("datafor");
  if (datafor == null) {
    datafor="";
  }
 else {
    if (!"".equals(datafor)) {
      datafor=datafor + ".";
    }
  }
  Enumeration urlParameterNames=req.getParameterNames();
  while (urlParameterNames.hasMoreElements()) {
    String pname=(String)urlParameterNames.nextElement();
    String paramValue=req.getParameter(pname);
    if (paramValue != null) {
      if ((!"datafor".equals(pname)) && (!"_clearcache".equals(pname))) {
        newParameters.put(datafor + pname,paramValue);
      }
    }
 else {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INFO,getClassName() + "Empty URL parameter \"" + pname+ "\" found.");
      }
    }
  }
  String mimetype=cms.getRequestContext().getResponse().getContentType();
  if ((null == mimetype) || (!mimetype.startsWith("text"))) {
    cms.getRequestContext().getResponse().setHeader("Cache-Control","max-age=60");
    cms.getRequestContext().getResponse().setHeader("Pragma","no-pragma");
  }
  if (elementCacheEnabled) {
    if (cms.getMode() == I_CmsConstants.C_MODUS_ONLINE) {
      String scheme=((HttpServletRequest)cms.getRequestContext().getRequest().getOriginalRequest()).getScheme();
      boolean httpsReq="https".equalsIgnoreCase(scheme);
      if (cmsUri.isHttpsResource() != httpsReq) {
        if (httpsReq) {
        }
 else         if (CmsObject.getStaticExportProperties().isStaticExportEnabled() || "false_ssl".equals(CmsObject.getStaticExportProperties().getStaticExportEnabledValue())) {
          throw new CmsException(" " + cms.readAbsolutePath(file) + " needs a https request",CmsException.C_HTTPS_REQUEST_ERROR);
        }
      }
    }
    result=elementCache.callCanonicalRoot(cms,newParameters);
  }
 else {
    Object tmpl=getTemplateClass(cms,templateClass);
    if (!(tmpl instanceof com.opencms.template.I_CmsDumpTemplate)) {
      String errorMessage="Error in " + cms.readAbsolutePath(file) + ": "+ templateClass+ " is not a Cms dump template class.";
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,getClassName() + errorMessage);
      }
      throw new CmsException(errorMessage,CmsException.C_XML_WRONG_TEMPLATE_CLASS);
    }
    try {
      result=this.callCanonicalRoot(cms,(com.opencms.template.I_CmsTemplate)tmpl,file,newParameters);
    }
 catch (    CmsException e) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,getClassName() + "There were errors while building output for template file \"" + cms.readAbsolutePath(file)+ "\" and template class \""+ templateClass+ "\". See above for details.");
      }
      throw e;
    }
  }
  if (result != null) {
    writeBytesToResponse(cms,result);
  }
}
