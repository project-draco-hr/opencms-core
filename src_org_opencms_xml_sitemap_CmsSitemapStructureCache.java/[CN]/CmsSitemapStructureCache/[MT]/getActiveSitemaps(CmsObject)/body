{
  CmsObject adminCms=internalCreateCmsObject(cms);
  Map<String,String> active=m_active;
  if (active != null) {
    return active;
  }
  long t=System.currentTimeMillis();
  m_active=Collections.synchronizedMap(new HashMap<String,String>());
  active=m_active;
  register("sitemapActive",m_active);
  m_byId.clear();
  m_byUri.clear();
  m_pathSet.clear();
  m_byStructureId.clear();
  List<CmsResource> entryPoints=internalGetEntryPointResources(adminCms);
  for (  CmsResource entryPoint : entryPoints) {
    String sitemapPath=internalReadSitemapProperty(adminCms,entryPoint);
    CmsFile sitemapFile=internalReadSitemapFile(adminCms,entryPoint,sitemapPath);
    CmsXmlSitemap xmlSitemap=internalUnmarshalSitemapFile(adminCms,sitemapFile);
    for (    Locale locale : xmlSitemap.getLocales()) {
      active.put(locale.toString() + entryPoint.getRootPath(),sitemapFile.getRootPath());
      CmsSitemapBean locSitemap=internalGetSitemap(adminCms,xmlSitemap,locale);
      CmsInternalSitemapEntry startEntry=locSitemap.getSiteEntries().get(0);
      if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(startEntry.getName())) {
        startEntry.removeName();
      }
      Map<String,String> properties=new HashMap<String,String>();
      visitEntry(adminCms,active,startEntry,locale,entryPoint.getRootPath(),true,0,properties);
    }
  }
  LOG.debug(Messages.get().getBundle().key(Messages.LOG_DEBUG_NAMED_CACHE_SITEMAP_2,getName(),new Long(System.currentTimeMillis() - t)));
  return active;
}
