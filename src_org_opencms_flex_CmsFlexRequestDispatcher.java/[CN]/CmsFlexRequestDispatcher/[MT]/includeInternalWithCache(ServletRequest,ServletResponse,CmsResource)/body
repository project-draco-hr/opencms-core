{
  CmsFlexController controller=CmsFlexController.getController(req);
  CmsObject cms=controller.getCmsObject();
  CmsFlexCache cache=controller.getCmsCache();
  CmsFlexRequest f_req=controller.getCurrentRequest();
  CmsFlexResponse f_res=controller.getCurrentResponse();
  if (f_req.containsIncludeCall(m_vfsTarget)) {
    throw new ServletException(Messages.get().key(Messages.ERR_FLEXREQUESTDISPATCHER_INCLUSION_LOOP_1,m_vfsTarget));
  }
 else {
    f_req.addInlucdeCall(m_vfsTarget);
  }
  if (f_res.isSuspended()) {
    f_res.setCmsIncludeMode(false);
    f_req.removeIncludeCall(m_vfsTarget);
    return;
  }
  f_res.setCmsIncludeMode(true);
  CmsFlexRequest w_req=new CmsFlexRequest((HttpServletRequest)req,controller,m_vfsTarget);
  CmsFlexResponse w_res=new CmsFlexResponse((HttpServletResponse)res,controller);
  controller.push(w_req,w_res);
  try {
    CmsFlexCacheEntry entry=null;
    if (f_req.isCacheable()) {
      entry=cache.get(w_req.getCmsCacheKey());
      if (entry != null) {
        try {
          if (LOG.isDebugEnabled()) {
            LOG.debug(Messages.get().key(Messages.LOG_FLEXREQUESTDISPATCHER_LOADING_RESOURCE_FROM_CACHE_1,m_vfsTarget));
          }
          controller.updateDates(entry.getDateLastModified(),entry.getDateExpires());
          entry.service(w_req,w_res);
        }
 catch (        CmsException e) {
          Throwable t;
          if (e.getCause() != null) {
            t=e.getCause();
          }
 else {
            t=e;
          }
          t=controller.setThrowable(e,m_vfsTarget);
          throw new ServletException(Messages.get().key(Messages.ERR_FLEXREQUESTDISPATCHER_ERROR_LOADING_RESOURCE_FROM_CACHE_1,m_vfsTarget),t);
        }
      }
 else {
        CmsFlexCacheKey res_key=cache.getKey(CmsFlexCacheKey.getKeyName(m_vfsTarget,w_req.isOnline()));
        if (res_key != null) {
          w_res.setCmsCacheKey(res_key);
        }
 else {
          String cacheProperty=null;
          try {
            cacheProperty=cms.readPropertyObject(m_vfsTarget,CmsPropertyDefinition.PROPERTY_CACHE,true).getValue();
            if (cacheProperty == null) {
              cacheProperty=OpenCms.getResourceManager().getResourceType(resource.getTypeId()).getCachePropertyDefault();
            }
            cache.putKey(w_res.setCmsCacheKey(cms.getRequestContext().addSiteRoot(m_vfsTarget),cacheProperty,f_req.isOnline()));
          }
 catch (          CmsFlexCacheException e) {
            if (LOG.isWarnEnabled()) {
              LOG.warn(Messages.get().key(Messages.LOG_FLEXREQUESTDISPATCHER_INVALID_CACHE_KEY_2,m_vfsTarget,cacheProperty));
            }
            cache.putKey(w_res.getCmsCacheKey());
          }
catch (          CmsException e) {
            controller.setThrowable(e,m_vfsTarget);
            throw new ServletException(Messages.get().key(Messages.ERR_FLEXREQUESTDISPATCHER_ERROR_LOADING_CACHE_PROPERTIES_1,m_vfsTarget),e);
          }
          if (LOG.isDebugEnabled()) {
            LOG.debug(Messages.get().key(Messages.LOG_FLEXREQUESTDISPATCHER_ADDING_CACHE_PROPERTIES_2,m_vfsTarget,cacheProperty));
          }
        }
      }
    }
    if (entry == null) {
      I_CmsResourceLoader loader=null;
      String variation=null;
      if (w_req.isCacheable()) {
        variation=w_res.getCmsCacheKey().matchRequestKey(w_req.getCmsCacheKey());
      }
      w_res.setCmsCachingRequired(!controller.isForwardMode() && (variation != null));
      try {
        if (resource == null) {
          resource=cms.readResource(m_vfsTarget);
        }
        if (LOG.isDebugEnabled()) {
          LOG.debug(Messages.get().key(Messages.LOG_FLEXREQUESTDISPATCHER_LOADING_RESOURCE_TYPE_1,new Integer(resource.getTypeId())));
        }
        loader=OpenCms.getResourceManager().getLoader(resource);
      }
 catch (      ClassCastException e) {
        controller.setThrowable(e,m_vfsTarget);
        throw new ServletException(Messages.get().key(Messages.ERR_FLEXREQUESTDISPATCHER_CLASSCAST_EXCEPTION_1,m_vfsTarget),e);
      }
catch (      CmsException e) {
        controller.setThrowable(e,m_vfsTarget);
        throw new ServletException(Messages.get().key(Messages.ERR_FLEXREQUESTDISPATCHER_ERROR_READING_RESOURCE_1,m_vfsTarget),e);
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().key(Messages.LOG_FLEXREQUESTDISPATCHER_INCLUDE_RESOURCE_1,m_vfsTarget));
      }
      try {
        loader.service(cms,resource,w_req,w_res);
      }
 catch (      CmsException e) {
        controller.setThrowable(e,m_vfsTarget);
        throw new ServletException(e);
      }
      entry=w_res.processCacheEntry();
      if ((entry != null) && (variation != null) && w_req.isCacheable()) {
        if (w_res.getCmsCacheKey().getTimeout() > 0) {
          entry.setDateLastModifiedToPreviousTimeout(w_res.getCmsCacheKey().getTimeout());
          entry.setDateExpiresToNextTimeout(w_res.getCmsCacheKey().getTimeout());
          controller.updateDates(entry.getDateLastModified(),entry.getDateExpires());
        }
 else {
          entry.setDateLastModified(controller.getDateLastModified());
          entry.setDateExpires(controller.getDateExpires());
        }
        cache.put(w_res.getCmsCacheKey(),entry,variation);
      }
 else {
        controller.updateDates(-1,controller.getDateExpires());
      }
    }
    if (f_res.hasIncludeList()) {
      java.util.Map headers=w_res.getHeaders();
      byte[] result=w_res.getWriterBytes();
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().key(Messages.LOG_FLEXREQUESTDISPATCHER_RESULT_1,new String(result)));
      }
      CmsFlexResponse.processHeaders(headers,f_res);
      f_res.addToIncludeResults(result);
      result=null;
    }
  }
  finally {
    f_res.setCmsIncludeMode(false);
    f_req.removeIncludeCall(m_vfsTarget);
    controller.pop();
  }
}
