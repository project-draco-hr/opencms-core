{
  if (DEBUG > 0) {
    System.err.println("FlexDispatcher: Include called with target=" + m_vfsTarget + " (ext_target="+ m_extTarget+ ")");
  }
  CmsFlexController controller=(CmsFlexController)req.getAttribute(CmsFlexController.ATTRIBUTE_NAME);
  CmsObject cms=controller.getCmsObject();
  CmsResource resource=null;
  if ((m_extTarget == null) && (controller != null)) {
    try {
      resource=cms.readFileHeader(m_vfsTarget);
    }
 catch (    CmsException e) {
      if (e.getType() == CmsException.C_NOT_FOUND) {
        m_extTarget=m_vfsTarget;
      }
    }
  }
  if ((m_extTarget != null) || (controller == null)) {
    includeExternal(req,res);
    return;
  }
  CmsFlexCache cache=controller.getCmsCache();
  CmsFlexRequest f_req=controller.getCurrentRequest();
  CmsFlexResponse f_res=controller.getCurrentResponse();
  if (f_req.containsIncludeCall(m_vfsTarget)) {
    throw new ServletException("FlexDispatcher: Dectected inclusion loop for target " + m_vfsTarget);
  }
 else {
    f_req.addInlucdeCall(m_vfsTarget);
  }
  if (f_res.isSuspended()) {
    return;
  }
  f_res.setCmsIncludeMode(true);
  CmsFlexRequest w_req=new CmsFlexRequest((HttpServletRequest)req,controller,m_vfsTarget);
  CmsFlexResponse w_res=new CmsFlexResponse((HttpServletResponse)res,controller);
  controller.pushRequest(w_req);
  controller.pushResponse(w_res);
  CmsFlexCacheEntry entry=null;
  if (f_req.isCacheable()) {
    entry=cache.get(w_req.getCmsCacheKey());
    if (entry != null) {
      try {
        if (DEBUG > 0) {
          System.err.println("FlexDispatcher: Loading file from cache for " + m_vfsTarget);
        }
        entry.service(w_req,w_res);
      }
 catch (      com.opencms.core.CmsException e) {
        throw new ServletException("FlexDispatcher: Error while loading file from cache for " + m_vfsTarget + "\n"+ e,e);
      }
    }
 else {
      CmsFlexCacheKey res_key=cache.getKey(CmsFlexCacheKey.getKeyName(m_vfsTarget,w_req.isOnline(),w_req.isWorkplace()));
      if (res_key != null) {
        w_res.setCmsCacheKey(res_key);
      }
 else {
        String cacheProperty=null;
        try {
          cacheProperty=cms.readProperty(m_vfsTarget,org.opencms.loader.I_CmsResourceLoader.C_LOADER_CACHEPROPERTY);
          cache.putKey(w_res.setCmsCacheKey(cms.getRequestContext().addSiteRoot(m_vfsTarget),cacheProperty,f_req.isOnline(),f_req.isWorkplace()));
        }
 catch (        com.opencms.core.CmsException e) {
          if (e.getType() == CmsException.C_FLEX_CACHE) {
            if (OpenCms.getLog(this).isWarnEnabled()) {
              OpenCms.getLog(this).warn("Invalid FlexCache key for external resource \"" + m_vfsTarget + "\": "+ cacheProperty);
            }
            cache.putKey(w_res.getCmsCacheKey());
          }
 else {
            throw new ServletException("FlexDispatcher: Error while loading cache properties for " + m_vfsTarget + "\n"+ e,e);
          }
        }
        if (DEBUG > 1) {
          System.err.println("FlexDispatcher: Cache properties for file " + m_vfsTarget + " are: "+ cacheProperty);
        }
      }
    }
  }
  if (entry == null) {
    org.opencms.loader.I_CmsResourceLoader loader=null;
    String variation=null;
    if (w_req.isCacheable()) {
      variation=w_res.getCmsCacheKey().matchRequestKey(w_req.getCmsCacheKey());
    }
    w_res.setCmsCachingRequired(variation != null);
    try {
      if (resource == null) {
        resource=cms.readFileHeader(m_vfsTarget);
      }
      int type=resource.getLoaderId();
      if (DEBUG > 0) {
        System.err.println("FlexDispatcher: Loading resource type " + type);
      }
      loader=OpenCms.getLoaderManager().getLoader(type);
    }
 catch (    java.lang.ClassCastException e) {
      throw new ServletException("FlexDispatcher: CmsResourceLoader interface not implemented for cms resource " + m_vfsTarget + "\n"+ e,e);
    }
catch (    com.opencms.core.CmsException e) {
      throw new ServletException("FlexDispatcher: Error while reading header for cms resource " + m_vfsTarget + "\n"+ e,e);
    }
    if (DEBUG > 0) {
      System.err.println("FlexDispatcher: Internal call, loading file using loader.service() for " + m_vfsTarget);
    }
    loader.service(cms,resource,w_req,w_res);
    entry=w_res.processCacheEntry();
    if ((entry != null) && (variation != null) && w_req.isCacheable()) {
      cache.put(w_res.getCmsCacheKey(),entry,variation);
    }
  }
  if (f_res.hasIncludeList()) {
    java.util.Map headers=w_res.getHeaders();
    byte[] result=w_res.getWriterBytes();
    if (DEBUG > 3) {
      System.err.println("Non-display include call - Result of include is:\n" + new String(result));
    }
    CmsFlexResponse.processHeaders(headers,f_res);
    f_res.addToIncludeResults(result);
    result=null;
  }
  f_res.setCmsIncludeMode(false);
  f_req.removeIncludeCall(m_vfsTarget);
  controller.popRequest();
  controller.popResponse();
}
