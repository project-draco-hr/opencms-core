{
  List files=getSubResources(currentProject,orgFolder,false);
  files=getUndeletedResources(files);
  if (files.size() == 0) {
    List folders=getSubResources(currentProject,orgFolder,true);
    folders=getUndeletedResources(folders);
    if (folders.size() == 0) {
      Connection conn=null;
      PreparedStatement stmt=null;
      try {
        conn=m_sqlManager.getConnection(currentProject);
        stmt=m_sqlManager.getPreparedStatement(conn,currentProject,"C_RESOURCES_REMOVE");
        stmt.setInt(1,com.opencms.core.I_CmsConstants.C_STATE_DELETED);
        stmt.setString(2,CmsUUID.getNullUUID().toString());
        stmt.setString(3,orgFolder.getResourceId().toString());
        stmt.executeUpdate();
      }
 catch (      SQLException e) {
        throw m_sqlManager.getCmsException(this,null,CmsException.C_SQL_ERROR,e,false);
      }
 finally {
        m_sqlManager.closeAll(conn,stmt,null);
      }
    }
 else {
      String errorResNames="";
      Iterator i=folders.iterator();
      while (i.hasNext()) {
        CmsResource errorRes=(CmsResource)i.next();
        errorResNames+="[" + errorRes.getName() + "]";
      }
      throw new CmsException("[" + this.getClass().getName() + "] "+ orgFolder.getName()+ errorResNames,CmsException.C_NOT_EMPTY);
    }
  }
 else {
    String errorResNames="";
    Iterator i=files.iterator();
    while (i.hasNext()) {
      CmsResource errorRes=(CmsResource)i.next();
      errorResNames+="[" + errorRes.getName() + "]";
    }
    throw new CmsException("[" + this.getClass().getName() + "] "+ orgFolder.getName()+ errorResNames,CmsException.C_NOT_EMPTY);
  }
}
