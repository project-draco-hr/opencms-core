{
  CmsUUID newStructureId=null;
  Connection conn=null;
  PreparedStatement stmt=null;
  String resourcePath=CmsFileUtil.removeTrailingSeparator(resource.getRootPath());
  if (resourcePath.length() > CmsDriverManager.MAX_VFS_RESOURCE_PATH_LENGTH) {
    throw new CmsDataAccessException(Messages.get().container(Messages.ERR_RESOURCENAME_TOO_LONG_2,resourcePath,new Integer(CmsDriverManager.MAX_VFS_RESOURCE_PATH_LENGTH)));
  }
  if (!resource.getRootPath().equals("/")) {
    String parentFolderName=CmsResource.getParentFolder(resource.getRootPath());
    CmsFolder parentFolder=m_driverManager.getVfsDriver(dbc).readFolder(dbc,projectId,parentFolderName);
    if (parentFolder.getState().isDeleted()) {
      throw new CmsDbEntryNotFoundException(Messages.get().container(Messages.ERR_PARENT_FOLDER_DELETED_1,resource.getRootPath()));
    }
  }
  internalValidateResourceLength(resource);
  CmsResourceState newState;
  long dateModified;
  long dateCreated;
  long dateContent=System.currentTimeMillis();
  if (projectId.equals(CmsProject.ONLINE_PROJECT_ID)) {
    newState=CmsResource.STATE_UNCHANGED;
    dateCreated=resource.getDateCreated();
    dateModified=resource.getDateLastModified();
  }
 else {
    newState=CmsResource.STATE_NEW;
    if (resource.isTouched()) {
      dateCreated=resource.getDateCreated();
      dateModified=resource.getDateLastModified();
    }
 else {
      dateCreated=System.currentTimeMillis();
      dateModified=dateCreated;
    }
  }
  newStructureId=resource.getStructureId();
  try {
    CmsResource existingResource=m_driverManager.getVfsDriver(dbc).readResource(dbc,dbc.getProjectId().isNullUUID() ? projectId : dbc.getProjectId(),resourcePath,true);
    if (existingResource.getState().isDeleted()) {
      newStructureId=existingResource.getStructureId();
      newState=CmsResource.STATE_CHANGED;
      List modifiedResources=m_driverManager.getVfsDriver(dbc).readSiblings(dbc,projectId,existingResource,false);
      int propertyDeleteOption=(existingResource.getSiblingCount() > 1) ? CmsProperty.DELETE_OPTION_DELETE_STRUCTURE_VALUES : CmsProperty.DELETE_OPTION_DELETE_STRUCTURE_AND_RESOURCE_VALUES;
      deletePropertyObjects(dbc,projectId,existingResource,propertyDeleteOption);
      removeFile(dbc,projectId,existingResource);
      OpenCms.fireCmsEvent(new CmsEvent(I_CmsEventListener.EVENT_RESOURCES_MODIFIED,Collections.<String,Object>singletonMap(I_CmsEventListener.KEY_RESOURCES,modifiedResources)));
      OpenCms.fireCmsEvent(new CmsEvent(I_CmsEventListener.EVENT_RESOURCE_AND_PROPERTIES_MODIFIED,Collections.<String,Object>singletonMap(I_CmsEventListener.KEY_RESOURCE,existingResource)));
    }
 else {
      throw new CmsVfsResourceAlreadyExistsException(Messages.get().container(Messages.ERR_RESOURCE_WITH_NAME_ALREADY_EXISTS_1,dbc.removeSiteRoot(resource.getRootPath())));
    }
  }
 catch (  CmsVfsResourceNotFoundException e) {
  }
  try {
    String parentId=internalReadParentId(dbc,projectId,resourcePath);
    int lastVersion=m_driverManager.getHistoryDriver(dbc).readLastVersion(dbc,newStructureId);
    int newStrVersion=0;
    int newResVersion=0;
    if (lastVersion > 0) {
      I_CmsHistoryResource histRes=m_driverManager.getHistoryDriver(dbc).readResource(dbc,newStructureId,lastVersion);
      newStrVersion=histRes.getStructureVersion();
      newResVersion=histRes.getResourceVersion();
    }
    conn=m_sqlManager.getConnection(dbc);
    stmt=m_sqlManager.getPreparedStatement(conn,projectId,"C_STRUCTURE_WRITE");
    stmt.setString(1,newStructureId.toString());
    stmt.setString(2,resource.getResourceId().toString());
    stmt.setString(3,resourcePath);
    stmt.setInt(4,newState.getState());
    stmt.setLong(5,resource.getDateReleased());
    stmt.setLong(6,resource.getDateExpired());
    stmt.setString(7,parentId);
    stmt.setInt(8,newStrVersion);
    stmt.executeUpdate();
    m_sqlManager.closeAll(dbc,null,stmt,null);
    if (!validateResourceIdExists(dbc,projectId,resource.getResourceId())) {
      try {
        stmt=m_sqlManager.getPreparedStatement(conn,projectId,"C_RESOURCES_WRITE");
        stmt.setString(1,resource.getResourceId().toString());
        stmt.setInt(2,resource.getTypeId());
        stmt.setInt(3,resource.getFlags());
        stmt.setLong(4,dateCreated);
        stmt.setString(5,resource.getUserCreated().toString());
        stmt.setLong(6,dateModified);
        stmt.setString(7,resource.getUserLastModified().toString());
        stmt.setInt(8,newState.getState());
        stmt.setInt(9,resource.getLength());
        stmt.setLong(10,dateContent);
        stmt.setString(11,projectId.toString());
        stmt.setInt(12,1);
        stmt.setInt(13,newResVersion);
        stmt.executeUpdate();
      }
  finally {
        m_sqlManager.closeAll(dbc,null,stmt,null);
      }
      if (resource.isFile() && (content != null)) {
        createContent(dbc,projectId,resource.getResourceId(),content);
      }
    }
 else {
      if ((content != null) || !resource.getState().isKeep()) {
        CmsUUID projLastMod=projectId;
        CmsResourceState state=CmsResource.STATE_CHANGED;
        if (projectId.equals(CmsProject.ONLINE_PROJECT_ID)) {
          projLastMod=resource.getProjectLastModified();
          state=CmsResource.STATE_UNCHANGED;
        }
        stmt=m_sqlManager.getPreparedStatement(conn,projectId,"C_RESOURCES_UPDATE_RESOURCES");
        stmt.setInt(1,resource.getTypeId());
        stmt.setInt(2,resource.getFlags());
        stmt.setLong(3,dateModified);
        stmt.setString(4,resource.getUserLastModified().toString());
        stmt.setInt(5,state.getState());
        stmt.setInt(6,resource.getLength());
        stmt.setLong(7,resource.getDateContent());
        stmt.setString(8,projLastMod.toString());
        stmt.setInt(9,countSiblings(dbc,projectId,resource.getResourceId()));
        stmt.setString(10,resource.getResourceId().toString());
        stmt.executeUpdate();
        m_sqlManager.closeAll(dbc,null,stmt,null);
      }
      if (resource.isFile()) {
        if (content != null) {
          writeContent(dbc,resource.getResourceId(),content);
        }
 else         if (resource.getState().isKeep()) {
          stmt=m_sqlManager.getPreparedStatement(conn,projectId,"C_RESOURCES_UPDATE_SIBLING_COUNT");
          stmt.setInt(1,countSiblings(dbc,projectId,resource.getResourceId()));
          stmt.setString(2,resource.getResourceId().toString());
          stmt.executeUpdate();
          m_sqlManager.closeAll(dbc,null,stmt,null);
          stmt=m_sqlManager.getPreparedStatement(conn,projectId,"C_RESOURCES_UPDATE_FLAGS");
          stmt.setInt(1,resource.getFlags());
          stmt.setString(2,resource.getResourceId().toString());
          stmt.executeUpdate();
          m_sqlManager.closeAll(dbc,null,stmt,null);
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new CmsDbSqlException(Messages.get().container(Messages.ERR_GENERIC_SQL_1,CmsDbSqlException.getErrorQuery(stmt)),e);
  }
 finally {
    m_sqlManager.closeAll(dbc,conn,stmt,null);
  }
  repairBrokenRelations(dbc,projectId,resource.getStructureId(),resource.getRootPath());
  return readResource(dbc,projectId,newStructureId,false);
}
