{
  List result=new ArrayList();
  int projectId=currentProject.getId();
  String resourceTypeClause;
  if (getFolders && getFiles) {
    resourceTypeClause=null;
  }
 else   if (getFolders) {
    resourceTypeClause=m_sqlManager.readQuery(projectId,"C_RESOURCES_GET_SUBRESOURCES_GET_FOLDERS");
  }
 else {
    resourceTypeClause=m_sqlManager.readQuery(projectId,"C_RESOURCES_GET_SUBRESOURCES_GET_FILES");
  }
  StringBuffer query=new StringBuffer();
  query.append(m_sqlManager.readQuery(projectId,"C_RESOURCES_GET_SUBRESOURCES"));
  if (resourceTypeClause != null) {
    query.append(' ');
    query.append(resourceTypeClause);
  }
  String typeColumn=m_sqlManager.readQuery("C_RESOURCES_RESOURCE_TYPE");
  Connection conn=null;
  PreparedStatement stmt=null;
  ResultSet res=null;
  try {
    conn=m_sqlManager.getConnection(dbc,currentProject.getId());
    stmt=m_sqlManager.getPreparedStatementForSql(conn,query.toString());
    stmt.setString(1,resource.getStructureId().toString());
    res=stmt.executeQuery();
    while (res.next()) {
      int type=res.getInt(typeColumn);
      if (CmsFolder.isFolderType(type)) {
        result.add(createFolder(res,projectId,false));
      }
 else {
        result.add(createFile(res,projectId,false));
      }
    }
  }
 catch (  SQLException e) {
    throw new CmsDbSqlException(Messages.get().container(Messages.ERR_GENERIC_SQL_1,CmsDbSqlException.getErrorQuery(stmt)),e);
  }
 finally {
    m_sqlManager.closeAll(dbc,conn,stmt,res);
  }
  Collections.sort(result,CmsResource.COMPARE_ROOT_PATH_IGNORE_CASE_FOLDERS_FIRST);
  return result;
}
