{
  CmsUUID projectId=((dbc.getProjectId() == null) || dbc.getProjectId().isNullUUID()) ? project.getUuid() : dbc.getProjectId();
  CmsPropertyDefinition propertyDefinition=null;
  try {
    propertyDefinition=readPropertyDefinition(dbc,property.getName(),projectId);
  }
 catch (  CmsDbEntryNotFoundException e) {
    if (property.autoCreatePropertyDefinition()) {
      propertyDefinition=createPropertyDefinition(dbc,projectId,property.getName(),CmsPropertyDefinition.TYPE_NORMAL);
      try {
        readPropertyDefinition(dbc,property.getName(),CmsProject.ONLINE_PROJECT_ID);
      }
 catch (      CmsDataAccessException e1) {
        createPropertyDefinition(dbc,CmsProject.ONLINE_PROJECT_ID,property.getName(),CmsPropertyDefinition.TYPE_NORMAL);
      }
      try {
        m_driverManager.getHistoryDriver(dbc).readPropertyDefinition(dbc,property.getName());
      }
 catch (      CmsDataAccessException e1) {
        m_driverManager.getHistoryDriver(dbc).createPropertyDefinition(dbc,property.getName(),CmsPropertyDefinition.TYPE_NORMAL);
      }
    }
 else {
      throw new CmsDbEntryNotFoundException(Messages.get().container(Messages.ERR_NO_PROPERTYDEF_WITH_NAME_1,property.getName()));
    }
  }
  PreparedStatement stmt=null;
  Connection conn=null;
  try {
    CmsProperty existingProperty=readPropertyObject(dbc,propertyDefinition.getName(),project,resource);
    if (existingProperty.isIdentical(property)) {
      return;
    }
    conn=m_sqlManager.getConnection(dbc);
    for (int i=0; i < 2; i++) {
      int mappingType=-1;
      String value=null;
      CmsUUID id=null;
      boolean existsPropertyValue=false;
      boolean deletePropertyValue=false;
      if (i == 0) {
        if ((existingProperty.getStructureValue() != null) && property.isDeleteStructureValue()) {
          deletePropertyValue=true;
        }
 else {
          value=property.getStructureValue();
          if (CmsStringUtil.isEmptyOrWhitespaceOnly(value)) {
            continue;
          }
        }
        mappingType=CmsProperty.STRUCTURE_RECORD_MAPPING;
        id=resource.getStructureId();
        existsPropertyValue=existingProperty.getStructureValue() != null;
      }
 else {
        if ((existingProperty.getResourceValue() != null) && property.isDeleteResourceValue()) {
          deletePropertyValue=true;
        }
 else {
          value=property.getResourceValue();
          if (CmsStringUtil.isEmptyOrWhitespaceOnly(value)) {
            break;
          }
        }
        mappingType=CmsProperty.RESOURCE_RECORD_MAPPING;
        id=resource.getResourceId();
        existsPropertyValue=existingProperty.getResourceValue() != null;
      }
      try {
        if (!deletePropertyValue) {
          if (existsPropertyValue) {
            stmt=m_sqlManager.getPreparedStatement(conn,projectId,"C_PROPERTIES_UPDATE");
            stmt.setString(1,m_sqlManager.validateEmpty(value));
            stmt.setString(2,id.toString());
            stmt.setInt(3,mappingType);
            stmt.setString(4,propertyDefinition.getId().toString());
          }
 else {
            stmt=m_sqlManager.getPreparedStatement(conn,projectId,"C_PROPERTIES_CREATE");
            stmt.setString(1,new CmsUUID().toString());
            stmt.setString(2,propertyDefinition.getId().toString());
            stmt.setString(3,id.toString());
            stmt.setInt(4,mappingType);
            stmt.setString(5,m_sqlManager.validateEmpty(value));
          }
        }
 else {
          stmt=m_sqlManager.getPreparedStatement(conn,projectId,"C_PROPERTIES_DELETE");
          stmt.setString(1,propertyDefinition.getId().toString());
          stmt.setString(2,id.toString());
          stmt.setInt(3,mappingType);
        }
        stmt.executeUpdate();
      }
  finally {
        m_sqlManager.closeAll(dbc,null,stmt,null);
      }
    }
  }
 catch (  SQLException e) {
    throw new CmsDbSqlException(Messages.get().container(Messages.ERR_GENERIC_SQL_1,CmsDbSqlException.getErrorQuery(stmt)),e);
  }
 finally {
    m_sqlManager.closeAll(dbc,conn,stmt,null);
  }
}
