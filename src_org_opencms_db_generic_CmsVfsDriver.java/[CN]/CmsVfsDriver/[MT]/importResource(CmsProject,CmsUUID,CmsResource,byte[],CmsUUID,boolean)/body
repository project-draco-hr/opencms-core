{
  Connection conn=null;
  PreparedStatement stmt=null;
  if (newResource.getResourceName().length() > I_CmsConstants.C_MAX_LENGTH_RESOURCE_NAME) {
    throw new CmsException("The resource name '" + newResource.getResourceName() + "' is too long! (max. allowed length must be <= "+ I_CmsConstants.C_MAX_LENGTH_RESOURCE_NAME+ " chars.!)",CmsException.C_BAD_NAME);
  }
  int state=0;
  CmsUUID modifiedByUserId=userId;
  if (project.getId() == I_CmsConstants.C_PROJECT_ONLINE_ID) {
    state=newResource.getState();
    modifiedByUserId=newResource.getResourceLastModifiedBy();
  }
 else {
    state=I_CmsConstants.C_STATE_NEW;
  }
  try {
    readResource(project,parentId,newResource.getResourceName());
    throw new CmsException("[" + this.getClass().getName() + "] ",CmsException.C_FILE_EXISTS);
  }
 catch (  CmsException e) {
    if (e.getType() == CmsException.C_RESOURCE_DELETED) {
      if (isFolder) {
        removeFolder(project,(CmsFolder)newResource);
      }
 else {
        removeFile(project,parentId,newResource.getResourceName());
      }
      state=I_CmsConstants.C_STATE_CHANGED;
    }
    if (e.getType() == CmsException.C_FILE_EXISTS) {
      throw e;
    }
  }
  CmsUUID newFileId=CmsUUID.getNullUUID();
  CmsUUID resourceId=new CmsUUID();
  CmsUUID structureId=new CmsUUID();
  try {
    conn=m_sqlManager.getConnection(project);
    if (!isFolder) {
      newFileId=new CmsUUID();
      try {
        createFileContent(newFileId,filecontent,0,project.getId(),false);
      }
 catch (      CmsException se) {
        if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
          A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + "] "+ se.getMessage());
        }
      }
    }
    stmt=m_sqlManager.getPreparedStatement(conn,project,"C_RESOURCES_WRITE");
    stmt.setString(1,resourceId.toString());
    stmt.setInt(2,newResource.getType());
    stmt.setInt(3,newResource.getFlags());
    stmt.setString(4,newFileId.toString());
    stmt.setInt(5,newResource.getLauncherType());
    stmt.setString(6,newResource.getLauncherClassname());
    stmt.setTimestamp(7,new Timestamp(newResource.getDateCreated()));
    stmt.setString(8,userId.toString());
    stmt.setTimestamp(9,new Timestamp(newResource.getDateLastModified()));
    stmt.setString(10,modifiedByUserId.toString());
    stmt.setInt(11,state);
    stmt.setInt(12,newResource.getLength());
    stmt.executeUpdate();
    m_sqlManager.closeAll(null,stmt,null);
    stmt=m_sqlManager.getPreparedStatement(conn,project,"C_STRUCTURE_WRITE");
    stmt.setString(1,structureId.toString());
    stmt.setString(2,parentId.toString());
    stmt.setString(3,resourceId.toString());
    stmt.setInt(4,project.getId());
    stmt.setString(5,newResource.getResourceName());
    stmt.setInt(6,newResource.getVfsLinkType());
    stmt.setInt(7,state);
    stmt.setString(8,newResource.isLockedBy().toString());
    stmt.setString(9,modifiedByUserId.toString());
    stmt.setString(10,userId.toString());
    stmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw m_sqlManager.getCmsException(this,null,CmsException.C_SQL_ERROR,e,false);
  }
 finally {
    m_sqlManager.closeAll(conn,stmt,null);
  }
  return readResource(project,parentId,newResource.getResourceName());
}
