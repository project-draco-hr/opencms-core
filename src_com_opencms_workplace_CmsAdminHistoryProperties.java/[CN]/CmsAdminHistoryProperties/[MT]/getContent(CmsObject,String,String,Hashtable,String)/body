{
  if (OpenCms.getLog(this).isDebugEnabled() && C_DEBUG) {
    OpenCms.getLog(this).debug("Getting content of element " + ((elementName == null) ? "<root>" : elementName));
    OpenCms.getLog(this).debug("Template file is: " + templateFile);
    OpenCms.getLog(this).debug("Selected template section is: " + ((templateSelector == null) ? "<default>" : templateSelector));
  }
  CmsXmlTemplateFile templateDocument=getOwnTemplateFile(cms,templateFile,elementName,parameters,templateSelector);
  CmsRegistry reg=cms.getRegistry();
  CmsRequestContext reqCont=cms.getRequestContext();
  I_CmsSession session=reqCont.getSession(true);
  String weeks=new String();
  String enableHistory=new String();
  String enableDelete=new String();
  Hashtable histproperties=reg.getSystemValues(C_REGISTRY_HISTORY);
  String step=(String)parameters.get(C_STEP);
  weeks=(String)parameters.get(C_REGISTRY_HISTORY_WEEKS);
  enableHistory=(String)parameters.get(C_REGISTRY_HISTORY_ENABLE);
  enableDelete=(String)parameters.get(C_REGISTRY_HISTORY_DELETE);
  if ((weeks == null) || ("".equals(weeks))) {
    weeks=(String)session.getValue(C_REGISTRY_HISTORY_WEEKS);
    if (weeks == null) {
      weeks=new String();
    }
  }
  if ((enableHistory == null) || ("".equals(enableHistory))) {
    enableHistory=(String)session.getValue(C_REGISTRY_HISTORY_ENABLE);
  }
  if ((enableDelete == null) || ("".equals(enableDelete))) {
    enableDelete=(String)session.getValue(C_REGISTRY_HISTORY_DELETE);
  }
  if (step == null) {
    if (session.getValue(C_STEP) == null) {
      session.removeValue(C_REGISTRY_HISTORY_WEEKS);
      session.removeValue(C_REGISTRY_HISTORY_ENABLE);
      session.removeValue(C_REGISTRY_HISTORY_DELETE);
      session.removeValue("lasturl");
      session.putValue(C_STEP,"nextstep");
      if ((weeks == null) || ("".equals(weeks))) {
        weeks=(String)histproperties.get(C_REGISTRY_HISTORY_WEEKS);
      }
      if ((enableHistory == null) || ("".equals(enableHistory))) {
        enableHistory=(String)histproperties.get(C_REGISTRY_HISTORY_ENABLE);
      }
      if ((enableDelete == null) || ("".equals(enableDelete))) {
        enableDelete=(String)histproperties.get(C_REGISTRY_HISTORY_DELETE);
      }
    }
  }
 else {
    if ("ok".equalsIgnoreCase(step)) {
      try {
        histproperties.put(C_REGISTRY_HISTORY_WEEKS,weeks);
        if ("true".equals(enableHistory)) {
          histproperties.put(C_REGISTRY_HISTORY_ENABLE,"true");
        }
 else {
          histproperties.put(C_REGISTRY_HISTORY_ENABLE,"false");
        }
        if ("true".equals(enableDelete)) {
          histproperties.put(C_REGISTRY_HISTORY_DELETE,"true");
        }
 else {
          histproperties.put(C_REGISTRY_HISTORY_DELETE,"false");
        }
        reg.setSystemValues(C_REGISTRY_HISTORY,histproperties);
        templateSelector="done";
        session.removeValue(C_REGISTRY_HISTORY_WEEKS);
        session.removeValue(C_REGISTRY_HISTORY_ENABLE);
        session.removeValue(C_REGISTRY_HISTORY_DELETE);
      }
 catch (      CmsException e) {
        session.putValue(C_REGISTRY_HISTORY_WEEKS,weeks);
        if (enableHistory != null) {
          session.putValue(C_REGISTRY_HISTORY_ENABLE,enableHistory);
        }
        if (enableDelete != null) {
          session.putValue(C_REGISTRY_HISTORY_DELETE,enableDelete);
        }
        templateSelector="errorhistproperties";
        if ("errorhistproperties".equals(templateSelector)) {
          templateDocument.setData("details","The data could not be stored in the registry:" + e.getLocalizedMessage());
        }
      }
    }
 else     if ("execute".equalsIgnoreCase(step)) {
      try {
        histproperties.put(C_REGISTRY_HISTORY_WEEKS,weeks);
        if ("true".equals(enableHistory)) {
          histproperties.put(C_REGISTRY_HISTORY_ENABLE,"true");
        }
 else {
          histproperties.put(C_REGISTRY_HISTORY_ENABLE,"false");
        }
        if ("true".equals(enableDelete)) {
          histproperties.put(C_REGISTRY_HISTORY_DELETE,"true");
        }
 else {
          histproperties.put(C_REGISTRY_HISTORY_DELETE,"false");
        }
        reg.setSystemValues(C_REGISTRY_HISTORY,histproperties);
        executeDeleting(cms,null);
      }
 catch (      CmsException e) {
        session.putValue(C_REGISTRY_HISTORY_WEEKS,weeks);
        if (enableHistory != null) {
          session.putValue(C_REGISTRY_HISTORY_ENABLE,enableHistory);
        }
        if (enableDelete != null) {
          session.putValue(C_REGISTRY_HISTORY_DELETE,enableDelete);
        }
        templateSelector="errorhistproperties";
        if ("errorhistproperties".equals(templateSelector)) {
          templateDocument.setData("details","The history could not be cleaned:" + e.getLocalizedMessage());
        }
      }
    }
 else     if ("fromerrorpage".equals(step)) {
      templateSelector="";
    }
 else     if ("cancel".equals(step)) {
      session.removeValue(C_REGISTRY_HISTORY_WEEKS);
      session.removeValue(C_REGISTRY_HISTORY_ENABLE);
      session.removeValue(C_REGISTRY_HISTORY_DELETE);
      templateSelector="done";
    }
    session.removeValue(C_STEP);
  }
  templateDocument.setData(C_REGISTRY_HISTORY_WEEKS,weeks);
  if ("true".equalsIgnoreCase(enableHistory)) {
    templateDocument.setData(C_REGISTRY_HISTORY_ENABLE,"checked");
  }
 else {
    templateDocument.setData(C_REGISTRY_HISTORY_ENABLE,"");
  }
  if ("true".equalsIgnoreCase(enableDelete)) {
    templateDocument.setData(C_REGISTRY_HISTORY_DELETE,"checked");
  }
 else {
    templateDocument.setData(C_REGISTRY_HISTORY_DELETE,"");
  }
  return startProcessing(cms,templateDocument,elementName,parameters,templateSelector);
}
