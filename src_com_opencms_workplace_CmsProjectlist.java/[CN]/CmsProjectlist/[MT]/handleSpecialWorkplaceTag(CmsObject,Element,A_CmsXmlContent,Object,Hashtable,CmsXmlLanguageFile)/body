{
  String listMethod=n.getAttribute(C_PROJECTLIST_METHOD);
  CmsXmlWpTemplateFile listdef=getProjectlistDefinitions(cms);
  System.err.println("------Projectlist: here we go!");
  Method callingMethod=null;
  Vector list=new Vector();
  try {
    callingMethod=callingObject.getClass().getMethod(listMethod,new Class[]{CmsObject.class,CmsXmlLanguageFile.class});
    list=(Vector)callingMethod.invoke(callingObject,new Object[]{cms,lang});
  }
 catch (  NoSuchMethodException exc) {
    throwException("Could not find method " + listMethod + " in calling class "+ callingObject.getClass().getName()+ " for generating projectlist content.",CmsException.C_NOT_FOUND);
  }
catch (  InvocationTargetException targetEx) {
    Throwable e=targetEx.getTargetException();
    if (!(e instanceof CmsException)) {
      throwException("User method " + listMethod + " in calling class "+ callingObject.getClass().getName()+ " throwed an exception. "+ e,CmsException.C_UNKNOWN_EXCEPTION);
    }
 else {
      throw (CmsException)e;
    }
  }
catch (  Exception exc2) {
    throwException("User method " + listMethod + " in calling class "+ callingObject.getClass().getName()+ " was found but could not be invoked. "+ exc2,CmsException.C_XML_NO_USER_METHOD);
  }
  StringBuffer result=new StringBuffer();
  String state=C_PROJECTLIST_STATE_UNLOCKED;
  String snaplock=listdef.getProcessedDataValue(C_TAG_PROJECTLIST_SNAPLOCK,callingObject,parameters);
  for (int i=0; i < list.size(); i++) {
    CmsProject project=(CmsProject)list.elementAt(i);
    System.err.println("------countLockedResources(Project " + project.getId() + " ) = "+ cms.countLockedResources(project.getId()));
    if (cms.countLockedResources(project.getId()) == 0) {
      System.err.println("------Projectlist.state= unlocked projectId=" + project.getId());
      state=C_PROJECTLIST_STATE_UNLOCKED;
    }
 else {
      System.err.println("------Projectlist.state= LOCKED projectId=" + project.getId());
      state=C_PROJECTLIST_STATE_LOCKED;
    }
    setListEntryData(cms,lang,listdef,project);
    if (state.equals(C_PROJECTLIST_STATE_UNLOCKED)) {
      listdef.setData(C_PROJECTLIST_LOCKSTATE,"");
      listdef.setData(C_PROJECTLIST_MENU,C_PROJECT_UNLOCK);
    }
 else {
      listdef.setData(C_PROJECTLIST_LOCKSTATE,snaplock);
      listdef.setData(C_PROJECTLIST_MENU,C_PROJECT_LOCK);
    }
    listdef.setData(C_PROJECTLIST_IDX,new Integer(i).toString());
    result.append(listdef.getProcessedDataValue(C_TAG_PROJECTLIST_DEFAULT,callingObject,parameters));
  }
  return result.toString();
}
