{
  try {
    final String range=parseMandatoryStringValue(pathPrefix + XML_ELEMENT_RANGE_FACET_RANGE);
    final String name=parseOptionalStringValue(pathPrefix + XML_ELEMENT_FACET_NAME);
    final String label=parseOptionalStringValue(pathPrefix + XML_ELEMENT_FACET_LABEL);
    final Integer minCount=parseOptionalIntValue(pathPrefix + XML_ELEMENT_FACET_MINCOUNT);
    final String start=parseMandatoryStringValue(pathPrefix + XML_ELEMENT_RANGE_FACET_START);
    final String end=parseMandatoryStringValue(pathPrefix + XML_ELEMENT_RANGE_FACET_END);
    final String gap=parseMandatoryStringValue(pathPrefix + XML_ELEMENT_RANGE_FACET_GAP);
    final String sother=parseOptionalStringValue(pathPrefix + XML_ELEMENT_RANGE_FACET_OTHER);
    List<I_CmsSearchConfigurationFacetRange.Other> other=null;
    if (sother != null) {
      final List<String> sothers=Arrays.asList(sother.split(","));
      other=new ArrayList<I_CmsSearchConfigurationFacetRange.Other>(sothers.size());
      for (      String so : sothers) {
        try {
          I_CmsSearchConfigurationFacetRange.Other o=I_CmsSearchConfigurationFacetRange.Other.valueOf(so);
          other.add(o);
        }
 catch (        final Exception e) {
          LOG.error(Messages.get().getBundle().key(Messages.ERR_INVALID_OTHER_OPTION_1,so),e);
        }
      }
    }
    final Boolean hardEnd=parseOptionalBooleanValue(pathPrefix + XML_ELEMENT_RANGE_FACET_HARDEND);
    final Boolean isAndFacet=parseOptionalBooleanValue(pathPrefix + XML_ELEMENT_FACET_ISANDFACET);
    final List<String> preselection=parseOptionalStringValues(pathPrefix + XML_ELEMENT_FACET_PRESELECTION);
    return new CmsSearchConfigurationFacetRange(range,start,end,gap,other,hardEnd,name,minCount,label,isAndFacet,preselection);
  }
 catch (  final Exception e) {
    LOG.error(Messages.get().getBundle().key(Messages.ERR_RANGE_FACET_MANDATORY_KEY_MISSING_1,XML_ELEMENT_RANGE_FACET_RANGE + ", " + XML_ELEMENT_RANGE_FACET_START+ ", "+ XML_ELEMENT_RANGE_FACET_END+ ", "+ XML_ELEMENT_RANGE_FACET_GAP),e);
    return null;
  }
}
