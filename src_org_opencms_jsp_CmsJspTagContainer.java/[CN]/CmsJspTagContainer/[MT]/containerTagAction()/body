{
  String containerName=getName();
  String containerType=getType();
  String width=getWidth();
  String tag=getTag();
  String tagClass=getTagClass();
  boolean detailView=m_detailView;
  ServletRequest req=pageContext.getRequest();
  CmsFlexController controller=CmsFlexController.getController(req);
  CmsObject cms=controller.getCmsObject();
  CmsResource pageResource=(CmsResource)CmsHistoryResourceHandler.getHistoryResource(req);
  if (pageResource == null) {
    pageResource=cms.readResource(cms.getRequestContext().getUri());
  }
  boolean createTag=false;
  String tagName=CmsStringUtil.isEmptyOrWhitespaceOnly(tag) ? DEFAULT_TAG_NAME : tag;
  if (!CREATE_NO_TAG.equals(tag)) {
    createTag=true;
    pageContext.getOut().print(getTagOpen(tagName,containerName,tagClass));
  }
  CmsXmlContainerPage xmlContainerPage=CmsXmlContainerPageFactory.unmarshal(cms,pageResource,req);
  CmsContainerPageBean containerPage=xmlContainerPage.getCntPage(cms,cms.getRequestContext().getLocale());
  Locale locale=containerPage.getLocale();
  int maxElements=getMaxElements(cms,pageResource,locale);
  CmsContainerBean container=containerPage.getContainers().get(containerName);
  boolean isOnline=cms.getRequestContext().getCurrentProject().isOnlineProject();
  CmsJspStandardContextBean standardContext=CmsJspStandardContextBean.getInstance(req);
  standardContext.setPage(containerPage);
  boolean isUsedAsDetailView=false;
  CmsUUID detailContentId=standardContext.getDetailContentId();
  if (m_detailView && (detailContentId != null)) {
    isUsedAsDetailView=true;
  }
  if (container == null) {
    if (!isUsedAsDetailView) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_CONTAINER_NOT_FOUND_3,cms.getSitePath(pageResource),locale,containerName));
      }
      if (!isOnline) {
        try {
          pageContext.getOut().print(getContainerDataTag(new CmsContainerBean(containerName,containerType,maxElements,null),width,isUsedAsDetailView));
        }
 catch (        JSONException e) {
          throw new JspException(e);
        }
      }
      if (createTag) {
        pageContext.getOut().print(getTagClose(tagName));
      }
      return;
    }
 else {
      container=new CmsContainerBean(containerName,getType(),maxElements,Collections.<CmsContainerElementBean>emptyList());
    }
  }
  standardContext.setContainer(container);
  if (!containerType.equals(container.getType())) {
    throw new CmsIllegalStateException(Messages.get().container(Messages.LOG_WRONG_CONTAINER_TYPE_4,new Object[]{cms.getSitePath(pageResource),locale,containerName,containerType}));
  }
  container.setMaxElements(maxElements);
  container.setWidth(getWidth());
  List<CmsContainerElementBean> allElems=new ArrayList<CmsContainerElementBean>();
  allElems.addAll(container.getElements());
  if (detailView) {
    addDetailViewToElements(cms,allElems);
  }
  if (!isOnline) {
    try {
      pageContext.getOut().print(getContainerDataTag(new CmsContainerBean(containerName,containerType,maxElements,allElems),width,isUsedAsDetailView));
    }
 catch (    JSONException e) {
      throw new JspException(e);
    }
    CmsADESessionCache sessionCache=(CmsADESessionCache)((HttpServletRequest)req).getSession().getAttribute(CmsADESessionCache.SESSION_ATTR_ADE_CACHE);
    if (sessionCache == null) {
      sessionCache=new CmsADESessionCache(cms);
      ((HttpServletRequest)req).getSession().setAttribute(CmsADESessionCache.SESSION_ATTR_ADE_CACHE,sessionCache);
    }
    for (    CmsContainerElementBean element : allElems) {
      sessionCache.setCacheContainerElement(element.editorHash(),element);
    }
  }
  int renderElems=allElems.size();
  if ((maxElements > 0) && (renderElems > maxElements)) {
    renderElems=maxElements;
  }
  for (  CmsContainerElementBean element : allElems) {
    if (renderElems < 1) {
      break;
    }
    renderElems--;
    try {
      renderContainerElement(cms,standardContext,element,locale);
    }
 catch (    Exception e) {
      if (LOG.isErrorEnabled()) {
        LOG.error(e);
      }
    }
  }
  if (createTag) {
    pageContext.getOut().print(getTagClose(tagName));
  }
}
