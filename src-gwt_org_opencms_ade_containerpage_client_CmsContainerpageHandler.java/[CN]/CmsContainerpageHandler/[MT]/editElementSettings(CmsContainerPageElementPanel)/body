{
  final String id=elementWidget.getId();
  m_controller.getElement(id,new I_CmsSimpleCallback<CmsContainerElementData>(){
    public void execute(    final CmsContainerElementData elementBean){
      Map<String,String> settings=elementBean.getSettings();
      Map<String,CmsXmlContentProperty> propertyConfig=elementBean.getSettingConfig();
      CmsTemplateContextInfo contextInfo=CmsContainerpageController.get().getData().getTemplateContextInfo();
      if (contextInfo.getCurrentContext() != null) {
        propertyConfig.put(CmsTemplateContextInfo.SETTING,contextInfo.getSettingDefinition());
      }
      if (propertyConfig.size() == 0) {
        String message=Messages.get().key(Messages.GUI_NO_SETTINGS_0);
        String title=Messages.get().key(Messages.GUI_NO_SETTINGS_TITLE_0);
        (new CmsAlertDialog(title,message)).center();
        return;
      }
      final boolean useTemplateContext=propertyConfig.containsKey(CmsTemplateContextInfo.SETTING);
      if (useTemplateContext) {
        String templateContexts=settings.get(CmsTemplateContextInfo.SETTING);
        if (templateContexts == null) {
          templateContexts=CmsStringUtil.listAsString(new ArrayList<String>(CmsContainerpageController.get().getData().getTemplateContextInfo().getContextLabels().keySet()),"|");
        }
 else         if (templateContexts.equals(CmsTemplateContextInfo.EMPTY_VALUE)) {
          templateContexts="";
        }
        settings.put(CmsTemplateContextInfo.SETTING,templateContexts);
      }
      final CmsForm form=new CmsForm(false);
      CmsListInfoBean infoBean=new CmsListInfoBean();
      infoBean.setTitle(elementBean.getTitle());
      infoBean.setSubTitle(elementBean.getSitePath());
      infoBean.setResourceType(elementBean.getResourceType());
      CmsInfoBoxFormFieldPanel formFieldPanel=new CmsInfoBoxFormFieldPanel(infoBean);
      form.setWidget(formFieldPanel);
      final boolean[] changedContext=new boolean[]{false};
      I_CmsFormSubmitHandler submitHandler=new I_CmsFormSubmitHandler(){
        /** 
 * @see org.opencms.gwt.client.ui.input.form.I_CmsFormSubmitHandler#onSubmitForm(org.opencms.gwt.client.ui.input.form.CmsForm,java.util.Map,java.util.Set)
 */
        public void onSubmitForm(        CmsForm formParam,        final Map<String,String> fieldValues,        Set<String> editedFields){
          if (CmsInheritanceContainerEditor.getInstance() != null) {
            CmsInheritanceContainerEditor.getInstance().onSettingsEdited();
          }
          if (useTemplateContext) {
            String newTemplateContexts=fieldValues.get(CmsTemplateContextInfo.SETTING);
            if ((newTemplateContexts == null) || "".equals(newTemplateContexts)) {
              fieldValues.put(CmsTemplateContextInfo.SETTING,CmsTemplateContextInfo.EMPTY_VALUE);
            }
          }
          final Map<String,String> filteredFieldValues=new HashMap<String,String>();
          for (          Map.Entry<String,String> entry : fieldValues.entrySet()) {
            String key=entry.getKey();
            String value=entry.getValue();
            if ((value != null) && (value.length() > 0)) {
              filteredFieldValues.put(key,value);
            }
          }
          m_controller.reloadElementWithSettings(elementWidget,elementBean.getClientId(),filteredFieldValues,new AsyncCallback<CmsContainerPageElementPanel>(){
            public void onFailure(            Throwable caught){
            }
            public void onSuccess(            CmsContainerPageElementPanel result){
              if (changedContext[0]) {
                CmsContainerpageController.get().handleChangeTemplateContext(result,filteredFieldValues.get(CmsTemplateContextInfo.SETTING));
              }
            }
          }
);
        }
      }
;
      CmsDialogFormHandler formHandler=new CmsDialogFormHandler();
      formHandler.setSubmitHandler(submitHandler);
      form.setFormHandler(formHandler);
      String title=Messages.get().key(Messages.GUI_PROPERTY_DIALOG_TITLE_0);
      CmsFormDialog dialog=new CmsFormDialog(title,form);
      formHandler.setDialog(dialog);
      Map<String,I_CmsFormField> formFields=CmsBasicFormField.createFields(propertyConfig.values());
      I_CmsFormField templateContextField=formFields.get(CmsTemplateContextInfo.SETTING);
      if (templateContextField != null) {
        @SuppressWarnings("unchecked") HasValueChangeHandlers<String> hasChangeHandlers=(HasValueChangeHandlers<String>)(templateContextField.getWidget());
        hasChangeHandlers.addValueChangeHandler(new ValueChangeHandler<String>(){
          public void onValueChange(          ValueChangeEvent<String> event){
            changedContext[0]=true;
          }
        }
);
      }
      for (      I_CmsFormField field : formFields.values()) {
        String fieldId=field.getId();
        String initialValue=settings.get(fieldId);
        if (initialValue == null) {
          CmsXmlContentProperty propDef=propertyConfig.get(fieldId);
          initialValue=propDef.getDefault();
        }
        form.addField(field,initialValue);
      }
      form.render();
      dialog.center();
    }
  }
);
}
