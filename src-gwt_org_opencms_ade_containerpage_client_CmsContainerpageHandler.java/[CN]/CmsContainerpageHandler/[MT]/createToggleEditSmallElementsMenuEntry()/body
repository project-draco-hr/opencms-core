{
  final CmsContainerpageController controller=CmsContainerpageController.get();
  final CmsSmallElementsHandler smallElementsHandler=controller.getSmallElementsHandler();
  final boolean isActive=smallElementsHandler.areSmallElementsEditable();
  CmsContextMenuEntryBean entryBean=new CmsContextMenuEntryBean();
  String baseMessage=Messages.get().key(Messages.GUI_EDIT_SMALL_ELEMENTS_0);
  String msgEdit=baseMessage;
  String msgDisable=baseMessage;
  String label=isActive ? msgDisable : msgEdit;
  entryBean.setLabel(label);
  entryBean.setActive(smallElementsHandler.hasSmallElements());
  entryBean.setVisible(true);
  I_CmsInputCss inputCss=I_CmsInputLayoutBundle.INSTANCE.inputCss();
  entryBean.setIconClass(isActive ? inputCss.checkBoxImageChecked() : inputCss.checkBoxImageUnchecked());
  I_CmsContextMenuCommand command=new I_CmsContextMenuCommand(){
    public void execute(    CmsUUID structureId,    I_CmsContextMenuHandler handler,    CmsContextMenuEntryBean bean){
      smallElementsHandler.setEditSmallElements(!isActive,true);
    }
    public A_CmsContextMenuItem getItemWidget(    CmsUUID structureId,    I_CmsContextMenuHandler handler,    CmsContextMenuEntryBean bean){
      return null;
    }
    public boolean hasItemWidget(){
      return false;
    }
  }
;
  CmsContextMenuEntry entry=new CmsContextMenuEntry(this,null,command);
  entry.setBean(entryBean);
  return entry;
}
