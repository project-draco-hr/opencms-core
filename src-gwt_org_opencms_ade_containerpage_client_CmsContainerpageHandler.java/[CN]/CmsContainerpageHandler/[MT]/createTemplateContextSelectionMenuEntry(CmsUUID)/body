{
  CmsContainerpageController controller=CmsContainerpageController.get();
  final CmsTemplateContextInfo info=controller.getData().getTemplateContextInfo();
  if (info.getCookieName() != null) {
    CmsContextMenuEntry parentEntry=new CmsContextMenuEntry(this,structureId,new I_CmsContextMenuCommand(){
      public void execute(      CmsUUID innerStructureId,      I_CmsContextMenuHandler handler,      CmsContextMenuEntryBean bean){
      }
      public A_CmsContextMenuItem getItemWidget(      CmsUUID innerStructureId,      I_CmsContextMenuHandler handler,      CmsContextMenuEntryBean bean){
        return null;
      }
      public boolean hasItemWidget(){
        return false;
      }
    }
);
    CmsContextMenuEntryBean parentBean=new CmsContextMenuEntryBean();
    parentBean.setLabel(org.opencms.gwt.client.Messages.get().key(org.opencms.gwt.client.Messages.GUI_TEMPLATE_CONTEXT_PARENT_0));
    parentBean.setActive(true);
    parentBean.setVisible(true);
    parentEntry.setBean(parentBean);
    Map<String,String> contextNames=info.getContextLabels();
    List<I_CmsContextMenuEntry> templateContextEntries=new ArrayList<I_CmsContextMenuEntry>();
    for (    Map.Entry<String,String> entry : contextNames.entrySet()) {
      final String key=entry.getKey();
      final String label=entry.getValue();
      CmsContextMenuEntry menuEntry=createMenuEntryForTemplateContext(info.getCookieName(),key,label,info.getSelectedContext(),this,structureId);
      templateContextEntries.add(menuEntry);
    }
    templateContextEntries.add(createMenuEntryForTemplateContext(info.getCookieName(),null,org.opencms.gwt.client.Messages.get().key(org.opencms.gwt.client.Messages.GUI_TEMPLATE_CONTEXT_NONE_0),info.getSelectedContext(),this,structureId));
    parentEntry.setSubMenu(templateContextEntries);
    return parentEntry;
  }
 else {
    return null;
  }
}
