{
  CmsObject cms=getCmsObject();
  echo("Testing the parent group mechanism");
  CmsGroup g1=cms.createGroup("g1","g1",0,null);
  CmsGroup g2=cms.createGroup("g2","g2",0,g1.getName());
  CmsGroup g3=cms.createGroup("g3","g3",0,g1.getName());
  CmsGroup g4=cms.createGroup("g4","g4",0,g2.getName());
  CmsGroup g5=cms.createGroup("g5","g5",0,g2.getName());
  CmsUser u1=cms.createUser("u1","password","u1",null);
  cms.addUserToGroup(u1.getName(),g1.getName());
  List g1Users=cms.getUsersOfGroup(g1.getName());
  assertEquals(1,g1Users.size());
  assertTrue(g1Users.contains(u1));
  List g2Users=cms.getUsersOfGroup(g2.getName());
  assertTrue(g2Users.isEmpty());
  List g3Users=cms.getUsersOfGroup(g3.getName());
  assertTrue(g3Users.isEmpty());
  List g4Users=cms.getUsersOfGroup(g4.getName());
  assertTrue(g4Users.isEmpty());
  List g5Users=cms.getUsersOfGroup(g5.getName());
  assertTrue(g5Users.isEmpty());
  List u1Groups=cms.getGroupsOfUser(u1.getName(),false);
  assertEquals(1,u1Groups.size());
  assertTrue(u1Groups.contains(g1));
  CmsUser u2=cms.createUser("u2","password","u2",null);
  cms.addUserToGroup(u2.getName(),g2.getName());
  g1Users=cms.getUsersOfGroup(g1.getName());
  assertEquals(1,g1Users.size());
  assertTrue(g1Users.contains(u1));
  g2Users=cms.getUsersOfGroup(g2.getName());
  assertEquals(1,g2Users.size());
  assertTrue(g2Users.contains(u2));
  g3Users=cms.getUsersOfGroup(g3.getName());
  assertTrue(g3Users.isEmpty());
  g4Users=cms.getUsersOfGroup(g4.getName());
  assertTrue(g4Users.isEmpty());
  g5Users=cms.getUsersOfGroup(g5.getName());
  assertTrue(g5Users.isEmpty());
  u1Groups=cms.getGroupsOfUser(u1.getName(),false);
  assertEquals(1,u1Groups.size());
  assertTrue(u1Groups.contains(g1));
  List u2Groups=cms.getGroupsOfUser(u2.getName(),false);
  assertEquals(2,u2Groups.size());
  assertTrue(u2Groups.contains(g2));
  assertTrue(u2Groups.contains(g1));
  CmsUser u3=cms.createUser("u3","password","u3",null);
  cms.addUserToGroup(u3.getName(),g3.getName());
  g1Users=cms.getUsersOfGroup(g1.getName());
  assertEquals(1,g1Users.size());
  assertTrue(g1Users.contains(u1));
  g2Users=cms.getUsersOfGroup(g2.getName());
  assertEquals(1,g2Users.size());
  assertTrue(g2Users.contains(u2));
  g3Users=cms.getUsersOfGroup(g3.getName());
  assertEquals(1,g3Users.size());
  assertTrue(g3Users.contains(u3));
  g4Users=cms.getUsersOfGroup(g4.getName());
  assertTrue(g4Users.isEmpty());
  g5Users=cms.getUsersOfGroup(g5.getName());
  assertTrue(g5Users.isEmpty());
  u1Groups=cms.getGroupsOfUser(u1.getName(),false);
  assertEquals(1,u1Groups.size());
  assertTrue(u1Groups.contains(g1));
  u2Groups=cms.getGroupsOfUser(u2.getName(),false);
  assertEquals(2,u2Groups.size());
  assertTrue(u2Groups.contains(g2));
  assertTrue(u2Groups.contains(g1));
  List u3Groups=cms.getGroupsOfUser(u3.getName(),false);
  assertEquals(2,u3Groups.size());
  assertTrue(u3Groups.contains(g3));
  assertTrue(u3Groups.contains(g1));
  CmsUser u4=cms.createUser("u4","password","u4",null);
  cms.addUserToGroup(u4.getName(),g4.getName());
  g1Users=cms.getUsersOfGroup(g1.getName());
  assertEquals(1,g1Users.size());
  assertTrue(g1Users.contains(u1));
  g2Users=cms.getUsersOfGroup(g2.getName());
  assertEquals(1,g2Users.size());
  assertTrue(g2Users.contains(u2));
  g3Users=cms.getUsersOfGroup(g3.getName());
  assertEquals(1,g3Users.size());
  assertTrue(g3Users.contains(u3));
  g4Users=cms.getUsersOfGroup(g4.getName());
  assertEquals(1,g4Users.size());
  assertTrue(g4Users.contains(u4));
  g5Users=cms.getUsersOfGroup(g5.getName());
  assertTrue(g5Users.isEmpty());
  u1Groups=cms.getGroupsOfUser(u1.getName(),false);
  assertEquals(1,u1Groups.size());
  assertTrue(u1Groups.contains(g1));
  u2Groups=cms.getGroupsOfUser(u2.getName(),false);
  assertEquals(2,u2Groups.size());
  assertTrue(u2Groups.contains(g2));
  assertTrue(u2Groups.contains(g1));
  u3Groups=cms.getGroupsOfUser(u3.getName(),false);
  assertEquals(2,u3Groups.size());
  assertTrue(u3Groups.contains(g3));
  assertTrue(u3Groups.contains(g1));
  List u4Groups=cms.getGroupsOfUser(u4.getName(),false);
  assertEquals(3,u4Groups.size());
  assertTrue(u4Groups.contains(g4));
  assertTrue(u4Groups.contains(g2));
  assertTrue(u4Groups.contains(g1));
  CmsUser u5=cms.createUser("u5","password","u5",null);
  cms.addUserToGroup(u5.getName(),g5.getName());
  g1Users=cms.getUsersOfGroup(g1.getName());
  assertEquals(1,g1Users.size());
  assertTrue(g1Users.contains(u1));
  g2Users=cms.getUsersOfGroup(g2.getName());
  assertEquals(1,g2Users.size());
  assertTrue(g2Users.contains(u2));
  g3Users=cms.getUsersOfGroup(g3.getName());
  assertEquals(1,g3Users.size());
  assertTrue(g3Users.contains(u3));
  g4Users=cms.getUsersOfGroup(g4.getName());
  assertEquals(1,g4Users.size());
  assertTrue(g4Users.contains(u4));
  g5Users=cms.getUsersOfGroup(g5.getName());
  assertEquals(1,g5Users.size());
  assertTrue(g5Users.contains(u5));
  u1Groups=cms.getGroupsOfUser(u1.getName(),false);
  assertEquals(1,u1Groups.size());
  assertTrue(u1Groups.contains(g1));
  u2Groups=cms.getGroupsOfUser(u2.getName(),false);
  assertEquals(2,u2Groups.size());
  assertTrue(u2Groups.contains(g2));
  assertTrue(u2Groups.contains(g1));
  u3Groups=cms.getGroupsOfUser(u3.getName(),false);
  assertEquals(2,u3Groups.size());
  assertTrue(u3Groups.contains(g3));
  assertTrue(u3Groups.contains(g1));
  u4Groups=cms.getGroupsOfUser(u4.getName(),false);
  assertEquals(3,u4Groups.size());
  assertTrue(u4Groups.contains(g4));
  assertTrue(u4Groups.contains(g2));
  assertTrue(u4Groups.contains(g1));
  List u5Groups=cms.getGroupsOfUser(u5.getName(),false);
  assertEquals(3,u5Groups.size());
  assertTrue(u5Groups.contains(g5));
  assertTrue(u5Groups.contains(g2));
  assertTrue(u5Groups.contains(g1));
}
