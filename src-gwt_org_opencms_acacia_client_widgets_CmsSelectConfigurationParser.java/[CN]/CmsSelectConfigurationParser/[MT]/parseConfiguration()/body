{
  if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(m_configuration)) {
    String[] selectOptions=m_configuration.split("\\" + INPUT_DELIMITER);
    for (int i=0; i < selectOptions.length; i++) {
      boolean test_default=(selectOptions[i].indexOf(KEY_DEFAULT) >= 0);
      boolean test_value=selectOptions[i].indexOf(KEY_VALUE) >= 0;
      boolean test_option=selectOptions[i].indexOf(KEY_OPTION) >= 0;
      boolean test_short_option=selectOptions[i].indexOf(KEY_SHORT_OPTION) >= 0;
      boolean test_help=selectOptions[i].indexOf(KEY_HELP) >= 0;
      boolean isDefault=false;
      String value=null;
      String label=null;
      String help=null;
      try {
        if ((selectOptions[i].indexOf(DEFAULT_MARKER) >= 0) || test_default) {
          isDefault=true;
          selectOptions[i]=selectOptions[i].replace(DEFAULT_MARKER,KEY_EMPTY);
          selectOptions[i]=selectOptions[i].replace(KEY_DEFAULT,KEY_EMPTY);
        }
        if (test_value) {
          String sub=KEY_EMPTY;
          if (selectOptions[i].indexOf(KEY_SUFFIX) >= 0) {
            sub=selectOptions[i].substring(selectOptions[i].indexOf(KEY_VALUE),selectOptions[i].indexOf(KEY_SUFFIX));
          }
 else {
            sub=selectOptions[i].substring(selectOptions[i].indexOf(KEY_VALUE),selectOptions[i].length() - 1);
          }
          value=sub.replace(KEY_VALUE,KEY_EMPTY);
          selectOptions[i]=selectOptions[i].replace(KEY_VALUE + value + KEY_SUFFIX_SHORT,KEY_EMPTY);
        }
 else {
          if (test_short_option) {
            value=selectOptions[i].substring(0,selectOptions[i].indexOf(KEY_SHORT_OPTION));
          }
 else {
            value=selectOptions[i];
          }
        }
        if (test_option) {
          String sub=KEY_EMPTY;
          if (selectOptions[i].indexOf(KEY_SUFFIX) >= 0) {
            sub=selectOptions[i].substring(selectOptions[i].indexOf(KEY_OPTION),selectOptions[i].indexOf(KEY_SUFFIX));
          }
 else {
            sub=selectOptions[i].substring(selectOptions[i].indexOf(KEY_OPTION),selectOptions[i].lastIndexOf(KEY_SUFFIX_SHORT));
          }
          label=sub.replace(KEY_OPTION,KEY_EMPTY);
          selectOptions[i]=selectOptions[i].replace(KEY_OPTION + label + KEY_SUFFIX_SHORT,KEY_EMPTY);
        }
 else         if (test_short_option) {
          label=selectOptions[i].substring(selectOptions[i].indexOf(KEY_SHORT_OPTION) + 1);
        }
 else {
          label=value;
        }
        if (test_help) {
          String sub=KEY_EMPTY;
          if (selectOptions[i].indexOf(KEY_SUFFIX) >= 0) {
            sub=selectOptions[i].substring(selectOptions[i].indexOf(KEY_HELP),selectOptions[i].indexOf(KEY_SUFFIX));
          }
 else {
            sub=selectOptions[i].substring(selectOptions[i].indexOf(KEY_HELP),selectOptions[i].indexOf(KEY_SUFFIX_SHORT));
          }
          help=sub.replace(KEY_HELP,KEY_EMPTY);
          selectOptions[i]=selectOptions[i].replace(KEY_HELP + help + KEY_SUFFIX_SHORT,KEY_EMPTY);
        }
        m_options.put(value,label);
        m_helpTexts.put(value,help);
        if (isDefault) {
          m_defaultValues.add(value);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
}
