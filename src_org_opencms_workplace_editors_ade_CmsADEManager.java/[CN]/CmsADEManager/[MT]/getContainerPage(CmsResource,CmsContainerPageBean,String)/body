{
  CmsObject cms=getCmsObject();
  JSONObject result=new JSONObject();
  JSONObject resElements=new JSONObject();
  JSONObject resContainers=new JSONObject();
  result.put(P_ELEMENTS,resElements);
  result.put(P_CONTAINERS,resContainers);
  result.put(P_LOCALE,cms.getRequestContext().getLocale().toString());
  CmsResourceUtil resUtil=new CmsResourceUtil(cms,resource);
  Set<String> types=cntPage.getTypes();
  result.put(CmsADEManager.P_ALLOWEDIT,resUtil.getLock().isLockableBy(cms.getRequestContext().currentUser()) && resUtil.isEditable());
  result.put(CmsADEManager.P_LOCKED,resUtil.getLockedByName());
  if (cntPage.getResTypeConfig() != null) {
    resElements.merge(getResourceTypes(cntPage.getResTypeConfig(),types),true,false);
  }
  CmsElementUtil elemUtil=new CmsElementUtil(cms,getRequest(),getResponse(),getRequest().getParameter(PARAMETER_URI));
  Set<CmsUUID> ids=new HashSet<CmsUUID>();
  for (  Map.Entry<String,CmsContainerBean> entry : cntPage.getContainers().entrySet()) {
    CmsContainerBean container=entry.getValue();
    JSONObject resContainer=new JSONObject();
    resContainer.put(P_OBJTYPE,CONTAINER_TYPE);
    resContainer.put(P_NAME,container.getName());
    resContainer.put(P_TYPE,container.getType());
    resContainer.put(P_MAXELEMENTS,container.getMaxElements());
    JSONArray resContainerElems=new JSONArray();
    resContainer.put(P_ELEMENTS,resContainerElems);
    int renderElems=container.getElements().size();
    if ((container.getMaxElements() > -1) && (renderElems > container.getMaxElements())) {
      renderElems=container.getMaxElements();
    }
    if ((elemUri != null) && container.getType().equals(CmsContainerPageBean.TYPE_TEMPLATE)) {
      renderElems--;
      CmsResource elemRes=cms.readResource(elemUri);
      String id=CmsElementUtil.createId(elemRes.getStructureId());
      resContainerElems.put(id);
      if (ids.contains(elemRes.getStructureId())) {
        continue;
      }
      JSONObject resElement=elemUtil.getElementData(elemRes,types);
      ids.add(elemRes.getStructureId());
      resElements.put(id,resElement);
    }
    for (    CmsContainerElementBean element : container.getElements()) {
      if (renderElems < 1) {
        break;
      }
      renderElems--;
      String id=CmsElementUtil.createId(element.getElement().getStructureId());
      resContainerElems.put(id);
      if (ids.contains(element.getElement().getStructureId())) {
        continue;
      }
      JSONObject resElement=elemUtil.getElementData(element.getElement(),types);
      if (resElement.has(P_SUBITEMS)) {
        JSONArray subItems=resElement.getJSONArray(P_SUBITEMS);
        for (int i=0; i < subItems.length(); i++) {
          String subItemId=subItems.getString(i);
          CmsUUID subItemUuid=CmsElementUtil.parseId(subItemId);
          if (!ids.contains(subItemUuid)) {
            CmsResource subItemResource=cms.readResource(subItemUuid);
            JSONObject subItemData=elemUtil.getElementData(subItemResource,types);
            ids.add(subItemUuid);
            resElements.put(subItemId,subItemData);
          }
        }
      }
      ids.add(element.getElement().getStructureId());
      resElements.put(id,resElement);
    }
    resContainers.put(container.getName(),resContainer);
  }
  JSONArray resFavorites=getFavoriteList(resElements,types);
  result.put(P_FAVORITES,resFavorites);
  JSONArray resRecent=getRecentList(resElements,types);
  result.put(P_RECENT,resRecent);
  return result;
}
