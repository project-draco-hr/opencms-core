{
  List<String> keyValuePairs=CmsStringUtil.splitAsList(param,'|');
  String[] keyValuePair;
  Iterator<String> itKeyValuePairs=keyValuePairs.iterator();
  String keyValuePairStr;
  String key;
  String value;
  while (itKeyValuePairs.hasNext()) {
    keyValuePairStr=itKeyValuePairs.next();
    keyValuePair=CmsStringUtil.splitAsArray(keyValuePairStr,'=');
    if (keyValuePair.length != 2) {
      throw new CmsIllegalArgumentException(Messages.get().container(Messages.ERR_COLLECTOR_PARAM_KEY_VALUE_SYNTAX_1,new Object[]{keyValuePairStr}));
    }
    key=String.valueOf(keyValuePair[0]).trim();
    value=String.valueOf(keyValuePair[1]).trim();
    if (PARAM_KEY_RESOURCE.equals(key)) {
      m_fileName=value;
    }
 else     if (PARAM_KEY_RESOURCE_TYPE.equals(key)) {
      m_type=OpenCms.getResourceManager().getResourceType(value);
    }
 else     if (PARAM_KEY_RESULT_LIMIT.equals(key)) {
      m_count=Integer.parseInt(value);
    }
 else     if (PARAM_KEY_SORT_DESCENDING.equals(key)) {
      m_sortDescending=new Boolean(value).booleanValue();
    }
 else     if (PARAM_KEY_TIMEFRAME_START.equals(key)) {
      m_timeFrameStart=DATEFORMAT_SQL.parse(value).getTime();
    }
 else     if (PARAM_KEY_TIMEFRAME_END.equals(key)) {
      m_timeFrameEnd=DATEFORMAT_SQL.parse(value).getTime();
    }
 else     if (PARAM_KEY_PPROPERTY_TIME.equals(key)) {
      m_propertyTime.setName(value);
    }
 else     if (PARAM_KEY_CATEGORIES.equals(key)) {
      m_categories=CmsStringUtil.splitAsList(value,',');
    }
 else     if (PARAM_KEY_PPROPERTY_CATEGORIES.equals(key)) {
      m_propertyCategories.setName(value);
    }
 else     if (PARAM_EXCLUDETIMERANGE.equalsIgnoreCase(key)) {
      setExcludeTimerange(new Boolean(value).booleanValue());
    }
 else {
    }
  }
}
