{
  if (resourcepath.endsWith("desktop.ini")) {
    return null;
  }
  for (  String folder : FOLDERS) {
    if (matchPath(resourcepath,folder)) {
      return createFakeFolder(folder);
    }
  }
  if (matchParentPath(IMPORT_PATH,resourcepath)) {
    if (hasImportFile(resourcepath)) {
      CmsFile importData=m_importDataCache.get(resourcepath);
      if (importData != null) {
        return importData;
      }
      return new CmsFile(createFakeBinaryFile(resourcepath));
    }
  }
  if (matchParentPath(EXPORT_PATH,resourcepath)) {
    CmsFile resultFile=new CmsFile(createFakeBinaryFile(resourcepath));
    if (cms.getRequestContext().getAttribute(CmsJlanDiskInterface.NO_FILESIZE_REQUIRED) == null) {
      LOG.info("Getting data for " + resourcepath);
      byte[] data=OpenCms.getModuleManager().getImportExportRepository().getExportedModuleData(CmsResource.getName(resourcepath),cms.getRequestContext().getCurrentProject());
      resultFile.setContents(data);
    }
    return resultFile;
  }
  if (matchParentPath(LOG_PATH,resourcepath)) {
    CmsFile resultFile=new CmsFile(createFakeBinaryFile(resourcepath));
    String moduleName=CmsResource.getName(resourcepath).replaceFirst("\\.log$","");
    try {
      byte[] data=OpenCms.getModuleManager().getImportExportRepository().getModuleLog().readLog(moduleName);
      resultFile.setContents(data);
      return resultFile;
    }
 catch (    IOException e) {
      throw new CmsVfsResourceNotFoundException(org.opencms.db.Messages.get().container(org.opencms.db.Messages.ERR_READ_RESOURCE_1,resourcepath),e);
    }
  }
  return super.readResource(cms,resourcepath,filter);
}
