{
  projects=new ArrayList<CmsProjectBean>(projects);
  m_publishDialog=publishDialog;
  m_actions=workflows.get(selectedWorkflowId).getActions();
  m_actionButtons=new ArrayList<CmsPushButton>();
  initWidget(UI_BINDER.createAndBindUi(this));
  m_selectAll=new CmsTriStateCheckBox("");
  m_selectAll.getElement().getStyle().setMarginLeft(4,Style.Unit.PX);
  m_selectAll.setNextStateAfterIntermediateState(State.on);
  m_selectAll.addValueChangeHandler(new ValueChangeHandler<CmsTriStateCheckBox.State>(){
    public void onValueChange(    ValueChangeEvent<State> event){
      State state=event.getValue();
      if (state == State.on) {
        m_model.signalAll(Signal.publish);
      }
 else       if (state == State.off) {
        m_model.signalAll(Signal.unpublish);
      }
    }
  }
);
  m_topBar.add(m_selectAll);
  m_scrollPanel.getElement().getStyle().setPropertyPx(CmsDomUtil.Style.maxHeight.toString(),scrollPanelHeight);
  m_checkboxProblems.setVisible(false);
  CmsMessages messages=Messages.get();
  LinkedHashMap<String,String> workflowSelectorItems=new LinkedHashMap<String,String>();
  for (  CmsWorkflow workflow : workflows.values()) {
    workflowSelectorItems.put(workflow.getId(),workflow.getNiceName());
  }
  LinkedHashMap<String,String> projectSelectItems=new LinkedHashMap<String,String>();
  CmsProjectBean myChangesDummyProject=new CmsProjectBean(CmsUUID.getNullUUID(),0,messages.key(Messages.GUI_PUBLISH_DIALOG_MY_CHANGES_0),null);
  myChangesDummyProject.setRank(200);
  projects.add(myChangesDummyProject);
  Collections.<CmsProjectBean>sort(projects);
  boolean foundOldProject=false;
  boolean selectedWorkflowProject=false;
  for (  CmsProjectBean project : projects) {
    if (project.isWorkflowProject()) {
      workflowSelectorItems.put(project.getId().toString(),project.getName());
      if (project.getId().equals(publishOptions.getProjectId())) {
        selectedWorkflowProject=true;
      }
    }
 else {
      projectSelectItems.put(project.getId().toString(),project.getName());
      if (project.getId().equals(publishOptions.getProjectId())) {
        foundOldProject=true;
      }
    }
  }
  m_workflowSelector.setItems(workflowSelectorItems);
  m_workflowSelector.addStyleName(CSS.selector());
  if (!(workflows.size() > 1)) {
    m_workflowSelector.setEnabled(false);
  }
  m_workflowsLabel.setText(messages.key(Messages.GUI_PUBLISH_WORKFLOW_SELECT_0));
  m_projectSelector.setItems(projectSelectItems);
  m_projectSelector.addStyleName(CSS.selector());
  if (!publishOptions.getProjectId().isNullUUID() && foundOldProject) {
    m_projectSelector.setFormValueAsString(publishOptions.getProjectId().toString());
  }
  m_checkboxRelated.setChecked(publishOptions.isIncludeRelated());
  m_checkboxSiblings.setChecked(publishOptions.isIncludeSiblings());
  if (selectedWorkflowProject) {
    m_projectSelector.setEnabled(false);
    m_workflowSelector.setFormValueAsString(publishOptions.getProjectId().toString());
  }
 else {
    m_workflowSelector.setFormValueAsString(selectedWorkflowId);
  }
  m_cancelButton.setText(messages.key(Messages.GUI_PUBLISH_DIALOG_CANCEL_BUTTON_0));
  m_cancelButton.setUseMinWidth(true);
  m_noResources.setText(messages.key(Messages.GUI_PUBLISH_DIALOG_NO_RES_0));
  m_checkboxSiblings.setText(messages.key(Messages.GUI_PUBLISH_CHECKBOXES_SIBLINGS_0));
  m_checkboxRelated.setText(messages.key(Messages.GUI_PUBLISH_CHECKBOXES_REL_RES_0));
  m_checkboxProblems.setText(messages.key(Messages.GUI_PUBLISH_CHECKBOXES_PROBLEMS_0));
  m_selectorLabel.setText(messages.key(Messages.GUI_PUBLISH_TOP_PANEL_RIGHT_LABEL_0));
  addScrollHandler();
  m_initialized=true;
}
