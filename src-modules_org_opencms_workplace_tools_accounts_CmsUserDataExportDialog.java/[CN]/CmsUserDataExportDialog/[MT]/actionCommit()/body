{
  List errors=new ArrayList();
  Map exportUsers=new HashMap();
  try {
    if (((getGroups() == null) || (getGroups().size() < 1)) && ((getRoles() == null) || (getRoles().size() < 1))) {
      exportUsers=getExportAllUsers(exportUsers);
    }
 else {
      exportUsers=getExportUsersFromGroups(exportUsers);
      exportUsers=getExportUsersFromRoles(exportUsers);
    }
  }
 catch (  CmsException e) {
    throw new CmsRuntimeException(Messages.get().container(Messages.ERR_GET_EXPORT_USERS_0),e);
  }
  BufferedWriter bufferedWriter;
  File downloadFile;
  try {
    downloadFile=File.createTempFile("export_users",".csv");
    FileWriter fileWriter=new FileWriter(downloadFile);
    bufferedWriter=new BufferedWriter(fileWriter);
  }
 catch (  IOException e) {
    throw e;
  }
  CmsUserExportSettings settings=OpenCms.getImportExportManager().getUserExportSettings();
  String separator=CmsStringUtil.substitute(settings.getSeparator(),"\\t","\t");
  List values=settings.getColumns();
  String headline="";
  headline+="name";
  Iterator itValues=values.iterator();
  while (itValues.hasNext()) {
    headline+=separator;
    headline+=(String)itValues.next();
  }
  headline+="\n";
  try {
    bufferedWriter.write(headline);
  }
 catch (  IOException e) {
    throw new CmsRuntimeException(Messages.get().container(Messages.ERR_WRITE_TO_EXPORT_FILE_0),e);
  }
  Object[] users=exportUsers.values().toArray();
  for (int i=0; i < users.length; i++) {
    CmsUser exportUser=(CmsUser)users[i];
    if (!exportUser.getOuFqn().equals(getParamOufqn())) {
      continue;
    }
    String output="";
    output+=exportUser.getSimpleName();
    itValues=values.iterator();
    while (itValues.hasNext()) {
      output+=separator;
      String curValue=(String)itValues.next();
      try {
        Method method=CmsUser.class.getMethod("get" + curValue.substring(0,1).toUpperCase() + curValue.substring(1),null);
        String curOutput=(String)method.invoke(exportUser,null);
        if (CmsStringUtil.isEmptyOrWhitespaceOnly(curOutput) || curOutput.equals("null")) {
          curOutput=(String)exportUser.getAdditionalInfo(curValue);
        }
        if (curValue.equals("password")) {
          curOutput=OpenCms.getPasswordHandler().getDigestType() + "_" + curOutput;
        }
        if (!CmsStringUtil.isEmptyOrWhitespaceOnly(curOutput) && !curOutput.equals("null")) {
          output+=curOutput;
        }
      }
 catch (      NoSuchMethodException e) {
        String curOutput=(String)exportUser.getAdditionalInfo(curValue);
        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(curOutput)) {
          output+=curOutput;
        }
      }
catch (      IllegalAccessException e) {
        throw new CmsRuntimeException(Messages.get().container(Messages.ERR_ILLEGAL_ACCESS_0),e);
      }
catch (      InvocationTargetException e) {
        throw new CmsRuntimeException(Messages.get().container(Messages.ERR_INVOCATION_TARGET_0),e);
      }
    }
    output+="\n";
    try {
      bufferedWriter.write(output);
    }
 catch (    IOException e) {
      throw new CmsRuntimeException(Messages.get().container(Messages.ERR_WRITE_TO_EXPORT_FILE_0),e);
    }
  }
  try {
    bufferedWriter.close();
  }
 catch (  IOException e) {
    throw new CmsRuntimeException(Messages.get().container(Messages.ERR_WRITE_TO_EXPORT_FILE_0),e);
  }
  Map params=new HashMap();
  params.put("exportfile",downloadFile.getAbsolutePath().replace('\\','/'));
  params.put(A_CmsOrgUnitDialog.PARAM_OUFQN,getParamOufqn());
  params.put(CmsDialog.PARAM_CLOSELINK,getParamCloseLink());
  getToolManager().jspForwardTool(this,getCurrentToolPath(),params);
  setCommitErrors(errors);
}
