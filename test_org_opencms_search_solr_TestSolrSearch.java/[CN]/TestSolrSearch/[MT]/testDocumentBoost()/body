{
  echo("Testing document boost");
  CmsObject cms=getCmsObject();
  cms.createResource("0searchNew.txt",CmsResourceTypePlain.getStaticTypeId(),"OpenCms".getBytes(),null);
  CmsResource resource1=cms.createResource("1searchNew.txt",CmsResourceTypePlain.getStaticTypeId(),"OpenCms".getBytes(),null);
  cms.createResource("2searchNew.txt",CmsResourceTypePlain.getStaticTypeId(),"OpenCms".getBytes(),null);
  cms.createResource("3searchNew.txt",CmsResourceTypePlain.getStaticTypeId(),"OpenCms".getBytes(),null);
  cms.createResource("4searchNew.txt",CmsResourceTypePlain.getStaticTypeId(),"OpenCms".getBytes(),null);
  cms.createResource("5searchNew.txt",CmsResourceTypePlain.getStaticTypeId(),"OpenCms".getBytes(),null);
  cms.createResource("6searchNew.txt",CmsResourceTypePlain.getStaticTypeId(),"OpenCms".getBytes(),null);
  CmsResource resource7=cms.createResource("7searchNew.txt",CmsResourceTypePlain.getStaticTypeId(),"OpenCms".getBytes(),null);
  CmsResource resource8=cms.createResource("8searchNew.txt",CmsResourceTypePlain.getStaticTypeId(),"OpenCms".getBytes(),null);
  CmsResource resource9=cms.createResource("9searchNew.txt",CmsResourceTypePlain.getStaticTypeId(),"OpenCms".getBytes(),null);
  I_CmsReport report=new CmsShellReport(cms.getRequestContext().getLocale());
  OpenCms.getPublishManager().publishProject(cms,report);
  OpenCms.getPublishManager().waitWhileRunning();
  CmsSolrIndex index=OpenCms.getSearchManager().getIndexSolr(AllTests.SOLR_ONLINE);
  String query="?rows=10&q=text:OpenCms&sort=score desc&fq=path:*searchNew.txt";
  CmsSolrResultList results=index.search(getCmsObject(),query);
  AllTests.printResults(cms,results,false);
  CmsProperty prop=new CmsProperty(CmsPropertyDefinition.PROPERTY_SEARCH_PRIORITY,"max","max");
  List<CmsProperty> props1=cms.readPropertyObjects(resource1,false);
  props1.add(prop);
  cms.lockResource(resource9);
  cms.writePropertyObjects(resource9,props1);
  prop=new CmsProperty(CmsPropertyDefinition.PROPERTY_SEARCH_PRIORITY,"high","high");
  List<CmsProperty> props2=cms.readPropertyObjects(resource1,false);
  props2.add(prop);
  cms.lockResource(resource8);
  cms.writePropertyObjects(resource8,props2);
  prop=new CmsProperty(CmsPropertyDefinition.PROPERTY_SEARCH_PRIORITY,"low","low");
  List<CmsProperty> props3=cms.readPropertyObjects(resource1,false);
  props3.add(prop);
  cms.lockResource(resource1);
  cms.writePropertyObjects(resource1,props3);
  prop=new CmsProperty(CmsPropertyDefinition.PROPERTY_SEARCH_PRIORITY,"high","high");
  List<CmsProperty> props4=cms.readPropertyObjects(resource1,false);
  props4.add(prop);
  cms.lockResource(resource7);
  cms.writePropertyObjects(resource7,props4);
  OpenCms.getPublishManager().publishProject(cms,report);
  OpenCms.getPublishManager().waitWhileRunning();
  Thread.sleep(200);
  results=index.search(getCmsObject(),query);
  AllTests.printResults(cms,results,false);
  assertTrue("9searchNew.txt with priority 'max' should be the first",results.get(0).getDocument().getPath().equals("/sites/default/9searchNew.txt"));
  assertTrue("9searchNew.txt with priority 'max' should have a score of 100%",results.get(0).getScore(results.getMaxScore().floatValue()) == 100);
  assertTrue("7searchNew.txt with priority 'high' should be the second",results.get(1).getDocument().getPath().equals("/sites/default/7searchNew.txt"));
  assertTrue("7searchNew.txt with priority 'high' should have a score of 75%",results.get(1).getScore(results.getMaxScore().floatValue()) == 75);
  assertTrue("8searchNew.txt with priority 'high' should be the second",results.get(2).getDocument().getPath().equals("/sites/default/8searchNew.txt"));
  assertTrue("8searchNew.txt with priority 'high' should have a score of 75%",results.get(2).getScore(results.getMaxScore().floatValue()) == 75);
  assertTrue("1searchNew.txt with priority 'low' should be the third",results.get(9).getDocument().getPath().equals("/sites/default/1searchNew.txt"));
  assertTrue("1searchNew.txt with priority 'low' should have a score of 25%",results.get(9).getScore(results.getMaxScore().floatValue()) == 25);
}
