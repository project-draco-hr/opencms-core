{
  if (CmsLog.INIT.isInfoEnabled()) {
    CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_NUM_SITE_ROOTS_CONFIGURED_1,new Integer((m_siteMatcherSites.size() + ((m_defaultUri != null) ? 1 : 0)))));
  }
  Iterator<CmsSite> i=m_siteMatcherSites.values().iterator();
  while (i.hasNext()) {
    CmsSite site=i.next();
    if (site != null) {
      try {
        CmsResource siteRes=cms.readResource(site.getSiteRoot());
        String title=cms.readPropertyObject(siteRes,CmsPropertyDefinition.PROPERTY_TITLE,false).getValue();
        if ((title != null) && !title.isEmpty()) {
          site.setTitle(title);
        }
      }
 catch (      Throwable t) {
        if (CmsLog.INIT.isWarnEnabled()) {
          CmsLog.INIT.warn(Messages.get().getBundle().key(Messages.INIT_NO_ROOT_FOLDER_1,site));
        }
      }
    }
  }
  if (CmsStringUtil.isEmptyOrWhitespaceOnly(m_defaultUri)) {
    m_defaultSite=null;
  }
 else {
    m_defaultSite=new CmsSite(m_defaultUri,CmsSiteMatcher.DEFAULT_MATCHER);
    try {
      cms.readResource(m_defaultSite.getSiteRoot());
    }
 catch (    Throwable t) {
      if (CmsLog.INIT.isWarnEnabled()) {
        CmsLog.INIT.warn(Messages.get().getBundle().key(Messages.INIT_NO_ROOT_FOLDER_DEFAULT_SITE_1,m_defaultSite));
      }
    }
  }
  if (m_defaultSite == null) {
    m_defaultSite=new CmsSite("/",CmsSiteMatcher.DEFAULT_MATCHER);
  }
  if (CmsLog.INIT.isInfoEnabled()) {
    if (m_defaultSite != null) {
      CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_DEFAULT_SITE_ROOT_1,m_defaultSite));
    }
 else {
      CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_DEFAULT_SITE_ROOT_0));
    }
  }
  m_workplaceSiteMatcher=new CmsSiteMatcher(m_workplaceServer);
  if (CmsLog.INIT.isInfoEnabled()) {
    if (m_workplaceSiteMatcher != null) {
      CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_WORKPLACE_SITE_1,m_workplaceSiteMatcher));
    }
 else {
      CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_WORKPLACE_SITE_0));
    }
  }
  m_siteMatcherSites=Collections.unmodifiableMap(m_siteMatcherSites);
  m_matchers=Collections.unmodifiableList(m_matchers);
  m_siteRoots=Collections.unmodifiableSet(m_siteRootSites.keySet());
  Iterator<String> j=m_siteRoots.iterator();
  while (j.hasNext()) {
    String root=j.next();
    if (!root.startsWith(SITES_FOLDER)) {
      m_additionalSiteRoots.add(root);
    }
  }
  m_frozen=true;
}
