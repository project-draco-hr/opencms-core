{
  List<String> siteroots=new ArrayList<String>(m_siteMatcherSites.size() + 1);
  Map<String,CmsSiteMatcher> siteServers=new HashMap<String,CmsSiteMatcher>(m_siteMatcherSites.size() + 1);
  List<CmsSite> result=new ArrayList<CmsSite>(m_siteMatcherSites.size() + 1);
  Iterator<CmsSiteMatcher> i;
  i=m_siteMatcherSites.keySet().iterator();
  while (i.hasNext()) {
    CmsSite site=m_siteMatcherSites.get(i.next());
    String folder=site.getSiteRoot() + "/";
    if (!siteroots.contains(folder)) {
      siteroots.add(folder);
      siteServers.put(folder,site.getSiteMatcher());
    }
  }
  if (workplaceMode && (m_defaultSite != null)) {
    String folder=m_defaultSite.getSiteRoot() + "/";
    if (!siteroots.contains(folder)) {
      siteroots.add(folder);
    }
  }
  String storedSiteRoot=cms.getRequestContext().getSiteRoot();
  try {
    cms.getRequestContext().setSiteRoot("/");
    if (workplaceMode && OpenCms.getRoleManager().hasRole(cms,CmsRole.DEVELOPER)) {
      if (!siteroots.contains("/")) {
        siteroots.add("/");
      }
      if (!siteroots.contains(storedSiteRoot + "/")) {
        siteroots.add(storedSiteRoot + "/");
      }
    }
    String shared=OpenCms.getSiteManager().getSharedFolder();
    if (showShared && (shared != null) && !siteroots.contains(shared)) {
      siteroots.add(shared);
    }
    List<CmsResource> resources;
    try {
      resources=OpenCms.getOrgUnitManager().getResourcesForOrganizationalUnit(cms,ouFqn);
    }
 catch (    CmsException e) {
      return Collections.emptyList();
    }
    Collections.sort(siteroots);
    Iterator<String> roots=siteroots.iterator();
    while (roots.hasNext()) {
      String folder=roots.next();
      boolean compatible=false;
      Iterator<CmsResource> itResources=resources.iterator();
      while (itResources.hasNext()) {
        CmsResource resource=itResources.next();
        if (resource.getRootPath().startsWith(folder) || folder.startsWith(resource.getRootPath())) {
          compatible=true;
          break;
        }
      }
      if (compatible) {
        try {
          CmsResource res=cms.readResource(folder);
          if (!workplaceMode || cms.hasPermissions(res,CmsPermissionSet.ACCESS_VIEW,false,CmsResourceFilter.ONLY_VISIBLE)) {
            String title=cms.readPropertyObject(res,CmsPropertyDefinition.PROPERTY_TITLE,false).getValue();
            if (title == null) {
              title=folder;
            }
            if ((shared != null) && folder.equals(shared)) {
              title=SHARED_FOLDER_TITLE;
            }
            String position=cms.readPropertyObject(res,CmsPropertyDefinition.PROPERTY_NAVPOS,false).getValue();
            result.add(new CmsSite(folder,res.getStructureId(),title,siteServers.get(folder),position));
          }
        }
 catch (        CmsException e) {
        }
      }
    }
    Collections.sort(result,new Comparator<CmsSite>(){
      public int compare(      CmsSite o1,      CmsSite o2){
        if (isSharedFolder(o1.getSiteRoot())) {
          return +1;
        }
        if (isSharedFolder(o2.getSiteRoot())) {
          return -1;
        }
        return o1.compareTo(o2);
      }
    }
);
  }
 catch (  Throwable t) {
    LOG.error(Messages.get().getBundle().key(Messages.LOG_READ_SITE_PROP_FAILED_0),t);
  }
 finally {
    cms.getRequestContext().setSiteRoot(storedSiteRoot);
  }
  return result;
}
