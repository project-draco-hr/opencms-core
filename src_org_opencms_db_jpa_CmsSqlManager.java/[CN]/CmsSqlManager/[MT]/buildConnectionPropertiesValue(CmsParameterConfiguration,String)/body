{
  StringBuffer propValue=new StringBuffer();
  String jdbcDriver=config.get(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_JDBC_DRIVER);
  String jdbcUrl=config.get(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_JDBC_URL);
  String jdbcUrlParams=config.get(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_JDBC_URL_PARAMS);
  int maxActive=config.getInteger(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_MAX_ACTIVE,10);
  int maxWait=config.getInteger(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_MAX_WAIT,2000);
  int maxIdle=config.getInteger(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_MAX_IDLE,5);
  int minEvictableIdleTime=config.getInteger(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_MIN_EVICTABLE_IDLE_TIME,1800000);
  int minIdle=config.getInteger(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_MIN_IDLE,0);
  int numTestsPerEvictionRun=config.getInteger(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_NUM_TESTS_PER_EVICTION_RUN,3);
  int timeBetweenEvictionRuns=config.getInteger(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_TIME_BETWEEN_EVICTION_RUNS,3600000);
  String username=config.getString(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_USERNAME,"");
  String password=config.getString(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_PASSWORD,"");
  boolean testOnBorrow=Boolean.valueOf(config.getString(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_TEST_ON_BORROW,"false").trim()).booleanValue();
  boolean testWhileIdle=Boolean.valueOf(config.getString(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_TEST_WHILE_IDLE,"false").trim()).booleanValue();
  String testQuery=config.get(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ CmsDbPool.KEY_TEST_QUERY);
  if ("".equals(testQuery)) {
    testQuery=null;
  }
  int initialSize=config.getInteger(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_INITIAL_SIZE,20);
  boolean poolPreparedStatements=config.getBoolean(CmsDbPool.KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_PREP_STATEMENTS,true);
  propValue.append(KEY_DRIVER_CLASS_NAME);
  propValue.append("=");
  propValue.append(jdbcDriver);
  propValue.append(", ");
  propValue.append(KEY_URL);
  propValue.append("=");
  propValue.append(jdbcUrl);
  propValue.append(StringUtils.defaultString(jdbcUrlParams));
  propValue.append(", ");
  propValue.append(KEY_USER);
  propValue.append("=");
  propValue.append(username);
  propValue.append(", ");
  propValue.append(KEY_PASS);
  propValue.append("=");
  propValue.append(StringUtils.defaultString(password));
  propValue.append(", ");
  propValue.append(KEY_MAX_ACTIVE);
  propValue.append("=");
  propValue.append(maxActive);
  propValue.append(", ");
  propValue.append(KEY_MAX_IDLE);
  propValue.append("=");
  propValue.append(maxIdle);
  propValue.append(", ");
  propValue.append(KEY_MAX_WAIT);
  propValue.append("=");
  propValue.append(maxWait);
  propValue.append(", ");
  propValue.append(KEY_MIN_IDLE);
  propValue.append("=");
  propValue.append(minIdle);
  propValue.append(", ");
  if (testQuery != null) {
    propValue.append(KEY_VALIDATION_QUERY);
    propValue.append("=");
    propValue.append(StringUtils.defaultString(testQuery));
    propValue.append(", ");
    propValue.append(KEY_TEST_ON_BORROW);
    propValue.append("=");
    propValue.append(testOnBorrow);
    propValue.append(", ");
    propValue.append(KEY_TEST_WHILE_IDLE);
    propValue.append("=");
    propValue.append(testWhileIdle);
    propValue.append(", ");
    propValue.append(KEY_TIME_BETWEEN_EVICTION_RUNS);
    propValue.append("=");
    propValue.append(timeBetweenEvictionRuns);
    propValue.append(", ");
    propValue.append(KEY_NUM_TESTS_PER_EVICTION_RUN);
    propValue.append("=");
    propValue.append(numTestsPerEvictionRun);
    propValue.append(", ");
    propValue.append(KEY_MIN_EVICTABLE_IDLE_TIME);
    propValue.append("=");
    propValue.append(minEvictableIdleTime);
    propValue.append(", ");
  }
  propValue.append(KEY_INITIAL_SIZE);
  propValue.append("=");
  propValue.append(initialSize);
  propValue.append(", ");
  propValue.append(KEY_PREP_STATEMENTS);
  propValue.append("=");
  propValue.append(poolPreparedStatements);
  return propValue.toString();
}
