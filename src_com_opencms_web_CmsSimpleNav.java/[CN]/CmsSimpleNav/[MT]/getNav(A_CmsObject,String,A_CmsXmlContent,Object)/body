{
  Hashtable parameterHashtable=(Hashtable)((Hashtable)userObject).clone();
  CmsSimpleNavFile xmlTemplateDocument=(CmsSimpleNavFile)doc;
  String requestedUri=cms.getRequestContext().getUri();
  String servletPath=((HttpServletRequest)cms.getRequestContext().getRequest().getOriginalRequest()).getServletPath();
  StringBuffer result=new StringBuffer();
  Vector allFiles=cms.getFilesInFolder(C_NAVFOLDER);
  Hashtable sortedNav=new Hashtable();
  int numFiles=allFiles.size();
  int maxindex=0;
  for (int i=0; i < numFiles; i++) {
    A_CmsResource currFile=(A_CmsResource)allFiles.elementAt(i);
    String filename=currFile.getAbsolutePath();
    String navpos=cms.readMetainformation(filename,C_METAINFO_NAVPOS);
    String navtext=cms.readMetainformation(filename,C_METAINFO_NAVTITLE);
    if (navpos != null && navtext != null && (!"".equals(navpos)) && (!"".equals(navtext))) {
      Integer npValue=new Integer(navpos);
      int npIntValue=npValue.intValue();
      if (maxindex < npIntValue) {
        maxindex=npIntValue;
      }
      sortedNav.put(npValue,filename);
    }
  }
  for (int i=1; i <= maxindex; i++) {
    String filename=(String)sortedNav.get(new Integer(i));
    if (filename != null && !"".equals(filename)) {
      String navtext=cms.readMetainformation(filename,C_METAINFO_NAVTITLE);
      if (filename.equals(requestedUri)) {
        result.append(xmlTemplateDocument.getCurrentNavEntry(navtext));
      }
 else {
        result.append(xmlTemplateDocument.getOtherNavEntry(servletPath + filename,navtext));
      }
    }
  }
  return result.toString().getBytes();
}
