{
  int todo;
  String lookup=buildMethodLookup(command,parameters.size());
  List possibleMethods=(List)m_methods.get(lookup);
  if (possibleMethods == null) {
    return false;
  }
  Method onlyStringMethod=null;
  Method foundMethod=null;
  Object[] params=null;
  Iterator i;
  i=possibleMethods.iterator();
  while (i.hasNext()) {
    Method method=(Method)i.next();
    Class[] clazz=method.getParameterTypes();
    boolean onlyString=true;
    for (int j=0; j < clazz.length; j++) {
      if (!(clazz[j].equals(String.class))) {
        onlyString=false;
        break;
      }
    }
    if (onlyString) {
      onlyStringMethod=method;
      break;
    }
  }
  i=possibleMethods.iterator();
  while (i.hasNext()) {
    Method method=(Method)i.next();
    if (method == onlyStringMethod) {
      continue;
    }
    Class[] clazz=method.getParameterTypes();
    Object[] converted=new Object[clazz.length];
    boolean match=true;
    for (int j=0; j < clazz.length; j++) {
      String value=(String)parameters.get(j);
      try {
        converted[j]=CmsDataTypeUtil.parse(value,clazz[j]);
      }
 catch (      Throwable t) {
        match=false;
        break;
      }
    }
    if (match) {
      params=converted;
      foundMethod=method;
      break;
    }
  }
  if ((foundMethod == null) && (onlyStringMethod != null)) {
    params=parameters.toArray();
    foundMethod=onlyStringMethod;
  }
  if ((params == null) || (foundMethod == null)) {
    return false;
  }
  try {
    Object result=foundMethod.invoke(m_object,params);
    if (result != null) {
      if (result instanceof Collection) {
        Collection c=(Collection)result;
        System.out.println(c.getClass().getName() + " (size: " + c.size()+ ")");
        int count=0;
        if (result instanceof Map) {
          Map m=(Map)result;
          Iterator j=m.entrySet().iterator();
          while (j.hasNext()) {
            Map.Entry entry=(Map.Entry)j.next();
            System.out.println(count++ + ": " + entry.getKey()+ "= "+ entry.getValue());
          }
        }
 else {
          Iterator j=c.iterator();
          while (j.hasNext()) {
            System.out.println(count++ + ": " + j.next());
          }
        }
      }
 else {
        System.out.println(result.toString());
      }
    }
  }
 catch (  InvocationTargetException ite) {
    System.out.println(Messages.get().getBundle(getLocale()).key(Messages.GUI_SHELL_EXEC_METHOD_1,new Object[]{foundMethod.getName()}));
    ite.getTargetException().printStackTrace(System.out);
  }
catch (  Throwable t) {
    System.out.println(Messages.get().getBundle(getLocale()).key(Messages.GUI_SHELL_EXEC_METHOD_1,new Object[]{foundMethod.getName()}));
    t.printStackTrace(System.out);
  }
  return true;
}
