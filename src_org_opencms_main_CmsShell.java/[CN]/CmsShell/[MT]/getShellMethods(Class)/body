{
  Map result=new TreeMap();
  Method[] methods=base.getMethods();
  for (int i=0; i < methods.length; i++) {
    if ((methods[i].getDeclaringClass() == base) && (methods[i].getModifiers() == Modifier.PUBLIC)) {
      boolean onlyPrimitive=true;
      Class[] clazz=methods[i].getParameterTypes();
      for (int j=0; j < clazz.length; j++) {
        if (!((clazz[j].equals(String.class)) || (clazz[j].equals(CmsUUID.class)) || (clazz[j].equals(boolean.class))|| (clazz[j].equals(int.class))|| (clazz[j].equals(long.class))|| (clazz[j].equals(double.class))|| (clazz[j].equals(float.class)))) {
          onlyPrimitive=false;
          break;
        }
      }
      if (onlyPrimitive) {
        String lookup=buildMethodString(methods[i].getName(),methods[i].getParameterTypes().length);
        List l;
        if (result.containsKey(lookup)) {
          l=(List)result.get(lookup);
        }
 else {
          l=new ArrayList(1);
        }
        l.add(methods[i]);
        result.put(lookup,l);
      }
    }
  }
  return result;
}
