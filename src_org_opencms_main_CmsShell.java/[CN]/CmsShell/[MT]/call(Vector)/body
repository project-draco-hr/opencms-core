{
  if (m_echo) {
    for (int i=0; i < commands.size(); i++) {
      System.out.print(commands.elementAt(i) + " ");
    }
    System.out.println();
  }
  if ((commands == null) || (commands.size() == 0)) {
    return;
  }
  String splittet[]=new String[commands.size()];
  String toCall;
  commands.copyInto(splittet);
  toCall=splittet[0];
  if (toCall == null) {
    return;
  }
  Class paramClasses[]=new Class[splittet.length - 1];
  String params[]=new String[splittet.length - 1];
  for (int z=0; z < splittet.length - 1; z++) {
    params[z]=splittet[z + 1];
    paramClasses[z]=String.class;
  }
  try {
    m_shellCommands.getClass().getMethod(toCall,paramClasses).invoke(m_shellCommands,params);
  }
 catch (  InvocationTargetException ite) {
    System.err.println("Got Exception while using reflection:");
    ite.getTargetException().printStackTrace();
  }
catch (  NoSuchMethodException nsm) {
    System.out.println("The requested command was not found.\n-----------------------------------------------");
    m_shellCommands.printHelpText();
  }
catch (  Throwable t) {
    System.err.println("Got Exception while using reflection:");
    t.printStackTrace(System.err);
  }
}
