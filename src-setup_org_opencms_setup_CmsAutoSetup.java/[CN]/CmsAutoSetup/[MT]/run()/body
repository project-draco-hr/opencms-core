{
  if (m_bean.getWizardEnabled()) {
    long timeStarted=System.currentTimeMillis();
    CmsSetupTests setupTests=new CmsSetupTests();
    setupTests.runTests(m_bean,"No server info present, because this test is running in auto mode.");
    if (setupTests.isRed()) {
      for (      CmsSetupTestResult result : setupTests.getTestResults()) {
        if (result.isRed()) {
          throw new Exception(result.getInfo());
        }
      }
    }
    if (CmsStringUtil.isEmpty(m_bean.getDatabaseConfigPage(m_props.getDbProduct()))) {
      throw new Exception("DB product: " + m_props.getDbProduct() + " not supported.");
    }
    System.out.println("System requirements tested successful.");
    m_bean.setAutoMode(true);
    m_bean.setDatabase(m_props.getDbProduct());
    m_bean.setDb(m_props.getDbName());
    m_bean.setDbCreateUser(m_props.getCreateUser());
    m_bean.setDbCreatePwd(m_props.getCreatePwd() == null ? "" : m_props.getCreatePwd());
    m_bean.setDbWorkUser(m_props.getWorkerUser());
    m_bean.setDbWorkPwd(m_props.getWorkerPwd() == null ? "" : m_props.getWorkerPwd());
    m_bean.setDbCreateConStr(m_props.getConnectionUrl());
    m_bean.setDbWorkConStr(m_props.getConnectionUrl());
    m_bean.setDbParamaters(m_props.toParameterMap(),m_props.getDbProvider(),"/opencms/",null);
    m_bean.setServerName(m_props.getServerName());
    m_bean.setWorkplaceSite(m_props.getServerUrl());
    m_bean.setEthernetAddress(m_props.getEthernetAddress() == null ? CmsStringUtil.getEthernetAddress() : m_props.getEthernetAddress());
    m_bean.getAvailableModules();
    List<String> componentsToInstall=m_props.getInstallComponents();
    String modules=m_bean.getComponentModules(componentsToInstall);
    m_bean.setInstallModules(modules);
    if (m_bean.isInitialized()) {
      System.out.println("Setup-Bean initialized successful.");
      CmsSetupDb db=new CmsSetupDb(m_bean.getWebAppRfsPath());
      try {
        db.setConnection(m_bean.getDbDriver(),m_bean.getDbWorkConStr(),m_bean.getDbConStrParams(),m_bean.getDbWorkUser(),m_bean.getDbWorkPwd());
        if (!db.noErrors()) {
          db.closeConnection();
          db.clearErrors();
          db.setConnection(m_bean.getDbDriver(),m_bean.getDbCreateConStr(),m_bean.getDbConStrParams(),m_bean.getDbCreateUser(),m_bean.getDbCreatePwd());
        }
        if (!db.noErrors() || !m_bean.validateJdbc()) {
          throw new Exception("DB Connection test faild.");
        }
      }
  finally {
        db.clearErrors();
        db.closeConnection();
      }
    }
    System.out.println("DB connection tested successful.");
    CmsSetupDb db=null;
    boolean dbExists=false;
    if (m_bean.isInitialized()) {
      if (m_props.isCreateDb() || m_props.isCreateTables()) {
        db=new CmsSetupDb(m_bean.getWebAppRfsPath());
        if (m_bean.getDatabase().startsWith("oracle") || m_bean.getDatabase().startsWith("db2") || m_bean.getDatabase().startsWith("as400")) {
          db.setConnection(m_bean.getDbDriver(),m_bean.getDbWorkConStr(),m_bean.getDbConStrParams(),m_bean.getDbWorkUser(),m_bean.getDbWorkPwd());
        }
 else {
          db.setConnection(m_bean.getDbDriver(),m_bean.getDbWorkConStr(),m_bean.getDbConStrParams(),m_bean.getDbCreateUser(),m_bean.getDbCreatePwd());
          dbExists=db.noErrors();
          if (dbExists) {
            db.closeConnection();
          }
 else {
            db.clearErrors();
          }
        }
        if (!dbExists || m_props.isDropDb()) {
          db.closeConnection();
          if (!m_bean.getDatabase().startsWith("db2") && !m_bean.getDatabase().startsWith("as400")) {
            db.setConnection(m_bean.getDbDriver(),m_bean.getDbCreateConStr(),m_bean.getDbConStrParams(),m_bean.getDbCreateUser(),m_bean.getDbCreatePwd());
          }
        }
      }
    }
    if (!m_props.isCreateDb() && !m_props.isCreateTables() && !dbExists) {
      throw new Exception("You have not created the Alkacon OpenCms database.");
    }
    if (dbExists && m_props.isCreateTables() && !m_props.isDropDb()&& (db != null)) {
      throw new Exception("You have selected to not drop existing DBs, but a DB with the given name exists.");
    }
    if (dbExists && m_props.isCreateDb() && m_props.isDropDb()&& (db != null)&& (!CmsSetupBean.JPA_PROVIDER.equals(m_props.getDbProvider()))) {
      db.closeConnection();
      db.setConnection(m_bean.getDbDriver(),m_bean.getDbWorkConStr(),m_bean.getDbConStrParams(),m_bean.getDbCreateUser(),m_bean.getDbCreatePwd());
      db.dropDatabase(m_bean.getDatabase(),m_bean.getReplacer());
      if (!db.noErrors()) {
        for (        String error : db.getErrors()) {
          System.err.println(error + "\n");
          System.err.println("-------------------------------------------\n");
        }
        db.clearErrors();
        throw new Exception("Error ocurred while dropping the DB!");
      }
      System.out.println("Database dropped successful.");
    }
    if (m_props.isCreateDb() && (db != null) && (!CmsSetupBean.JPA_PROVIDER.equals(m_props.getDbProvider()))) {
      db.createDatabase(m_bean.getDatabase(),m_bean.getReplacer());
      if (!db.noErrors()) {
        for (        String error : db.getErrors()) {
          System.err.println(error + "\n");
          System.err.println("-------------------------------------------\n");
        }
        db.clearErrors();
        throw new Exception("Error ocurred while creating the DB!");
      }
      db.closeConnection();
      System.out.println("Database created successful.");
    }
    if (m_props.isCreateTables() && (db != null)) {
      db.setConnection(m_bean.getDbDriver(),m_bean.getDbWorkConStr(),m_bean.getDbConStrParams(),m_bean.getDbWorkUser(),m_bean.getDbWorkPwd());
      db.dropTables(m_bean.getDatabase());
      db.clearErrors();
      db.closeConnection();
      db.setConnection(m_bean.getDbDriver(),m_bean.getDbWorkConStr(),m_bean.getDbConStrParams(),m_bean.getDbWorkUser(),m_bean.getDbWorkPwd());
      db.createTables(m_bean.getDatabase(),m_bean.getReplacer());
      if (!db.noErrors()) {
        for (        String error : db.getErrors()) {
          System.err.println(error + "\n");
          System.err.println("-------------------------------------------\n");
        }
        db.clearErrors();
        throw new Exception("Error ocurred while creating tables.");
      }
      db.closeConnection();
      System.out.println("Tables created successful.");
    }
    if (db != null) {
      db.closeConnection();
    }
    System.out.println("Database setup was successful.");
    if (m_bean.prepareStep8()) {
      System.out.println("Configuration files written successful.");
      m_bean.prepareStep8b();
    }
    while (m_bean.isImportRunning()) {
      Thread.sleep(500);
    }
    System.out.println("Module import successful");
    m_bean.prepareStep10();
    System.out.println();
    System.out.println("-------------------------------------------");
    System.out.println("Setup finished successful in: " + Math.round((System.currentTimeMillis() - timeStarted) / 1000) + " seconds.");
    System.out.println("-------------------------------------------");
  }
 else {
    throw new Exception("Error starting Alkacon OpenCms setup wizard.");
  }
}
