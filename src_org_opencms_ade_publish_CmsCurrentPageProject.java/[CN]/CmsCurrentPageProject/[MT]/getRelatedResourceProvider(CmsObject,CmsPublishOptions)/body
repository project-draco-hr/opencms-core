{
  return new I_CmsPublishRelatedResourceProvider(){
    public Set<CmsResource> getAdditionalRelatedResources(    CmsObject cms,    CmsResource res){
      Map<String,String> params=options.getParameters();
      String pageId=options.getParameters().get(CmsPublishOptions.PARAM_CONTAINERPAGE);
      String detailId=options.getParameters().get(CmsPublishOptions.PARAM_DETAIL);
      Set<CmsResource> result=Sets.newHashSet();
      if (res.getStructureId().toString().equals(detailId)) {
        String detailContentPagePath=CmsJspTagContainer.getDetailOnlyPageName(cms.getRequestContext().removeSiteRoot(res.getRootPath()));
        try {
          CmsResource detailContentPage=cms.readResource(detailContentPagePath,CmsResourceFilter.IGNORE_EXPIRATION);
          result.add(detailContentPage);
        }
 catch (        CmsVfsResourceNotFoundException e) {
        }
catch (        CmsException e) {
          LOG.error(e.getLocalizedMessage(),e);
        }
      }
      if (res.getStructureId().toString().equals(pageId)) {
        I_CmsCollectorInfoFactory collectorInfoFactory=AutoBeanFactorySource.create(I_CmsCollectorInfoFactory.class);
        for (        Map.Entry<String,String> entry : params.entrySet()) {
          if (entry.getKey().startsWith(CmsPublishOptions.PARAM_COLLECTOR_INFO)) {
            try {
              AutoBean<I_CmsContentLoadCollectorInfo> autoBean=AutoBeanCodex.decode(collectorInfoFactory,I_CmsContentLoadCollectorInfo.class,entry.getValue());
              String collectorName=autoBean.as().getCollectorName();
              I_CmsCollectorPublishListProvider publishListProvider=null;
              if (null != collectorName) {
                publishListProvider=OpenCms.getResourceManager().getContentCollector(collectorName);
              }
              if (null == publishListProvider) {
                String collectorClassName=autoBean.as().getCollectorClass();
                Class<?> collectorClass=Class.forName(collectorClassName);
                publishListProvider=(I_CmsCollectorPublishListProvider)collectorClass.newInstance();
              }
              if (publishListProvider == null) {
                continue;
              }
              result.addAll(publishListProvider.getPublishResources(cmsObject,autoBean.as()));
            }
 catch (            Exception e) {
              LOG.error(e.getLocalizedMessage(),e);
            }
          }
        }
        String collectorItemsStr=options.getParameters().get(CmsPublishOptions.PARAM_COLLECTOR_ITEMS);
        if (collectorItemsStr != null) {
          for (          String token : collectorItemsStr.split(",")) {
            try {
              if (CmsUUID.isValidUUID(token)) {
                CmsResource collectorRes=cms.readResource(new CmsUUID(token),CmsResourceFilter.ALL);
                if (!collectorRes.getState().isUnchanged()) {
                  result.add(collectorRes);
                }
              }
            }
 catch (            Exception e) {
              LOG.error("Error processing collector item " + token + ": "+ e.getLocalizedMessage(),e);
            }
          }
        }
      }
      return result;
    }
  }
;
}
