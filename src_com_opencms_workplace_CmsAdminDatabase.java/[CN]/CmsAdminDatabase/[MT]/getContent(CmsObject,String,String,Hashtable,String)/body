{
  if (com.opencms.boot.I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && C_DEBUG && A_OpenCms.isLogging()) {
    A_OpenCms.log(C_OPENCMS_DEBUG,this.getClassName() + "getting content of element " + ((elementName == null) ? "<root>" : elementName));
    A_OpenCms.log(C_OPENCMS_DEBUG,this.getClassName() + "template file is: " + templateFile);
    A_OpenCms.log(C_OPENCMS_DEBUG,this.getClassName() + "selected template section is: " + ((templateSelector == null) ? "<default>" : templateSelector));
  }
  CmsXmlWpTemplateFile xmlTemplateDocument=new CmsXmlWpTemplateFile(cms,templateFile);
  I_CmsSession session=cms.getRequestContext().getSession(true);
  String fileName=(String)parameters.get("filename");
  String existingFile=(String)parameters.get("existingfile");
  String action=(String)parameters.get("action");
  String allResources=(String)parameters.get("ALLRES");
  String allModules=(String)parameters.get("ALLMOD");
  String step=(String)parameters.get("step");
  if (action == null) {
    if (!cms.getRequestContext().currentProject().equals(cms.onlineProject())) {
      xmlTemplateDocument.setData("nounchanged",xmlTemplateDocument.getProcessedDataValue("nounchangedbox",this,parameters));
    }
    if (cms.isAdmin()) {
      xmlTemplateDocument.setData("userdata",xmlTemplateDocument.getProcessedDataValue("userdatabox",this,parameters));
    }
    xmlTemplateDocument.setData("moduleselect",this.getModuleSelectbox(cms,xmlTemplateDocument));
  }
  if ((action != null) && ("working".equals(action))) {
    Thread doTheWork=(Thread)session.getValue(C_DATABASE_THREAD);
    if (doTheWork.isAlive()) {
      String time=(String)parameters.get("time");
      int wert=Integer.parseInt(time);
      wert+=20;
      xmlTemplateDocument.setData("time","" + wert);
      return startProcessing(cms,xmlTemplateDocument,elementName,parameters,"wait");
    }
 else {
      String errordetails=(String)session.getValue(C_SESSION_THREAD_ERROR);
      if (errordetails == null) {
        session.removeValue(C_PARA_FILE);
        session.removeValue(C_PARA_FILECONTENT);
        return startProcessing(cms,xmlTemplateDocument,elementName,parameters,"done");
      }
 else {
        xmlTemplateDocument.setData("details",errordetails);
        session.removeValue(C_SESSION_THREAD_ERROR);
        return startProcessing(cms,xmlTemplateDocument,elementName,parameters,"error");
      }
    }
  }
  try {
    if ("export".equals(action)) {
      Vector resourceNames=parseResources(allResources);
      String[] exportPaths=new String[resourceNames.size()];
      CmsXmlLanguageFile lang=xmlTemplateDocument.getLanguageFile();
      for (int i=0; i < resourceNames.size(); i++) {
        if (lang.getLanguageValue("title.rootfolder").equals(resourceNames.elementAt(i))) {
          resourceNames.setElementAt("/",i);
        }
        exportPaths[i]=(String)resourceNames.elementAt(i);
      }
      boolean excludeSystem=false;
      if (parameters.get("nosystem") != null) {
        excludeSystem=true;
      }
      boolean excludeUnchanged=false;
      if (parameters.get("nounchanged") != null) {
        excludeUnchanged=true;
      }
      boolean exportUserdata=false;
      if (parameters.get("userdata") != null) {
        exportUserdata=true;
      }
      if (session.getValue(C_SESSION_THREAD_ERROR) != null) {
        session.removeValue(C_SESSION_THREAD_ERROR);
      }
      Thread doExport=new CmsAdminDatabaseExportThread(cms,CmsBase.getAbsolutePath(cms.readExportPath()) + File.separator + fileName,exportPaths,excludeSystem,excludeUnchanged,exportUserdata,session);
      doExport.start();
      session.putValue(C_DATABASE_THREAD,doExport);
      xmlTemplateDocument.setData("time","10");
      templateSelector="wait";
    }
 else     if ("exportmoduledata".equals(action)) {
      Vector channelNames=parseResources(allResources);
      String[] exportChannels=new String[channelNames.size()];
      CmsXmlLanguageFile lang=xmlTemplateDocument.getLanguageFile();
      for (int i=0; i < channelNames.size(); i++) {
        if (lang.getLanguageValue("title.rootfolder").equals(channelNames.elementAt(i))) {
          channelNames.setElementAt("/",i);
        }
        exportChannels[i]=(String)channelNames.elementAt(i);
      }
      Vector moduleNames=parseResources(allModules);
      String[] exportModules=new String[moduleNames.size()];
      for (int i=0; i < moduleNames.size(); i++) {
        exportModules[i]=(String)moduleNames.elementAt(i);
      }
      if (session.getValue(C_SESSION_THREAD_ERROR) != null) {
        session.removeValue(C_SESSION_THREAD_ERROR);
      }
      Thread doExport=new CmsAdminDatabaseExportThread(cms,CmsBase.getAbsolutePath(cms.readExportPath()) + File.separator + fileName,exportChannels,exportModules,session);
      doExport.start();
      session.putValue(C_DATABASE_THREAD,doExport);
      xmlTemplateDocument.setData("time","10");
      templateSelector="wait";
    }
 else     if ("import".equals(action)) {
      if ("local".equals(step) || "server".equals(step)) {
        templateSelector=step;
      }
 else       if ("localupload".equals(step)) {
        existingFile=copyFileToServer(cms,session);
        step="go";
      }
      if ("go".equals(step)) {
        if (session.getValue(C_SESSION_THREAD_ERROR) != null) {
          session.removeValue(C_SESSION_THREAD_ERROR);
        }
        Thread doImport=new CmsAdminDatabaseImportThread(cms,CmsBase.getAbsolutePath(cms.readExportPath()) + File.separator + existingFile,session);
        doImport.start();
        session.putValue(C_DATABASE_THREAD,doImport);
        xmlTemplateDocument.setData("time","10");
        templateSelector="wait";
      }
    }
  }
 catch (  CmsException exc) {
    xmlTemplateDocument.setData("details",Utils.getStackTrace(exc));
    templateSelector="error";
  }
  return startProcessing(cms,xmlTemplateDocument,elementName,parameters,templateSelector);
}
