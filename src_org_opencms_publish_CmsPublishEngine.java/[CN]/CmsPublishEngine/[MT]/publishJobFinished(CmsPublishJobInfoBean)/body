{
  unlockPublishList(publishJob);
  if ((m_currentPublishThread != null) && (m_currentPublishThread.isAborted())) {
    new Thread(this).start();
    return;
  }
  CmsDbContext dbc=m_dbContextFactory.getDbContext(publishJob.getCmsObject().getRequestContext());
  try {
    Map<String,Object> eventData=new HashMap<String,Object>();
    eventData.put(I_CmsEventListener.KEY_REPORT,publishJob.getPublishReport());
    eventData.put(I_CmsEventListener.KEY_PUBLISHID,publishJob.getPublishList().getPublishHistoryId().toString());
    eventData.put(I_CmsEventListener.KEY_PROJECTID,dbc.currentProject().getUuid());
    eventData.put(I_CmsEventListener.KEY_DBCONTEXT,dbc);
    CmsEvent afterPublishEvent=new CmsEvent(I_CmsEventListener.EVENT_PUBLISH_PROJECT,eventData);
    OpenCms.fireCmsEvent(afterPublishEvent);
  }
 catch (  Throwable t) {
    publishJob.getPublishReport().println(t);
  }
 finally {
    try {
      dbc.clear();
    }
 catch (    Throwable t) {
    }
    dbc=null;
  }
  m_listeners.fireFinish(new CmsPublishJobRunning(publishJob));
  publishJob.finish();
  m_publishHistory.add(publishJob);
  m_currentPublishThread=null;
  OpenCms.getMemoryMonitor().flushCache(CmsMemoryMonitor.CacheType.PUBLISHED_RESOURCES);
  new Thread(this).start();
}
