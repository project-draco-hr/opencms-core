{
  try {
    unlockPublishList(publishJob);
  }
 catch (  Throwable t) {
    LOG.error(t.getLocalizedMessage(),t);
  }
  CmsDbContext dbc=m_dbContextFactory.getDbContext(publishJob.getCmsObject().getRequestContext());
  try {
    Map<String,Object> eventData=new HashMap<String,Object>();
    eventData.put(I_CmsEventListener.KEY_REPORT,publishJob.getPublishReport());
    eventData.put(I_CmsEventListener.KEY_PUBLISHID,publishJob.getPublishList().getPublishHistoryId().toString());
    eventData.put(I_CmsEventListener.KEY_PROJECTID,dbc.currentProject().getUuid());
    eventData.put(I_CmsEventListener.KEY_DBCONTEXT,dbc);
    CmsEvent afterPublishEvent=new CmsEvent(I_CmsEventListener.EVENT_PUBLISH_PROJECT,eventData);
    OpenCms.fireCmsEvent(afterPublishEvent);
  }
 catch (  Throwable t) {
    if (dbc != null) {
      dbc.rollback();
    }
    LOG.error(t);
    publishJob.getPublishReport().println(t);
  }
 finally {
    if (dbc != null) {
      try {
        dbc.clear();
      }
 catch (      Throwable t) {
      }
      dbc=null;
    }
  }
  try {
    m_listeners.fireFinish(new CmsPublishJobRunning(publishJob));
  }
 catch (  Throwable t) {
    LOG.error(t.getLocalizedMessage(),t);
  }
  try {
    publishJob.finish();
  }
 catch (  Throwable t) {
    LOG.error(t.getLocalizedMessage(),t);
  }
  try {
    m_publishHistory.add(publishJob);
  }
 catch (  Throwable t) {
    LOG.error(t.getLocalizedMessage(),t);
  }
  if (Thread.currentThread() == m_currentPublishThread) {
    m_currentPublishThread=null;
  }
  OpenCms.getMemoryMonitor().flushCache(CmsMemoryMonitor.CacheType.PUBLISHED_RESOURCES);
  checkCurrentPublishJobThread();
}
