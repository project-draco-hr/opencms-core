{
  if (m_targets == null) {
    return;
  }
  int absTop=m_currentEvent.getClientY();
  int absLeft=m_currentEvent.getClientX();
  Iterator<T> it=m_targets.iterator();
  while (it.hasNext()) {
    T target=it.next();
    if (target.getPositionInfo().isOverElement(absLeft,absTop)) {
      if (target == m_currentTarget) {
        sortTarget();
      }
 else {
        if (m_currentTarget != null) {
          elementLeaveTargetAction();
          m_dragElement.onDragLeave(this,m_currentTarget);
          m_currentTarget.onDragLeave(this);
        }
        m_currentTarget=target;
        elementEnterTargetAction();
        m_dragElement.onDragEnter(this,m_currentTarget);
        sortTarget();
      }
      return;
    }
  }
  if (m_currentTarget != null) {
    elementLeaveTargetAction();
    m_dragElement.onDragLeave(this,m_currentTarget);
    m_currentTarget.onDragLeave(this);
    m_currentTarget=null;
  }
}
