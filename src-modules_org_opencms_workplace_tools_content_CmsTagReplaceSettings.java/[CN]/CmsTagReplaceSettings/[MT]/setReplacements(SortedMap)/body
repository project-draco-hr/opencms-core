{
  Iterator itMappings=replacements.entrySet().iterator();
  Map.Entry entry;
  String key, value;
  while (itMappings.hasNext()) {
    entry=(Map.Entry)itMappings.next();
    key=(String)entry.getKey();
    value=(String)entry.getValue();
    if (CmsStringUtil.isEmptyOrWhitespaceOnly(value)) {
      Tag deleteTag;
      String tagName=(key).toLowerCase().trim();
      try {
        Vector attributeList=new Vector(1);
        Attribute tagNameAttribute=new Attribute();
        tagNameAttribute.setName(tagName);
        attributeList.add(tagNameAttribute);
        deleteTag=m_nodeFactory.createTagNode(null,0,0,attributeList);
        m_deleteTags.add(deleteTag);
        itMappings.remove();
      }
 catch (      ParserException e) {
        CmsMessageContainer container=Messages.get().container(Messages.GUI_ERR_TAGREPLACE_TAGNAME_INVALID_1,tagName);
        throw new CmsIllegalArgumentException(container,e);
      }
    }
 else {
    }
    m_tags2replacementTags=replacements;
  }
  if (CmsStringUtil.isEmptyOrWhitespaceOnly(m_propertyValueTagReplaceID)) {
    setPropertyValueTagReplaceID(null);
  }
}
