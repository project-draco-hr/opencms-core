{
  CmsResource resource=m_cms.readResource(element.getElementId());
  CmsResourceUtil resUtil=new CmsResourceUtil(m_cms,resource);
  CmsContainerElementData elementBean=new CmsContainerElementData();
  elementBean.setClientId(element.getClientId());
  elementBean.setSitePath(resUtil.getFullPath());
  elementBean.setLastModifiedDate(resource.getDateLastModified());
  elementBean.setLastModifiedByUser(m_cms.readUser(resource.getUserLastModified()).getName());
  elementBean.setNavText(resUtil.getNavText());
  elementBean.setTitle(resUtil.getTitle());
  elementBean.setResourceType(OpenCms.getResourceManager().getResourceType(resource.getTypeId()).getTypeName());
  Map<String,CmsXmlContentProperty> propertyConfig=CmsXmlContentPropertyHelper.getPropertyInfo(m_cms,resource);
  elementBean.setProperties(CmsXmlContentPropertyHelper.convertPropertiesToClientFormat(m_cms,element.getProperties(),propertyConfig));
  elementBean.setPropertyConfig(new HashMap<String,CmsXmlContentProperty>(propertyConfig));
  elementBean.setNoEditReason(CmsEncoder.escapeHtml(resUtil.getNoEditReason(OpenCms.getWorkplaceManager().getWorkplaceLocale(m_cms))));
  elementBean.setStatus(resUtil.getStateAbbreviation());
  Map<String,String> contents=new HashMap<String,String>();
  if (resource.getTypeId() == CmsResourceTypeXmlContainerPage.GROUP_CONTAINER_TYPE_ID) {
    Set<String> types=new HashSet<String>();
    Map<String,CmsContainer> containersByName=new HashMap<String,CmsContainer>();
    for (    CmsContainer container : containers) {
      types.add(container.getType());
      containersByName.put(container.getName(),container);
    }
    CmsXmlGroupContainer xmlGroupContainer=CmsXmlGroupContainerFactory.unmarshal(m_cms,resource,m_req);
    CmsGroupContainerBean groupContainer=xmlGroupContainer.getGroupContainer(m_cms,m_cms.getRequestContext().getLocale());
    elementBean.setGroupContainer(true);
    elementBean.setTypes(groupContainer.getTypes());
    elementBean.setDescription(groupContainer.getDescription());
    if (groupContainer.getTypes().isEmpty()) {
      if (groupContainer.getElements().isEmpty()) {
        String emptySub="<div>NEW AND EMPTY</div>";
        for (        String name : containersByName.keySet()) {
          contents.put(name,emptySub);
        }
      }
 else {
        return null;
      }
    }
 else {
      for (      CmsContainer cnt : containersByName.values()) {
        String type=cnt.getType();
        if (groupContainer.getTypes().contains(type)) {
          contents.put(cnt.getName(),"<div>should not be used</div>");
        }
      }
    }
    List<String> subItems=new ArrayList<String>();
    for (    CmsContainerElementBean subElement : groupContainer.getElements()) {
      subItems.add(subElement.getClientId());
    }
    elementBean.setSubItems(subItems);
  }
 else {
    Map<CmsPair<String,Integer>,String> formatters=getFormatterMap(resource,containers);
    Set<String> formatterUris=new HashSet<String>(formatters.values());
    Map<String,String> contentsByFormatter=getContentsByFormatter(element,formatterUris);
    Map<String,String> contentsByName=getContentsByContainerName(containers,formatters,contentsByFormatter);
    contents=contentsByName;
  }
  elementBean.setContents(contents);
  return elementBean;
}
