{
  CmsJspStandardContextBean standardContext=getStandardContext(cms,req);
  CmsContainerPageBean containerPage=standardContext.getPage();
  Set<String> cssIncludes=new LinkedHashSet<String>();
  Map<String,String> inlineCss=new LinkedHashMap<String,String>();
  if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(m_defaults)) {
    String[] defaults=m_defaults.split("\\|");
    for (int i=0; i < defaults.length; i++) {
      cssIncludes.add(defaults[i]);
    }
  }
  if ((containerPage != null) && (containerPage.getElements() != null)) {
    Map<CmsUUID,I_CmsFormatterBean> formatters=OpenCms.getADEManager().getCachedFormatters(standardContext.isOnline()).getFormatters();
    for (    CmsContainerBean container : containerPage.getContainers().values()) {
      for (      CmsContainerElementBean element : container.getElements()) {
        try {
          element.initResource(cms);
          if (element.isGroupContainer(cms) || element.isInheritedContainer(cms)) {
            List<CmsContainerElementBean> subElements;
            if (element.isGroupContainer(cms)) {
              subElements=CmsJspTagContainer.getGroupContainerElements(cms,element,req,container.getType());
            }
 else {
              subElements=CmsJspTagContainer.getInheritedContainerElements(cms,element);
            }
            for (            CmsContainerElementBean subElement : subElements) {
              subElement.initResource(cms);
              I_CmsFormatterBean formatter=getFormatterBeanForElement(subElement,container,formatters);
              if (formatter != null) {
                cssIncludes.addAll(formatter.getCssHeadIncludes());
                if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(formatter.getInlineCss())) {
                  inlineCss.put(formatter.getId(),formatter.getInlineCss());
                }
              }
 else {
                cssIncludes.addAll(getCSSHeadIncludes(cms,subElement.getResource()));
              }
            }
          }
 else {
            I_CmsFormatterBean formatter=getFormatterBeanForElement(element,container,formatters);
            if (formatter != null) {
              cssIncludes.addAll(formatter.getCssHeadIncludes());
              if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(formatter.getInlineCss())) {
                inlineCss.put(formatter.getId(),formatter.getInlineCss());
              }
            }
 else {
              cssIncludes.addAll(getCSSHeadIncludes(cms,element.getResource()));
            }
          }
        }
 catch (        CmsException e) {
          LOG.error(Messages.get().getBundle().key(Messages.ERR_READING_REQUIRED_RESOURCE_1,element.getSitePath()),e);
        }
      }
    }
  }
  if (standardContext.getDetailContentId() != null) {
    try {
      CmsResource detailContent=cms.readResource(standardContext.getDetailContentId());
      CmsFormatterConfiguration config=OpenCms.getADEManager().lookupConfiguration(cms,cms.getRequestContext().getRootUri()).getFormatters(cms,detailContent);
      boolean requiresAllIncludes=true;
      if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(getDetailtype()) && CmsStringUtil.isNotEmptyOrWhitespaceOnly(getDetailwidth())) {
        try {
          int width=Integer.parseInt(getDetailwidth());
          I_CmsFormatterBean formatter=config.getDetailFormatter(getDetailtype(),width);
          cssIncludes.addAll(formatter.getCssHeadIncludes());
          if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(formatter.getInlineCss())) {
            inlineCss.put(formatter.getId(),formatter.getInlineCss());
          }
          requiresAllIncludes=false;
        }
 catch (        NumberFormatException ne) {
        }
      }
      if (requiresAllIncludes) {
        for (        I_CmsFormatterBean formatter : config.getDetailFormatters()) {
          cssIncludes.addAll(formatter.getCssHeadIncludes());
          if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(formatter.getInlineCss())) {
            inlineCss.put(formatter.getId(),formatter.getInlineCss());
          }
        }
      }
    }
 catch (    CmsException e) {
      LOG.error(Messages.get().getBundle().key(Messages.ERR_READING_REQUIRED_RESOURCE_1,standardContext.getDetailContentId()),e);
    }
  }
  for (  String cssUri : cssIncludes) {
    pageContext.getOut().print("\n<link href=\"" + CmsJspTagLink.linkTagAction(cssUri.trim(),req) + generateReqParams()+ "\" rel=\"stylesheet\" type=\"text/css\">");
    if (shouldCloseTags()) {
      pageContext.getOut().print("</link>");
    }
  }
  if (cms.getRequestContext().getCurrentProject().isOnlineProject()) {
    if (!inlineCss.isEmpty()) {
      StringBuffer inline=new StringBuffer("\n<style type=\"text/css\">\n");
      for (      Entry<String,String> cssEntry : inlineCss.entrySet()) {
        inline.append(cssEntry.getValue()).append("\n\n");
      }
      inline.append("\n</style>\n");
      pageContext.getOut().print(inline.toString());
    }
  }
 else {
    StringBuffer inline=new StringBuffer();
    for (    Entry<String,String> cssEntry : inlineCss.entrySet()) {
      inline.append("\n<style type=\"text/css\" rel=\"" + cssEntry.getKey() + "\">\n");
      inline.append(cssEntry.getValue()).append("\n\n");
      inline.append("\n</style>\n");
    }
    pageContext.getOut().print(inline.toString());
  }
}
