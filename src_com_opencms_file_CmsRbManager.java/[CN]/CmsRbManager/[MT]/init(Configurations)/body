{
  String rbName=null;
  String rbPools[]=null;
  Hashtable rbPool;
  String rbClassName=null;
  String rbAccessName=null;
  String rbAccessPool=null;
  Class rbAccessClass;
  Class rbClass=null;
  CmsVfsAccess rbVfsAccess;
  CmsUserAccess rbUserAccess;
  CmsDbAccess rbDbAccess;
  I_CmsResourceBroker rbInstance=null;
  rbName=(String)configurations.getString(C_CONFIGURATION_RESOURCEBROKER);
  if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Resource broker used : " + rbName);
  }
  rbClassName=(String)configurations.getString(C_CONFIGURATION_RESOURCEBROKER + "." + rbName+ "."+ C_CONFIGURATION_CLASS);
  if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Resource broker class: " + rbClassName);
  }
  rbPools=configurations.getStringArray(C_CONFIGURATION_RESOURCEBROKER + "." + C_CONFIGURATIONS_POOL);
  if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Resource pools       : ");
  }
  rbPool=new Hashtable();
  for (int p=0; p < rbPools.length; p++) {
    try {
      String poolUrl=CmsDbcp.createConnectionPool(configurations,rbPools[p]);
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Initializing pool    : " + poolUrl);
      }
      rbPool.put(rbPools[p],poolUrl);
    }
 catch (    Exception exc) {
      String message="Critical error while initializing resource pool " + rbPools[p];
      if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsRbManager] " + message);
      }
      exc.printStackTrace(System.err);
      throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
    }
  }
  rbAccessName=configurations.getString(C_CONFIGURATION_RESOURCEBROKER + ".access.vfs.class");
  rbAccessPool=configurations.getString(C_CONFIGURATION_RESOURCEBROKER + ".access.vfs.pool");
  try {
    rbAccessClass=Class.forName(rbAccessName);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Access class init    : starting " + rbAccessName);
    }
    rbVfsAccess=(CmsVfsAccess)rbAccessClass.newInstance();
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Access class init    : initializing " + rbAccessName);
    }
    rbAccessPool=(String)rbPool.get(rbAccessPool);
    rbVfsAccess.init(configurations,rbAccessPool);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Access class init    : finished, assigned pool " + rbAccessPool);
    }
  }
 catch (  Exception exc) {
    String message="Critical error while initializing vfs access";
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsRbManager] " + message);
    }
    exc.printStackTrace(System.err);
    throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
  }
  rbAccessName=configurations.getString(C_CONFIGURATION_RESOURCEBROKER + ".access.user.class");
  rbAccessPool=configurations.getString(C_CONFIGURATION_RESOURCEBROKER + ".access.user.pool");
  try {
    rbAccessClass=Class.forName(rbAccessName);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Access class init    : starting " + rbAccessName);
    }
    rbUserAccess=(CmsUserAccess)rbAccessClass.newInstance();
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Access class init    : initializing " + rbAccessName);
    }
    rbAccessPool=(String)rbPool.get(rbAccessPool);
    rbUserAccess.init(configurations,rbAccessPool);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Access class init    : finished, assigned pool " + rbAccessPool);
    }
  }
 catch (  Exception exc) {
    String message="Critical error while initializing user access";
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsRbManager] " + message);
    }
    exc.printStackTrace(System.err);
    throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
  }
  rbAccessName=configurations.getString(C_CONFIGURATION_RESOURCEBROKER + ".access.db.class");
  rbAccessPool=configurations.getString(C_CONFIGURATION_RESOURCEBROKER + ".access.db.pool");
  try {
    rbAccessClass=Class.forName(rbAccessName);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Access class init    : starting " + rbAccessName);
    }
    rbDbAccess=(CmsDbAccess)rbAccessClass.newInstance();
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Access class init    : initializing " + rbAccessName);
    }
    rbAccessPool=(String)rbPool.get(rbAccessPool);
    rbDbAccess.init(configurations,rbAccessPool);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Access class init    : finished, assigned pool " + rbAccessPool);
    }
  }
 catch (  Exception exc) {
    String message="Critical error while initializing db access";
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsRbManager] " + message);
    }
    exc.printStackTrace(System.err);
    throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
  }
  rbAccessPool=configurations.getString(C_CONFIGURATION_RESOURCEBROKER + ".access.cos.pool");
  rbAccessPool=(String)rbPool.get(rbAccessPool);
  A_OpenCms.setRuntimeProperty("cosPoolUrl",rbAccessPool);
  CmsIdGenerator.setDefaultPool(rbAccessPool);
  try {
    rbClass=Class.forName(rbClassName);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Resource broker init : phase 1 ok - starting");
    }
    rbInstance=(I_CmsResourceBroker)rbClass.newInstance();
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Resource broker init : phase 2 ok - initializing database");
    }
    rbInstance.init(configurations,rbVfsAccess,rbUserAccess,rbDbAccess);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Resource broker init : phase 4 ok - finished");
    }
    return (rbInstance);
  }
 catch (  Exception exc) {
    String message="Critical error while loading resourcebroker";
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsRbManager] " + message);
    }
    exc.printStackTrace(System.err);
    throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
  }
}
