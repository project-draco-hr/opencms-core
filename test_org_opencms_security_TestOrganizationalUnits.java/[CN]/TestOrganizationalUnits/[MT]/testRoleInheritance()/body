{
  CmsObject cms=getCmsObject();
  echo("Testing the inheritance of role memberships");
  cms.getRequestContext().setSiteRoot("");
  CmsRoleManager roleMan=OpenCms.getRoleManager();
  CmsOrgUnitManager ouMan=OpenCms.getOrgUnitManager();
  CmsOrganizationalUnit rootOu=ouMan.readOrganizationalUnit(cms,"");
  CmsResource rootRes=(ouMan.getResourcesForOrganizationalUnit(cms,rootOu.getName()).get(0));
  CmsOrganizationalUnit ou=ouMan.readOrganizationalUnit(cms,"test");
  CmsResource ouRes=(ouMan.getResourcesForOrganizationalUnit(cms,ou.getName()).get(0));
  CmsOrganizationalUnit ou2=ouMan.readOrganizationalUnit(cms,ou.getName() + "test2");
  CmsResource ou2Res=(ouMan.getResourcesForOrganizationalUnit(cms,ou2.getName()).get(0));
  CmsUser user=cms.readUser("test/test1");
  assertFalse(roleMan.hasRoleForResource(cms,user.getName(),CmsRole.ACCOUNT_MANAGER,cms.getRequestContext().getSitePath(rootRes)));
  assertFalse(roleMan.hasRoleForResource(cms,user.getName(),CmsRole.ACCOUNT_MANAGER,cms.getRequestContext().getSitePath(ouRes)));
  assertFalse(roleMan.hasRoleForResource(cms,user.getName(),CmsRole.ACCOUNT_MANAGER,cms.getRequestContext().getSitePath(ou2Res)));
  assertTrue(roleMan.hasRoleForResource(cms,CmsRole.ACCOUNT_MANAGER,cms.getRequestContext().getSitePath(rootRes)));
  assertTrue(roleMan.hasRoleForResource(cms,CmsRole.ACCOUNT_MANAGER,cms.getRequestContext().getSitePath(ouRes)));
  assertTrue(roleMan.hasRoleForResource(cms,CmsRole.ACCOUNT_MANAGER,cms.getRequestContext().getSitePath(ou2Res)));
  assertFalse(roleMan.hasRole(cms,user.getName(),CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName())));
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),true,false,false).isEmpty());
  assertEquals(1,roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName()),true,false).size());
  assertTrue(roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName()),true,false).contains(cms.readUser(OpenCms.getDefaultUsers().getUserAdmin())));
  roleMan.addUserToRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName()),user.getName());
  assertTrue(roleMan.hasRole(cms,user.getName(),CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName())));
  assertEquals(2,roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),false,false,false).size());
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),false,false,false).contains(CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName())));
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),false,false,false).contains(CmsRole.WORKPLACE_USER.forOrgUnit(ou.getName())));
  assertEquals(2,roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),false,true,false).size());
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),false,true,false).contains(CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName())));
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),false,true,false).contains(CmsRole.WORKPLACE_USER.forOrgUnit(ou.getName())));
  assertEquals(4,roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),true,false,false).size());
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),true,false,false).contains(CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName())));
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),true,false,false).contains(CmsRole.WORKPLACE_USER.forOrgUnit(ou.getName())));
  assertEquals(2,roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),true,true,false).size());
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),true,true,false).contains(CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName())));
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou.getName(),true,true,false).contains(CmsRole.WORKPLACE_USER.forOrgUnit(ou.getName())));
  assertEquals(1,roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName()),false,false).size());
  assertTrue(roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName()),false,false).contains(user));
  assertEquals(1,roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName()),false,true).size());
  assertTrue(roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName()),false,true).contains(user));
  assertEquals(2,roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName()),true,false).size());
  assertTrue(roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName()),true,false).contains(user));
  assertEquals(1,roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName()),true,true).size());
  assertTrue(roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName()),true,false).contains(user));
  assertTrue(roleMan.hasRole(cms,user.getName(),CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou2.getName())));
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou2.getName(),false,false,false).isEmpty());
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou2.getName(),false,true,false).isEmpty());
  assertEquals(2,roleMan.getRolesOfUser(cms,user.getName(),ou2.getName(),true,false,false).size());
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),ou2.getName(),true,true,false).isEmpty());
  assertEquals(0,roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou2.getName()),false,false).size());
  assertTrue(roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou2.getName()),false,true).isEmpty());
  assertEquals(2,roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou2.getName()),true,false).size());
  assertTrue(roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou2.getName()),true,false).contains(cms.readUser(OpenCms.getDefaultUsers().getUserAdmin())));
  assertTrue(roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou2.getName()),true,true).isEmpty());
  assertFalse(roleMan.hasRole(cms,user.getName(),CmsRole.ACCOUNT_MANAGER.forOrgUnit(rootOu.getName())));
  assertEquals(4,roleMan.getRolesOfUser(cms,user.getName(),rootOu.getName(),true,false,false).size());
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),rootOu.getName(),true,false,false).contains(CmsRole.ACCOUNT_MANAGER.forOrgUnit(ou.getName())));
  assertTrue(roleMan.getRolesOfUser(cms,user.getName(),rootOu.getName(),false,false,false).isEmpty());
  assertEquals(1,roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(rootOu.getName()),true,false).size());
  assertTrue(roleMan.getUsersOfRole(cms,CmsRole.ACCOUNT_MANAGER.forOrgUnit(rootOu.getName()),true,false).contains(cms.readUser(OpenCms.getDefaultUsers().getUserAdmin())));
  assertFalse(roleMan.hasRoleForResource(cms,user.getName(),CmsRole.ACCOUNT_MANAGER,cms.getRequestContext().getSitePath(rootRes)));
  assertTrue(roleMan.hasRoleForResource(cms,user.getName(),CmsRole.ACCOUNT_MANAGER,cms.getRequestContext().getSitePath(ouRes)));
  assertTrue(roleMan.hasRoleForResource(cms,user.getName(),CmsRole.ACCOUNT_MANAGER,cms.getRequestContext().getSitePath(ou2Res)));
}
