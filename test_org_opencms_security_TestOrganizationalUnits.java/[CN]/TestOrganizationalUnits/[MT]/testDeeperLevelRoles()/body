{
  CmsObject cms=getCmsObject();
  echo("Testing system roles in a deeper level ou");
  CmsOrganizationalUnit rootOu=OpenCms.getOrgUnitManager().readOrganizationalUnit(cms,"");
  CmsOrganizationalUnit flOu=OpenCms.getOrgUnitManager().readOrganizationalUnit(cms,"test/");
  CmsOrganizationalUnit dlOu=OpenCms.getOrgUnitManager().readOrganizationalUnit(cms,"test/test2/");
  List myRoles=OpenCms.getRoleManager().getRoles(cms,rootOu.getName(),false);
  assertEquals(CmsRole.getSystemRoles().size(),myRoles.size());
  for (int i=0; i < myRoles.size(); i++) {
    CmsRole role=(CmsRole)myRoles.get(i);
    assertEquals("",role.getOuFqn());
    assertTrue(myRoles.contains(CmsRole.getSystemRoles().get(i).forOrgUnit("")));
    assertTrue(CmsRole.getSystemRoles().contains(role.forOrgUnit(null)));
  }
  myRoles=OpenCms.getRoleManager().getRoles(cms,rootOu.getName(),true);
  assertEquals(CmsRole.getSystemRoles().size() + getOuRoles(flOu.getName()).size() + getOuRoles(dlOu.getName()).size(),myRoles.size());
  List rootRoles=new ArrayList(CmsRole.getSystemRoles().size());
  List flRoles=new ArrayList(getOuRoles(flOu.getName()).size());
  List dlRoles=new ArrayList(getOuRoles(dlOu.getName()).size());
  Iterator itRoles=myRoles.iterator();
  while (itRoles.hasNext()) {
    CmsRole role=(CmsRole)itRoles.next();
    if (role.getOuFqn().equals(rootOu.getName())) {
      rootRoles.add(role);
    }
 else     if (role.getOuFqn().equals(flOu.getName())) {
      flRoles.add(role);
    }
 else {
      assertEquals(dlOu.getName(),role.getOuFqn());
      dlRoles.add(role);
    }
  }
  for (int i=0; i < rootRoles.size(); i++) {
    assertTrue(CmsRole.getSystemRoles().contains((((CmsRole)rootRoles.get(i)).forOrgUnit(null))));
    assertTrue(rootRoles.contains(CmsRole.getSystemRoles().get(i).forOrgUnit("")));
  }
  for (int i=0; i < flRoles.size(); i++) {
    assertTrue(getOuRoles(flOu.getName()).contains(flRoles.get(i)));
    assertTrue(flRoles.contains(getOuRoles(flOu.getName()).get(i)));
  }
  for (int i=0; i < dlRoles.size(); i++) {
    assertTrue(getOuRoles(dlOu.getName()).contains(dlRoles.get(i)));
    assertTrue(dlRoles.contains(getOuRoles(dlOu.getName()).get(i)));
  }
  flRoles=OpenCms.getRoleManager().getRoles(cms,flOu.getName(),false);
  assertEquals(getOuRoles(flOu.getName()).size(),flRoles.size());
  for (int i=0; i < flRoles.size(); i++) {
    assertTrue(getOuRoles(flOu.getName()).contains(flRoles.get(i)));
    assertTrue(flRoles.contains(getOuRoles(flOu.getName()).get(i)));
  }
  myRoles=OpenCms.getRoleManager().getRoles(cms,flOu.getName(),true);
  assertEquals(getOuRoles(flOu.getName()).size() + getOuRoles(dlOu.getName()).size(),myRoles.size());
  flRoles=new ArrayList(getOuRoles(flOu.getName()).size());
  dlRoles=new ArrayList(getOuRoles(dlOu.getName()).size());
  itRoles=myRoles.iterator();
  while (itRoles.hasNext()) {
    CmsRole role=(CmsRole)itRoles.next();
    if (role.getOuFqn().equals(flOu.getName())) {
      flRoles.add(role);
    }
 else {
      assertEquals(dlOu.getName(),role.getOuFqn());
      dlRoles.add(role);
    }
  }
  for (int i=0; i < flRoles.size(); i++) {
    assertTrue(getOuRoles(flOu.getName()).contains(flRoles.get(i)));
    assertTrue(flRoles.contains(getOuRoles(flOu.getName()).get(i)));
  }
  for (int i=0; i < dlRoles.size(); i++) {
    assertTrue(getOuRoles(dlOu.getName()).contains(dlRoles.get(i)));
    assertTrue(dlRoles.contains(getOuRoles(dlOu.getName()).get(i)));
  }
  dlRoles=OpenCms.getRoleManager().getRoles(cms,dlOu.getName(),false);
  assertEquals(getOuRoles(dlOu.getName()).size(),dlRoles.size());
  for (int i=0; i < dlRoles.size(); i++) {
    assertTrue(getOuRoles(dlOu.getName()).contains(dlRoles.get(i)));
    assertTrue(dlRoles.contains(getOuRoles(dlOu.getName()).get(i)));
  }
  dlRoles=OpenCms.getRoleManager().getRoles(cms,dlOu.getName(),true);
  assertEquals(getOuRoles(dlOu.getName()).size(),dlRoles.size());
  for (int i=0; i < dlRoles.size(); i++) {
    assertTrue(getOuRoles(dlOu.getName()).contains(dlRoles.get(i)));
    assertTrue(dlRoles.contains(getOuRoles(dlOu.getName()).get(i)));
  }
}
