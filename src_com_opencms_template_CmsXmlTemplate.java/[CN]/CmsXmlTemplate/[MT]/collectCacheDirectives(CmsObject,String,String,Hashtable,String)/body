{
  boolean isCacheable=isCacheable(cms,templateFile,elementName,parameters,templateSelector);
  boolean isProxyPrivateCacheable=isProxyPrivateCacheable(cms,templateFile,elementName,parameters,templateSelector);
  boolean isProxyPublicCacheable=isProxyPublicCacheable(cms,templateFile,elementName,parameters,templateSelector);
  boolean isExportable=isExportable(cms,templateFile,elementName,parameters,templateSelector);
  boolean isStreamable=isStreamable(cms,templateFile,elementName,parameters,templateSelector);
  CmsCacheDirectives result=new CmsCacheDirectives(isCacheable,isProxyPrivateCacheable,isProxyPublicCacheable,isExportable,isStreamable);
  CmsXmlTemplateFile doc=null;
  Vector subtemplates=null;
  try {
    doc=this.getOwnTemplateFile(cms,templateFile,elementName,parameters,templateSelector);
    doc.init(cms,templateFile);
    subtemplates=doc.getAllSubElements();
    int numSubtemplates=subtemplates.size();
    for (int i=0; i < numSubtemplates; i++) {
      String elName=(String)subtemplates.elementAt(i);
      String className=null;
      String templateName=null;
      className=getTemplateClassName(elName,doc,parameters);
      templateName=getTemplateFileName(elName,doc,parameters);
      if (className != null) {
        I_CmsTemplate templClass=(I_CmsTemplate)CmsTemplateClassManager.getClassInstance(cms,className);
        CmsCacheDirectives cd2=templClass.collectCacheDirectives(cms,templateName,elName,parameters,null);
        result.merge(cd2);
      }
 else {
        return new CmsCacheDirectives(false);
      }
    }
  }
 catch (  CmsException e) {
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(C_OPENCMS_INFO,getClassName() + "Cannot determine cache directives for my template file " + templateFile+ " ("+ e+ "). ");
      A_OpenCms.log(C_OPENCMS_INFO,getClassName() + "Resuming normal operation, setting cacheability to false.");
      return new CmsCacheDirectives(false);
    }
  }
  return result;
}
