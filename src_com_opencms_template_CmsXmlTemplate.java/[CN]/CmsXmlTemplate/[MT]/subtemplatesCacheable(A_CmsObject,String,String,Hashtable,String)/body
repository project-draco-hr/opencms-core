{
  long time=System.currentTimeMillis();
  A_OpenCms.log(C_OPENCMS_DEBUG,"[CmsXmlTemplate] ****************************************");
  A_OpenCms.log(C_OPENCMS_DEBUG,"[CmsXmlTemplate] ***** " + time);
  boolean cacheable=true;
  CmsXmlTemplateFile doc=null;
  Vector subtemplates=null;
  try {
    A_OpenCms.log(C_OPENCMS_DEBUG,"[CmsXmlTemplate] ***** " + (System.currentTimeMillis() - time));
    doc=this.getOwnTemplateFile(cms,templateFile,elementName,parameters,templateSelector);
    A_OpenCms.log(C_OPENCMS_DEBUG,"[CmsXmlTemplate] ***** " + (System.currentTimeMillis() - time));
    doc.init(cms,templateFile);
    A_OpenCms.log(C_OPENCMS_DEBUG,"[CmsXmlTemplate] ***** " + (System.currentTimeMillis() - time));
    subtemplates=doc.getAllSubElements();
    A_OpenCms.log(C_OPENCMS_DEBUG,"[CmsXmlTemplate] ***** " + (System.currentTimeMillis() - time));
  }
 catch (  Exception e) {
    System.err.println(e);
    return false;
  }
  int numSubtemplates=subtemplates.size();
  for (int i=0; i < numSubtemplates; i++) {
    String elName=(String)subtemplates.elementAt(i);
    String className=null;
    String templateName=null;
    try {
      className=getTemplateClassName(elName,doc,parameters);
      templateName=getTemplateFileName(elName,doc,parameters);
    }
 catch (    CmsException e) {
      if (A_OpenCms.isLogging()) {
        A_OpenCms.log(C_OPENCMS_INFO,getClassName() + "Could not determine cacheability of subelement " + elName+ " in template file "+ doc.getFilename()+ ". There were missing datablocks.");
      }
      return false;
    }
    try {
      I_CmsTemplate templClass=(I_CmsTemplate)CmsTemplateClassManager.getClassInstance(cms,className);
      cacheable=cacheable && templClass.isCacheable(cms,templateName,elName,parameters,null);
    }
 catch (    Exception e) {
      System.err.println("E: " + e);
    }
  }
  A_OpenCms.log(C_OPENCMS_DEBUG,"[CmsXmlTemplate] ***** GESAMT: " + (System.currentTimeMillis() - time));
  A_OpenCms.log(C_OPENCMS_DEBUG,"[CmsXmlTemplate] ****************************************");
  return cacheable;
}
