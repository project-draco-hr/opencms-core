{
  CmsXmlTemplateFile templateFile=(CmsXmlTemplateFile)doc;
  boolean isAnonymousUser=cms.anonymousUser().equals(cms.getRequestContext().currentUser());
  Hashtable parameterHashtable=(Hashtable)((Hashtable)userObject).clone();
  String templateClass=getTemplateClassName(tagcontent,templateFile,parameterHashtable);
  String templateFilename=getTemplateFileName(tagcontent,templateFile,parameterHashtable);
  byte[] result=null;
  Object loadedObject=null;
  I_CmsTemplate subTemplate=null;
  Object subTemplateKey=null;
  try {
    loadedObject=CmsTemplateClassManager.getClassInstance(cms,templateClass);
  }
 catch (  CmsException e) {
    templateFile.clearFileCache(templateFile);
    if (isAnonymousUser) {
      return C_ERRORTEXT;
    }
 else {
      throw e;
    }
  }
  if (!(loadedObject instanceof I_CmsTemplate)) {
    String errorMessage="Class " + templateClass + " is no OpenCms template class.";
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(C_OPENCMS_CRITICAL,"[CmsXmlTemplate] " + errorMessage);
    }
    throw new CmsException(errorMessage,CmsException.C_XML_NO_TEMPLATE_CLASS);
  }
  subTemplate=(I_CmsTemplate)loadedObject;
  Enumeration parameterTags=templateFile.getParameterNames(tagcontent);
  while (parameterTags.hasMoreElements()) {
    String paramName=(String)parameterTags.nextElement();
    String paramValue=templateFile.getParameter(tagcontent,paramName);
    if (!parameterHashtable.containsKey(paramName)) {
      parameterHashtable.put(tagcontent + "." + paramName,paramValue);
    }
  }
  if (result == null) {
    try {
      result=subTemplate.getContent(cms,templateFilename,tagcontent,parameterHashtable);
    }
 catch (    CmsException e) {
      if (A_OpenCms.isLogging()) {
        A_OpenCms.log(C_OPENCMS_CRITICAL,"[CmsXmlTemplate] Could not generate output for element " + tagcontent + " in template file "+ templateFilename+ ". ");
      }
      if (isAnonymousUser) {
        return C_ERRORTEXT;
      }
 else {
        throw e;
      }
    }
  }
  if (subTemplate.isCacheable(cms,templateFilename,tagcontent,parameterHashtable,null)) {
    subTemplateKey=subTemplate.getKey(cms,templateFilename,parameterHashtable,null);
    if (subTemplate.isCacheable(cms,templateFilename,tagcontent,parameterHashtable,null) && m_cache.has(subTemplateKey) && (!subTemplate.shouldReload(cms,templateFilename,tagcontent,parameterHashtable,null))) {
      result=m_cache.get(subTemplateKey);
    }
    m_cache.put(subTemplateKey,result);
  }
  return result;
}
