{
  CmsXmlTemplateFile templateFile=(CmsXmlTemplateFile)doc;
  boolean isAnonymousUser=cms.anonymousUser().equals(cms.getRequestContext().currentUser());
  Hashtable parameterHashtable=(Hashtable)((Hashtable)userObject).clone();
  String templateClass=getTemplateClassName(tagcontent,templateFile,parameterHashtable);
  String templateFilename=getTemplateFileName(tagcontent,templateFile,parameterHashtable);
  String templateSelector=getTemplateSelector(tagcontent,templateFile,parameterHashtable);
  byte[] result=null;
  Object loadedObject=null;
  I_CmsTemplate subTemplate=null;
  Object subTemplateKey=null;
  try {
    loadedObject=CmsTemplateClassManager.getClassInstance(cms,templateClass);
  }
 catch (  CmsException e) {
    templateFile.removeFromFileCache();
    if (isAnonymousUser) {
      return C_ERRORTEXT;
    }
 else {
      throw e;
    }
  }
  if (!(loadedObject instanceof I_CmsTemplate)) {
    String errorMessage="Class " + templateClass + " is no OpenCms template class.";
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(C_OPENCMS_CRITICAL,"[CmsXmlTemplate] " + errorMessage);
    }
    throw new CmsException(errorMessage,CmsException.C_XML_NO_TEMPLATE_CLASS);
  }
  subTemplate=(I_CmsTemplate)loadedObject;
  Vector parameterTags=null;
  parameterTags=templateFile.getParameterNames(tagcontent);
  if (parameterTags != null) {
    int numParameterTags=parameterTags.size();
    for (int i=0; i < numParameterTags; i++) {
      String paramName=(String)parameterTags.elementAt(i);
      String paramValue=templateFile.getParameter(tagcontent,paramName);
      if (!parameterHashtable.containsKey(paramName)) {
        parameterHashtable.put(tagcontent + "." + paramName,paramValue);
      }
    }
  }
  parameterHashtable.put("_ELEMENT_",tagcontent);
  if (subTemplate.collectCacheDirectives(cms,templateFilename,tagcontent,parameterHashtable,null).isInternalCacheable()) {
    subTemplateKey=subTemplate.getKey(cms,templateFilename,parameterHashtable,null);
    if (m_cache.has(subTemplateKey) && (!subTemplate.shouldReload(cms,templateFilename,tagcontent,parameterHashtable,null))) {
      result=m_cache.get(subTemplateKey);
      if (cms.getRequestContext().isStreaming()) {
        try {
          cms.getRequestContext().getResponse().getOutputStream().write(result);
        }
 catch (        Exception e) {
          if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
            A_OpenCms.log(C_OPENCMS_CRITICAL,getClassName() + "Error while streaming!");
          }
        }
      }
    }
  }
  if (result == null) {
    try {
      result=subTemplate.getContent(cms,templateFilename,tagcontent,parameterHashtable,templateSelector);
    }
 catch (    Exception e) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(C_OPENCMS_CRITICAL,getClassName() + "Could not generate output for template file \"" + templateFilename+ "\" included as element \""+ tagcontent+ "\".");
        A_OpenCms.log(C_OPENCMS_CRITICAL,getClassName() + e);
      }
      if (isAnonymousUser) {
        if (cms.getRequestContext().isStreaming()) {
          try {
            cms.getRequestContext().getResponse().getOutputStream().write(C_ERRORTEXT.getBytes());
          }
 catch (          Exception e2) {
            if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
              A_OpenCms.log(C_OPENCMS_CRITICAL,getClassName() + "Error while streaming!");
            }
          }
        }
        return C_ERRORTEXT;
      }
 else {
        if (e instanceof CmsException) {
          throw (CmsException)e;
        }
 else {
          throw new CmsException("Error while executing getContent for subtemplate \"" + tagcontent + "\". "+ e);
        }
      }
    }
    if (subTemplate.collectCacheDirectives(cms,templateFilename,tagcontent,parameterHashtable,null).isInternalCacheable()) {
      m_cache.put(subTemplateKey,result);
    }
  }
  return new CmsProcessedString(result);
}
