{
  Node child=null;
  String childName=null;
  Node nextchild=null;
  NodeList newnodes=null;
  Node insert=null;
  Method callMethod=null;
  Object methodResult=null;
  if (n != null && n.hasChildNodes()) {
    child=n.getFirstChild();
    while (child != null) {
      childName=child.getNodeName().toLowerCase();
      nextchild=treeWalker(child);
      if (child.getNodeType() == Node.ELEMENT_NODE) {
        newnodes=null;
        callMethod=null;
        if (keys.containsKey(childName)) {
          callMethod=(Method)keys.get(childName);
        }
 else         if (!m_knownTags.contains(childName)) {
          callMethod=defaultMethod;
        }
        if (callMethod != null) {
          methodResult=null;
          try {
            if (C_DEBUG && A_OpenCms.isLogging()) {
              A_OpenCms.log(C_OPENCMS_DEBUG,"<" + childName + "> tag found. Value: "+ child.getNodeValue());
              A_OpenCms.log(C_OPENCMS_DEBUG,"Tag will be handled by method [" + callMethod.getName() + "]. Invoking method NOW.");
            }
            methodResult=callMethod.invoke(this,new Object[]{child,callingObject,userObj});
          }
 catch (          Exception e) {
            if (e instanceof InvocationTargetException) {
              Throwable thrown=((InvocationTargetException)e).getTargetException();
              if (thrown instanceof CmsException) {
                throw (CmsException)thrown;
              }
 else {
                thrown.printStackTrace();
                throwException("processNode received an exception while handling XML tag \"" + childName + "\" by \""+ callMethod.getName()+ "\" for file "+ getFilename()+ ": "+ e,CmsException.C_XML_PROCESS_ERROR);
              }
            }
 else {
              throwException("processNode could not invoke the XML tag handling method " + callMethod.getName() + "\" for file "+ getFilename()+ ": "+ e,CmsException.C_XML_PROCESS_ERROR);
            }
          }
          if (methodResult == null) {
            newnodes=null;
          }
 else           if (methodResult instanceof NodeList) {
            newnodes=(NodeList)methodResult;
          }
 else           if (methodResult instanceof String) {
            newnodes=stringToNodeList((String)methodResult);
          }
 else           if (methodResult instanceof Integer) {
            newnodes=stringToNodeList(((Integer)methodResult).toString());
          }
 else           if (methodResult instanceof byte[]) {
            newnodes=stringToNodeList(new String((byte[])methodResult));
          }
 else {
            if (A_OpenCms.isLogging()) {
              A_OpenCms.log(C_OPENCMS_CRITICAL,"Return type of method " + callMethod.getName() + " not recognized. Cannot insert value.");
            }
            newnodes=null;
          }
          if (newnodes != null) {
            int numNewChilds=newnodes.getLength();
            if (numNewChilds > 0) {
              for (int j=0; j < numNewChilds; j++) {
                insert=parser.importNode(child.getOwnerDocument(),newnodes.item(j));
                if (j == 0) {
                  nextchild=insert;
                }
                child.getParentNode().insertBefore(insert,child);
              }
            }
 else {
              nextchild=treeWalkerWidth(child);
            }
            child.getParentNode().removeChild(child);
          }
        }
      }
      child=nextchild;
    }
  }
}
