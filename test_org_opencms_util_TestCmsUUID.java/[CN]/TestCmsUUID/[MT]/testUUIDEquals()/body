{
  CmsUUID.init(CmsUUID.getDummyEthernetAddress());
  CmsUUID id1=new CmsUUID("c300ba5c-01e8-3727-b305-5dcc9ccae1ee");
  CmsUUID id2=new CmsUUID("c300ba5c-01e8-3727-b305-5dcc9ccae1ee");
  assertNotSame(id1,id2);
  assertEquals(id1,id2);
  CmsUUID id3=new CmsUUID();
  assertFalse(id1.equals(id3));
  assertFalse(id2.equals(id3));
  UUID uid1=new UUID("c300ba5c-01e8-3727-b305-5dcc9ccae1ee");
  UUID uid2=new UUID("c300ba5c-01e8-3727-b305-5dcc9ccae1ee");
  assertNotSame(uid1,uid2);
  assertEquals(uid1,uid2);
  UUID uid=new UUID("c300ba5c-01e8-3727-b305-5dcc9ccae1ee");
  byte[] b1=uid.asByteArray();
  byte[] b2=uid.toByteArray();
  assertNotSame(b1,b2);
  byte[] b3=uid.asByteArray();
  assertNotSame(b1,b3);
  byte[] b4=uid.toByteArray();
  assertNotSame(b2,b4);
  CmsUUID idNull=new CmsUUID("00000000-0000-0000-0000-000000000000");
  assertTrue(idNull.isNullUUID());
  CmsUUID id4=CmsUUID.getNullUUID();
  assertEquals(idNull,id4);
  int testSize=100000;
  CmsUUID[] ids=new CmsUUID[testSize];
  for (int i=0; i < testSize; i++) {
    ids[i]=new CmsUUID();
  }
  int hits1=0;
  Random r=new Random();
  long start=System.currentTimeMillis();
  for (int i=0; i < testSize; i++) {
    int pos1=r.nextInt(testSize);
    int pos2=r.nextInt(testSize);
    if (ids[pos1].equals(ids[pos2])) {
      hits1++;
    }
  }
  long time1=System.currentTimeMillis() - start;
  System.out.println("Time for UUID equals() implementation: " + time1);
}
