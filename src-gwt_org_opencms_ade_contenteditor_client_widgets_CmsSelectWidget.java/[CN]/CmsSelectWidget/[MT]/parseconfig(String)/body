{
  String[] labels=config.split("\\" + INPUT_DELIMITER);
  int selected=-1;
  String[] value=new String[labels.length];
  String[] options=new String[labels.length];
  String[] help=new String[labels.length];
  HashMap<String,String> values=new HashMap<String,String>();
  for (int i=0; i < labels.length; i++) {
    boolean test_default=(labels[i].indexOf(KEY_DEFAULT) >= 0);
    boolean test_value=labels[i].indexOf(KEY_VALUE) >= 0;
    boolean test_option=labels[i].indexOf(KEY_OPTION) >= 0;
    boolean test_short_option=labels[i].indexOf(KEY_SHORT_OPTION) >= 0;
    boolean test_help=labels[i].indexOf(KEY_HELP) >= 0;
    try {
      if ((labels[i].indexOf(DEFAULT_MARKER) >= 0) || test_default) {
        selected=i;
        labels[i]=labels[i].replace(DEFAULT_MARKER,KEY_EMPTY);
        labels[i]=labels[i].replace(KEY_DEFAULT,KEY_EMPTY);
      }
      if (test_value) {
        String sub=KEY_EMPTY;
        if (labels[i].indexOf(KEY_SUFFIX) >= 0) {
          sub=labels[i].substring(labels[i].indexOf(KEY_VALUE),labels[i].indexOf(KEY_SUFFIX));
        }
 else {
          sub=labels[i].substring(labels[i].indexOf(KEY_VALUE),labels[i].length() - 1);
        }
        value[i]=sub.replace(KEY_VALUE,KEY_EMPTY);
        labels[i]=labels[i].replace(KEY_VALUE + value[i] + KEY_SUFFIX_SHORT,KEY_EMPTY);
      }
 else {
        if (test_short_option) {
          value[i]=labels[i].substring(0,labels[i].indexOf(KEY_SHORT_OPTION));
        }
 else {
          value[i]=labels[i];
        }
      }
      if (test_option) {
        String sub=KEY_EMPTY;
        if (labels[i].indexOf(KEY_SUFFIX) >= 0) {
          sub=labels[i].substring(labels[i].indexOf(KEY_OPTION),labels[i].indexOf(KEY_SUFFIX));
        }
 else {
          sub=labels[i].substring(labels[i].indexOf(KEY_OPTION),labels[i].lastIndexOf(KEY_SUFFIX_SHORT));
        }
        options[i]=sub.replace(KEY_OPTION,KEY_EMPTY);
        labels[i]=labels[i].replace(KEY_OPTION + options[i] + KEY_SUFFIX_SHORT,KEY_EMPTY);
      }
 else       if (test_short_option) {
        options[i]=labels[i].substring(labels[i].indexOf(KEY_SHORT_OPTION) + 1);
      }
 else {
        options[i]=value[i];
      }
      if (test_help) {
        String sub=KEY_EMPTY;
        if (labels[i].indexOf(KEY_SUFFIX) >= 0) {
          sub=labels[i].substring(labels[i].indexOf(KEY_HELP),labels[i].indexOf(KEY_SUFFIX));
        }
 else {
          sub=labels[i].substring(labels[i].indexOf(KEY_HELP),labels[i].indexOf(KEY_SUFFIX_SHORT));
        }
        help[i]=sub.replace(KEY_HELP,KEY_EMPTY);
        labels[i]=labels[i].replace(KEY_HELP + help[i] + KEY_SUFFIX_SHORT,KEY_EMPTY);
      }
      values.put(value[i],options[i]);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  m_selectBox.setItems(values);
  if (selected >= 0) {
    m_selectBox.selectValue(value[selected]);
    m_defaultValue=value[selected];
  }
  fireChangeEvent();
}
