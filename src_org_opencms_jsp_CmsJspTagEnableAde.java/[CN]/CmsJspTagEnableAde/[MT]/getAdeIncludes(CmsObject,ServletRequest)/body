{
  CmsMemoryObjectCache cache=CmsMemoryObjectCache.getInstance();
  CmsLinkManager linkMan=OpenCms.getLinkManager();
  String headerInclude=(String)cache.getCachedObject(CmsJspTagEnableAde.class,INCLUDE_FILE);
  if (headerInclude == null) {
    try {
      CmsFile file=cms.readFile(INCLUDE_FILE);
      CmsProperty property=cms.readPropertyObject(file,CmsPropertyDefinition.PROPERTY_CONTENT_ENCODING,true);
      String encoding=property.getValue(OpenCms.getSystemInfo().getDefaultEncoding());
      headerInclude=CmsEncoder.createString(file.getContents(),encoding);
      CmsMacroResolver resolver=CmsMacroResolver.newInstance();
      resolver.setKeepEmptyMacros(true);
      String editorUri=linkMan.substituteLink(cms,EDITOR_URI);
      resolver.addMacro(MACRO_EDITOR_URI,editorUri);
      String serverUri=linkMan.substituteLink(cms,ADE_SERVER_URI);
      resolver.addMacro(MACRO_SERVER_URI,serverUri);
      String publishUri=linkMan.substituteLink(cms,PUBLISH_SERVER_URI);
      resolver.addMacro(MACRO_PUBLISH_URI,publishUri);
      String galleryServerUri=linkMan.substituteLink(cms,CmsGallerySearchServer.ADVANCED_GALLERY_PATH);
      resolver.addMacro(MACRO_GALLERY_SERVER_URI,galleryServerUri);
      resolver.addMacro(MACRO_GALLERY_SERVER_PATH,CmsGallerySearchServer.ADVANCED_GALLERY_PATH);
      String skinUri=CmsWorkplace.getSkinUri();
      resolver.addMacro(MACRO_SKIN_URI,skinUri);
      resolver.addMacro(MACRO_MESSAGES_URI,linkMan.substituteLink(cms,ADE_MESSAGES_URI));
      headerInclude=resolver.resolveMacros(headerInclude);
      cache.putCachedObject(CmsJspTagEnableAde.class,INCLUDE_FILE,headerInclude);
    }
 catch (    CmsException e) {
      headerInclude="";
      LOG.error(Messages.get().getBundle().key(Messages.LOG_DIRECT_EDIT_NO_HEADER_1,INCLUDE_FILE),e);
    }
  }
  CmsMacroResolver resolver=CmsMacroResolver.newInstance();
  try {
    String currentUri=cms.getRequestContext().getUri();
    Iterator<CmsResource> resIt=OpenCms.getADEManager().getSearchableResourceTypes(cms,currentUri,req).iterator();
    List<I_CmsResourceType> searchableTypes=new ArrayList<I_CmsResourceType>();
    while (resIt.hasNext()) {
      CmsResource resource=resIt.next();
      I_CmsResourceType type=OpenCms.getResourceManager().getResourceType(resource);
      searchableTypes.add(type);
    }
    resolver.addMacro(MACRO_GALLERY_ADDITIONAL_JAVASCRIPT,CmsGallerySearchServer.getAdditionalJavascriptForTypes(searchableTypes));
    CmsResource containerPage=cms.readResource(currentUri);
    if (!CmsResourceTypeXmlContainerPage.isContainerPage(containerPage)) {
      String cntPagePath=cms.readPropertyObject(containerPage,CmsPropertyDefinition.PROPERTY_TEMPLATE_ELEMENTS,true).getValue("");
      try {
        containerPage=cms.readResource(cntPagePath);
      }
 catch (      CmsException e) {
        if (!LOG.isDebugEnabled()) {
          LOG.warn(e.getLocalizedMessage());
        }
        LOG.debug(e.getLocalizedMessage(),e);
      }
    }
 else     if (req.getParameter(CmsContainerPageBean.TEMPLATE_ELEMENT_PARAMETER) != null) {
      CmsUUID id=new CmsUUID(req.getParameter(CmsContainerPageBean.TEMPLATE_ELEMENT_PARAMETER));
      currentUri=cms.getSitePath(cms.readResource(id));
    }
    CmsProperty sitemapProperty=cms.readPropertyObject(containerPage,CmsPropertyDefinition.PROPERTY_SITEMAP,true);
    String sitemapUri=linkMan.substituteLink(cms,sitemapProperty.getValue());
    resolver.addMacro(MACRO_SITEMAP_URI,sitemapUri);
    String containerPageUri=cms.getSitePath(containerPage);
    resolver.addMacro(MACRO_CURRENT_URI,currentUri);
    resolver.addMacro(MACRO_CURRENT_CNTPAGE,containerPageUri);
    String noEditReason=new CmsResourceUtil(cms,containerPage).getNoEditReason(OpenCms.getWorkplaceManager().getWorkplaceLocale(cms));
    resolver.addMacro(MACRO_NO_EDIT_REASON,CmsEncoder.escapeHtml(noEditReason));
  }
 catch (  Exception e) {
    if (!LOG.isDebugEnabled()) {
      LOG.warn(e.getLocalizedMessage());
    }
    LOG.debug(e.getLocalizedMessage(),e);
  }
  resolver.addMacro(MACRO_CURRENT_LOCALE,cms.getRequestContext().getLocale().toString());
  headerInclude=resolver.resolveMacros(headerInclude);
  return headerInclude;
}
