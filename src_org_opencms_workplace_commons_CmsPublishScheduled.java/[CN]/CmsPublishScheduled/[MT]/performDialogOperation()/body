{
  String resource=getParamResource();
  String publishScheduledDate=getParamPublishscheduleddate();
  String userName=getCms().getRequestContext().getCurrentUser().getName();
  DateFormat dateFormat=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,getLocale());
  Date date=dateFormat.parse(publishScheduledDate);
  if (date.getTime() < new Date().getTime()) {
    throw new CmsException(Messages.get().container(Messages.ERR_PUBLISH_SCHEDULED_DATE_IN_PAST_1,date));
  }
  CmsWorkplaceAction action=CmsWorkplaceAction.getInstance();
  CmsObject cmsAdmin=action.getCmsAdminObject();
  CmsObject cms=OpenCms.initCmsObject(getCms());
  cmsAdmin.getRequestContext().setSiteRoot(cms.getRequestContext().getSiteRoot());
  String dateTime=CmsDateUtil.getDateTime(date,DateFormat.SHORT,getLocale());
  String resName=CmsResource.getName(resource);
  String projectName=key(Messages.GUI_PUBLISH_SCHEDULED_PROJECT_NAME_2,new Object[]{resName,dateTime});
  projectName=projectName.replace("/","&#47;");
  CmsProject tmpProject=cmsAdmin.createProject(projectName,"",CmsRole.WORKPLACE_USER.getGroupName(),CmsRole.PROJECT_MANAGER.getGroupName(),CmsProject.PROJECT_TYPE_TEMPORARY);
  tmpProject.setHidden(true);
  cmsAdmin.writeProject(tmpProject);
  cmsAdmin.getRequestContext().setCurrentProject(tmpProject);
  cms.getRequestContext().setCurrentProject(tmpProject);
  cmsAdmin.copyResourceToProject(resource);
  CmsLock lock=cms.getLock(resource);
  if ((lock != null) && lock.isOwnedBy(cms.getRequestContext().getCurrentUser()) && !lock.isOwnedInProjectBy(cms.getRequestContext().getCurrentUser(),cms.getRequestContext().getCurrentProject())) {
    cms.changeLock(resource);
  }
  cms.lockResource(resource);
  lock=cms.getLock(resource);
  CmsScheduledJobInfo job=new CmsScheduledJobInfo();
  String jobName=projectName;
  job.setJobName(jobName);
  job.setClassName("org.opencms.scheduler.jobs.CmsPublishScheduledJob");
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(date);
  String cronExpr="" + calendar.get(Calendar.SECOND) + " "+ calendar.get(Calendar.MINUTE)+ " "+ calendar.get(Calendar.HOUR_OF_DAY)+ " "+ calendar.get(Calendar.DAY_OF_MONTH)+ " "+ (calendar.get(Calendar.MONTH) + 1)+ " "+ "?"+ " "+ calendar.get(Calendar.YEAR);
  job.setCronExpression(cronExpr);
  job.setActive(true);
  CmsContextInfo contextInfo=new CmsContextInfo();
  contextInfo.setProjectName(projectName);
  contextInfo.setUserName(cmsAdmin.getRequestContext().getCurrentUser().getName());
  SortedMap<String,String> params=new TreeMap<String,String>();
  params.put(CmsPublishScheduledJob.PARAM_USER,userName);
  params.put(CmsPublishScheduledJob.PARAM_JOBNAME,jobName);
  params.put(CmsPublishScheduledJob.PARAM_LINKCHECK,"true");
  job.setParameters(params);
  job.setContextInfo(contextInfo);
  OpenCms.getScheduleManager().scheduleJob(cmsAdmin,job);
  OpenCms.writeConfiguration(CmsSystemConfiguration.class);
  return true;
}
