{
  byte[] content;
  content=(byte[])m_cachePermanent.get(systemId);
  if (content != null) {
    return new InputSource(new ByteArrayInputStream(content));
  }
 else   if (systemId.equals(CmsXmlPage.C_XMLPAGE_XSD_SYSTEM_ID)) {
    try {
      InputStream stream=getClass().getClassLoader().getResourceAsStream(XMLPAGE_XSD_LOCATION);
      ByteArrayOutputStream bytes=new ByteArrayOutputStream(1024);
      for (int b=stream.read(); b > -1; b=stream.read()) {
        bytes.write(b);
      }
      content=bytes.toByteArray();
      m_cachePermanent.put(systemId,content);
      return new InputSource(new ByteArrayInputStream(content));
    }
 catch (    Throwable t) {
      LOG.error(Messages.get().key(Messages.LOG_XMLPAGE_XSD_NOT_FOUND_1,XMLPAGE_XSD_LOCATION),t);
    }
  }
 else   if (systemId.equals(XMLPAGE_OLD_DTD_SYSTEM_ID_1) || systemId.endsWith(XMLPAGE_OLD_DTD_SYSTEM_ID_2)) {
    try {
      InputStream stream=getClass().getClassLoader().getResourceAsStream(XMLPAGE_OLD_DTD_LOCATION);
      ByteArrayOutputStream bytes=new ByteArrayOutputStream(1024);
      for (int b=stream.read(); b > -1; b=stream.read()) {
        bytes.write(b);
      }
      content=bytes.toByteArray();
      m_cachePermanent.put(systemId,content);
      return new InputSource(new ByteArrayInputStream(content));
    }
 catch (    Throwable t) {
      LOG.error(Messages.get().key(Messages.LOG_XMLPAGE_DTD_NOT_FOUND_1,XMLPAGE_OLD_DTD_LOCATION),t);
    }
  }
 else   if ((m_cms != null) && systemId.startsWith(OPENCMS_SCHEME)) {
    String cacheSystemId=systemId.substring(OPENCMS_SCHEME.length() - 1);
    String cacheKey=getCacheKey(cacheSystemId,m_cms.getRequestContext().currentProject().isOnlineProject());
    content=(byte[])m_cacheTemporary.get(cacheKey);
    if (content != null) {
      return new InputSource(new ByteArrayInputStream(content));
    }
    try {
      m_cms.getRequestContext().saveSiteRoot();
      m_cms.getRequestContext().setSiteRoot("/");
      CmsFile file=m_cms.readFile(cacheSystemId);
      content=file.getContents();
      m_cacheTemporary.put(cacheKey,content);
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().key(Messages.LOG_ER_CACHED_SYS_ID_1,cacheKey));
      }
      return new InputSource(new ByteArrayInputStream(content));
    }
 catch (    Throwable t) {
      LOG.error(Messages.get().key(Messages.LOG_ENTITY_RESOLVE_FAILED_1,systemId),t);
    }
 finally {
      m_cms.getRequestContext().restoreSiteRoot();
    }
  }
 else   if (systemId.substring(0,systemId.lastIndexOf("/") + 1).equalsIgnoreCase(CmsConfigurationManager.C_DEFAULT_DTD_PREFIX)) {
    String location=null;
    try {
      String dtdFilename=systemId.substring(systemId.lastIndexOf("/") + 1);
      location=CmsConfigurationManager.C_DEFAULT_DTD_LOCATION + dtdFilename;
      InputStream stream=getClass().getClassLoader().getResourceAsStream(location);
      ByteArrayOutputStream bytes=new ByteArrayOutputStream(1024);
      for (int b=stream.read(); b > -1; b=stream.read()) {
        bytes.write(b);
      }
      content=bytes.toByteArray();
      m_cachePermanent.put(systemId,content);
      return new InputSource(new ByteArrayInputStream(content));
    }
 catch (    Throwable t) {
      LOG.error(Messages.get().key(Messages.LOG_DTD_NOT_FOUND_1,location),t);
    }
  }
  return null;
}
