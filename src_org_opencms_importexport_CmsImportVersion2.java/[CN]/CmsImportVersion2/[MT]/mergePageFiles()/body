{
  try {
    try {
      m_cms.readPropertyDefinition(CmsPropertyDefinition.PROPERTY_TEMPLATE);
    }
 catch (    CmsException e) {
      m_cms.createPropertyDefinition(CmsPropertyDefinition.PROPERTY_TEMPLATE);
    }
    List definitions=m_cms.readAllPropertyDefinitions();
    Iterator j=definitions.iterator();
    while (j.hasNext()) {
      CmsPropertyDefinition definition=(CmsPropertyDefinition)j.next();
      try {
        m_cms.readPropertyDefinition(definition.getName());
      }
 catch (      Exception e) {
        m_cms.createPropertyDefinition(definition.getName());
      }
    }
  }
 catch (  CmsException e) {
    CmsMessageContainer message=Messages.get().container(Messages.ERR_IMPORTEXPORT_ERROR_COPYING_PROPERTY_DEFINITIONS_0);
    if (LOG.isDebugEnabled()) {
      LOG.debug(message.key(),e);
    }
    throw new CmsImportExportException(message);
  }
  int size=m_pageStorage.size();
  m_report.println(Messages.get().container(Messages.RPT_MERGE_START_0),I_CmsReport.C_FORMAT_HEADLINE);
  Iterator i=m_pageStorage.iterator();
  int counter=1;
  while (i.hasNext()) {
    String resname=(String)i.next();
    if (!resname.startsWith("/")) {
      resname="/" + resname;
    }
    m_report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_SUCCESSION_2,String.valueOf(counter),String.valueOf(size)),I_CmsReport.C_FORMAT_NOTE);
    m_report.print(Messages.get().container(Messages.RPT_MERGE_0),I_CmsReport.C_FORMAT_NOTE);
    m_report.print(org.opencms.report.Messages.get().container(org.opencms.report.Messages.RPT_ARGUMENT_1,resname));
    mergePageFile(resname);
    if (LOG.isInfoEnabled()) {
      LOG.info(Messages.get().container(Messages.LOG_MERGING_3,String.valueOf(counter),String.valueOf(size),resname));
    }
    counter++;
  }
  m_pageStorage.clear();
}
