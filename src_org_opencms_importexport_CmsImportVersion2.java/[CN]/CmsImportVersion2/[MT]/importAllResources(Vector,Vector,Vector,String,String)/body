{
  List fileNodes=null, acentryNodes=null;
  Element currentElement=null, currentEntry=null;
  String source=null, destination=null, resourceTypeName=null, timestamp=null, uuid=null, uuidfile=null, uuidresource=null;
  long lastmodified=0;
  int resourceTypeId=I_CmsConstants.C_UNKNOWN_ID;
  int resourceTypeLoaderId=I_CmsConstants.C_UNKNOWN_ID;
  List properties=null;
  boolean old_overwriteCollidingResources=false;
  if (m_importingChannelData) {
    m_cms.getRequestContext().saveSiteRoot();
    m_cms.getRequestContext().setSiteRoot(I_CmsConstants.VFS_FOLDER_CHANNELS);
  }
  if (excludeList == null) {
    excludeList=new Vector();
  }
  m_webAppNames=(List)OpenCms.getRuntimeProperty("compatibility.support.webAppNames");
  if (m_webAppNames == null) {
    m_webAppNames=Collections.EMPTY_LIST;
  }
  m_webappUrl=OpenCms.getImportExportManager().getOldWebAppUrl();
  if (m_webappUrl == null) {
    m_webappUrl="http://localhost:8080/opencms/opencms";
  }
  if (m_webappUrl.endsWith("/")) {
    m_webappUrl=m_webappUrl.substring(0,m_webappUrl.lastIndexOf("/"));
  }
  List deleteProperties=OpenCms.getImportExportManager().getIgnoredProperties();
  List immutableResources=OpenCms.getImportExportManager().getImmutableResources();
  if (DEBUG > 0) {
    System.err.println("Import: Immutable resources size is " + immutableResources.size());
  }
  old_overwriteCollidingResources=OpenCms.getImportExportManager().overwriteCollidingResources();
  OpenCms.getImportExportManager().setOverwriteCollidingResources(true);
  try {
    fileNodes=m_docXml.selectNodes("//" + I_CmsConstants.C_EXPORT_TAG_FILE);
    int importSize=fileNodes.size();
    for (int i=0; i < importSize; i++) {
      m_report.print(" ( " + (i + 1) + " / "+ importSize+ " ) ",I_CmsReport.C_FORMAT_NOTE);
      currentElement=(Element)fileNodes.get(i);
      source=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_SOURCE);
      destination=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_DESTINATION);
      resourceTypeName=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_TYPE);
      if (C_RESOURCE_TYPE_NEWPAGE_NAME.equals(resourceTypeName)) {
        resourceTypeId=C_RESOURCE_TYPE_NEWPAGE_ID;
        resourceTypeLoaderId=(OpenCms.getResourceManager().getResourceType(resourceTypeId)).getLoaderId();
      }
 else       if (C_RESOURCE_TYPE_PAGE_NAME.equals(resourceTypeName)) {
        resourceTypeId=CmsResourceTypePlain.C_RESOURCE_TYPE_ID;
        resourceTypeLoaderId=(OpenCms.getResourceManager().getResourceType(resourceTypeId)).getLoaderId();
      }
 else       if (C_RESOURCE_TYPE_LINK_NAME.equals(resourceTypeName)) {
        resourceTypeId=C_RESOURCE_TYPE_LINK_ID;
      }
 else {
        I_CmsResourceType type=OpenCms.getResourceManager().getResourceType(resourceTypeName);
        resourceTypeId=type.getTypeId();
        resourceTypeLoaderId=type.getLoaderId();
      }
      uuid=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_UUIDSTRUCTURE);
      uuidfile=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_UUIDCONTENT);
      uuidresource=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_UUIDRESOURCE);
      if ((timestamp=CmsImport.getChildElementTextValue(currentElement,I_CmsConstants.C_EXPORT_TAG_LASTMODIFIED)) != null) {
        lastmodified=Long.parseLong(timestamp);
      }
 else {
        lastmodified=System.currentTimeMillis();
      }
      if ("script".equals(resourceTypeName)) {
        resourceTypeName=CmsResourceTypePlain.C_RESOURCE_TYPE_NAME;
      }
      String translatedName=m_cms.getRequestContext().addSiteRoot(m_importPath + destination);
      if (CmsResourceTypeFolder.C_RESOURCE_TYPE_NAME.equals(resourceTypeName)) {
        translatedName+=I_CmsConstants.C_FOLDER_SEPARATOR;
      }
      translatedName=m_cms.getRequestContext().getDirectoryTranslator().translateResource(translatedName);
      if (DEBUG > 3) {
        System.err.println("Import: Translated resource name is " + translatedName);
      }
      boolean resourceNotImmutable=checkImmutable(translatedName,immutableResources);
      translatedName=m_cms.getRequestContext().removeSiteRoot(translatedName);
      if (resourceNotImmutable && (!excludeList.contains(translatedName))) {
        m_report.print(m_report.key("report.importing"),I_CmsReport.C_FORMAT_NOTE);
        m_report.print(translatedName);
        m_report.print(m_report.key("report.dots"));
        properties=readPropertiesFromManifest(currentElement,propertyName,propertyValue,deleteProperties);
        CmsResource res=importResource(source,destination,uuid,uuidfile,uuidresource,resourceTypeId,resourceTypeName,resourceTypeLoaderId,lastmodified,properties,writtenFilenames,fileCodes);
        if (res != null) {
          acentryNodes=currentElement.selectNodes("*/" + I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ENTRY);
          for (int j=0; j < acentryNodes.size(); j++) {
            currentEntry=(Element)acentryNodes.get(j);
            String id=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_ID);
            String flags=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_FLAGS);
            String allowed=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_ALLOWEDPERMISSIONS);
            String denied=CmsImport.getChildElementTextValue(currentEntry,I_CmsConstants.C_EXPORT_TAG_ACCESSCONTROL_DENIEDPERMISSIONS);
            addImportAccessControlEntry(res,id,allowed,denied,flags);
          }
          importAccessControlEntries(res);
        }
 else {
          m_report.print(m_report.key("report.skipping"),I_CmsReport.C_FORMAT_OK);
        }
      }
 else {
        m_report.print(m_report.key("report.skipping"),I_CmsReport.C_FORMAT_NOTE);
        m_report.println(translatedName);
      }
    }
    if (getVersion() < 3 && m_convertToXmlPage) {
      mergePageFiles();
      removeFolders();
    }
  }
 catch (  Exception exc) {
    exc.printStackTrace(System.err);
    m_report.println(exc);
    throw new CmsException(CmsException.C_UNKNOWN_EXCEPTION,exc);
  }
 finally {
    if (m_importingChannelData) {
      m_cms.getRequestContext().restoreSiteRoot();
    }
    OpenCms.getImportExportManager().setOverwriteCollidingResources(old_overwriteCollidingResources);
  }
}
