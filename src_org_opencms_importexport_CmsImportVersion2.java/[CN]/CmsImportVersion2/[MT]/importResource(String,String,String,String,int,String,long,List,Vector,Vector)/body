{
  boolean success=true;
  byte[] content=null;
  String fullname=null;
  CmsResource res=null;
  String targetName=null;
  try {
    if (m_importingChannelData) {
      String channelId=null;
      try {
        if ((resourceTypeName.equalsIgnoreCase(CmsResourceTypeFolder.C_RESOURCE_TYPE_NAME)) && (!destination.endsWith(I_CmsConstants.C_FOLDER_SEPARATOR))) {
          destination+=I_CmsConstants.C_FOLDER_SEPARATOR;
        }
        CmsResource channel=m_cms.readResource(I_CmsConstants.C_ROOT + destination);
        channelId=m_cms.readPropertyObject(m_cms.getSitePath(channel),I_CmsConstants.C_PROPERTY_CHANNELID,false).getValue();
      }
 catch (      Exception e) {
      }
      if (channelId != null) {
        properties.add(new CmsProperty(I_CmsConstants.C_PROPERTY_CHANNELID,channelId,null));
      }
    }
    if (source != null) {
      content=getFileBytes(source);
    }
    content=convertContent(source,destination,content,resourceTypeName);
    int size=0;
    if (content != null) {
      size=content.length;
    }
    CmsUUID curUser=m_cms.getRequestContext().currentUser().getId();
    CmsUUID newUuidstructure=new CmsUUID();
    CmsUUID newUuidresource=new CmsUUID();
    if (uuid != null) {
      newUuidstructure=new CmsUUID(uuid);
    }
    if (uuidresource != null) {
      newUuidresource=new CmsUUID(uuidresource);
    }
    targetName=destination;
    if (targetName.endsWith("/")) {
      targetName=targetName.substring(0,targetName.length() - 1);
    }
    boolean isFolder=false;
    try {
      isFolder=CmsFolder.isFolderType(resourceTypeId);
    }
 catch (    Throwable t) {
      isFolder=((content.length == 0) && CmsResourceTypeFolder.C_RESOURCE_TYPE_NAME.equalsIgnoreCase(resourceTypeName));
    }
    CmsResource resource=new CmsResource(newUuidstructure,newUuidresource,targetName,resourceTypeId,isFolder,0,m_cms.getRequestContext().currentProject().getId(),I_CmsConstants.C_STATE_NEW,lastmodified,curUser,lastmodified,curUser,CmsResource.DATE_RELEASED_DEFAULT,CmsResource.DATE_EXPIRED_DEFAULT,1,size);
    if (C_RESOURCE_TYPE_LINK_ID == resourceTypeId) {
      m_report.print(m_report.key("report.storing_link"),I_CmsReport.C_FORMAT_NOTE);
      m_linkStorage.put(m_importPath + destination,new String(content));
      m_linkPropertyStorage.put(m_importPath + destination,properties);
      res=resource;
    }
 else {
      String resName=m_importPath + destination;
      res=m_cms.importResource(resName,resource,content,properties);
      try {
        m_cms.unlockResource(resName);
      }
 catch (      CmsLockException e) {
        if (LOG.isDebugEnabled()) {
          LOG.debug(Messages.get().key(Messages.LOG_IMPORTEXPORT_UNABLE_TO_UNLOCK_RESOURCE_1,resName),e);
        }
      }
    }
    m_report.println(m_report.key("report.ok"),I_CmsReport.C_FORMAT_OK);
  }
 catch (  CmsException exc) {
    CmsMessageContainer message=Messages.get().container(Messages.ERR_IMPORTEXPORT_ERROR_IMPORTING_RESOURCE_1,targetName);
    if (LOG.isDebugEnabled()) {
      LOG.debug(message,exc);
    }
    success=false;
    m_report.println(exc);
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
    }
  }
  byte[] digestContent={0};
  if (content != null) {
    digestContent=m_digest.digest(content);
  }
  if (success && (fullname != null)) {
    if (writtenFilenames != null) {
      writtenFilenames.addElement(fullname);
    }
    if (fileCodes != null) {
      fileCodes.addElement(new String(digestContent));
    }
  }
  return res;
}
