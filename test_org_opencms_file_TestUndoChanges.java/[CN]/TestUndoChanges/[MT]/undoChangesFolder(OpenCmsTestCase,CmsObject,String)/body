{
  tc.createStorage("undoChanges");
  tc.switchStorage("undoChanges");
  tc.storeResources(cms,resource1);
  tc.switchStorage(OpenCmsTestResourceStorage.DEFAULT_STORAGE);
  long timestamp=System.currentTimeMillis();
  CmsProperty property1=new CmsProperty("Title","undoChanges",null);
  TestProperty.writeProperty(tc,cms,resource1,property1);
  List subresources=tc.getSubtree(cms,resource1);
  Iterator i=subresources.iterator();
  while (i.hasNext()) {
    CmsResource res=(CmsResource)i.next();
    String resName=cms.readAbsolutePath(res);
    TestProperty.writeProperty(tc,cms,resName,property1);
  }
  cms.lockResource(resource1);
  cms.undoChanges(resource1,false);
  cms.unlockResource(resource1);
  tc.switchStorage("undoChanges");
  tc.assertFilter(cms,resource1,OpenCmsTestResourceFilter.FILTER_UNDOCHANGES);
  tc.assertProject(cms,resource1,cms.getRequestContext().currentProject());
  Iterator j=subresources.iterator();
  while (j.hasNext()) {
    CmsResource res=(CmsResource)j.next();
    String resName=cms.readAbsolutePath(res);
    tc.assertFilter(cms,resName,OpenCmsTestResourceFilter.FILTER_WRITEPROPERTY);
    tc.assertProject(cms,resName,cms.getRequestContext().currentProject());
    tc.assertState(cms,resName,tc.getPreCalculatedState(resource1));
    tc.assertDateLastModifiedAfter(cms,resName,timestamp);
    tc.assertUserLastModified(cms,resName,cms.getRequestContext().currentUser());
    tc.assertPropertyChanged(cms,resName,property1);
  }
}
