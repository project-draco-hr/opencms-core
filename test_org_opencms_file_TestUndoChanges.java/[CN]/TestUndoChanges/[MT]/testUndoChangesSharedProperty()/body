{
  CmsObject cms=getCmsObject();
  echo("Testing undoChanges on shared property");
  String file="/a";
  cms.createResource(file,CmsResourceTypePlain.getStaticTypeId());
  cms.unlockProject(cms.getRequestContext().currentProject().getUuid());
  OpenCms.getPublishManager().publishProject(cms);
  OpenCms.getPublishManager().waitWhileRunning();
  String sibling="/b";
  TestSiblings.createSibling(this,cms,file,sibling);
  CmsProperty property=new CmsProperty(CmsPropertyDefinition.PROPERTY_NAVTEXT,"undoChanges navText",null);
  cms.writePropertyObject(sibling,property);
  CmsProperty property1=new CmsProperty(CmsPropertyDefinition.PROPERTY_DESCRIPTION,null,"undoChanges description");
  cms.writePropertyObject(sibling,property1);
  cms.unlockProject(cms.getRequestContext().currentProject().getUuid());
  OpenCms.getPublishManager().publishProject(cms);
  OpenCms.getPublishManager().waitWhileRunning();
  createStorage("undoChanges");
  switchStorage("undoChanges");
  storeResources(cms,file);
  storeResources(cms,sibling);
  switchStorage(OpenCmsTestResourceStorage.DEFAULT_STORAGE);
  CmsProperty property2=new CmsProperty(CmsPropertyDefinition.PROPERTY_TITLE,null,"undoChanges title");
  cms.lockResource(file);
  cms.writePropertyObject(file,property2);
  cms.unlockResource(file);
  cms.lockResource(file);
  cms.undoChanges(file,CmsResource.UNDO_CONTENT);
  cms.unlockResource(file);
  switchStorage("undoChanges");
  assertFilter(cms,file,OpenCmsTestResourceFilter.FILTER_UNDOCHANGES_ALL);
  assertProject(cms,file,cms.getRequestContext().currentProject());
  cms.unlockProject(cms.getRequestContext().currentProject().getUuid());
  OpenCms.getPublishManager().publishProject(cms);
  OpenCms.getPublishManager().waitWhileRunning();
}
