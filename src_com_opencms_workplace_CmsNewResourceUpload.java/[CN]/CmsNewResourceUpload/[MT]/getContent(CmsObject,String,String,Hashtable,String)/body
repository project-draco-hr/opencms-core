{
  String template=null;
  I_CmsSession session=cms.getRequestContext().getSession(true);
  int maxFileSize=((Integer)A_OpenCms.getRuntimeProperty("workplace.file.maxuploadsize")).intValue();
  if ((maxFileSize <= 0) || cms.userInGroup(cms.getRequestContext().currentUser().getName(),C_GROUP_ADMIN)) {
    maxFileSize=-1;
  }
  String initial=(String)parameters.get(C_PARA_INITIAL);
  if (initial != null) {
    session.removeValue(C_PARA_FILE);
    session.removeValue(C_PARA_FILECONTENT);
    session.removeValue(C_PARA_NEWTYPE);
    session.removeValue(C_PARA_TITLE);
    session.removeValue(CmsNewResourceUpload.C_PARAM_OVERWRITE);
    session.removeValue("lasturl");
  }
  String lastUrl=getLastUrl(cms,parameters);
  String step=(String)parameters.get("STEP");
  String unzip=(String)parameters.get("unzip");
  String nofolder=(String)parameters.get("NOFOLDER");
  String currentFolder=CmsWorkplaceAction.getCurrentFolder(cms);
  if (currentFolder != null) {
    CmsWorkplaceAction.setCurrentFolder(cms,currentFolder);
  }
  currentFolder=CmsWorkplaceAction.getCurrentFolder(cms);
  if (currentFolder == null) {
    currentFolder=cms.readAbsolutePath(cms.rootFolder());
  }
  String title=(String)parameters.get(C_PARA_TITLE);
  if (title != null && !"".equals(title.trim())) {
    session.putValue(C_PARA_TITLE,title);
  }
 else {
    title=(String)session.getValue(C_PARA_TITLE);
  }
  String newname=(String)parameters.get(C_PARA_NAME);
  String filename=null;
  byte[] filecontent=new byte[0];
  Enumeration files=cms.getRequestContext().getRequest().getFileNames();
  while (files.hasMoreElements()) {
    filename=(String)files.nextElement();
  }
  if (filename != null) {
    session.putValue(C_PARA_FILE,filename);
  }
  filename=(String)session.getValue(C_PARA_FILE);
  if (filename != null) {
    filecontent=cms.getRequestContext().getRequest().getFile(filename);
  }
  if (filecontent != null) {
    session.putValue(C_PARA_FILECONTENT,filecontent);
  }
  filecontent=(byte[])session.getValue(C_PARA_FILECONTENT);
  String newtype=(String)parameters.get(C_PARA_NEWTYPE);
  if (newtype != null) {
    session.putValue(C_PARA_NEWTYPE,newtype);
  }
  newtype=(String)session.getValue(C_PARA_NEWTYPE);
  CmsXmlWpTemplateFile xmlTemplateDocument=new CmsXmlWpTemplateFile(cms,templateFile);
  xmlTemplateDocument.setData("lasturl",lastUrl);
  String dummy=(String)parameters.get(CmsNewResourceUpload.C_PARAM_OVERWRITE);
  boolean replaceResource=false;
  if (dummy != null) {
    replaceResource="yes".equals(dummy);
    session.putValue(CmsNewResourceUpload.C_PARAM_OVERWRITE,dummy);
  }
 else {
    replaceResource="yes".equals((String)session.getValue(CmsNewResourceUpload.C_PARAM_OVERWRITE));
  }
  boolean cancelUpload="yes".equals((String)parameters.get(CmsNewResourceUpload.C_PARAM_CANCEL));
  if (cancelUpload) {
    session.removeValue(C_PARA_FILE);
    session.removeValue(C_PARA_FILECONTENT);
    session.removeValue(C_PARA_NEWTYPE);
    session.removeValue(C_PARA_TITLE);
    session.removeValue(CmsNewResourceUpload.C_PARAM_OVERWRITE);
  }
  if (DEBUG > 0) {
    System.out.println("\nstep: " + step);
    System.out.println("filename: " + filename);
    System.out.println("currentFolder: " + currentFolder);
    System.out.println("title: " + title);
    System.out.println("newtype: " + newtype);
    System.out.println("overwrite: " + replaceResource);
    System.out.println("cancel: " + cancelUpload);
  }
  if (step != null) {
    if (step.equals("1")) {
      if (filename != null) {
        if (filecontent.length == 0) {
          template="error";
          xmlTemplateDocument.setData("details",filename);
        }
 else         if ((maxFileSize > 0) && (filecontent.length > (maxFileSize * 1024))) {
          template="errorfilesize";
          xmlTemplateDocument.setData("details",filename + ": " + (filecontent.length / 1024)+ " kb, max. "+ maxFileSize+ " kb.");
        }
 else {
          if (unzip != null) {
            boolean noSubFolder=(nofolder != null ? true : false);
            CmsImportFolder zip=new CmsImportFolder(filecontent,currentFolder,cms,noSubFolder);
            if (zip.isValidZipFile()) {
              session.removeValue(C_PARA_FILE);
              session.removeValue(C_PARA_FILECONTENT);
              session.removeValue(C_PARA_NEWTYPE);
              session.removeValue(C_PARA_TITLE);
              session.removeValue(CmsNewResourceUpload.C_PARAM_OVERWRITE);
              try {
                if ((lastUrl != null) && (lastUrl != "")) {
                  cms.getRequestContext().getResponse().sendRedirect(lastUrl);
                }
 else {
                  cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath() + CmsWorkplaceAction.getExplorerFileUri(cms));
                }
              }
 catch (              Exception ex) {
                throw new CmsException("Redirect fails :" + getConfigFile(cms).getWorkplaceActionPath() + CmsWorkplaceAction.getExplorerFileUri(cms),CmsException.C_UNKNOWN_EXCEPTION,ex);
              }
              return null;
            }
          }
          template="step1";
        }
      }
    }
 else {
      if (step.equals("2")) {
        int type=cms.getResourceTypeId(newtype);
        if (newtype.equals(CmsResourceTypeImage.C_RESOURCE_TYPE_NAME)) {
          try {
            String oldTitle=cms.readProperty(currentFolder + filename,I_CmsConstants.C_PROPERTY_TITLE);
            if (oldTitle != null) {
              xmlTemplateDocument.setData("TITLE",Encoder.escapeXml(oldTitle));
            }
          }
 catch (          CmsException e) {
            xmlTemplateDocument.setData("TITLE","");
          }
          template="image";
          xmlTemplateDocument.setData("MIME",filename);
          xmlTemplateDocument.setData("SIZE","Not yet available");
          xmlTemplateDocument.setData("FILESIZE",new Integer(filecontent.length).toString() + " Bytes");
        }
 else {
          try {
            cms.createResource(currentFolder + filename,type,new Hashtable(),filecontent,null);
          }
 catch (          CmsException e) {
            if (replaceResource) {
              cms.lockResource(currentFolder + filename,true);
              cms.replaceResource(currentFolder + filename,type,null,filecontent);
              session.putValue(CmsNewResourceUpload.C_PARAM_OVERWRITE,"no");
            }
 else {
              xmlTemplateDocument.setData("LAST_STEP",step);
              xmlTemplateDocument.setData("FILENAME",filename);
              return startProcessing(cms,xmlTemplateDocument,"",parameters,"overwrite");
            }
          }
          session.removeValue(C_PARA_FILE);
          session.removeValue(C_PARA_FILECONTENT);
          session.removeValue(C_PARA_NEWTYPE);
          session.removeValue(C_PARA_TITLE);
          session.removeValue(CmsNewResourceUpload.C_PARAM_OVERWRITE);
          try {
            if ((lastUrl != null) && (lastUrl != "")) {
              cms.getRequestContext().getResponse().sendRedirect(lastUrl);
            }
 else {
              cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath() + CmsWorkplaceAction.getExplorerFileUri(cms));
            }
          }
 catch (          Exception ex) {
            throw new CmsException("Redirect fails :" + getConfigFile(cms).getWorkplaceActionPath() + CmsWorkplaceAction.getExplorerFileUri(cms),CmsException.C_UNKNOWN_EXCEPTION,ex);
          }
          return null;
        }
      }
 else {
        if (step.equals("3")) {
          if (newname != null) {
            filename=newname;
          }
          int type=cms.getResourceTypeId(newtype);
          Hashtable prop=new Hashtable();
          if (title != null) {
            prop.put(C_PROPERTY_TITLE,title);
          }
          try {
            cms.createResource(currentFolder + filename,type,prop,filecontent,null);
          }
 catch (          CmsException e) {
            if (replaceResource) {
              cms.lockResource(currentFolder + filename,true);
              cms.replaceResource(currentFolder + filename,type,prop,filecontent);
              session.putValue(CmsNewResourceUpload.C_PARAM_OVERWRITE,"no");
            }
 else {
              xmlTemplateDocument.setData("LAST_STEP",step);
              xmlTemplateDocument.setData("FILENAME",filename);
              return startProcessing(cms,xmlTemplateDocument,"",parameters,"overwrite");
            }
          }
          session.removeValue(C_PARA_FILE);
          session.removeValue(C_PARA_FILECONTENT);
          session.removeValue(C_PARA_NEWTYPE);
          session.removeValue(C_PARA_TITLE);
          session.removeValue(CmsNewResourceUpload.C_PARAM_OVERWRITE);
          session.removeValue("lasturl");
          try {
            if ((lastUrl != null) && (lastUrl != "")) {
              cms.getRequestContext().getResponse().sendRedirect(lastUrl);
            }
 else {
              cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath() + CmsWorkplaceAction.getExplorerFileUri(cms));
            }
          }
 catch (          Exception ex) {
            throw new CmsException("Redirect fails :" + getConfigFile(cms).getWorkplaceActionPath() + CmsWorkplaceAction.getExplorerFileUri(cms),CmsException.C_UNKNOWN_EXCEPTION,ex);
          }
          return null;
        }
      }
    }
  }
 else {
    if (maxFileSize > 0) {
      xmlTemplateDocument.setData("maxfilesize","" + maxFileSize);
      String limitation=xmlTemplateDocument.getProcessedDataValue("filesize_limited");
      xmlTemplateDocument.setData("limitation",limitation);
    }
 else {
      xmlTemplateDocument.setData("limitation","");
    }
  }
  if (filename != null) {
    xmlTemplateDocument.setData("FILENAME",filename);
  }
  return startProcessing(cms,xmlTemplateDocument,"",parameters,template);
}
