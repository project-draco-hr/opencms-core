{
  CmsProject publishProject=readProject(currentUser,currentProject,id);
  CmsPublishedResources allChanged=new CmsPublishedResources();
  Vector changedResources=new Vector();
  Vector changedModuleMasters=new Vector();
  if ((isAdmin(currentUser,currentProject) || isManagerOfProject(currentUser,publishProject)) && (publishProject.getFlags() == C_PROJECT_STATE_UNLOCKED) && (id != C_PROJECT_ONLINE_ID)) {
    ClassLoader loader=getClass().getClassLoader();
    boolean shouldReload=false;
    if (loader instanceof CmsClassLoader) {
      Vector classFiles=((CmsClassLoader)loader).getFilenames();
      shouldReload=shouldReloadClasses(id,classFiles);
    }
    try {
      changedResources=m_dbAccess.publishProject(currentUser,id,onlineProject(currentUser,currentProject),isHistoryEnabled(cms),report,m_registry.getExportpoints());
      Vector publishModules=new Vector();
      cms.getRegistry().getModulePublishables(publishModules,null);
      int versionId=0;
      long publishDate=System.currentTimeMillis();
      if (isHistoryEnabled(cms)) {
        versionId=m_dbAccess.getBackupVersionId();
        if (versionId > 1) {
          versionId--;
        }
        try {
          publishDate=m_dbAccess.readBackupProject(versionId).getPublishingDate();
        }
 catch (        CmsException e) {
        }
        if (publishDate == 0) {
          publishDate=System.currentTimeMillis();
        }
      }
      for (int i=0; i < publishModules.size(); i++) {
        try {
          Class.forName((String)publishModules.elementAt(i)).getMethod("publishProject",new Class[]{CmsObject.class,Boolean.class,Integer.class,Integer.class,Long.class,Vector.class,Vector.class}).invoke(null,new Object[]{cms,new Boolean(isHistoryEnabled(cms)),new Integer(id),new Integer(versionId),new Long(publishDate),changedResources,changedModuleMasters});
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
            A_OpenCms.log(A_OpenCms.C_OPENCMS_INFO,"Error when publish data of module " + (String)publishModules.elementAt(i) + "!: "+ ex.getMessage());
          }
        }
      }
    }
 catch (    CmsException e) {
      throw e;
    }
 finally {
      this.clearResourceCache();
      fileSystemChanged(true);
      if (publishProject.getType() == C_PROJECT_TYPE_TEMPORARY) {
        m_dbAccess.deleteProject(publishProject);
        try {
          m_projectCache.remove(id);
        }
 catch (        Exception e) {
          if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
            A_OpenCms.log(A_OpenCms.C_OPENCMS_CACHE,"Could not remove project " + id + " from cache");
          }
        }
        if (id == currentProject.getId()) {
          cms.getRequestContext().setCurrentProject(I_CmsConstants.C_PROJECT_ONLINE_ID);
        }
      }
      if (m_refresh.length() > 0) {
        try {
          URL url=new URL(m_refresh);
          URLConnection con=url.openConnection();
          con.connect();
          InputStream in=con.getInputStream();
          in.close();
        }
 catch (        Exception ex) {
          throw new CmsException(0,ex);
        }
      }
      if (loader instanceof CmsClassLoader) {
        ((CmsClassLoader)loader).setShouldReload(shouldReload);
      }
    }
  }
 else {
    throw new CmsException("[" + this.getClass().getName() + "] could not publish project "+ id,CmsException.C_NO_ACCESS);
  }
  allChanged.setChangedResources(changedResources);
  allChanged.setChangedModuleMasters(changedModuleMasters);
  return allChanged;
}
