{
  m_configuration=config;
  m_limitedWorkplacePort=config.getInteger("workplace.limited.port",-1);
  if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Resource broker init : phase 3 ok - creating db access module");
  }
  String defaultKey=config.getString(CmsDbcp.C_KEY_DATABASE_POOL + "." + CmsDbcp.C_KEY_DEFAULT_POOL_KEY);
  String userKey=config.getString(CmsDbcp.C_KEY_DATABASE_POOL + "." + CmsDbcp.C_KEY_USER_POOL_KEY);
  String vfsKey=config.getString(CmsDbcp.C_KEY_DATABASE_POOL + "." + CmsDbcp.C_KEY_VFS_POOL_KEY);
  m_defaultPoolUrl=CmsDbcp.createConnectionPool(config,defaultKey);
  if (userKey.equals(defaultKey)) {
    m_userPoolUrl=m_defaultPoolUrl;
  }
 else {
    m_userPoolUrl=CmsDbcp.createConnectionPool(config,userKey);
  }
  if (vfsKey.equals(defaultKey)) {
    m_vfsPoolUrl=m_defaultPoolUrl;
  }
 else {
    m_vfsPoolUrl=CmsDbcp.createConnectionPool(config,vfsKey);
  }
  initAccess(config);
  m_userCache=Collections.synchronizedMap((Map)new CmsLruHashMap(config.getInteger(C_CONFIGURATION_CACHE + ".user",50)));
  m_groupCache=Collections.synchronizedMap((Map)new CmsLruHashMap(config.getInteger(C_CONFIGURATION_CACHE + ".group",50)));
  m_userGroupsCache=Collections.synchronizedMap((Map)new CmsLruHashMap(config.getInteger(C_CONFIGURATION_CACHE + ".usergroups",50)));
  m_projectCache=Collections.synchronizedMap((Map)new CmsLruHashMap(config.getInteger(C_CONFIGURATION_CACHE + ".project",50)));
  m_resourceCache=Collections.synchronizedMap((Map)new CmsLruHashMap(config.getInteger(C_CONFIGURATION_CACHE + ".resource",2500)));
  m_resourceListCache=Collections.synchronizedMap((Map)new CmsLruHashMap(config.getInteger(C_CONFIGURATION_CACHE + ".subres",100)));
  m_propertyCache=Collections.synchronizedMap((Map)new CmsLruHashMap(config.getInteger(C_CONFIGURATION_CACHE + ".property",5000)));
  m_propertyDefCache=Collections.synchronizedMap((Map)new CmsLruHashMap(config.getInteger(C_CONFIGURATION_CACHE + ".propertydef",100)));
  m_propertyDefVectorCache=Collections.synchronizedMap((Map)new CmsLruHashMap(config.getInteger(C_CONFIGURATION_CACHE + ".propertyvectordef",100)));
  m_accessCache=Collections.synchronizedMap((Map)new CmsLruHashMap(config.getInteger(C_CONFIGURATION_CACHE + ".access",1000)));
  m_cachelimit=config.getInteger(C_CONFIGURATION_CACHE + ".maxsize",20000);
  m_refresh=config.getString(C_CONFIGURATION_CACHE + ".refresh","");
  if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Initializing registry: starting");
  }
  try {
    m_registry=new CmsRegistry(CmsBase.getAbsolutePath(config.getString(C_CONFIGURATION_REGISTRY)));
  }
 catch (  CmsException ex) {
    throw ex;
  }
catch (  Exception ex) {
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL))     A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,". Critical init error/4: " + ex.getMessage());
    throw new CmsException("Init of registry failed",CmsException.C_REGISTRY_ERROR,ex);
  }
  if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Initializing registry: finished");
  }
}
