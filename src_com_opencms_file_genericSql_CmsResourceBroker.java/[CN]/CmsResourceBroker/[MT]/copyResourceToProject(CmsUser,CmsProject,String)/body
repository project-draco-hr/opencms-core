{
  CmsProject online=onlineProject(currentUser,currentProject);
  if ((!currentProject.equals(online)) && (isManagerOfProject(currentUser,currentProject)) && (currentProject.getFlags() == C_PROJECT_STATE_UNLOCKED)) {
    CmsResource offlineRes=null;
    try {
      m_resourceCache.remove(resource);
      Vector subFiles=getFilesInFolder(currentUser,currentProject,resource,true);
      Vector subFolders=getSubFolders(currentUser,currentProject,resource,true);
      for (int i=0; i < subFolders.size(); i++) {
        String foldername=((CmsResource)subFolders.elementAt(i)).getResourceName();
        m_resourceCache.remove(foldername);
      }
      for (int i=0; i < subFiles.size(); i++) {
        String filename=((CmsResource)subFiles.elementAt(i)).getResourceName();
        m_resourceCache.remove(filename);
      }
      this.clearResourceCache(resource);
      m_accessCache.clear();
      offlineRes=readFileHeader(currentUser,currentProject,currentProject.getId(),resource);
    }
 catch (    CmsException exc) {
    }
    if ((offlineRes == null) || (offlineRes.getProjectId() != currentProject.getId())) {
      if (resource.endsWith("/")) {
        Vector projectResources=m_dbAccess.readAllProjectResources(currentProject.getId());
        for (int i=0; i < projectResources.size(); i++) {
          String resname=(String)projectResources.elementAt(i);
          if (resname.startsWith(resource)) {
            m_dbAccess.deleteProjectResource(currentProject.getId(),resname);
          }
        }
      }
      try {
        m_dbAccess.createProjectResource(currentProject.getId(),resource);
      }
 catch (      CmsException exc) {
      }
    }
  }
 else {
    throw new CmsException("[" + this.getClass().getName() + "] "+ currentProject.getName(),CmsException.C_NO_ACCESS);
  }
}
