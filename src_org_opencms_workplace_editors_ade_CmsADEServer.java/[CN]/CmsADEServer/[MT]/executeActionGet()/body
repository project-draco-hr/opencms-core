{
  JSONObject result=new JSONObject();
  HttpServletRequest request=getRequest();
  if (!checkParameters(request,result,PARAMETER_ACTION)) {
    return result;
  }
  String actionParam=request.getParameter(PARAMETER_ACTION);
  if (actionParam.equals(ACTION_PUB_LIST)) {
    if (checkParameters(request,null,PARAMETER_REMOVE_RESOURCES)) {
      String remResParam=request.getParameter(PARAMETER_REMOVE_RESOURCES);
      JSONArray resourcesToRemove=new JSONArray(remResParam);
      removeResourcesFromPublishList(resourcesToRemove);
    }
    if (checkParameters(request,null,PARAMETER_RELATED,PARAMETER_SIBLINGS)) {
      String relatedParam=request.getParameter(PARAMETER_RELATED);
      String siblingsParam=request.getParameter(PARAMETER_SIBLINGS);
      boolean related=Boolean.parseBoolean(relatedParam);
      boolean siblings=Boolean.parseBoolean(siblingsParam);
      JSONArray resourcesToPublish=getPublishList(related,siblings);
      result.put(P_RESOURCES,resourcesToPublish);
    }
 else {
      boolean related=true;
      boolean siblings=false;
      JSONArray resources=getResourcesToPublishWithProblems(related,siblings);
      if (resources.length() == 0) {
        resources=getPublishList(related,siblings);
      }
      result.put(P_RESOURCES,resources);
    }
    return result;
  }
 else   if (actionParam.equals(ACTION_PUBLISH)) {
    if (!checkParameters(request,result,PARAMETER_RESOURCES)) {
      return result;
    }
    String resourcesParam=request.getParameter(PARAMETER_RESOURCES);
    JSONArray resourcesToPublish=new JSONArray(resourcesParam);
    JSONArray resources=getResourcesWithLinkCheck(resourcesToPublish);
    if (resources.length() == 0) {
      publishResources(resourcesToPublish);
    }
 else {
      result.put(P_RESOURCES,resources);
    }
    return result;
  }
  if (!checkParameters(request,result,PARAMETER_CNTPAGE,PARAMETER_LOCALE,PARAMETER_URI)) {
    return result;
  }
  String cntPageParam=request.getParameter(PARAMETER_CNTPAGE);
  String localeParam=request.getParameter(PARAMETER_LOCALE);
  String uriParam=request.getParameter(PARAMETER_URI);
  CmsObject cms=getCmsObject();
  cms.getRequestContext().setLocale(CmsLocaleManager.getLocale(localeParam));
  CmsResource cntPageRes=cms.readResource(cntPageParam);
  CmsXmlContainerPage xmlCntPage=CmsXmlContainerPageFactory.unmarshal(cms,cntPageRes,request);
  CmsContainerPageBean cntPage=xmlCntPage.getCntPage(cms,cms.getRequestContext().getLocale());
  if (actionParam.equals(ACTION_ALL)) {
    result=getContainerPage(cntPageRes,cntPage,uriParam.equals(cntPageParam) ? null : uriParam);
  }
 else   if (actionParam.equals(ACTION_ELEM)) {
    String elemParam=request.getParameter(PARAMETER_ELEM);
    if (elemParam == null) {
      storeErrorMissingParam(result,PARAMETER_ELEM);
      return result;
    }
    CmsElementUtil elemUtil=new CmsElementUtil(cms,uriParam,request,getResponse());
    JSONObject resElements=new JSONObject();
    if (elemParam.startsWith("[")) {
      JSONArray elems=new JSONArray(elemParam);
      for (int i=0; i < elems.length(); i++) {
        String elemId=elems.getString(i);
        try {
          CmsContainerElementBean element=getCachedElement(elemId);
          resElements.put(element.getClientId(),elemUtil.getElementData(element,cntPage.getTypes()));
        }
 catch (        Exception e) {
          if (!LOG.isDebugEnabled()) {
            LOG.warn(e.getLocalizedMessage());
          }
          LOG.debug(e.getLocalizedMessage(),e);
        }
      }
    }
 else {
      try {
        CmsContainerElementBean element=getCachedElement(elemParam);
        resElements.put(element.getClientId(),elemUtil.getElementData(element,cntPage.getTypes()));
      }
 catch (      Exception e) {
        if (!LOG.isDebugEnabled()) {
          LOG.warn(e.getLocalizedMessage());
        }
        LOG.debug(e.getLocalizedMessage(),e);
      }
    }
    result.put(P_ELEMENTS,resElements);
  }
 else   if (actionParam.equals(ACTION_ELEM_PROPS)) {
    String elemParam=request.getParameter(PARAMETER_ELEM);
    String propertiesParam=request.getParameter(PARAMETER_PROPERTIES);
    if (elemParam == null) {
      storeErrorMissingParam(result,PARAMETER_ELEM);
      return result;
    }
    if (propertiesParam == null) {
      storeErrorMissingParam(result,PARAMETER_PROPERTIES);
      return result;
    }
    try {
      CmsElementUtil elemUtil=new CmsElementUtil(cms,uriParam,request,getResponse());
      JSONObject resElements=new JSONObject();
      JSONObject properties=new JSONObject(propertiesParam);
      CmsContainerElementBean element=createElement(m_manager.convertToServerId(elemParam),properties);
      String clientId=element.getClientId();
      m_sessionCache.setCacheContainerElement(element.getClientId(),element);
      resElements.put(clientId,elemUtil.getElementData(element,cntPage.getTypes()));
      result.put(P_ELEMENTS,resElements);
    }
 catch (    Exception e) {
      if (!LOG.isDebugEnabled()) {
        LOG.warn(e.getLocalizedMessage());
      }
      LOG.debug(e.getLocalizedMessage(),e);
    }
  }
 else   if (actionParam.equals(ACTION_FAV)) {
    result.put(P_FAVORITES,getFavoriteList(null,cntPage.getTypes()));
  }
 else   if (actionParam.equals(ACTION_REC)) {
    result.put(P_RECENT,getRecentList(null,cntPage.getTypes()));
  }
 else   if (actionParam.equals(ACTION_SEARCH)) {
    CmsSearchOptions searchOptions=new CmsSearchOptions(request);
    JSONObject searchResult=getSearchResult(cntPageParam,searchOptions,cntPage.getTypes());
    result.merge(searchResult,true,false);
  }
 else   if (actionParam.equals(ACTION_LS)) {
    CmsSearchOptions searchOptions=new CmsSearchOptions(request);
    JSONObject searchResult=getLastSearchResult(cntPageParam,searchOptions,cntPage.getTypes());
    CmsSearchOptions oldOptions=m_sessionCache.getADESearchOptions();
    if (oldOptions != null) {
      result.put(PARAMETER_TYPE,oldOptions.getTypes());
      result.put(PARAMETER_TEXT,oldOptions.getText());
      result.put(PARAMETER_LOCATION,oldOptions.getLocation());
    }
    result.merge(searchResult,true,false);
  }
 else   if (actionParam.equals(ACTION_NEW)) {
    if (!checkParameters(request,result,PARAMETER_DATA)) {
      return result;
    }
    String dataParam=request.getParameter(PARAMETER_DATA);
    String type=dataParam;
    CmsResource newResource=m_manager.createNewElement(cms,request.getParameter(PARAMETER_CNTPAGE),request,type);
    result.put(CmsElementUtil.P_ELEMENT_ID,m_manager.convertToClientId(newResource.getStructureId()));
    result.put(P_URI,cms.getSitePath(newResource));
  }
 else   if (actionParam.equals(ACTION_PROPS)) {
    String elemParam=request.getParameter(PARAMETER_ELEM);
    if (elemParam == null) {
      storeErrorMissingParam(result,PARAMETER_ELEM);
      return result;
    }
    try {
      CmsElementUtil elemUtil=new CmsElementUtil(cms,uriParam,request,getResponse());
      CmsContainerElementBean element=getCachedElement(elemParam);
      result=elemUtil.getElementPropertyInfo(element);
    }
 catch (    Exception e) {
      if (!LOG.isDebugEnabled()) {
        LOG.warn(e.getLocalizedMessage());
      }
      LOG.debug(e.getLocalizedMessage(),e);
    }
  }
 else {
    result.put(RES_ERROR,Messages.get().getBundle().key(Messages.ERR_JSON_WRONG_PARAMETER_VALUE_2,PARAMETER_ACTION,actionParam));
  }
  return result;
}
