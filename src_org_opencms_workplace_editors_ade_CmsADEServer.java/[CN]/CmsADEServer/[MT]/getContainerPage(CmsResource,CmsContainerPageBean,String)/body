{
  CmsObject cms=getCmsObject();
  JSONObject result=new JSONObject();
  JSONObject resElements=new JSONObject();
  JSONObject resContainers=new JSONObject();
  result.put(JsonCntPage.ELEMENTS.getName(),resElements);
  result.put(JsonCntPage.CONTAINERS.getName(),resContainers);
  result.put(JsonCntPage.LOCALE.getName(),cms.getRequestContext().getLocale().toString());
  result.put(JsonCntPage.RECENT_LIST_SIZE.getName(),m_manager.getRecentListMaxSize(cms));
  Set<String> types=cntPage.getTypes();
  resElements.merge(getNewResourceTypes(cms.getSitePath(resource),types),true,false);
  resElements.merge(getSearchResourceTypes(cms.getSitePath(resource),types),true,false);
  CmsElementUtil elemUtil=new CmsElementUtil(cms,getRequest().getParameter(ReqParam.URI.getName()),getRequest(),getResponse());
  Set<String> ids=new HashSet<String>();
  for (  Map.Entry<String,CmsContainerBean> entry : cntPage.getContainers().entrySet()) {
    CmsContainerBean container=entry.getValue();
    JSONObject resContainer=new JSONObject();
    resContainer.put(JsonContainer.OBJTYPE.getName(),TYPE_CONTAINER);
    resContainer.put(JsonContainer.NAME.getName(),container.getName());
    resContainer.put(JsonContainer.TYPE.getName(),container.getType());
    resContainer.put(JsonContainer.MAXELEMENTS.getName(),container.getMaxElements());
    JSONArray resContainerElems=new JSONArray();
    resContainer.put(JsonContainer.ELEMENTS.getName(),resContainerElems);
    int renderElems=container.getElements().size();
    if ((container.getMaxElements() > -1) && (renderElems > container.getMaxElements())) {
      renderElems=container.getMaxElements();
    }
    if ((elemUri != null) && container.getType().equals(CmsContainerPageBean.TYPE_TEMPLATE)) {
      renderElems--;
      CmsResource elemRes=cms.readResource(elemUri);
      CmsContainerElementBean element=new CmsContainerElementBean(elemRes.getStructureId(),null,null);
      m_sessionCache.setCacheContainerElement(element.getClientId(),element);
      String id=element.getClientId();
      resContainerElems.put(id);
      if (ids.contains(id)) {
        continue;
      }
      JSONObject resElement=elemUtil.getElementData(element,types);
      ids.add(id);
      resElements.put(id,resElement);
    }
    for (    CmsContainerElementBean element : container.getElements()) {
      if (renderElems < 1) {
        break;
      }
      renderElems--;
      String id=element.getClientId();
      resContainerElems.put(id);
      if (ids.contains(id)) {
        continue;
      }
      m_sessionCache.setCacheContainerElement(element.getClientId(),element);
      JSONObject resElement=elemUtil.getElementData(element,types);
      if (resElement.has(CmsElementUtil.JsonElement.SUBITEMS.getName())) {
        CmsResource elementRes=cms.readResource(element.getElementId());
        CmsXmlContainerPage subXmlCntPage=CmsXmlContainerPageFactory.unmarshal(cms,elementRes,getRequest());
        CmsContainerPageBean subCntPage=subXmlCntPage.getCntPage(cms,cms.getRequestContext().getLocale());
        CmsContainerBean subContainer=subCntPage.getContainers().values().iterator().next();
        for (        CmsContainerElementBean subElement : subContainer.getElements()) {
          if (!ids.contains(subElement.getElementId())) {
            String subId=subElement.getClientId();
            if (ids.contains(subId)) {
              continue;
            }
            JSONObject subItemData=elemUtil.getElementData(subElement,types);
            ids.add(subId);
            resElements.put(subId,subItemData);
          }
        }
      }
      ids.add(id);
      resElements.put(id,resElement);
    }
    resContainers.put(container.getName(),resContainer);
  }
  JSONArray resFavorites=getFavoriteList(resElements,types);
  result.put(JsonCntPage.FAVORITES.getName(),resFavorites);
  JSONArray resRecent=getRecentList(resElements,types);
  result.put(JsonCntPage.RECENT.getName(),resRecent);
  return result;
}
