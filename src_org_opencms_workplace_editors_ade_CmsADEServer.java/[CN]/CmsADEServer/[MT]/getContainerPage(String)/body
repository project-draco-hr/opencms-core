{
  CmsObject cms=getCmsObject();
  JSONObject result=new JSONObject();
  JSONObject resElements=new JSONObject();
  JSONObject resContainers=new JSONObject();
  result.put(P_ELEMENTS,resElements);
  result.put(P_CONTAINERS,resContainers);
  result.put(P_LOCALE,cms.getRequestContext().getLocale().toString());
  CmsResource containerPage=cms.readResource(uri);
  CmsResourceUtil resUtil=new CmsResourceUtil(cms,containerPage);
  result.put(CmsADEServer.P_ALLOWEDIT,resUtil.getLock().isLockableBy(cms.getRequestContext().currentUser()) && resUtil.isEditable());
  result.put(CmsADEServer.P_LOCKED,resUtil.getLockedByName());
  JSONObject containers=LOADER.getCache(cms,containerPage,cms.getRequestContext().getLocale());
  Collection types=CmsADEElementManager.getInstance().getContainerPageTypes(cms,uri);
  CmsADEElementCreator creator=new CmsADEElementCreator(cms,"/system/workplace/editors/ade/type_config.xml");
  Map<String,CmsADETypeConfigurationItem> typeConfig=creator.getConfiguration();
  for (  Map.Entry<String,CmsADETypeConfigurationItem> entry : typeConfig.entrySet()) {
    String type=entry.getKey();
    String elementUri=entry.getValue().getSourceFile();
    JSONObject resElement=CmsADEElementManager.getInstance().getElementData(cms,cms.readResource(elementUri),types,getRequest(),getResponse());
    resElement.put(P_ID,type);
    resElement.put(P_STATUS,"n");
    resElement.put(P_TYPE,type);
    resElements.put(type,resElement);
  }
  Map<String,String> ids=new HashMap<String,String>();
  Iterator itKeys=containers.keys();
  while (itKeys.hasNext()) {
    String containerName=(String)itKeys.next();
    JSONObject container=containers.getJSONObject(containerName);
    String name=container.getString(CmsContainerPageLoader.N_NAME);
    String type=container.getString(CmsContainerPageLoader.N_TYPE);
    int maxElements=container.getInt(CmsContainerPageLoader.N_MAXELEMENTS);
    JSONObject resContainer=new JSONObject();
    resContainer.put(P_NAME,name);
    resContainer.put(P_TYPE,type);
    resContainer.put(P_MAXELEMENTS,maxElements);
    JSONArray resContainerElems=new JSONArray();
    resContainer.put(P_ELEMENTS,resContainerElems);
    JSONArray elements=container.optJSONArray(CmsContainerPageLoader.N_ELEMENT);
    int renderElems=elements.length();
    if ((maxElements > -1) && (renderElems > maxElements)) {
      renderElems=maxElements;
    }
    for (int i=0; i < renderElems; i++) {
      JSONObject element=elements.optJSONObject(i);
      String elementUri=element.optString(CmsContainerPageLoader.N_URI);
      String id=ids.get(elementUri);
      if (id != null) {
        resContainerElems.put(id);
        continue;
      }
      JSONObject resElement=CmsADEElementManager.getInstance().getElementData(cms,cms.readResource(elementUri),types,getRequest(),getResponse());
      id=resElement.getString(P_ID);
      ids.put(elementUri,id);
      resElements.put(id,resElement);
      resContainerElems.put(id);
    }
    resContainers.put(name,resContainer);
  }
  JSONArray resFavorites=CmsADEElementManager.getInstance().getFavoriteList(cms,resElements,uri,getRequest(),getResponse());
  result.put(P_FAVORITES,resFavorites);
  JSONArray resRecent=CmsADEElementManager.getInstance().getRecentList(cms,resElements,uri,getRequest(),getResponse());
  result.put(P_RECENT,resRecent);
  return result;
}
