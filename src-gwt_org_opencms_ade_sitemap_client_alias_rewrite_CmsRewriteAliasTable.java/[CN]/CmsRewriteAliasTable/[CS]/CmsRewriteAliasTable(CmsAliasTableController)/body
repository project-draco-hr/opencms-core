{
  super(Integer.MAX_VALUE,(CellTable.Resources)GWT.create(I_CmsCellTableResources.class),new ProvidesKey<CmsRewriteAliasTableRow>(){
    public Object getKey(    CmsRewriteAliasTableRow item){
      return item.getId();
    }
  }
);
  m_controller=controller;
  @SuppressWarnings("unchecked") A_CmsAliasTableColumn<CmsRewriteAliasTableRow,?,CmsRewriteAliasTable>[] columns=new A_CmsAliasTableColumn[]{new CmsRewriteAliasSelectColumn(this),new CmsRewriteAliasPatternColumn(this),new CmsRewriteAliasReplacementColumn(this),new CmsRewriteAliasModeColumn(this),new CmsRewriteAliasErrorColumn()};
  m_dataProvider=new ListDataProvider<CmsRewriteAliasTableRow>();
  m_dataProvider.addDataDisplay(this);
  ColumnSortEvent.ListHandler<CmsRewriteAliasTableRow> sortHandler=new ColumnSortEvent.ListHandler<CmsRewriteAliasTableRow>(m_dataProvider.getList());
  for (  A_CmsAliasTableColumn<CmsRewriteAliasTableRow,?,CmsRewriteAliasTable> column : columns) {
    column.initSortHandler(sortHandler);
  }
  addColumnSortHandler(sortHandler);
  final MultiSelectionModel<CmsRewriteAliasTableRow> selectionModel=new MultiSelectionModel<CmsRewriteAliasTableRow>(getKeyProvider());
  selectionModel.addSelectionChangeHandler(new SelectionChangeEvent.Handler(){
    public void onSelectionChange(    SelectionChangeEvent event){
      getController().changeRewriteSelection(selectionModel.getSelectedSet());
    }
  }
);
  setSelectionModel(selectionModel,DefaultSelectionEventManager.<CmsRewriteAliasTableRow>createCheckboxManager());
  for (  A_CmsAliasTableColumn<CmsRewriteAliasTableRow,?,CmsRewriteAliasTable> column : columns) {
    column.addToTable(this);
  }
  CmsCellTableUtil.ensureCellTableParentResize(this);
}
