{
  if (m_enabled) {
    int lines=-1;
    int startLine;
    if (m_isLogfile) {
      lines=scrollToFileEnd();
      startLine=lines - m_windowSize;
    }
 else {
      m_windowPos=0;
      startLine=m_windowPos * m_windowSize;
    }
    LineNumberReader reader=null;
    try {
      reader=new LineNumberReader(new BufferedReader(new InputStreamReader(new FileInputStream(m_filePath),m_fileEncoding)),m_windowSize * 200);
      int currentLine=0;
      while (startLine > currentLine) {
        reader.readLine();
        currentLine++;
      }
      StringBuffer result=new StringBuffer();
      String read=reader.readLine();
      if (m_isLogfile) {
        Stack inverter=new Stack();
        for (int i=m_windowSize; i > 0 && read != null; i--) {
          inverter.push(read);
          read=reader.readLine();
        }
        while (!inverter.isEmpty()) {
          result.append(inverter.pop());
          result.append('\n');
        }
      }
 else {
        for (int i=m_windowSize; i > 0 && read != null; i--) {
          result.append(read);
          result.append('\n');
          read=reader.readLine();
        }
      }
      return CmsEncoder.escapeXml(result.toString());
    }
 catch (    IOException ioex) {
      CmsRfsException ex=new CmsRfsException(Messages.get().container(Messages.ERR_FILE_ARG_ACCESS_1,m_filePath),ioex);
      throw ex;
    }
 finally {
      if (reader != null) {
        try {
          reader.close();
        }
 catch (        IOException e) {
          LOG.error(e.getLocalizedMessage(),e);
        }
      }
    }
  }
 else {
    return Messages.get().getBundle().key(Messages.GUI_FILE_VIEW_NO_PREVIEW_0);
  }
}
