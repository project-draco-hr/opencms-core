{
  CmsRfsFileLineIndexInfo lineInfo=initIndexer(m_filePath);
  if (m_enabled) {
    Reader reader=null;
    try {
      reader=new InputStreamReader(new FileInputStream(m_filePath),m_fileEncoding);
      long skip=lineInfo.getLineBreakPosition(m_windowPos * m_windowSize,m_windowSize);
      int maxSkipTries=100;
      while (skip > 0 && maxSkipTries > 0) {
        long skipped=reader.skip(skip);
        skip-=skipped;
        maxSkipTries--;
      }
      LineNumberReader lineReader=new LineNumberReader(reader);
      StringBuffer result=new StringBuffer();
      String read=lineReader.readLine();
      if (m_isLogfile) {
        Stack inverter=new Stack();
        for (int i=m_windowSize; i > 0 && read != null; i--) {
          inverter.push(read);
          read=lineReader.readLine();
        }
        while (!inverter.isEmpty()) {
          result.append(inverter.pop());
          result.append('\n');
        }
      }
 else {
        for (int i=m_windowSize; i > 0 && read != null; i--) {
          result.append(read);
          result.append('\n');
          read=lineReader.readLine();
        }
      }
      return CmsEncoder.escapeXml(result.toString());
    }
 catch (    IOException ioex) {
      CmsRfsException ex=new CmsRfsException(Messages.get().container(Messages.ERR_FILE_ARG_ACCESS_1,m_filePath),ioex);
      throw ex;
    }
 finally {
      if (reader != null) {
        try {
          reader.close();
        }
 catch (        IOException e) {
          LOG.error(e);
        }
      }
    }
  }
 else {
    return Messages.get().getBundle().key(Messages.GUI_FILE_VIEW_NO_PREVIEW_0);
  }
}
