{
  if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging() && C_DEBUG) {
    A_OpenCms.log(C_OPENCMS_DEBUG,this.getClassName() + "getting content of element " + ((elementName == null) ? "<root>" : elementName));
    A_OpenCms.log(C_OPENCMS_DEBUG,this.getClassName() + "template file is: " + templateFile);
    A_OpenCms.log(C_OPENCMS_DEBUG,this.getClassName() + "selected template section is: " + ((templateSelector == null) ? "<default>" : templateSelector));
  }
  CmsXmlTemplateFile xmlDocument=getOwnTemplateFile(cms,templateFile,elementName,parameters,templateSelector);
  CmsRequestContext reqCont=cms.getRequestContext();
  I_CmsRegistry reg=cms.getRegistry();
  I_CmsSession session=cms.getRequestContext().getSession(true);
  String step=(String)parameters.get(C_STEP);
  String moduleName=(String)parameters.get(C_MODULE);
  if ((step != null) && ("working".equals(step))) {
    Thread doDelete=(Thread)session.getValue(C_MODULE_THREAD);
    if (doDelete.isAlive()) {
      String time=(String)parameters.get("time");
      int wert=Integer.parseInt(time);
      wert+=20;
      xmlDocument.setData("time","" + wert);
      return startProcessing(cms,xmlDocument,elementName,parameters,C_WAIT);
    }
 else {
      return startProcessing(cms,xmlDocument,elementName,parameters,C_DONE);
    }
  }
  if (step == null) {
    xmlDocument.setData("name",moduleName);
    xmlDocument.setData("version","" + reg.getModuleVersion(moduleName));
  }
 else {
    if (C_DELETE.equals(step)) {
      Vector otherModules=reg.deleteCheckDependencies(moduleName);
      if (!otherModules.isEmpty()) {
        xmlDocument.setData("name",moduleName);
        xmlDocument.setData("version","" + reg.getModuleVersion(moduleName));
        String depModules="";
        for (int i=0; i < otherModules.size(); i++) {
          depModules+=(String)otherModules.elementAt(i) + "\n";
        }
        xmlDocument.setData("precondition",depModules);
        templateSelector=C_ERROR;
      }
 else {
        Vector filesWithProperty=new Vector();
        Vector missingFiles=new Vector();
        Vector wrongChecksum=new Vector();
        Vector filesInUse=new Vector();
        Vector resourcesForProject=new Vector();
        reqCont.setCurrentProject(cms.onlineProject().getId());
        reg.deleteGetConflictingFileNames(moduleName,filesWithProperty,missingFiles,wrongChecksum,filesInUse,resourcesForProject);
        session.putValue(C_SESSION_MODULENAME,moduleName);
        session.putValue(C_SESSION_MODULE_PROJECTFILES,resourcesForProject);
        if (filesWithProperty.isEmpty() && missingFiles.isEmpty() && wrongChecksum.isEmpty()&& filesInUse.isEmpty()) {
          step="fromerrorpage";
        }
 else {
          session.putValue(C_SESSION_MODULE_DELETE_STEP,"0");
          session.putValue(C_SESSION_MODULE_CHECKSUM,wrongChecksum);
          session.putValue(C_SESSION_MODULE_PROPFILES,filesWithProperty);
          session.putValue(C_SESSION_MODULE_INUSE,filesInUse);
          session.putValue(C_SESSION_MODULE_MISSFILES,missingFiles);
          templateSelector=C_WARNING;
        }
      }
    }
  }
  if ((step != null) && ("fromerrorpage".equals(step))) {
    Vector exclusion=(Vector)session.getValue(C_SESSION_MODULE_EXCLUSION);
    Vector resourcesForProject=new Vector();
    resourcesForProject.add("/");
    if (exclusion == null) {
      exclusion=new Vector();
    }
    moduleName=(String)session.getValue(C_SESSION_MODULENAME);
    Thread doDelete=new CmsAdminModuleDeleteThread(cms,reg,moduleName,exclusion,resourcesForProject);
    doDelete.start();
    session.putValue(C_MODULE_THREAD,doDelete);
    xmlDocument.setData("time","10");
    templateSelector=C_WAIT;
  }
  return startProcessing(cms,xmlDocument,elementName,parameters,templateSelector);
}
