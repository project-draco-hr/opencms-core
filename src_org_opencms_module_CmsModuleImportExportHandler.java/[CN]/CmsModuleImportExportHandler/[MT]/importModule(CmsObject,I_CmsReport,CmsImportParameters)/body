{
  OpenCms.getRoleManager().checkRole(cms,CmsRole.DATABASE_MANAGER);
  CmsModule importedModule=readModuleFromImport(parameters.getPath());
  if (OpenCms.getModuleManager().hasModule(importedModule.getName())) {
    throw new CmsConfigurationException(Messages.get().container(Messages.ERR_MOD_ALREADY_INSTALLED_1,importedModule.getName()));
  }
  List<CmsModuleDependency> dependencies=OpenCms.getModuleManager().checkDependencies(importedModule,CmsModuleManager.DEPENDENCY_MODE_IMPORT);
  if (dependencies.size() > 0) {
    StringBuffer missingModules=new StringBuffer();
    for (    CmsModuleDependency dependency : dependencies) {
      missingModules.append("  ").append(dependency.getName()).append(", Version ").append(dependency.getVersion()).append("\r\n");
    }
    throw new CmsConfigurationException(Messages.get().container(Messages.ERR_MOD_DEPENDENCY_INFO_2,importedModule.getName() + ", Version " + importedModule.getVersion(),missingModules));
  }
  List<I_CmsResourceType> checkedTypes=new ArrayList<I_CmsResourceType>();
  for (  I_CmsResourceType type : importedModule.getResourceTypes()) {
    int externalConflictIndex=OpenCms.getResourceManager().getResourceTypes().indexOf(type);
    if (externalConflictIndex >= 0) {
      I_CmsResourceType conflictingType=OpenCms.getResourceManager().getResourceTypes().get(externalConflictIndex);
      if (!type.isIdentical(conflictingType)) {
        throw new CmsConfigurationException(org.opencms.loader.Messages.get().container(org.opencms.loader.Messages.ERR_CONFLICTING_MODULE_RESOURCE_TYPES_5,new Object[]{type.getTypeName(),new Integer(type.getTypeId()),importedModule.getName(),conflictingType.getTypeName(),new Integer(conflictingType.getTypeId())}));
      }
    }
    int internalConflictIndex=checkedTypes.indexOf(type);
    if (internalConflictIndex >= 0) {
      I_CmsResourceType conflictingType=checkedTypes.get(internalConflictIndex);
      throw new CmsConfigurationException(org.opencms.loader.Messages.get().container(org.opencms.loader.Messages.ERR_CONFLICTING_RESTYPES_IN_MODULE_5,new Object[]{importedModule.getName(),type.getTypeName(),new Integer(type.getTypeId()),conflictingType.getTypeName(),new Integer(conflictingType.getTypeId())}));
    }
    checkedTypes.add(type);
  }
  OpenCms.getModuleManager().addModule(cms,importedModule);
  if (importedModule.getResourceTypes() != Collections.EMPTY_LIST) {
    OpenCms.getResourceManager().initialize(cms);
  }
  if (importedModule.getExplorerTypes() != Collections.EMPTY_LIST) {
    OpenCms.getWorkplaceManager().addExplorerTypeSettings(importedModule);
  }
  CmsObject importCms=OpenCms.initCmsObject(cms);
  String importSite=importedModule.getImportSite();
  if (!CmsStringUtil.isEmptyOrWhitespaceOnly(importSite)) {
    importCms.getRequestContext().setSiteRoot(importSite);
  }
  CmsImport cmsImport=new CmsImport(importCms,report);
  cmsImport.importData(parameters);
  String importScript=importedModule.getImportScript();
  if (!CmsStringUtil.isEmptyOrWhitespaceOnly(importScript)) {
    LOG.info("Executing import script for module " + importedModule.getName());
    report.println(Messages.get().container(Messages.RPT_IMPORT_SCRIPT_HEADER_0),I_CmsReport.FORMAT_HEADLINE);
    importScript="echo on\n" + importScript;
    ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    PrintStream out=new PrintStream(buffer);
    CmsShell shell=new CmsShell(cms,"${user}@${project}:${siteroot}|${uri}>",null,out,out);
    shell.execute(importScript);
    String outputString=buffer.toString();
    LOG.info("Shell output for import script was: \n" + outputString);
    report.println(Messages.get().container(Messages.RPT_IMPORT_SCRIPT_OUTPUT_1,outputString));
  }
  return importedModule;
}
