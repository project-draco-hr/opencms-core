{
  LOG.debug("### START SRARCH (time in ms) ###");
  int previousPriority=Thread.currentThread().getPriority();
  long startTime=System.currentTimeMillis();
  CmsSolrQuery query=new CmsSolrQuery(cms,initQuery);
  query.setHighlight(false);
  try {
    CmsObject searchCms=OpenCms.initCmsObject(cms);
    if (getPriority() > 0) {
      Thread.currentThread().setPriority(getPriority());
    }
    List<CmsSearchResource> resourceDocumentList=new ArrayList<CmsSearchResource>();
    SolrDocumentList solrDocumentList=new SolrDocumentList();
    int rows=query.getRows() != null ? query.getRows().intValue() : CmsSolrQuery.DEFAULT_ROWS;
    if (!ignoreMaxRows && (rows > ROWS_MAX)) {
      rows=ROWS_MAX;
    }
    int start=query.getStart() != null ? query.getStart().intValue() : 0;
    int end=start + rows;
    int page=0;
    if (rows > 0) {
      page=Math.round(start / rows) + 1;
    }
    query.setStart(new Integer(0));
    query.setRows(new Integer((5 * rows * page) + start));
    QueryResponse queryResponse=m_solr.query(query);
    LOG.debug("### Query Time After Execution  : " + (System.currentTimeMillis() - startTime));
    long hitCount=queryResponse.getResults().getNumFound();
    long visibleHitCount=hitCount;
    float maxScore=0;
    for (int i=0, cnt=0; (i < hitCount) && (cnt < end); i++) {
      try {
        SolrDocument doc=queryResponse.getResults().get(i);
        CmsSolrDocument searchDoc=new CmsSolrDocument(doc);
        if (needsPermissionCheck(searchDoc)) {
          CmsResource resource=getResource(searchCms,searchDoc);
          if (resource != null) {
            if (cnt >= start) {
              if (m_postProcessor != null) {
                doc=m_postProcessor.process(searchCms,resource,(SolrInputDocument)searchDoc.getDocument());
              }
              resourceDocumentList.add(new CmsSearchResource(resource,searchDoc));
              solrDocumentList.add(doc);
              maxScore=maxScore < searchDoc.getScore() ? searchDoc.getScore() : maxScore;
            }
            cnt++;
          }
 else {
            visibleHitCount--;
          }
        }
      }
 catch (      Exception e) {
        LOG.warn(Messages.get().getBundle().key(Messages.LOG_RESULT_ITERATION_FAILED_0),e);
      }
    }
    SolrCore core=null;
    if (m_solr instanceof EmbeddedSolrServer) {
      core=((EmbeddedSolrServer)m_solr).getCoreContainer().getCore(getName());
    }
    LOG.debug("### Query Time After Permission : " + (System.currentTimeMillis() - startTime));
    return new CmsSolrResultList(core,initQuery,queryResponse,solrDocumentList,resourceDocumentList,start,new Integer(rows),end,page,visibleHitCount,new Float(maxScore),startTime);
  }
 catch (  Exception e) {
    throw new CmsSearchException(Messages.get().container(Messages.ERR_SEARCH_INVALID_SEARCH_1,CmsEncoder.decode(query.toString())),e);
  }
 finally {
    Thread.currentThread().setPriority(previousPriority);
  }
}
