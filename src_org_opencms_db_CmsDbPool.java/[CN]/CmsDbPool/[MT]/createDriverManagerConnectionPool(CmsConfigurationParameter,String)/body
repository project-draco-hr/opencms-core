{
  String jdbcDriver=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_JDBC_DRIVER);
  String jdbcUrl=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_JDBC_URL);
  String jdbcUrlParams=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_JDBC_URL_PARAMS);
  int maxActive=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_MAX_ACTIVE,10);
  int maxWait=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_MAX_WAIT,2000);
  int maxIdle=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_MAX_IDLE,5);
  int minEvictableIdleTime=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_MIN_EVICTABLE_IDLE_TIME,1800000);
  int minIdle=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_MIN_IDLE,0);
  int numTestsPerEvictionRun=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_NUM_TESTS_PER_EVICTION_RUN,3);
  int timeBetweenEvictionRuns=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_TIME_BETWEEN_EVICTION_RUNS,3600000);
  String testQuery=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_TEST_QUERY);
  String username=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_USERNAME);
  String password=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_PASSWORD);
  String poolUrl=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_POOL_URL);
  String whenExhaustedActionValue=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_WHEN_EXHAUSTED_ACTION).trim();
  byte whenExhaustedAction=0;
  boolean testOnBorrow=Boolean.valueOf(config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_TEST_ON_BORROW,"false").trim()).booleanValue();
  boolean testWhileIdle=Boolean.valueOf(config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_TEST_WHILE_IDLE,"false").trim()).booleanValue();
  if ("block".equalsIgnoreCase(whenExhaustedActionValue)) {
    whenExhaustedAction=GenericObjectPool.WHEN_EXHAUSTED_BLOCK;
  }
 else   if ("fail".equalsIgnoreCase(whenExhaustedActionValue)) {
    whenExhaustedAction=GenericObjectPool.WHEN_EXHAUSTED_FAIL;
  }
 else   if ("grow".equalsIgnoreCase(whenExhaustedActionValue)) {
    whenExhaustedAction=GenericObjectPool.WHEN_EXHAUSTED_GROW;
  }
 else {
    whenExhaustedAction=GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
  }
  if ("".equals(testQuery)) {
    testQuery=null;
  }
  if (username == null) {
    username="";
  }
  if (password == null) {
    password="";
  }
  boolean poolingStmts=Boolean.valueOf(config.getString(KEY_DATABASE_STATEMENTS + '.' + key+ '.'+ KEY_POOLING,CmsStringUtil.TRUE).trim()).booleanValue();
  int maxActiveStmts=config.getInteger(KEY_DATABASE_STATEMENTS + '.' + key+ '.'+ KEY_MAX_ACTIVE,25);
  int maxWaitStmts=config.getInteger(KEY_DATABASE_STATEMENTS + '.' + key+ '.'+ KEY_MAX_WAIT,250);
  int maxIdleStmts=config.getInteger(KEY_DATABASE_STATEMENTS + '.' + key+ '.'+ KEY_MAX_IDLE,15);
  String whenStmtsExhaustedActionValue=config.getString(KEY_DATABASE_STATEMENTS + '.' + key+ '.'+ KEY_WHEN_EXHAUSTED_ACTION);
  byte whenStmtsExhaustedAction=GenericKeyedObjectPool.WHEN_EXHAUSTED_GROW;
  if (whenStmtsExhaustedActionValue != null) {
    whenStmtsExhaustedActionValue=whenStmtsExhaustedActionValue.trim();
    whenStmtsExhaustedAction=("block".equalsIgnoreCase(whenStmtsExhaustedActionValue)) ? GenericKeyedObjectPool.WHEN_EXHAUSTED_BLOCK : ("fail".equalsIgnoreCase(whenStmtsExhaustedActionValue)) ? GenericKeyedObjectPool.WHEN_EXHAUSTED_FAIL : GenericKeyedObjectPool.WHEN_EXHAUSTED_GROW;
  }
  int connectionAttempts=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_CONNECT_ATTEMTS,10);
  int connetionsWait=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_CONNECT_WAITS,5000);
  Class.forName(jdbcDriver).newInstance();
  GenericObjectPool connectionPool=new GenericObjectPool(null);
  connectionPool.setMaxActive(maxActive);
  connectionPool.setMaxIdle(maxIdle);
  connectionPool.setMinIdle(minIdle);
  connectionPool.setMaxWait(maxWait);
  connectionPool.setWhenExhaustedAction(whenExhaustedAction);
  if (testQuery != null) {
    connectionPool.setTestOnBorrow(testOnBorrow);
    connectionPool.setTestWhileIdle(testWhileIdle);
    connectionPool.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRuns);
    connectionPool.setNumTestsPerEvictionRun(numTestsPerEvictionRun);
    connectionPool.setMinEvictableIdleTimeMillis(minEvictableIdleTime);
  }
  if (jdbcUrlParams != null) {
    jdbcUrl+=jdbcUrlParams;
  }
  ConnectionFactory connectionFactory=new DriverManagerConnectionFactory(jdbcUrl,username,password);
  GenericKeyedObjectPoolFactory statementFactory=null;
  if (poolingStmts) {
    statementFactory=new GenericKeyedObjectPoolFactory(null,maxActiveStmts,whenStmtsExhaustedAction,maxWaitStmts,maxIdleStmts);
  }
  new PoolableConnectionFactory(connectionFactory,connectionPool,statementFactory,testQuery,false,true);
  PoolingDriver driver=new PoolingDriver();
  driver.registerPool(poolUrl,connectionPool);
  Connection con=null;
  boolean connect=false;
  int connectionTests=0;
  do {
    try {
      con=connectionFactory.createConnection();
      connect=true;
    }
 catch (    Exception e) {
      connectionTests++;
      if (CmsLog.INIT.isInfoEnabled()) {
        CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_WAIT_FOR_DB_4,new Object[]{poolUrl,jdbcUrl,new Integer(connectionTests),new Integer(connetionsWait)}));
      }
      Thread.sleep(connetionsWait);
    }
 finally {
      if (con != null) {
        con.close();
      }
    }
  }
 while (!connect && (connectionTests < connectionAttempts));
  if (CmsLog.INIT.isInfoEnabled()) {
    CmsLog.INIT.info(Messages.get().getBundle().key(Messages.INIT_JDBC_POOL_2,poolUrl,jdbcUrl));
  }
  return driver;
}
