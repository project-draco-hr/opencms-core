{
  String jdbcDriver=config.getString(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_JDBC_DRIVER);
  String jdbcUrl=config.getString(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_JDBC_URL);
  int maxActive=config.getInteger(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_MAX_ACTIVE,10);
  int maxWait=config.getInteger(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_MAX_WAIT,2000);
  int maxIdle=config.getInteger(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_MAX_IDLE,5);
  String testQuery=config.getString(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_TEST_QUERY);
  String username=config.getString(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_USERNAME);
  String password=config.getString(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_PASSWORD);
  String poolUrl=config.getString(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_POOL_URL);
  String dbName=config.getString(C_KEY_DATABASE_NAME).trim();
  String whenExhaustedActionValue=config.getString(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_WHEN_EXHAUSTED_ACTION).trim();
  byte whenExhaustedAction=0;
  boolean testOnBorrow="true".equalsIgnoreCase(config.getString(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_TEST_ON_BORROW).trim());
  if ("block".equalsIgnoreCase(whenExhaustedActionValue)) {
    whenExhaustedAction=GenericObjectPool.WHEN_EXHAUSTED_BLOCK;
  }
 else   if ("fail".equalsIgnoreCase(whenExhaustedActionValue)) {
    whenExhaustedAction=GenericObjectPool.WHEN_EXHAUSTED_FAIL;
  }
 else   if ("grow".equalsIgnoreCase(whenExhaustedActionValue)) {
    whenExhaustedAction=GenericObjectPool.WHEN_EXHAUSTED_GROW;
  }
 else {
    whenExhaustedAction=GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
  }
  if ("".equals(testQuery)) {
    testQuery=null;
  }
  if (username == null) {
    username="";
  }
  if (password == null) {
    password="";
  }
  Class.forName(jdbcDriver).newInstance();
  GenericObjectPool connectionPool=null;
  if ("mysql".equalsIgnoreCase(dbName.trim())) {
    boolean logAbandoned="true".equalsIgnoreCase(config.getString(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_LOG_ABANDONED).trim());
    boolean removeAbandoned="true".equalsIgnoreCase(config.getString(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_REMOVE_ABANDONED).trim());
    int removeAbandonedTimeout=config.getInteger(C_KEY_DATABASE_POOL + "." + key+ "."+ C_KEY_REMOVE_ABANDONED_TIMEOUT,300);
    AbandonedConfig abandonedConfig=new AbandonedConfig();
    abandonedConfig.setLogAbandoned(logAbandoned);
    abandonedConfig.setRemoveAbandoned(removeAbandoned);
    abandonedConfig.setRemoveAbandonedTimeout(removeAbandonedTimeout);
    connectionPool=new AbandonedObjectPool(null,abandonedConfig);
  }
 else {
    connectionPool=new GenericObjectPool(null);
  }
  connectionPool.setMaxActive(maxActive);
  connectionPool.setMaxIdle(maxIdle);
  connectionPool.setMaxWait(maxWait);
  connectionPool.setWhenExhaustedAction(whenExhaustedAction);
  connectionPool.setTestOnBorrow(testOnBorrow && (testQuery != null));
  connectionPool.setTestWhileIdle(true);
  ConnectionFactory connectionFactory=new DriverManagerConnectionFactory(jdbcUrl,username,password);
  new PoolableConnectionFactory(connectionFactory,connectionPool,null,testQuery,false,true);
  PoolingDriver driver=new PoolingDriver();
  driver.registerPool(poolUrl,connectionPool);
  return poolUrl;
}
