{
  ExtendedProperties config;
  if (configuration instanceof ExtendedProperties) {
    config=(ExtendedProperties)configuration;
  }
 else {
    config=new ExtendedProperties();
    config.putAll(configuration);
  }
  String jdbcDriver=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_JDBC_DRIVER);
  String jdbcUrl=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_JDBC_URL);
  String jdbcUrlParams=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_JDBC_URL_PARAMS);
  int maxActive=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_MAX_ACTIVE,10);
  int maxWait=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_MAX_WAIT,2000);
  int maxIdle=config.getInteger(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_MAX_IDLE,5);
  String testQuery=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_TEST_QUERY);
  String username=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_USERNAME);
  String password=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_PASSWORD);
  String poolUrl=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_POOL_URL);
  String whenExhaustedActionValue=config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_WHEN_EXHAUSTED_ACTION).trim();
  byte whenExhaustedAction=0;
  boolean testOnBorrow="true".equalsIgnoreCase(config.getString(KEY_DATABASE_POOL + '.' + key+ '.'+ KEY_TEST_ON_BORROW).trim());
  if ("block".equalsIgnoreCase(whenExhaustedActionValue)) {
    whenExhaustedAction=GenericObjectPool.WHEN_EXHAUSTED_BLOCK;
  }
 else   if ("fail".equalsIgnoreCase(whenExhaustedActionValue)) {
    whenExhaustedAction=GenericObjectPool.WHEN_EXHAUSTED_FAIL;
  }
 else   if ("grow".equalsIgnoreCase(whenExhaustedActionValue)) {
    whenExhaustedAction=GenericObjectPool.WHEN_EXHAUSTED_GROW;
  }
 else {
    whenExhaustedAction=GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
  }
  if ("".equals(testQuery)) {
    testQuery=null;
  }
  if (username == null) {
    username="";
  }
  if (password == null) {
    password="";
  }
  boolean poolingStmts="true".equalsIgnoreCase(config.getString(KEY_DATABASE_STATEMENTS + '.' + key+ '.'+ KEY_POOLING,"true").trim());
  int maxActiveStmts=config.getInteger(KEY_DATABASE_STATEMENTS + '.' + key+ '.'+ KEY_MAX_ACTIVE,25);
  int maxWaitStmts=config.getInteger(KEY_DATABASE_STATEMENTS + '.' + key+ '.'+ KEY_MAX_WAIT,250);
  int maxIdleStmts=config.getInteger(KEY_DATABASE_STATEMENTS + '.' + key+ '.'+ KEY_MAX_IDLE,15);
  String whenStmtsExhaustedActionValue=config.getString(KEY_DATABASE_STATEMENTS + '.' + key+ '.'+ KEY_WHEN_EXHAUSTED_ACTION);
  byte whenStmtsExhaustedAction=GenericKeyedObjectPool.WHEN_EXHAUSTED_GROW;
  if (whenStmtsExhaustedActionValue != null) {
    whenStmtsExhaustedActionValue=whenStmtsExhaustedActionValue.trim();
    whenStmtsExhaustedAction=("block".equalsIgnoreCase(whenStmtsExhaustedActionValue)) ? GenericKeyedObjectPool.WHEN_EXHAUSTED_BLOCK : ("fail".equalsIgnoreCase(whenStmtsExhaustedActionValue)) ? GenericKeyedObjectPool.WHEN_EXHAUSTED_FAIL : GenericKeyedObjectPool.WHEN_EXHAUSTED_GROW;
  }
  Class.forName(jdbcDriver).newInstance();
  GenericObjectPool connectionPool=new GenericObjectPool(null);
  connectionPool.setMaxActive(maxActive);
  connectionPool.setMaxIdle(maxIdle);
  connectionPool.setMaxWait(maxWait);
  connectionPool.setWhenExhaustedAction(whenExhaustedAction);
  connectionPool.setTestOnBorrow(testOnBorrow && (testQuery != null));
  connectionPool.setTestWhileIdle(true);
  if (jdbcUrlParams != null) {
    jdbcUrl+=jdbcUrlParams;
  }
  ConnectionFactory connectionFactory=new DriverManagerConnectionFactory(jdbcUrl,username,password);
  GenericKeyedObjectPoolFactory statementFactory=null;
  if (poolingStmts) {
    statementFactory=new GenericKeyedObjectPoolFactory(null,maxActiveStmts,whenStmtsExhaustedAction,maxWaitStmts,maxIdleStmts);
  }
  new PoolableConnectionFactory(connectionFactory,connectionPool,statementFactory,testQuery,false,true);
  PoolingDriver driver=new PoolingDriver();
  driver.registerPool(poolUrl,connectionPool);
  Connection con=connectionFactory.createConnection();
  con.close();
  if (CmsLog.INIT.isInfoEnabled()) {
    CmsLog.INIT.info(Messages.get().key(Messages.INIT_JDBC_POOL_2,poolUrl,jdbcUrl));
  }
  return driver;
}
