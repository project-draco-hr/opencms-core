{
  Map<String,String> propertiesMap=new HashMap<String,String>();
  for (Iterator<Element> itProps=CmsXmlGenericWrapper.elementIterator(element,CmsXmlContentProperty.XmlNode.Properties.name()); itProps.hasNext(); ) {
    Element property=itProps.next();
    int propIndex=CmsXmlUtils.getXpathIndexInt(property.getUniquePath(element));
    String propPath=CmsXmlUtils.concatXpath(elemPath,CmsXmlUtils.createXpathElement(property.getName(),propIndex));
    I_CmsXmlSchemaType propSchemaType=elemDef.getSchemaType(property.getName());
    I_CmsXmlContentValue propValue=propSchemaType.createValue(xmlContent,property,locale);
    xmlContent.addBookmarkForValue(propValue,propPath,locale,true);
    CmsXmlContentDefinition propDef=((CmsXmlNestedContentDefinition)propSchemaType).getNestedContentDefinition();
    Element propName=property.element(CmsXmlContentProperty.XmlNode.Name.name());
    xmlContent.addBookmarkForElement(propName,locale,property,propPath,propDef);
    Element value=property.element(CmsXmlContentProperty.XmlNode.Value.name());
    if (value == null) {
      continue;
    }
    int valueIndex=CmsXmlUtils.getXpathIndexInt(value.getUniquePath(property));
    String valuePath=CmsXmlUtils.concatXpath(propPath,CmsXmlUtils.createXpathElement(value.getName(),valueIndex));
    I_CmsXmlSchemaType valueSchemaType=propDef.getSchemaType(value.getName());
    I_CmsXmlContentValue valueValue=valueSchemaType.createValue(xmlContent,value,locale);
    xmlContent.addBookmarkForValue(valueValue,valuePath,locale,true);
    CmsXmlContentDefinition valueDef=((CmsXmlNestedContentDefinition)valueSchemaType).getNestedContentDefinition();
    String val=null;
    Element string=value.element(CmsXmlContentProperty.XmlNode.String.name());
    if (string != null) {
      xmlContent.addBookmarkForElement(string,locale,value,valuePath,valueDef);
      val=string.getTextTrim();
    }
 else {
      Element valueFileList=value.element(CmsXmlContentProperty.XmlNode.FileList.name());
      if (valueFileList == null) {
        continue;
      }
      int valueFileListIndex=CmsXmlUtils.getXpathIndexInt(valueFileList.getUniquePath(value));
      String valueFileListPath=CmsXmlUtils.concatXpath(valuePath,CmsXmlUtils.createXpathElement(valueFileList.getName(),valueFileListIndex));
      I_CmsXmlSchemaType valueFileListSchemaType=valueDef.getSchemaType(valueFileList.getName());
      I_CmsXmlContentValue valueFileListValue=valueFileListSchemaType.createValue(xmlContent,valueFileList,locale);
      xmlContent.addBookmarkForValue(valueFileListValue,valueFileListPath,locale,true);
      CmsXmlContentDefinition valueFileListDef=((CmsXmlNestedContentDefinition)valueFileListSchemaType).getNestedContentDefinition();
      List<CmsUUID> idList=new ArrayList<CmsUUID>();
      for (Iterator<Element> itFiles=CmsXmlGenericWrapper.elementIterator(valueFileList,CmsXmlContentProperty.XmlNode.Uri.name()); itFiles.hasNext(); ) {
        Element valueUri=itFiles.next();
        xmlContent.addBookmarkForElement(valueUri,locale,valueFileList,valueFileListPath,valueFileListDef);
        Element valueUriLink=valueUri.element(CmsXmlPage.NODE_LINK);
        CmsUUID fileId=null;
        if (valueUriLink == null) {
        }
 else {
          fileId=new CmsLink(valueUriLink).getStructureId();
          idList.add(fileId);
        }
      }
      val=CmsStringUtil.listAsString(idList,CmsXmlContentProperty.PROP_SEPARATOR);
    }
    propertiesMap.put(propName.getTextTrim(),val);
  }
  return propertiesMap;
}
