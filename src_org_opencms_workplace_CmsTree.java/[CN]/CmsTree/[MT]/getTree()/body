{
  StringBuffer result=new StringBuffer(2048);
  String targetFolder=getTargetFolder();
  String startFolder=getStartFolder();
  List targetFolderList=new ArrayList();
  boolean grey;
  List resources=new ArrayList();
  CmsFolder folder=null;
  String oldSiteRoot=getCms().getRequestContext().getSiteRoot();
  boolean restoreSiteRoot=false;
  if (targetFolder != null) {
    StringTokenizer T=new StringTokenizer(targetFolder,"|");
    while (T.hasMoreTokens()) {
      String currentFolder=T.nextToken().trim();
      targetFolderList.add(currentFolder);
    }
  }
 else {
    targetFolderList.add(null);
  }
  Iterator targets=targetFolderList.iterator();
  try {
    while (targets.hasNext()) {
      String currentTargetFolder=(String)targets.next();
      if ("channelselector".equals(getTreeType())) {
        restoreSiteRoot=true;
        getCms().getRequestContext().saveSiteRoot();
        getCms().getRequestContext().setSiteRoot(I_CmsConstants.VFS_FOLDER_COS);
      }
 else       if (getSettings().getTreeSite(getTreeType()) != null) {
        restoreSiteRoot=true;
        getCms().getRequestContext().saveSiteRoot();
        if (newTree() && currentTargetFolder == null) {
          currentTargetFolder="/";
        }
        getCms().getRequestContext().setSiteRoot(getSettings().getTreeSite(getTreeType()));
        try {
          getCms().readFolder(currentTargetFolder,CmsResourceFilter.IGNORE_EXPIRATION);
        }
 catch (        CmsException e) {
          currentTargetFolder="/";
        }
      }
      try {
        folder=getCms().readFolder(currentTargetFolder,CmsResourceFilter.IGNORE_EXPIRATION);
      }
 catch (      CmsException e) {
        return printError(e);
      }
      if ((startFolder == null) || (!currentTargetFolder.startsWith(startFolder))) {
        try {
          if (includeFiles()) {
            resources.addAll(getCms().getResourcesInFolder(currentTargetFolder,CmsResourceFilter.IGNORE_EXPIRATION));
          }
 else {
            resources.addAll(getCms().getSubFolders(currentTargetFolder,CmsResourceFilter.IGNORE_EXPIRATION));
          }
        }
 catch (        CmsException e) {
          return printError(e);
        }
      }
 else {
        try {
          if (includeFiles()) {
            resources.addAll(getCms().getResourcesInFolder(startFolder,CmsResourceFilter.IGNORE_EXPIRATION));
          }
 else {
            resources.addAll(getCms().getSubFolders(startFolder));
          }
          StringTokenizer tok=new StringTokenizer(currentTargetFolder.substring(startFolder.length()),"/");
          while (tok.hasMoreTokens()) {
            startFolder+=tok.nextToken() + "/";
            if (includeFiles()) {
              resources.addAll(getCms().getResourcesInFolder(startFolder,CmsResourceFilter.IGNORE_EXPIRATION));
            }
 else {
              resources.addAll(getCms().getSubFolders(startFolder));
            }
          }
        }
 catch (        CmsException e) {
          return printError(e);
        }
      }
    }
    result.append("function init() {\n");
    if (newTree()) {
      result.append("parent.initTree();\n");
      result.append(getRootNode());
    }
    List projectResources;
    try {
      projectResources=getCms().readProjectResources(getCms().getRequestContext().currentProject());
    }
 catch (    CmsException e) {
      projectResources=new ArrayList();
    }
    Iterator i=resources.iterator();
    while (i.hasNext()) {
      CmsResource resource=(CmsResource)i.next();
      grey=!CmsProject.isInsideProject(projectResources,resource);
      if ((!grey) && (!getSettings().getResourceTypes().containsKey(new Integer(resource.getTypeId())))) {
        grey=true;
      }
      result.append(getNode(resource.getName(),resource.getTypeId(),resource.getStructureId(),resource.getParentStructureId(),grey));
    }
    if (includeFiles()) {
      result.append("parent.setIncludeFiles(true);\n");
    }
    if (getTreeType() != null) {
      result.append("parent.setTreeType(\"");
      result.append(getTreeType());
      result.append("\");\n");
      String curSite=getSettings().getTreeSite(getTreeType());
      if (curSite != null) {
        result.append("parent.setSitePrefix(\"");
        result.append(getSitePrefix(curSite,oldSiteRoot));
        result.append("\");\n");
      }
    }
    result.append("parent.setRootFolder(\"");
    result.append(getRootFolder());
    result.append("\");\n");
    if (newTree()) {
      result.append("parent.showTree(parent.tree_display.document, \"");
      result.append(folder.getStructureId().hashCode());
      result.append("\");\n");
    }
 else {
      if (resources.size() == 0) {
        result.append("parent.setNoChilds(\"");
        result.append(folder.getStructureId().hashCode());
        result.append("\");\n");
      }
      result.append("parent.showLoadedNodes(parent.tree_display.document,\"");
      result.append(folder.getStructureId().hashCode());
      result.append("\");\n");
    }
    result.append("}\n");
  }
  finally {
    if (restoreSiteRoot) {
      getCms().getRequestContext().restoreSiteRoot();
    }
  }
  return result.toString();
}
