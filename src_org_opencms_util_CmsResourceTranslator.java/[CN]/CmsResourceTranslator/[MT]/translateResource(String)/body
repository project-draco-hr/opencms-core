{
  if (m_translations.length == 0) {
    return resourceName;
  }
  if (resourceName == null) {
    return null;
  }
  StringBuffer result;
  String current=resourceName;
  int size=current.length() * 2;
  for (int i=0; i < m_translations.length; i++) {
    result=new StringBuffer(size);
    try {
      if (m_perlUtil.substitute(result,m_translations[i],current) != 0) {
        if (m_continueMatching) {
          current=result.toString();
        }
 else {
          if (OpenCms.getLog(this).isDebugEnabled()) {
            OpenCms.getLog(this).debug("Resource translation (first match): " + resourceName + " --> "+ result);
          }
          return result.toString();
        }
      }
    }
 catch (    MalformedPerl5PatternException e) {
      if (OpenCms.getLog(this).isErrorEnabled()) {
        OpenCms.getLog(this).error("Malformed resource translation rule:\"" + m_translations[i] + "\"");
      }
    }
  }
  if (OpenCms.getLog(this).isDebugEnabled()) {
    OpenCms.getLog(this).debug("Resource translation (after loop): " + resourceName + " --> "+ current);
  }
  return current;
}
