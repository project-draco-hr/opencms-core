{
  if (m_translations.length == 0) {
    return resourceName;
  }
  if (resourceName == null) {
    return null;
  }
  StringBuffer result;
  String current=resourceName;
  int size=current.length() * 2;
  for (int i=0; i < m_translations.length; i++) {
    result=new StringBuffer(size);
    try {
      if (m_perlUtil.substitute(result,m_translations[i],current) != 0) {
        if (m_continueMatching) {
          current=result.toString();
        }
 else {
          if (LOG.isDebugEnabled()) {
            LOG.debug(Messages.get().getBundle().key(Messages.LOG_TRANSLATION_MATCH_3,new Integer(i),resourceName,result));
          }
          return result.toString();
        }
      }
    }
 catch (    MalformedPerl5PatternException e) {
      LOG.error(Messages.get().getBundle().key(Messages.LOG_MALFORMED_TRANSLATION_RULE_1,m_translations[i]),e);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().getBundle().key(Messages.LOG_TRANSLATION_MATCH_2,resourceName,current));
  }
  return current;
}
