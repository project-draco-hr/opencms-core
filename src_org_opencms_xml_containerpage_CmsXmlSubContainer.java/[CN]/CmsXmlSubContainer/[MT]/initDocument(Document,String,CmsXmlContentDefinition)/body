{
  m_document=document;
  m_contentDefinition=definition;
  m_encoding=CmsEncoder.lookupEncoding(encoding,encoding);
  m_elementLocales=new HashMap<String,Set<Locale>>();
  m_elementNames=new HashMap<Locale,Set<String>>();
  m_locales=new HashSet<Locale>();
  m_subContainers=new HashMap<Locale,CmsSubContainerBean>();
  clearBookmarks();
  for (Iterator<Element> itSubContainers=CmsXmlGenericWrapper.elementIterator(m_document.getRootElement()); itSubContainers.hasNext(); ) {
    Element cntPage=itSubContainers.next();
    try {
      Locale locale=CmsLocaleManager.getLocale(cntPage.attribute(CmsXmlContentDefinition.XSD_ATTRIBUTE_VALUE_LANGUAGE).getValue());
      addLocale(locale);
      Element subContainer=cntPage.element(XmlNode.SUBCONTAINER.getName());
      int cntIndex=CmsXmlUtils.getXpathIndexInt(subContainer.getUniquePath(cntPage));
      String cntPath=CmsXmlUtils.createXpathElement(subContainer.getName(),cntIndex);
      I_CmsXmlSchemaType cntSchemaType=definition.getSchemaType(subContainer.getName());
      I_CmsXmlContentValue cntValue=cntSchemaType.createValue(this,subContainer,locale);
      addBookmark(cntPath,locale,true,cntValue);
      CmsXmlContentDefinition cntDef=((CmsXmlNestedContentDefinition)cntSchemaType).getNestedContentDefinition();
      Element title=subContainer.element(XmlNode.TITLE.getName());
      createBookmark(title,locale,subContainer,cntPath,cntDef);
      Element description=subContainer.element(XmlNode.DESCRIPTION.getName());
      createBookmark(description,locale,subContainer,cntPath,cntDef);
      List<String> types=new ArrayList<String>();
      for (Iterator<Element> itTypes=CmsXmlGenericWrapper.elementIterator(subContainer,XmlNode.TYPE.getName()); itTypes.hasNext(); ) {
        Element type=itTypes.next();
        createBookmark(type,locale,subContainer,cntPath,cntDef);
        String typeName=type.getTextTrim();
        if (!CmsStringUtil.isEmptyOrWhitespaceOnly(typeName)) {
          types.add(typeName);
        }
      }
      List<CmsContainerElementBean> elements=new ArrayList<CmsContainerElementBean>();
      for (Iterator<Element> itElems=CmsXmlGenericWrapper.elementIterator(subContainer,XmlNode.ELEMENT.getName()); itElems.hasNext(); ) {
        Element element=itElems.next();
        int elemIndex=CmsXmlUtils.getXpathIndexInt(element.getUniquePath(subContainer));
        String elemPath=CmsXmlUtils.concatXpath(cntPath,CmsXmlUtils.createXpathElement(element.getName(),elemIndex));
        I_CmsXmlSchemaType elemSchemaType=cntDef.getSchemaType(element.getName());
        I_CmsXmlContentValue elemValue=elemSchemaType.createValue(this,element,locale);
        addBookmark(elemPath,locale,true,elemValue);
        CmsXmlContentDefinition elemDef=((CmsXmlNestedContentDefinition)elemSchemaType).getNestedContentDefinition();
        Element uri=element.element(XmlNode.URI.getName());
        createBookmark(uri,locale,element,elemPath,elemDef);
        Element uriLink=uri.element(CmsXmlPage.NODE_LINK);
        CmsUUID elementId=null;
        if (uriLink == null) {
        }
 else {
          elementId=new CmsLink(uriLink).getStructureId();
        }
        Map<String,String> propertiesMap=new HashMap<String,String>();
        for (Iterator<Element> itProps=CmsXmlGenericWrapper.elementIterator(element,CmsXmlContainerPage.XmlNode.PROPERTIES.getName()); itProps.hasNext(); ) {
          Element property=itProps.next();
          int propIndex=CmsXmlUtils.getXpathIndexInt(property.getUniquePath(element));
          String propPath=CmsXmlUtils.concatXpath(elemPath,CmsXmlUtils.createXpathElement(property.getName(),propIndex));
          I_CmsXmlSchemaType propSchemaType=elemDef.getSchemaType(property.getName());
          I_CmsXmlContentValue propValue=propSchemaType.createValue(this,property,locale);
          addBookmark(propPath,locale,true,propValue);
          CmsXmlContentDefinition propDef=((CmsXmlNestedContentDefinition)propSchemaType).getNestedContentDefinition();
          Element propName=property.element(CmsXmlContainerPage.XmlNode.NAME.getName());
          createBookmark(propName,locale,property,propPath,propDef);
          Element value=property.element(CmsXmlContainerPage.XmlNode.VALUE.getName());
          if (value == null) {
            continue;
          }
          int valueIndex=CmsXmlUtils.getXpathIndexInt(value.getUniquePath(property));
          String valuePath=CmsXmlUtils.concatXpath(propPath,CmsXmlUtils.createXpathElement(value.getName(),valueIndex));
          I_CmsXmlSchemaType valueSchemaType=propDef.getSchemaType(value.getName());
          I_CmsXmlContentValue valueValue=valueSchemaType.createValue(this,value,locale);
          addBookmark(valuePath,locale,true,valueValue);
          CmsXmlContentDefinition valueDef=((CmsXmlNestedContentDefinition)valueSchemaType).getNestedContentDefinition();
          String val=null;
          Element string=value.element(CmsXmlContainerPage.XmlNode.STRING.getName());
          if (string != null) {
            createBookmark(string,locale,value,valuePath,valueDef);
            val=string.getTextTrim();
          }
 else {
            Element valueFileList=value.element(CmsXmlContainerPage.XmlNode.FILELIST.getName());
            if (valueFileList == null) {
              continue;
            }
            int valueFileListIndex=CmsXmlUtils.getXpathIndexInt(valueFileList.getUniquePath(value));
            String valueFileListPath=CmsXmlUtils.concatXpath(valuePath,CmsXmlUtils.createXpathElement(valueFileList.getName(),valueFileListIndex));
            I_CmsXmlSchemaType valueFileListSchemaType=valueDef.getSchemaType(valueFileList.getName());
            I_CmsXmlContentValue valueFileListValue=valueFileListSchemaType.createValue(this,valueFileList,locale);
            addBookmark(valueFileListPath,locale,true,valueFileListValue);
            CmsXmlContentDefinition valueFileListDef=((CmsXmlNestedContentDefinition)valueFileListSchemaType).getNestedContentDefinition();
            List<CmsUUID> idList=new ArrayList<CmsUUID>();
            for (Iterator<Element> itFiles=CmsXmlGenericWrapper.elementIterator(valueFileList,XmlNode.URI.getName()); itFiles.hasNext(); ) {
              Element valueUri=itFiles.next();
              createBookmark(valueUri,locale,valueFileList,valueFileListPath,valueFileListDef);
              Element valueUriLink=valueUri.element(CmsXmlPage.NODE_LINK);
              CmsUUID fileId=null;
              if (valueUriLink == null) {
              }
 else {
                fileId=new CmsLink(valueUriLink).getStructureId();
              }
              idList.add(fileId);
            }
            val=CmsStringUtil.listAsString(idList,CmsXmlContainerPage.IDS_SEPARATOR);
          }
          propertiesMap.put(propName.getTextTrim(),val);
        }
        if (elementId != null) {
          elements.add(new CmsContainerElementBean(elementId,null,propertiesMap));
        }
      }
      m_subContainers.put(locale,new CmsSubContainerBean(title.getText(),description.getText(),elements,types));
    }
 catch (    NullPointerException e) {
      LOG.error(org.opencms.xml.content.Messages.get().getBundle().key(org.opencms.xml.content.Messages.LOG_XMLCONTENT_INIT_BOOKMARKS_0),e);
    }
  }
}
