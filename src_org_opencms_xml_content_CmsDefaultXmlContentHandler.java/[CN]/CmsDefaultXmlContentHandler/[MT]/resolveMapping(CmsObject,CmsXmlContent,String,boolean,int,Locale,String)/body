{
  CmsObject rootCms=createRootCms(cms);
  CmsFile file=content.getFile();
  if (!valueIsSimple) {
    return;
  }
  List<String> mappings=getMappings(valuePath);
  if (mappings.size() == 0) {
    return;
  }
  List<CmsResource> siblings=rootCms.readSiblings(content.getFile().getRootPath(),CmsResourceFilter.IGNORE_EXPIRATION);
  Set<CmsResource> urlNameMappingResources=new HashSet<CmsResource>();
  boolean mapToUrlName=false;
  urlNameMappingResources.add(content.getFile());
  CmsGalleryNameMacroResolver resolver=new CmsGalleryNameMacroResolver(rootCms,content,valueLocale);
  resolver.setKeepEmptyMacros(true);
  String stringValue=resolver.resolveMacros(originalStringValue);
  for (  String mapping : mappings) {
    if (CmsStringUtil.isNotEmpty(mapping)) {
      for (int i=(siblings.size() - 1); i >= 0; i--) {
        String filename=(siblings.get(i)).getRootPath();
        if (mapping.startsWith(MAPTO_URLNAME)) {
          mapToUrlName=true;
        }
{
          Locale locale=OpenCms.getLocaleManager().getDefaultLocale(rootCms,filename);
          if (!locale.equals(valueLocale)) {
            continue;
          }
        }
        CmsLock lock=rootCms.getLock(filename);
        if (lock.isUnlocked()) {
          rootCms.lockResource(filename);
        }
 else         if (!lock.isDirectlyOwnedInProjectBy(rootCms)) {
          rootCms.changeLock(filename);
        }
        if (mapping.startsWith(MAPTO_PERMISSION) && (valueIndex == 0)) {
          String permissionMappings=mapping.substring(MAPTO_PERMISSION.length());
          String mainMapping=permissionMappings;
          Map<String,String> permissionsToSet=new HashMap<String,String>();
          int sepIndex=permissionMappings.indexOf('|');
          if (sepIndex != -1) {
            mainMapping=permissionMappings.substring(0,sepIndex);
            permissionMappings=permissionMappings.substring(sepIndex + 1);
            permissionsToSet=CmsStringUtil.splitAsMap(permissionMappings,"|",":");
          }
          String principalType=I_CmsPrincipal.PRINCIPAL_GROUP;
          String permissionString=mainMapping;
          sepIndex=mainMapping.indexOf(':');
          if (sepIndex != -1) {
            principalType=mainMapping.substring(0,sepIndex);
            permissionString=mainMapping.substring(sepIndex + 1);
          }
          if (permissionString.toLowerCase().indexOf('o') == -1) {
            permissionString+="+o";
          }
          List<CmsAccessControlEntry> aces=rootCms.getAccessControlEntries(filename,false);
          for (Iterator<CmsAccessControlEntry> j=aces.iterator(); j.hasNext(); ) {
            CmsAccessControlEntry ace=j.next();
            if (ace.getPrincipal().equals(CmsAccessControlEntry.PRINCIPAL_ALL_OTHERS_ID)) {
              rootCms.rmacc(filename,CmsAccessControlEntry.PRINCIPAL_ALL_OTHERS_NAME,CmsAccessControlEntry.PRINCIPAL_ALL_OTHERS_ID.toString());
            }
 else {
              I_CmsPrincipal principal=CmsPrincipal.readPrincipal(rootCms,ace.getPrincipal());
              if (principal.isGroup()) {
                rootCms.rmacc(filename,I_CmsPrincipal.PRINCIPAL_GROUP,principal.getName());
              }
 else               if (principal.isUser()) {
                rootCms.rmacc(filename,I_CmsPrincipal.PRINCIPAL_USER,principal.getName());
              }
            }
          }
          for (Iterator<Map.Entry<String,String>> j=permissionsToSet.entrySet().iterator(); j.hasNext(); ) {
            Map.Entry<String,String> entry=j.next();
            sepIndex=entry.getKey().indexOf('.');
            if (sepIndex != -1) {
              String type=entry.getKey().substring(0,sepIndex);
              String name=entry.getKey().substring(sepIndex + 1);
              String permissions=entry.getValue();
              if (permissions.toLowerCase().indexOf('o') == -1) {
                permissions+="+o";
              }
              try {
                rootCms.chacc(filename,type,name,permissions);
              }
 catch (              CmsException e) {
                LOG.error(e);
              }
            }
          }
          TreeSet<String> allPrincipals=new TreeSet<String>();
          String path=CmsXmlUtils.removeXpathIndex(valuePath);
          List<I_CmsXmlContentValue> values=content.getValues(path,valueLocale);
          Iterator<I_CmsXmlContentValue> j=values.iterator();
          while (j.hasNext()) {
            I_CmsXmlContentValue val=j.next();
            String principalName=val.getStringValue(rootCms);
            List<String> principalNames=CmsStringUtil.splitAsList(principalName,PRINCIPAL_LIST_SEPARATOR);
            Iterator<String> iterPrincipals=principalNames.iterator();
            while (iterPrincipals.hasNext()) {
              String principal=iterPrincipals.next();
              allPrincipals.add(principal);
            }
          }
          Iterator<String> iterAllPricinipals=allPrincipals.iterator();
          while (iterAllPricinipals.hasNext()) {
            String principal=iterAllPricinipals.next();
            rootCms.chacc(filename,principalType,principal,permissionString);
          }
          i=0;
        }
 else         if (mapping.startsWith(MAPTO_PROPERTY_LIST) && (valueIndex == 0)) {
          boolean mapToShared;
          int prefixLength;
          if (mapping.startsWith(MAPTO_PROPERTY_LIST_SHARED)) {
            mapToShared=true;
            prefixLength=MAPTO_PROPERTY_LIST_SHARED.length();
          }
 else           if (mapping.startsWith(MAPTO_PROPERTY_LIST_INDIVIDUAL)) {
            mapToShared=false;
            prefixLength=MAPTO_PROPERTY_LIST_INDIVIDUAL.length();
          }
 else {
            mapToShared=false;
            prefixLength=MAPTO_PROPERTY_LIST.length();
          }
          String property=mapping.substring(prefixLength);
          String path=CmsXmlUtils.removeXpathIndex(valuePath);
          List<I_CmsXmlContentValue> values=content.getValues(path,valueLocale);
          Iterator<I_CmsXmlContentValue> j=values.iterator();
          StringBuffer result=new StringBuffer(values.size() * 64);
          while (j.hasNext()) {
            I_CmsXmlContentValue val=j.next();
            result.append(val.getStringValue(rootCms));
            if (j.hasNext()) {
              result.append(CmsProperty.VALUE_LIST_DELIMITER);
            }
          }
          CmsProperty p;
          if (mapToShared) {
            p=new CmsProperty(property,null,result.toString());
          }
 else {
            p=new CmsProperty(property,result.toString(),null);
          }
          rootCms.writePropertyObject(filename,p);
          if (mapToShared) {
            i=0;
          }
        }
 else         if (mapping.startsWith(MAPTO_PROPERTY)) {
          boolean mapToShared;
          int prefixLength;
          if (mapping.startsWith(MAPTO_PROPERTY_SHARED)) {
            mapToShared=true;
            prefixLength=MAPTO_PROPERTY_SHARED.length();
          }
 else           if (mapping.startsWith(MAPTO_PROPERTY_INDIVIDUAL)) {
            mapToShared=false;
            prefixLength=MAPTO_PROPERTY_INDIVIDUAL.length();
          }
 else {
            mapToShared=false;
            prefixLength=MAPTO_PROPERTY.length();
          }
          String property=mapping.substring(prefixLength);
          CmsProperty p;
          if (mapToShared) {
            p=new CmsProperty(property,null,stringValue);
          }
 else {
            p=new CmsProperty(property,stringValue,null);
          }
          rootCms.writePropertyObject(filename,p);
          if (mapToShared) {
            i=0;
          }
        }
 else         if (mapping.startsWith(MAPTO_URLNAME)) {
          urlNameMappingResources.add(siblings.get(i));
        }
 else         if (mapping.startsWith(MAPTO_ATTRIBUTE)) {
          String attribute=mapping.substring(MAPTO_ATTRIBUTE.length());
switch (ATTRIBUTES.indexOf(attribute)) {
case 0:
            long date=0;
          try {
            date=Long.valueOf(stringValue).longValue();
          }
 catch (          NumberFormatException e) {
          }
        if (date == 0) {
          date=CmsResource.DATE_RELEASED_DEFAULT;
        }
      rootCms.setDateReleased(filename,date,false);
    if (filename.equals(rootCms.getSitePath(file))) {
      file.setDateReleased(date);
    }
  break;
case 1:
date=0;
try {
date=Long.valueOf(stringValue).longValue();
}
 catch (NumberFormatException e) {
}
if (date == 0) {
date=CmsResource.DATE_EXPIRED_DEFAULT;
}
rootCms.setDateExpired(filename,date,false);
if (filename.equals(rootCms.getSitePath(file))) {
file.setDateExpired(date);
}
break;
default :
}
}
}
}
}
if (mapToUrlName) {
CmsMappingResolutionContext context=(CmsMappingResolutionContext)(cms.getRequestContext().getAttribute(ATTR_MAPPING_RESOLUTION_CONTEXT));
for (CmsResource resourceForUrlNameMapping : urlNameMappingResources) {
if (!CmsResource.isTemporaryFileName(resourceForUrlNameMapping.getRootPath())) {
String mappedName=stringValue;
if (!CmsStringUtil.isEmptyOrWhitespaceOnly(mappedName)) {
mappedName=mappedName.trim();
context.addUrlNameMapping(mappedName,valueLocale,resourceForUrlNameMapping.getStructureId());
}
}
}
}
CmsLock lock=rootCms.getLock(file);
if (lock.isUnlocked()) {
rootCms.lockResource(file.getRootPath());
}
 else if (!lock.isExclusiveOwnedBy(rootCms.getRequestContext().getCurrentUser())) {
rootCms.changeLock(file.getRootPath());
}
}
