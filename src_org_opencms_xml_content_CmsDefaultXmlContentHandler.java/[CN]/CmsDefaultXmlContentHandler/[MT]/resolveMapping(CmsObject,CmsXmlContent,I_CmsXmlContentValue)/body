{
  if (!value.isSimpleType()) {
    return;
  }
  CmsFile file=content.getFile();
  if (file == null) {
    throw new CmsXmlException(Messages.get().container(Messages.ERR_XMLCONTENT_RESOLVE_FILE_NOT_FOUND_0));
  }
  String mapping=getMapping(value.getPath());
  if (CmsStringUtil.isNotEmpty(mapping)) {
    String rootPath=content.getFile().getRootPath();
    String storedSiteRoot=cms.getRequestContext().getSiteRoot();
    try {
      cms.getRequestContext().setSiteRoot("/");
      List siblings=cms.readSiblings(rootPath,CmsResourceFilter.IGNORE_EXPIRATION);
      for (int i=(siblings.size() - 1); i >= 0; i--) {
        String filename=((CmsResource)siblings.get(i)).getRootPath();
        Locale locale=OpenCms.getLocaleManager().getDefaultLocale(cms,filename);
        if (!locale.equals(value.getLocale())) {
          continue;
        }
        String stringValue=value.getStringValue(cms);
        if (mapping.startsWith(MAPTO_PROPERTY_LIST) && (value.getIndex() == 0)) {
          boolean mapToShared;
          int prefixLength;
          if (mapping.startsWith(MAPTO_PROPERTY_LIST_SHARED)) {
            mapToShared=true;
            prefixLength=MAPTO_PROPERTY_LIST_SHARED.length();
          }
 else           if (mapping.startsWith(MAPTO_PROPERTY_LIST_INDIVIDUAL)) {
            mapToShared=false;
            prefixLength=MAPTO_PROPERTY_LIST_INDIVIDUAL.length();
          }
 else {
            mapToShared=false;
            prefixLength=MAPTO_PROPERTY_LIST.length();
          }
          String property=mapping.substring(prefixLength);
          String path=CmsXmlUtils.removeXpathIndex(value.getPath());
          List values=content.getValues(path,locale);
          Iterator j=values.iterator();
          StringBuffer result=new StringBuffer(values.size() * 64);
          while (j.hasNext()) {
            I_CmsXmlContentValue val=(I_CmsXmlContentValue)j.next();
            result.append(val.getStringValue(cms));
            if (j.hasNext()) {
              result.append(CmsProperty.VALUE_LIST_DELIMITER);
            }
          }
          CmsProperty p;
          if (mapToShared) {
            p=new CmsProperty(property,null,result.toString());
          }
 else {
            p=new CmsProperty(property,result.toString(),null);
          }
          cms.writePropertyObject(filename,p);
          if (mapToShared) {
            i=0;
          }
        }
 else         if (mapping.startsWith(MAPTO_PROPERTY)) {
          boolean mapToShared;
          int prefixLength;
          if (mapping.startsWith(MAPTO_PROPERTY_SHARED)) {
            mapToShared=true;
            prefixLength=MAPTO_PROPERTY_SHARED.length();
          }
 else           if (mapping.startsWith(MAPTO_PROPERTY_INDIVIDUAL)) {
            mapToShared=false;
            prefixLength=MAPTO_PROPERTY_INDIVIDUAL.length();
          }
 else {
            mapToShared=false;
            prefixLength=MAPTO_PROPERTY.length();
          }
          String property=mapping.substring(prefixLength);
          CmsProperty p;
          if (mapToShared) {
            p=new CmsProperty(property,null,stringValue);
          }
 else {
            p=new CmsProperty(property,stringValue,null);
          }
          cms.writePropertyObject(filename,p);
          if (mapToShared) {
            i=0;
          }
        }
 else         if (mapping.startsWith(MAPTO_ATTRIBUTE)) {
          String attribute=mapping.substring(MAPTO_ATTRIBUTE.length());
switch (ATTRIBUTES.indexOf(attribute)) {
case 0:
            long date=0;
          try {
            date=Long.valueOf(stringValue).longValue();
          }
 catch (          NumberFormatException e) {
          }
        if (date == 0) {
          date=CmsResource.DATE_RELEASED_DEFAULT;
        }
      file.setDateReleased(date);
    break;
case 1:
  date=0;
try {
  date=Long.valueOf(stringValue).longValue();
}
 catch (NumberFormatException e) {
}
if (date == 0) {
date=CmsResource.DATE_EXPIRED_DEFAULT;
}
file.setDateExpired(date);
break;
default :
}
}
}
}
  finally {
cms.getRequestContext().setSiteRoot(storedSiteRoot);
}
}
}
