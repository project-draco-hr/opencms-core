{
  if ((cms == null) || (cms.getRequestContext().getRequestTime() == CmsResource.DATE_RELEASED_EXPIRED_IGNORE)) {
    return;
  }
  boolean needReinitialization=false;
  Iterator<Locale> itLocales=document.getLocales().iterator();
  while (itLocales.hasNext()) {
    Locale locale=itLocales.next();
    List<String> removedNodes=new ArrayList<String>();
    Map<String,I_CmsXmlContentValue> valuesToRemove=Maps.newHashMap();
    Iterator<I_CmsXmlContentValue> itValues=document.getValues(locale).iterator();
    while (itValues.hasNext()) {
      I_CmsXmlContentValue value=itValues.next();
      String path=value.getPath();
      boolean alreadyRemoved=false;
      Iterator<String> itRemNodes=removedNodes.iterator();
      while (itRemNodes.hasNext()) {
        String remNode=itRemNodes.next();
        if (path.startsWith(remNode)) {
          alreadyRemoved=true;
          break;
        }
      }
      if (alreadyRemoved || ((m_relationChecks.get(path) == null) && (m_relationChecks.get(CmsXmlUtils.removeXpath(path)) == null))) {
        continue;
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().getBundle().key(Messages.LOG_XMLCONTENT_CHECK_RULE_MATCH_1,path));
      }
      if (validateLink(cms,value,null)) {
        if (LOG.isDebugEnabled()) {
          LOG.debug(Messages.get().getBundle().key(Messages.LOG_XMLCONTENT_CHECK_WARNING_2,path,value.getStringValue(cms)));
        }
        String parentPath=path;
        while (isInvalidateParent(parentPath)) {
          parentPath=CmsXmlUtils.removeLastXpathElement(parentPath);
          if (LOG.isDebugEnabled()) {
            LOG.debug(Messages.get().getBundle().key(Messages.LOG_XMLCONTENT_CHECK_PARENT_2,path,parentPath));
          }
        }
        value=document.getValue(parentPath,locale);
        valuesToRemove.put(parentPath,value);
        removedNodes.add(parentPath);
      }
    }
    if (!removedNodes.isEmpty()) {
      needReinitialization=true;
    }
    for (    I_CmsXmlContentValue valueToRemove : valuesToRemove.values()) {
      valueToRemove.getElement().detach();
    }
  }
  if (needReinitialization) {
    document.initDocument();
  }
}
