{
  System.out.println("XXX");
  System.out.println(new Exception().getStackTrace()[0].toString());
  List<String> elements=new ArrayList<String>();
  elements.add("CMS_CONTENTS");
  elements.add("CMS_GROUPS");
  elements.add("CMS_GROUPUSERS");
  elements.add("CMS_OFFLINE_ACCESSCONTROL");
  elements.add("CMS_OFFLINE_CONTENTS");
  elements.add("CMS_OFFLINE_PROPERTIES");
  elements.add("CMS_OFFLINE_PROPERTYDEF");
  elements.add("CMS_OFFLINE_RESOURCES");
  elements.add("CMS_OFFLINE_STRUCTURE");
  elements.add("CMS_ONLINE_ACCESSCONTROL");
  elements.add("CMS_ONLINE_PROPERTIES");
  elements.add("CMS_ONLINE_PROPERTYDEF");
  elements.add("CMS_ONLINE_RESOURCES");
  elements.add("CMS_ONLINE_STRUCTURE");
  elements.add("CMS_PROJECTRESOURCES");
  elements.add("CMS_PROJECTS");
  elements.add("CMS_PUBLISH_HISTORY");
  elements.add("CMS_STATICEXPORT_LINKS");
  elements.add("CMS_USERS");
  for (Iterator<String> it=elements.iterator(); it.hasNext(); ) {
    String tablename=it.next();
    System.out.println("Table: " + tablename);
    if (dbCon.hasTableOrColumn(tablename,null)) {
      try {
        List<String> constraints=getConstraintsTopDrop(dbCon,tablename.toLowerCase());
        Iterator<String> iter=constraints.iterator();
        System.out.println("Drop constraint for table " + tablename + " is :"+ constraints);
        while (iter.hasNext()) {
          String constraint=iter.next();
          String dropConstraint=readQuery(QUERY_DROP_CONSTRAINT);
          Map<String,String> replacer=new HashMap<String,String>();
          replacer.put(REPLACEMENT_TABLENAME,tablename);
          replacer.put(REPLACEMENT_INDEXNAME,constraint);
          dbCon.updateSqlStatement(dropConstraint,replacer,null);
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
      try {
        List<String> indexes=getIndexesToDrop(dbCon,tablename);
        Iterator<String> iter=indexes.iterator();
        while (iter.hasNext()) {
          String index=iter.next();
          String dropIndex=readQuery(QUERY_DROP_INDEX);
          Map<String,String> replacerIndex=new HashMap<String,String>();
          replacerIndex.put(REPLACEMENT_INDEXNAME,index);
          dbCon.updateSqlStatement(dropIndex,replacerIndex,null);
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
 else {
      System.out.println("Table " + tablename + "does not exist.");
    }
  }
  createNewIndexes(dbCon);
}
