{
  final CmsSitemapController controller=getHoverbar().getController();
  final CmsClientSitemapEntry entry=getHoverbar().getEntry();
  final CmsUUID infoId;
  if ((entry.getDefaultFileId() != null) && CmsSitemapView.getInstance().isNavigationMode()) {
    infoId=entry.getDefaultFileId();
  }
 else {
    infoId=entry.getId();
  }
  CmsRpcAction<CmsListInfoBean> action=new CmsRpcAction<CmsListInfoBean>(){
    @Override public void execute(){
      start(0,true);
      CmsCoreProvider.getVfsService().getPageInfo(infoId,this);
    }
    @Override protected void onResponse(    CmsListInfoBean result){
      stop(false);
      CmsEditEntryHandler handler=new CmsEditEntryHandler(controller,entry,CmsSitemapView.getInstance().isNavigationMode());
      handler.setPageInfo(result);
      A_CmsPropertyEditor editor=createEntryEditor(handler);
      editor.setPropertyNames(CmsSitemapView.getInstance().getController().getData().getAllPropertyNames());
      CmsFormDialog dialog=new CmsFormDialog(handler.getDialogTitle(),editor.getForm());
      CmsDialogFormHandler formHandler=new CmsDialogFormHandler();
      formHandler.setDialog(dialog);
      I_CmsFormSubmitHandler submitHandler=new CmsPropertySubmitHandler(handler);
      formHandler.setSubmitHandler(submitHandler);
      dialog.setFormHandler(formHandler);
      editor.initializeWidgets(dialog);
      dialog.centerHorizontally(50);
      dialog.catchNotifications();
      String noEditReason=controller.getNoEditReason(entry);
      if (noEditReason != null) {
        editor.disableInput(noEditReason);
        dialog.getOkButton().disable(noEditReason);
      }
    }
  }
;
  action.execute();
}
