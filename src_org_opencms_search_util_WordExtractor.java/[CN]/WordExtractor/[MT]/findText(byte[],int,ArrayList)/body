{
  int pos=complexOffset;
  int multiple=2;
  while (tableStream[pos] == 1) {
    pos++;
    int skip=LittleEndian.getShort(tableStream,pos);
    pos+=2 + skip;
  }
  if (tableStream[pos] != 2) {
    throw new IOException("corrupted Word file");
  }
 else {
    int pieceTableSize=LittleEndian.getInt(tableStream,++pos);
    pos+=4;
    int pieces=(pieceTableSize - 4) / 12;
    for (int x=0; x < pieces; x++) {
      int filePos=LittleEndian.getInt(tableStream,pos + ((pieces + 1) * 4) + (x * 8)+ 2);
      boolean unicode=false;
      if ((filePos & 0x40000000) == 0) {
        unicode=true;
      }
 else {
        unicode=false;
        multiple=1;
        filePos&=~(0x40000000);
        filePos/=2;
      }
      int totLength=LittleEndian.getInt(tableStream,pos + (x + 1) * 4) - LittleEndian.getInt(tableStream,pos + (x * 4));
      WordTextPiece piece=new WordTextPiece(filePos,totLength,unicode);
      text.add(piece);
    }
  }
  return multiple;
}
