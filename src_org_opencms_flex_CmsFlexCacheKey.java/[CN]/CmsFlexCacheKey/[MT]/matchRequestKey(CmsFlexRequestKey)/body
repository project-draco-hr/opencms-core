{
  StringBuffer str=new StringBuffer(100);
  if (m_always < 0) {
    if (DEBUG) {
      System.err.println("keymatch: cache=never");
    }
    return null;
  }
  if (DEBUG) {
    System.err.println("keymatch: Checking no-params");
  }
  if ((m_noparams != null) && (key.getParams() != null)) {
    if ((m_noparams.size() == 0) && (key.getParams().size() > 0)) {
      return null;
    }
    Iterator i=key.getParams().keySet().iterator();
    while (i.hasNext()) {
      if (m_noparams.contains(i.next())) {
        return null;
      }
    }
  }
  if (m_always > 0) {
    if (DEBUG) {
      System.err.println("keymatch: cache=always");
    }
    str.append("always");
    return str.toString();
  }
  if (m_uri != null) {
    str.append("uri=(");
    str.append(key.getUri());
    str.append(");");
  }
  if (m_element != null) {
    str.append("element=(");
    str.append(key.getElement());
    str.append(");");
  }
  if (m_locale != null) {
    str.append("locale=(");
    str.append(key.getLocale());
    str.append(");");
  }
  if (m_encoding != null) {
    str.append("encoding=(");
    str.append(key.getEncoding());
    str.append(");");
  }
  if (m_ip != null) {
    str.append("ip=(");
    str.append(key.getIp());
    str.append(");");
  }
  if (m_user != null) {
    str.append("user=(");
    str.append(key.getUser());
    str.append(");");
  }
  if (m_params != null) {
    str.append("params=(");
    Map keyParams=key.getParams();
    if (keyParams != null) {
      if (m_params.size() > 0) {
        Iterator i=m_params.iterator();
        while (i.hasNext()) {
          Object o=i.next();
          if (keyParams.containsKey(o)) {
            str.append(o);
            str.append("=");
            String[] values=(String[])keyParams.get(o);
            str.append(values[0]);
            if (i.hasNext()) {
              str.append(",");
            }
          }
        }
      }
 else {
        Iterator i=keyParams.keySet().iterator();
        while (i.hasNext()) {
          Object o=i.next();
          str.append(o);
          str.append("=");
          String[] values=(String[])keyParams.get(o);
          str.append(values[0]);
          if (i.hasNext()) {
            str.append(",");
          }
        }
      }
    }
    str.append(")");
  }
  if (m_session != null) {
    StringBuffer buf=new StringBuffer(32);
    boolean found=false;
    buf.append("session=(");
    HttpSession keySession=key.getSession();
    if (keySession != null) {
      Iterator i=m_session.iterator();
      while (i.hasNext()) {
        String name=(String)i.next();
        Object val=keySession.getAttribute(name);
        if (val != null) {
          found=true;
          buf.append(name);
          buf.append("=");
          buf.append(val);
          if (i.hasNext()) {
            buf.append(",");
          }
        }
      }
    }
    if (found) {
      buf.append(")");
      str.append(buf);
    }
  }
  if (m_schemes != null) {
    String s=key.getScheme();
    if ((m_schemes.size() > 0) && (!m_schemes.contains(s))) {
      return null;
    }
    str.append("schemes=(");
    str.append(s);
    str.append(");");
  }
  if (m_ports != null) {
    Integer i=key.getPort();
    if ((m_ports.size() > 0) && (!m_ports.contains(i))) {
      return null;
    }
    str.append("ports=(");
    str.append(i);
    str.append(");");
  }
  if (m_timeout > 0) {
    str.append("timeout=(");
    str.append(m_timeout);
    str.append(");");
  }
  if (str.length() > 0) {
    return str.toString();
  }
 else {
    return null;
  }
}
