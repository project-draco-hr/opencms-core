{
  StringBuffer str=new StringBuffer(100);
  if (m_always < 0) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_FLEXCACHEKEY_KEYMATCH_CACHE_NEVER_0));
    }
    return null;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().getBundle().key(Messages.LOG_FLEXCACHEKEY_KEYMATCH_CHECK_NO_PARAMS_0));
  }
  if ((m_noparams != null) && (key.getParams() != null)) {
    if ((m_noparams.size() == 0) && (key.getParams().size() > 0)) {
      return null;
    }
    Iterator<String> i=key.getParams().keySet().iterator();
    while (i.hasNext()) {
      if (m_noparams.contains(i.next())) {
        return null;
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.get().getBundle().key(Messages.LOG_FLEXCACHEKEY_KEYMATCH_CHECK_NO_ATTRS_0));
  }
  if ((m_noattrs != null) && (key.getAttributes() != null)) {
    if ((m_noattrs.size() == 0) && (key.getAttributes().size() > 0)) {
      return null;
    }
    Iterator<String> i=key.getAttributes().keySet().iterator();
    while (i.hasNext()) {
      if (m_noattrs.contains(i.next())) {
        return null;
      }
    }
  }
  if (m_always > 0) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Messages.get().getBundle().key(Messages.LOG_FLEXCACHEKEY_KEYMATCH_CACHE_ALWAYS_0));
    }
    str.append(CACHE_00_ALWAYS);
    return str.toString();
  }
  if (m_uri != null) {
    appendKeyValue(str,CACHE_02_URI,key.getUri());
  }
  if (m_site != null) {
    appendKeyValue(str,CACHE_17_SITE,key.getSite());
  }
  if (m_element != null) {
    appendKeyValue(str,CACHE_14_ELEMENT,key.getElement());
  }
  if (m_device != null) {
    appendKeyValue(str,CACHE_20_DEVICE,key.getDevice());
  }
  if (m_sitemapEntry != null) {
    appendKeyValue(str,CACHE_21_SITEMAP_ENTRY,key.getSitemapEntry());
  }
  if (m_containerElement != null) {
    appendKeyValue(str,CACHE_22_CONTAINER_ELEMENT,key.getContainerElement());
  }
  if (m_locale != null) {
    appendKeyValue(str,CACHE_15_LOCALE,key.getLocale());
  }
  if (m_encoding != null) {
    appendKeyValue(str,CACHE_16_ENCODING,key.getEncoding());
  }
  if (m_ip != null) {
    appendKeyValue(str,CACHE_13_IP,key.getIp());
  }
  if (m_user != null) {
    appendKeyValue(str,CACHE_03_USER,key.getUser());
  }
  if (m_params != null) {
    str.append(CACHE_04_PARAMS);
    str.append("=(");
    Map<String,String[]> keyParams=key.getParams();
    if (keyParams != null) {
      if (m_params.size() > 0) {
        Iterator<String> i=m_params.iterator();
        while (i.hasNext()) {
          Object o=i.next();
          if (keyParams.containsKey(o)) {
            str.append(o);
            str.append("=");
            String[] values=keyParams.get(o);
            str.append(values[0]);
            if (i.hasNext()) {
              str.append(",");
            }
          }
        }
      }
 else {
        Iterator<Map.Entry<String,String[]>> i=keyParams.entrySet().iterator();
        while (i.hasNext()) {
          Map.Entry<String,String[]> entry=i.next();
          str.append(entry.getKey());
          str.append("=");
          String[] values=entry.getValue();
          str.append(values[0]);
          if (i.hasNext()) {
            str.append(",");
          }
        }
      }
    }
    str.append(");");
  }
  if (m_attrs != null) {
    str.append(CACHE_18_ATTRS);
    str.append("=(");
    Map<String,Object> keyAttrs=key.getAttributes();
    if (keyAttrs != null) {
      if (m_attrs.size() > 0) {
        Iterator<String> i=m_attrs.iterator();
        while (i.hasNext()) {
          String s=i.next();
          if (keyAttrs.containsKey(s)) {
            str.append(s);
            str.append("=");
            Object value=keyAttrs.get(s);
            str.append(value.toString());
            if (i.hasNext()) {
              str.append(",");
            }
          }
        }
      }
 else {
        Iterator<Map.Entry<String,Object>> i=keyAttrs.entrySet().iterator();
        while (i.hasNext()) {
          Map.Entry<String,Object> entry=i.next();
          str.append(entry.getKey());
          str.append("=");
          Object value=entry.getValue();
          str.append(value.toString());
          if (i.hasNext()) {
            str.append(",");
          }
        }
      }
    }
    str.append(");");
  }
  if (m_session != null) {
    StringBuffer buf=new StringBuffer(32);
    boolean found=false;
    buf.append(CACHE_07_SESSION);
    buf.append("=(");
    HttpSession keySession=key.getSession();
    if (keySession != null) {
      Iterator<String> i=m_session.iterator();
      while (i.hasNext()) {
        String name=i.next();
        Object val=keySession.getAttribute(name);
        if (val != null) {
          found=true;
          buf.append(name);
          buf.append("=");
          buf.append(val);
          if (i.hasNext()) {
            buf.append(",");
          }
        }
      }
    }
    if (found) {
      buf.append(");");
      str.append(buf);
    }
  }
  if (m_schemes != null) {
    String s=key.getScheme();
    if ((m_schemes.size() > 0) && (!m_schemes.contains(s))) {
      return null;
    }
    appendKeyValue(str,CACHE_08_SCHEMES,s);
  }
  if (m_ports != null) {
    Integer i=key.getPort();
    if ((m_ports.size() > 0) && (!m_ports.contains(i))) {
      return null;
    }
    str.append(CACHE_09_PORTS);
    str.append("=(");
    str.append(i);
    str.append(");");
  }
  if (m_timeout > 0) {
    str.append(CACHE_06_TIMEOUT);
    str.append("=(");
    str.append(m_timeout);
    str.append(");");
  }
  if (str.length() > 0) {
    return str.toString();
  }
 else {
    return null;
  }
}
