{
  java.util.StringTokenizer toker=new java.util.StringTokenizer(key,";");
  try {
    while (toker.hasMoreElements()) {
      String t=toker.nextToken();
      String k=null;
      String v=null;
      int idx=t.indexOf("=");
      if (idx >= 0) {
        k=t.substring(0,idx).trim();
        if (t.length() > idx) {
          v=t.substring(idx + 1).trim();
        }
      }
 else {
        k=t.trim();
      }
      m_always=0;
      if (DEBUG) {
        System.err.println("Parsing token:" + t + " key="+ k+ " value="+ v);
      }
switch (m_cacheCmds.indexOf(k)) {
case 0:
case 12:
        m_always=1;
      break;
case 1:
case 10:
    m_always=-1;
  return;
case 2:
m_uri=IS_USED;
break;
case 3:
m_user=IS_USED;
break;
case 4:
m_params=parseValueMap(v);
break;
case 5:
if (v != null) {
m_noparams=parseValueMap(v).keySet();
}
 else {
m_noparams=new java.util.HashSet(0);
}
break;
case 6:
m_timeout=Integer.parseInt(v);
break;
case 7:
m_publish=true;
break;
case 8:
m_schemes=parseValueMap(v).keySet();
break;
case 9:
m_ports=parseValueMap(v).keySet();
break;
case 11:
break;
case 13:
m_ip=IS_USED;
break;
default :
m_parseError=true;
}
}
}
 catch (Exception e) {
if (DEBUG) {
System.err.println("----- Error in key parsing: " + e.toString());
}
m_parseError=true;
}
if (m_parseError) {
m_always=-1;
}
}
