{
  List tokens=CmsStringUtil.splitAsList(key,';',false);
  Iterator i=tokens.iterator();
  try {
    while (i.hasNext()) {
      String t=(String)i.next();
      String k=null;
      String v=null;
      int idx=t.indexOf('=');
      if (idx >= 0) {
        k=t.substring(0,idx).trim();
        if (t.length() > idx) {
          v=t.substring(idx + 1).trim();
        }
      }
 else {
        k=t.trim();
      }
      m_always=0;
      if (LOG.isDebugEnabled()) {
        LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_PARSE_FLEXKEY_3,t,k,v));
      }
switch (CACHE_COMMANDS.indexOf(k)) {
case 0:
case 12:
        m_always=1;
      break;
case 1:
case 10:
    m_always=-1;
  return;
case 2:
m_uri=IS_USED;
break;
case 3:
m_user=IS_USED;
break;
case 4:
m_params=parseValueList(v);
if (m_params.contains(I_CmsResourceLoader.PARAMETER_ELEMENT)) {
m_element=IS_USED;
m_params.remove(I_CmsResourceLoader.PARAMETER_ELEMENT);
if (m_params.size() == 0) {
m_params=null;
}
}
break;
case 5:
if (v != null) {
m_noparams=parseValueList(v);
}
 else {
m_noparams=new HashSet(0);
}
break;
case 6:
m_timeout=Integer.parseInt(v);
break;
case 7:
m_session=parseValueList(v);
if (m_session.size() <= 0) {
m_parseError=true;
}
break;
case 8:
m_schemes=parseValueList(v);
break;
case 9:
m_ports=parseValueList(v);
break;
case 11:
break;
case 13:
m_ip=IS_USED;
break;
case 14:
m_element=IS_USED;
break;
case 15:
m_locale=IS_USED;
break;
case 16:
m_encoding=IS_USED;
break;
case 17:
m_site=IS_USED;
break;
default :
m_parseError=true;
}
}
}
 catch (Exception e) {
if (LOG.isDebugEnabled()) {
LOG.debug(Messages.get().key(Messages.LOG_FLEXCACHEKEY_PARSE_ERROR_1,e.toString()));
}
m_parseError=true;
}
if (m_parseError) {
m_always=-1;
}
}
