{
  StringBuffer str=new StringBuffer(100);
  if (m_always < 0) {
    if (DEBUG) {
      System.err.println("keymatch: cache=never");
    }
    return null;
  }
  if (DEBUG) {
    System.err.println("keymatch: Checking no-params");
  }
  if ((m_noparams != null) && (key.m_params != null)) {
    if ((m_noparams.size() == 0) && (key.m_params.size() > 0)) {
      return null;
    }
    Iterator i=key.m_params.keySet().iterator();
    while (i.hasNext()) {
      if (m_noparams.contains(i.next())) {
        return null;
      }
    }
  }
  if (m_always > 0) {
    if (DEBUG) {
      System.err.println("keymatch: cache=always");
    }
    str.append("always");
    return str.toString();
  }
  if (m_uri != null) {
    str.append("uri=(");
    str.append(key.m_uri);
    str.append(");");
  }
  if (m_element != null) {
    str.append("element=(");
    str.append(key.m_element);
    str.append(");");
  }
  if (m_locale != null) {
    str.append("locale=(");
    str.append(key.m_locale);
    str.append(");");
  }
  if (m_ip != null) {
    str.append("ip=(");
    str.append(key.m_ip);
    str.append(");");
  }
  if (m_user != null) {
    str.append("user=(");
    str.append(key.m_user);
    str.append(");");
  }
  if (m_params != null) {
    str.append("params=(");
    if (key.m_params != null) {
      if (m_params.size() > 0) {
        Iterator i=m_params.keySet().iterator();
        while (i.hasNext()) {
          Object o=i.next();
          if (key.m_params.containsKey(o)) {
            str.append(o);
            str.append("=");
            String[] values=(String[])key.m_params.get(o);
            str.append(values[0]);
            if (i.hasNext()) {
              str.append(",");
            }
          }
        }
      }
 else {
        Iterator i=key.m_params.keySet().iterator();
        while (i.hasNext()) {
          Object o=i.next();
          str.append(o);
          str.append("=");
          String[] values=(String[])key.m_params.get(o);
          str.append(values[0]);
          if (i.hasNext()) {
            str.append(",");
          }
        }
      }
    }
    str.append(")");
  }
  if (m_schemes != null) {
    String s=(String)key.m_schemes.iterator().next();
    if ((m_schemes.size() > 0) && (!m_schemes.contains(s.toLowerCase()))) {
      return null;
    }
    str.append("schemes=(");
    str.append(s);
    str.append(");");
  }
  if (m_ports != null) {
    Integer i=(Integer)key.m_ports.iterator().next();
    if ((m_ports.size() > 0) && (!m_ports.contains(i))) {
      return null;
    }
    str.append("ports=(");
    str.append(i);
    str.append(");");
  }
  if (m_timeout > 0) {
    str.append("timeout=(");
    str.append(m_timeout);
    str.append(");");
  }
  return str.toString();
}
