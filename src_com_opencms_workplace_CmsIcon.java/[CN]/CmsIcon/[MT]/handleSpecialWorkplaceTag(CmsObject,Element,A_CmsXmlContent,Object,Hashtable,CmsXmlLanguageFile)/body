{
  String iconName=n.getAttribute(C_ICON_NAME);
  String iconLabel=n.getAttribute(C_ICON_LABEL);
  String iconAction=n.getAttribute(C_ICON_ACTION);
  String iconHref=n.getAttribute(C_ICON_HREF);
  String iconTarget=n.getAttribute(C_ICON_TARGET);
  String iconActiveMethod=n.getAttribute(C_ICON_ACTIVE_METHOD);
  String iconVisibleMethod=n.getAttribute(C_ICON_VISIBLE_METHOD);
  if (iconHref == null || "".equals(iconHref)) {
    iconHref="";
  }
  boolean activate=true;
  if (iconActiveMethod != null && !"".equals(iconActiveMethod)) {
    Method groupsMethod=null;
    try {
      groupsMethod=callingObject.getClass().getMethod(iconActiveMethod,new Class[]{CmsObject.class,CmsXmlLanguageFile.class,Hashtable.class});
      activate=((Boolean)groupsMethod.invoke(callingObject,new Object[]{cms,lang,parameters})).booleanValue();
    }
 catch (    NoSuchMethodException exc) {
      throwException("Could not find icon activation method " + iconActiveMethod + " in calling class "+ callingObject.getClass().getName()+ " for generating icon.",CmsLegacyException.C_NOT_FOUND);
    }
catch (    InvocationTargetException targetEx) {
      Throwable e=targetEx.getTargetException();
      if (!(e instanceof CmsException)) {
        throwException("Icon activation method " + iconActiveMethod + " in calling class "+ callingObject.getClass().getName()+ " throwed an exception. "+ e,CmsException.C_UNKNOWN_EXCEPTION);
      }
 else {
        throw (CmsException)e;
      }
    }
catch (    Exception exc2) {
      throwException("Icon activation method " + iconActiveMethod + " in calling class "+ callingObject.getClass().getName()+ " was found but could not be invoked. "+ exc2,CmsException.C_UNKNOWN_EXCEPTION);
    }
  }
  boolean visible=true;
  if (iconVisibleMethod != null && !"".equals(iconVisibleMethod)) {
    Method groupsMethod=null;
    try {
      groupsMethod=callingObject.getClass().getMethod(iconVisibleMethod,new Class[]{CmsObject.class,CmsXmlLanguageFile.class,Hashtable.class});
      visible=((Boolean)groupsMethod.invoke(callingObject,new Object[]{cms,lang,parameters})).booleanValue();
    }
 catch (    NoSuchMethodException exc) {
      throwException("Could not find icon activation method " + iconVisibleMethod + " in calling class "+ callingObject.getClass().getName()+ " for generating icon.",CmsException.C_NOT_FOUND);
    }
catch (    InvocationTargetException targetEx) {
      Throwable e=targetEx.getTargetException();
      if (!(e instanceof CmsException)) {
        throwException("Icon activation method " + iconVisibleMethod + " in calling class "+ callingObject.getClass().getName()+ " throwed an exception. "+ e,CmsException.C_UNKNOWN_EXCEPTION);
      }
 else {
        throw (CmsException)e;
      }
    }
catch (    Exception exc2) {
      throwException("Icon activation method " + iconVisibleMethod + " in calling class "+ callingObject.getClass().getName()+ " was found but could not be invoked. "+ exc2,CmsException.C_UNKNOWN_EXCEPTION);
    }
  }
  CmsXmlWpTemplateFile icondef=getIconDefinitions(cms);
  StringBuffer iconLabelBuffer=new StringBuffer(lang.getLanguageValue(C_LANG_ICON + "." + iconLabel));
  if (iconLabelBuffer.toString().indexOf("- ") != -1) {
    iconLabelBuffer.insert(iconLabelBuffer.toString().indexOf("- ") + 2,"<BR>");
  }
  icondef.setData(C_ICON_NAME,iconName);
  icondef.setData(C_ICON_LABEL,iconLabelBuffer.toString());
  icondef.setData(C_ICON_ACTION,iconAction);
  icondef.setData(C_ICON_HREF,iconHref);
  icondef.setData(C_ICON_TARGET,iconTarget);
  if (visible) {
    if (activate) {
      return icondef.getProcessedDataValue("defaulticon",callingObject);
    }
 else {
      return icondef.getProcessedDataValue("deactivatedicon",callingObject);
    }
  }
 else {
    return icondef.getProcessedDataValue("noicon",callingObject);
  }
}
