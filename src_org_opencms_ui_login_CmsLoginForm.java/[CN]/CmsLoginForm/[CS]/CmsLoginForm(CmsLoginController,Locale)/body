{
  m_controller=controller;
  final CmsMessages messages=OpenCms.getWorkplaceManager().getMessages(locale);
  Map<String,String> macros=Maps.newHashMap();
  macros.put("showSecure","" + controller.isShowSecure());
  String pctype=controller.getPcType();
  CmsVaadinUtils.readAndLocalizeDesign(this,messages,macros);
  m_securityField.addItem(PC_TYPE_PUBLIC);
  m_securityField.addItem(PC_TYPE_PRIVATE);
  m_securityField.setValue(pctype);
  m_copyright.setContentMode(ContentMode.HTML);
  m_copyright.setValue(CmsLoginHelper.getCopyrightHtml(locale));
  m_securityField.setItemCaption(PC_TYPE_PRIVATE,messages.key(org.opencms.workplace.Messages.GUI_LOGIN_PCTYPE_PRIVATE_0));
  m_securityField.setItemCaption(PC_TYPE_PUBLIC,messages.key(org.opencms.workplace.Messages.GUI_LOGIN_PCTYPE_PUBLIC_0));
  setWidth("600px");
  m_loginButton.setClickShortcut(KeyCode.ENTER);
  m_loginButton.addClickListener(new ClickListener(){
    private static final long serialVersionUID=1L;
    public void buttonClick(    ClickEvent event){
      m_controller.onClickLogin();
    }
  }
);
  addAttachListener(new AttachListener(){
    private static final long serialVersionUID=1L;
    @SuppressWarnings("synthetic-access") public void attach(    AttachEvent event){
      m_userField.focus();
    }
  }
);
  ClickListener forgotPasswordListener=new ClickListener(){
    private static final long serialVersionUID=1L;
    public void buttonClick(    ClickEvent event){
      m_controller.onClickForgotPassword();
    }
  }
;
  m_forgotPasswordButton.addClickListener(forgotPasswordListener);
  m_optionsButton.addClickListener(new ClickListener(){
    private static final long serialVersionUID=1L;
    public void buttonClick(    ClickEvent event){
      toggleOptionsVisible();
    }
  }
);
  setOptionsVisible(false);
  m_error.setContentMode(ContentMode.HTML);
}
