{
  Iterator it=CmsLegacyModuleAction.getLegacyModulePublishClasses().iterator();
  Hashtable availableModules=new Hashtable();
  while (it.hasNext()) {
    String classname=(String)it.next();
    try {
      int subId=getContentDefinition(classname,new Class[]{CmsObject.class},new Object[]{m_cms}).getSubId();
      availableModules.put("" + subId,classname);
    }
 catch (    Exception e) {
    }
  }
  List masterNodes;
  Element currentMasterElement;
  String subid;
  try {
    masterNodes=m_docXml.selectNodes("//" + CmsExportModuledata.C_EXPORT_TAG_MASTER);
    int length=masterNodes.size();
    for (int i=0; i < length; i++) {
      currentMasterElement=(Element)masterNodes.get(i);
      subid=CmsImport.getChildElementTextValue(currentMasterElement,CmsExportModuledata.C_EXPORT_TAG_MASTER_SUBID);
      String classname=(String)availableModules.get(subid);
      if ((classname != null) && !("".equals(classname.trim()))) {
        m_report.print(" ( " + (i + 1) + " / "+ length+ " ) ",I_CmsReport.C_FORMAT_NOTE);
        importMaster(subid,classname,currentMasterElement);
      }
    }
  }
 catch (  Exception exc) {
    throw new CmsLegacyException(CmsLegacyException.C_UNKNOWN_EXCEPTION,exc);
  }
}
