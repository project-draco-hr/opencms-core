{
  PreparedStatement stmt=null;
  PreparedStatement nextStatement=null;
  PreparedStatement trimStatement=null;
  Connection conn=null;
  ResultSet res=null;
  try {
    conn=m_sqlManager.getConnectionForBackup();
    stmt=m_sqlManager.getPreparedStatement(conn,"C_ORACLE_FILESFORINSERT_BACKUP");
    stmt.setString(1,fileId.toString());
    stmt.setInt(2,tagId);
    stmt.setInt(3,versionId);
    stmt.setString(4,backupId.toString());
    stmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw m_sqlManager.getCmsException(this,null,CmsException.C_SQL_ERROR,e,false);
  }
 finally {
    m_sqlManager.closeAll(conn,stmt,res);
    m_sqlManager.closeAll(null,nextStatement,null);
    m_sqlManager.closeAll(null,trimStatement,null);
  }
  try {
    conn=m_sqlManager.getConnectionForBackup();
    stmt=m_sqlManager.getPreparedStatement(conn,"C_ORACLE_FILESFORUPDATE_BACKUP");
    stmt.setString(1,fileId.toString());
    stmt.setString(2,backupId.toString());
    conn.setAutoCommit(false);
    res=((DelegatingResultSet)stmt.executeQuery()).getInnermostDelegate();
    try {
      while (res.next()) {
        oracle.sql.BLOB blobnew=((OracleResultSet)res).getBLOB("FILE_CONTENT");
        trimStatement=m_sqlManager.getPreparedStatementForSql(conn,m_sqlManager.readQuery("C_TRIMBLOB"));
        trimStatement.setBlob(1,blobnew);
        trimStatement.setInt(2,0);
        trimStatement.execute();
        ByteArrayInputStream instream=new ByteArrayInputStream(fileContent);
        OutputStream outstream=blobnew.getBinaryOutputStream();
        byte[] chunk=new byte[blobnew.getChunkSize()];
        int i=-1;
        while ((i=instream.read(chunk)) != -1) {
          outstream.write(chunk,0,i);
        }
        instream.close();
        outstream.close();
      }
      nextStatement=m_sqlManager.getPreparedStatementForSql(conn,m_sqlManager.readQuery("C_COMMIT"));
      nextStatement.execute();
      nextStatement.close();
      conn.setAutoCommit(true);
    }
 catch (    IOException e) {
      throw m_sqlManager.getCmsException(this,null,CmsException.C_SERIALIZATION,e,false);
    }
  }
 catch (  SQLException e) {
    throw m_sqlManager.getCmsException(this,null,CmsException.C_SQL_ERROR,e,false);
  }
 finally {
    m_sqlManager.closeAll(conn,stmt,res);
    m_sqlManager.closeAll(null,nextStatement,null);
    m_sqlManager.closeAll(null,trimStatement,null);
  }
}
