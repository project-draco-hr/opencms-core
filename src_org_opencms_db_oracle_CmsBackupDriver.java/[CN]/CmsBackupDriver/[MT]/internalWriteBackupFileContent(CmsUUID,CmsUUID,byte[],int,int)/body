{
  PreparedStatement stmt=null;
  PreparedStatement commit=null;
  PreparedStatement rollback=null;
  Connection conn=null;
  ResultSet res=null;
  try {
    conn=m_sqlManager.getConnectionForBackup();
    stmt=m_sqlManager.getPreparedStatement(conn,"C_ORACLE_FILES_ADDBACKUP");
    stmt.setString(1,fileId.toString());
    stmt.setInt(2,tagId);
    stmt.setInt(3,versionId);
    stmt.setString(4,backupId.toString());
    stmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw m_sqlManager.getCmsException(this,"internalWriteBackupFileContent backupId=" + backupId.toString() + " fileId="+ fileId.toString(),CmsException.C_SQL_ERROR,e,false);
  }
 finally {
    m_sqlManager.closeAll(conn,stmt,null);
  }
  try {
    conn=m_sqlManager.getConnectionForBackup();
    conn.setAutoCommit(false);
    stmt=m_sqlManager.getPreparedStatement(conn,"C_ORACLE_FILES_UPDATEBACKUP");
    stmt.setString(1,fileId.toString());
    stmt.setString(2,backupId.toString());
    res=((DelegatingResultSet)stmt.executeQuery()).getInnermostDelegate();
    if (!res.next())     throw new CmsException("internalWriteBackupFileContent backupId=" + backupId.toString() + " fileId="+ fileId.toString()+ " content not found",CmsException.C_NOT_FOUND);
    Blob content=res.getBlob("FILE_CONTENT");
    ((oracle.sql.BLOB)content).trim(0);
    OutputStream output=((oracle.sql.BLOB)content).getBinaryOutputStream();
    output.write(fileContent);
    output.close();
    commit=m_sqlManager.getPreparedStatement(conn,"C_COMMIT");
    commit.execute();
    commit.close();
    commit=null;
    stmt.close();
    stmt=null;
    res=null;
    conn.setAutoCommit(true);
  }
 catch (  IOException e) {
    throw m_sqlManager.getCmsException(this,"internalWriteBackupFileContent backupId=" + backupId.toString() + " fileId="+ fileId.toString(),CmsException.C_SERIALIZATION,e,false);
  }
catch (  SQLException e) {
    throw m_sqlManager.getCmsException(this,"internalWriteBackupFileContent backupId=" + backupId.toString() + " fileId="+ fileId.toString(),CmsException.C_SQL_ERROR,e,false);
  }
 finally {
    if (res != null) {
      try {
        res.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (commit != null) {
      try {
        commit.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (stmt != null) {
      try {
        rollback=m_sqlManager.getPreparedStatement(conn,"C_ROLLBACK");
        rollback.execute();
        rollback.close();
      }
 catch (      SQLException se) {
      }
      try {
        stmt.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (conn != null) {
      try {
        conn.setAutoCommit(true);
      }
 catch (      SQLException se) {
      }
    }
  }
}
