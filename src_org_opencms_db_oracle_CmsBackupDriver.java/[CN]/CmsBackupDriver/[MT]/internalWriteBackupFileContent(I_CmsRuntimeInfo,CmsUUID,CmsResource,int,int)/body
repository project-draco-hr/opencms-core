{
  PreparedStatement stmt=null, stmt2=null;
  PreparedStatement commit=null;
  PreparedStatement rollback=null;
  Connection conn=null;
  ResultSet res=null;
  CmsUUID contentId;
  byte[] fileContent;
  if (resource instanceof CmsFile) {
    contentId=((CmsFile)resource).getContentId();
    fileContent=((CmsFile)resource).getContents();
  }
 else {
    contentId=CmsUUID.getNullUUID();
    fileContent=new byte[0];
  }
  try {
    conn=m_sqlManager.getConnection(runtimeInfo);
    stmt=m_sqlManager.getPreparedStatement(conn,"C_ORACLE_CONTENTS_ADDBACKUP");
    stmt.setString(1,contentId.toString());
    stmt.setString(2,resource.getResourceId().toString());
    stmt.setInt(3,tagId);
    stmt.setInt(4,versionId);
    stmt.setString(5,backupId.toString());
    stmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw m_sqlManager.getCmsException(this,"internalWriteBackupFileContent backupId=" + backupId.toString() + " contentId="+ contentId.toString(),CmsException.C_SQL_ERROR,e,false);
  }
 finally {
    m_sqlManager.closeAll(runtimeInfo,conn,stmt,res);
  }
  try {
    conn=m_sqlManager.getConnection(runtimeInfo);
    if (runtimeInfo == null || runtimeInfo instanceof CmsRuntimeInfo) {
      conn.setAutoCommit(false);
    }
    if (m_enableServerCopy) {
      stmt=m_sqlManager.getPreparedStatement(conn,"C_ORACLE_CONTENTS_READCONTENT");
      stmt.setString(1,resource.getResourceId().toString());
      res=stmt.executeQuery();
      if (res.next()) {
        Blob content=res.getBlob(1);
        stmt2=m_sqlManager.getPreparedStatement(conn,"C_ORACLE_CONTENTS_BACKUPCONTENT");
        stmt2.setBlob(1,content);
        stmt2.setString(2,contentId.toString());
        stmt2.setString(3,backupId.toString());
        stmt2.executeUpdate();
        stmt2.close();
        stmt2=null;
      }
 else {
      }
      res.close();
      res=null;
    }
 else {
      stmt=m_sqlManager.getPreparedStatement(conn,"C_ORACLE_CONTENTS_UPDATEBACKUP");
      stmt.setString(1,contentId.toString());
      stmt.setString(2,backupId.toString());
      res=((DelegatingResultSet)stmt.executeQuery()).getInnermostDelegate();
      if (!res.next()) {
        throw new CmsException("internalWriteBackupFileContent backupId=" + backupId.toString() + " contentId="+ contentId.toString()+ " content not found",CmsException.C_NOT_FOUND);
      }
      Blob content=res.getBlob("FILE_CONTENT");
      ((oracle.sql.BLOB)content).trim(0);
      OutputStream output=((oracle.sql.BLOB)content).getBinaryOutputStream();
      output.write(fileContent);
      output.close();
      res.close();
      res=null;
      fileContent=null;
    }
    if (runtimeInfo == null || runtimeInfo instanceof CmsRuntimeInfo) {
      commit=m_sqlManager.getPreparedStatement(conn,"C_COMMIT");
      commit.execute();
      commit.close();
      commit=null;
    }
    stmt.close();
    stmt=null;
    if (runtimeInfo == null || runtimeInfo instanceof CmsRuntimeInfo) {
      conn.setAutoCommit(true);
    }
  }
 catch (  IOException e) {
    throw m_sqlManager.getCmsException(this,"internalWriteBackupFileContent backupId=" + backupId.toString() + " contentId="+ contentId.toString(),CmsException.C_SERIALIZATION,e,false);
  }
catch (  SQLException e) {
    throw m_sqlManager.getCmsException(this,"internalWriteBackupFileContent backupId=" + backupId.toString() + " contentId="+ contentId.toString(),CmsException.C_SQL_ERROR,e,false);
  }
 finally {
    if (res != null) {
      try {
        res.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (commit != null) {
      try {
        commit.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (stmt2 != null) {
      try {
        stmt2.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (runtimeInfo == null || runtimeInfo instanceof CmsRuntimeInfo) {
      if (stmt != null) {
        try {
          rollback=m_sqlManager.getPreparedStatement(conn,"C_ROLLBACK");
          rollback.execute();
          rollback.close();
        }
 catch (        SQLException se) {
        }
        try {
          stmt.close();
        }
 catch (        SQLException exc) {
        }
      }
    }
    if (runtimeInfo == null || runtimeInfo instanceof CmsRuntimeInfo) {
      if (conn != null) {
        try {
          conn.setAutoCommit(true);
          conn.close();
        }
 catch (        SQLException se) {
        }
      }
    }
  }
}
