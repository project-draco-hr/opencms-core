{
  com.opencms.file.oracleplsql.CmsQueries cq=(com.opencms.file.oracleplsql.CmsQueries)m_cq;
  byte[] value=null;
  PreparedStatement statement=null;
  PreparedStatement statement2=null;
  PreparedStatement nextStatement=null;
  PreparedStatement trimStatement=null;
  ResultSet res=null;
  Connection con=null;
  try {
    ByteArrayOutputStream bout=new ByteArrayOutputStream();
    ObjectOutputStream oout=new ObjectOutputStream(bout);
    oout.writeObject(user.getAdditionalInfo());
    oout.close();
    value=bout.toByteArray();
    con=DriverManager.getConnection(m_poolName);
    statement=con.prepareStatement(cq.get("C_PLSQL_USERSWRITE"));
    statement.setString(1,checkNull(user.getDescription()));
    statement.setString(2,checkNull(user.getFirstname()));
    statement.setString(3,checkNull(user.getLastname()));
    statement.setString(4,checkNull(user.getEmail()));
    statement.setTimestamp(5,new Timestamp(user.getLastlogin()));
    statement.setTimestamp(6,new Timestamp(user.getLastUsed()));
    statement.setInt(7,user.getFlags());
    statement.setInt(8,user.getDefaultGroupId());
    statement.setString(9,checkNull(user.getAddress()));
    statement.setString(10,checkNull(user.getSection()));
    statement.setInt(11,user.getType());
    statement.setInt(12,user.getId());
    statement.executeUpdate();
    statement.close();
    statement2=con.prepareStatement(cq.get("C_PLSQL_USERSFORUPDATE"));
    statement2.setInt(1,user.getId());
    con.setAutoCommit(false);
    res=statement2.executeQuery();
    try {
      while (res.next()) {
        oracle.sql.BLOB blobnew=((OracleResultSet)res).getBLOB("USER_INFO");
        trimStatement=con.prepareStatement(cq.get("C_TRIMBLOB"));
        trimStatement.setBlob(1,blobnew);
        trimStatement.setInt(2,0);
        trimStatement.execute();
        trimStatement.close();
        ByteArrayInputStream instream=new ByteArrayInputStream(value);
        OutputStream outstream=blobnew.getBinaryOutputStream();
        byte[] chunk=new byte[blobnew.getChunkSize()];
        int i=-1;
        while ((i=instream.read(chunk)) != -1) {
          outstream.write(chunk,0,i);
        }
        instream.close();
        outstream.close();
      }
      nextStatement=con.prepareStatement(cq.get("C_COMMIT"));
      nextStatement.execute();
      nextStatement.close();
      con.setAutoCommit(true);
    }
 catch (    IOException e) {
      throw new CmsException("[" + this.getClass().getName() + "] "+ e.getMessage(),e);
    }
    statement2.close();
    res.close();
  }
 catch (  SQLException e) {
    throw new CmsException("[" + this.getClass().getName() + "]"+ e.getMessage(),CmsException.C_SQL_ERROR,e);
  }
catch (  IOException e) {
    throw new CmsException("[CmsAccessUserInfoMySql/addUserInformation(id,object)]:" + CmsException.C_SERIALIZATION,e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (statement2 != null) {
      try {
        statement2.close();
      }
 catch (      SQLException exc) {
      }
      try {
        nextStatement=con.prepareStatement(cq.get("C_ROLLBACK"));
        nextStatement.execute();
      }
 catch (      SQLException se) {
      }
    }
    if (nextStatement != null) {
      try {
        nextStatement.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (trimStatement != null) {
      try {
        trimStatement.close();
      }
 catch (      SQLException exc) {
      }
    }
    if (con != null) {
      try {
        con.setAutoCommit(true);
      }
 catch (      SQLException se) {
      }
      try {
        con.close();
      }
 catch (      SQLException se) {
      }
    }
    if (res != null) {
      try {
        res.close();
      }
 catch (      SQLException se) {
      }
    }
  }
}
