{
  if ((translations == null) || (translations.length == 0))   return;
  for (int i=0; i < translations.length; i++) {
    String match=translations[i];
    if (match == null)     continue;
    boolean valid=true;
    match=match.trim();
    int pos=match.indexOf('=');
    if (pos <= 0) {
      valid=false;
    }
    String ucmatch=match.toUpperCase();
    if (valid && ucmatch.startsWith(I_CmsConstants.C_EXPORT_ACEPRINCIPAL_GROUP)) {
      String name1=match.substring(I_CmsConstants.C_EXPORT_ACEPRINCIPAL_GROUP.length(),pos);
      String name2=match.substring(pos + 1);
      if (m_groupTranslations == null) {
        m_groupTranslations=new HashMap();
      }
      m_groupTranslations.put(name1,name2);
      if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INIT)) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Name translation     : group " + name1 + " to "+ name2);
      }
    }
 else     if (valid && ucmatch.startsWith(I_CmsConstants.C_EXPORT_ACEPRINCIPAL_USER)) {
      String name1=match.substring(I_CmsConstants.C_EXPORT_ACEPRINCIPAL_USER.length(),pos);
      String name2=match.substring(pos + 1);
      if (m_userTranslations == null) {
        m_userTranslations=new HashMap();
      }
      m_userTranslations.put(name1,name2);
      if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INIT)) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Name translation     : user " + name1 + " to "+ name2);
      }
    }
 else {
      if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_INIT)) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Name translation     : ignoring invalid entry '" + match + "'");
      }
    }
  }
}
