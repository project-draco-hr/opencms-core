{
  String driverPools[]=null;
  Hashtable driverPool;
  String driverName=null;
  String driverPoolName=null;
  Class driverClass=null;
  I_CmsVfsDriver vfsDriver=null;
  CmsUserDriver userDriver=null;
  CmsProjectDriver projectDriver=null;
  I_CmsWorkflowDriver workflowDriver=null;
  I_CmsBackupDriver backupDriver=null;
  CmsDriverManager driverManager=null;
  driverPools=configurations.getStringArray(C_CONFIGURATION_DB + ".pools");
  if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Resource pools       : ");
  }
  driverPool=new Hashtable();
  for (int p=0; p < driverPools.length; p++) {
    try {
      String poolUrl=CmsDbPool.createDriverConnectionPool(configurations,driverPools[p]);
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Initializing pool    : " + poolUrl);
      }
      driverPool.put(driverPools[p],poolUrl);
    }
 catch (    Exception exc) {
      String message="Critical error while initializing resource pool " + driverPools[p];
      if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsDriverManager] " + message);
      }
      exc.printStackTrace(System.err);
      throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
    }
  }
  try {
    driverManager=new CmsDriverManager();
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver manager init  : phase 1 ok - initializing database");
    }
  }
 catch (  Exception exc) {
    String message="Critical error while loading driver manager";
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsDriverManager] " + message);
    }
    exc.printStackTrace(System.err);
    throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
  }
  driverName=configurations.getString(C_CONFIGURATION_DB + ".vfs.driver");
  driverPoolName=configurations.getString(C_CONFIGURATION_DB + ".vfs.pool");
  try {
    driverClass=Class.forName(driverName);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : starting " + driverName);
    }
    vfsDriver=(I_CmsVfsDriver)driverClass.newInstance();
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : initializing " + driverName);
    }
    driverPoolName=(String)driverPool.get(driverPoolName);
    vfsDriver.init(configurations,driverPoolName,driverManager);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : finished, assigned pool " + driverPoolName);
    }
  }
 catch (  Exception exc) {
    String message="Critical error while initializing vfs driver ";
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsDriverManager] " + message);
    }
    exc.printStackTrace(System.err);
    throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
  }
  driverName=configurations.getString(C_CONFIGURATION_DB + ".user.driver");
  driverPoolName=configurations.getString(C_CONFIGURATION_DB + ".user.pool");
  try {
    driverClass=Class.forName(driverName);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : starting " + driverName);
    }
    userDriver=(CmsUserDriver)driverClass.newInstance();
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : initializing " + driverName);
    }
    driverPoolName=(String)driverPool.get(driverPoolName);
    userDriver.init(configurations,driverPoolName,driverManager);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : finished, assigned pool " + driverPoolName);
    }
  }
 catch (  Exception exc) {
    String message="Critical error while initializing user driver ";
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsDriverManager] " + message);
    }
    exc.printStackTrace(System.err);
    throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
  }
  driverName=configurations.getString(C_CONFIGURATION_DB + ".project.driver");
  driverPoolName=configurations.getString(C_CONFIGURATION_DB + ".project.pool");
  try {
    driverClass=Class.forName(driverName);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : starting " + driverName);
    }
    projectDriver=(CmsProjectDriver)driverClass.newInstance();
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : initializing " + driverName);
    }
    driverPoolName=(String)driverPool.get(driverPoolName);
    projectDriver.init(configurations,driverPoolName,driverManager);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : finished, assigned pool " + driverPoolName);
    }
  }
 catch (  Exception exc) {
    String message="Critical error while initializing project driver ";
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsDriverManager] " + message);
    }
    exc.printStackTrace(System.err);
    throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
  }
  driverName=configurations.getString(C_CONFIGURATION_DB + ".workflow.driver");
  driverPoolName=configurations.getString(C_CONFIGURATION_DB + ".workflow.pool");
  try {
    driverClass=Class.forName(driverName);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : starting " + driverName);
    }
    workflowDriver=(I_CmsWorkflowDriver)driverClass.newInstance();
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : initializing " + driverName);
    }
    driverPoolName=(String)driverPool.get(driverPoolName);
    workflowDriver.init(configurations,driverPoolName,driverManager);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : finished, assigned pool " + driverPoolName);
    }
  }
 catch (  Exception exc) {
    String message="Critical error while initializing workflow driver ";
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsDriverManager] " + message);
    }
    exc.printStackTrace(System.err);
    throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
  }
  driverName=configurations.getString(C_CONFIGURATION_DB + ".backup.driver");
  driverPoolName=configurations.getString(C_CONFIGURATION_DB + ".backup.pool");
  try {
    driverClass=Class.forName(driverName);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : starting " + driverName);
    }
    backupDriver=(I_CmsBackupDriver)driverClass.newInstance();
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : initializing " + driverName);
    }
    driverPoolName=(String)driverPool.get(driverPoolName);
    backupDriver.init(configurations,driverPoolName,driverManager);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver init          : finished, assigned pool " + driverPoolName);
    }
  }
 catch (  Exception exc) {
    String message="Critical error while initializing workflow driver ";
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsDriverManager] " + message);
    }
    exc.printStackTrace(System.err);
    throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
  }
  try {
    driverManager.init(configurations,vfsDriver,userDriver,projectDriver,workflowDriver,backupDriver);
    if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,". Driver manager init  : phase 3 ok - finished");
    }
  }
 catch (  Exception exc) {
    String message="Critical error while loading driver manager";
    if (I_CmsLogChannels.C_LOGGING && A_OpenCms.isLogging(I_CmsLogChannels.C_OPENCMS_CRITICAL)) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[CmsDriverManager] " + message);
    }
    exc.printStackTrace(System.err);
    throw new CmsException(message,CmsException.C_RB_INIT_ERROR,exc);
  }
  driverPoolName=configurations.getString(C_CONFIGURATION_DB + ".cos.pool");
  driverPoolName=(String)driverPool.get(driverPoolName);
  A_OpenCms.setRuntimeProperty("cosPoolUrl",driverPoolName);
  CmsIdGenerator.setDefaultPool(driverPoolName);
  return driverManager;
}
