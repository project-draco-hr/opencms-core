{
  String rbName=null;
  String driver=null;
  String url=null;
  String user=null;
  String password=null;
  String digest=null;
  String exportpoint=null;
  String exportpath=null;
  int sleepTime;
  boolean fillDefaults=true;
  int maxConn;
  if (A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] init the dbaccess-module.");
  }
  rbName=(String)config.getString(C_CONFIGURATION_RESOURCEBROKER);
  m_exportpointStorage=new Hashtable();
  int i=0;
  while ((exportpoint=config.getString(C_EXPORTPOINT + Integer.toString(i))) != null) {
    exportpath=config.getString(C_EXPORTPOINT_PATH + Integer.toString(i));
    if (exportpath != null) {
      m_exportpointStorage.put(exportpoint,exportpath);
    }
    i++;
  }
  driver=config.getString(C_CONFIGURATION_RESOURCEBROKER + "." + rbName+ "."+ C_CONFIGURATIONS_DRIVER);
  if (A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] read driver from configurations: " + driver);
  }
  url=config.getString(C_CONFIGURATION_RESOURCEBROKER + "." + rbName+ "."+ C_CONFIGURATIONS_URL);
  if (A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] read url from configurations: " + url);
  }
  user=config.getString(C_CONFIGURATION_RESOURCEBROKER + "." + rbName+ "."+ C_CONFIGURATIONS_USER);
  if (A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] read user from configurations: " + user);
  }
  password=config.getString(C_CONFIGURATION_RESOURCEBROKER + "." + rbName+ "."+ C_CONFIGURATIONS_PASSWORD,"");
  maxConn=config.getInteger(C_CONFIGURATION_RESOURCEBROKER + "." + rbName+ "."+ C_CONFIGURATIONS_MAX_CONN);
  if (A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] read maxConn from configurations: " + maxConn);
  }
  digest=config.getString(C_CONFIGURATION_RESOURCEBROKER + "." + rbName+ "."+ C_CONFIGURATIONS_DIGEST,"MD5");
  if (A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] read digest from configurations: " + digest);
  }
  sleepTime=config.getInteger(C_CONFIGURATION_RESOURCEBROKER + "." + rbName+ "."+ C_CONFIGURATIONS_GUARD,120);
  if (A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] read guard-sleeptime from configurations: " + sleepTime);
  }
  try {
    m_digest=MessageDigest.getInstance(digest);
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] digest created, using: " + m_digest.toString());
    }
  }
 catch (  NoSuchAlgorithmException e) {
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] error creating digest - using clear paswords: " + e.getMessage());
    }
  }
  m_pool=new CmsDbPool(driver,url,user,password,maxConn);
  if (A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] pool created");
  }
  initStatements();
  if (A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] all statements initialized in the pool");
  }
  initMaxIdValues();
  if (A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] max-ids initialized");
  }
  try {
    CmsProject project=readProject(C_PROJECT_ONLINE_ID);
    if (project.getName().equals(C_PROJECT_ONLINE)) {
      fillDefaults=false;
    }
  }
 catch (  Exception exc) {
  }
  if (fillDefaults) {
    if (A_OpenCms.isLogging()) {
      A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] fill default resources");
    }
    fillDefaults();
  }
  if (A_OpenCms.isLogging()) {
    A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_INIT,"[CmsDbAccess] start connection guard");
  }
  m_guard=new CmsConnectionGuard(m_pool,sleepTime);
  m_guard.start();
}
