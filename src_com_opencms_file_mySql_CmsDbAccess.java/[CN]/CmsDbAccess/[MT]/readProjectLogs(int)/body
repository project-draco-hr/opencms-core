{
  ResultSet res;
  CmsTaskLog tasklog=null;
  Vector logs=new Vector();
  PreparedStatement statement=null;
  String comment=null;
  String externalusername=null;
  java.sql.Timestamp starttime=null;
  int id=C_UNKNOWN_ID;
  int task=C_UNKNOWN_ID;
  int user=C_UNKNOWN_ID;
  int type=C_UNKNOWN_ID;
  try {
    statement=m_pool.getPreparedStatement(C_TASKLOG_READ_PPROJECTLOGS_KEY);
    statement.setInt(1,projectid);
    res=statement.executeQuery();
    while (res.next()) {
      comment=res.getString(C_LOG_COMMENT);
      externalusername=res.getString(C_LOG_EXUSERNAME);
      id=res.getInt(C_LOG_ID);
      starttime=SqlHelper.getTimestamp(res,C_LOG_STARTTIME);
      task=res.getInt(C_LOG_TASK);
      user=res.getInt(C_LOG_USER);
      type=res.getInt(C_LOG_TYPE);
      tasklog=new CmsTaskLog(id,comment,task,user,starttime,type);
      logs.addElement(tasklog);
    }
    res.close();
  }
 catch (  SQLException exc) {
    throw new CmsException(exc.getMessage(),CmsException.C_SQL_ERROR,exc);
  }
catch (  Exception exc) {
    throw new CmsException(exc.getMessage(),CmsException.C_UNKNOWN_EXCEPTION,exc);
  }
 finally {
    if (statement != null) {
      m_pool.putPreparedStatement(C_TASKLOG_READ_PPROJECTLOGS_KEY,statement);
    }
  }
  return logs;
}
