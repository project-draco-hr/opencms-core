{
  String link=m_cms.getRequestContext().addSiteRoot(linkparam);
  String[] rules=A_OpenCms.getStaticExportProperties().getLinkRules(I_CmsConstants.C_MODUS_EXTERN);
  String startRule=A_OpenCms.getStaticExportProperties().getStartRule();
  if (startRule != null && !"".equals(startRule)) {
    try {
      link=m_perlUtil.substitute(startRule,link);
    }
 catch (    Exception e) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + "] problems with startrule:\""+ startRule+ "\" ("+ e+ "). ");
      }
    }
  }
  if ((rules == null) || (rules.length == 0)) {
    return link;
  }
  String retValue=link;
  for (int i=0; i < rules.length; i++) {
    try {
      if ("*dynamicRules*".equals(rules[i])) {
        Vector booleanReplace=new Vector();
        retValue=handleDynamicRules(m_cms,link,I_CmsConstants.C_MODUS_EXTERN,booleanReplace);
        Boolean goOn=(Boolean)booleanReplace.firstElement();
        if (goOn.booleanValue()) {
          link=retValue;
        }
 else {
          return retValue;
        }
      }
 else {
        StringBuffer result=new StringBuffer();
        int matches=m_perlUtil.substitute(result,rules[i],link);
        if (matches != 0) {
          return result.toString();
        }
      }
    }
 catch (    Exception e) {
      if (I_CmsLogChannels.C_PREPROCESSOR_IS_LOGGING && A_OpenCms.isLogging()) {
        A_OpenCms.log(I_CmsLogChannels.C_OPENCMS_CRITICAL,"[" + this.getClass().getName() + "] problems with rule:\""+ rules[i]+ "\" ("+ e+ "). ");
      }
    }
  }
  return retValue;
}
