{
  I_CmsXmlContentValue entryValue=xmlSitemap.getValue(rootPath == null ? CmsXmlSitemap.XmlNode.SITEENTRY.getName() : CmsXmlUtils.concatXpath(rootPath,CmsXmlSitemap.XmlNode.SITEENTRY.getName()),locale,entryCount);
  if (entryValue == null) {
    entryValue=xmlSitemap.addValue(cms,CmsXmlContainerPage.XmlNode.CONTAINER.getName(),locale,entryCount);
  }
  xmlSitemap.getValue(CmsXmlUtils.concatXpath(entryValue.getPath(),CmsXmlSitemap.XmlNode.NAME.getName()),locale,0).setStringValue(cms,entry.getName());
  xmlSitemap.getValue(CmsXmlUtils.concatXpath(entryValue.getPath(),CmsXmlSitemap.XmlNode.TITLE.getName()),locale,0).setStringValue(cms,entry.getTitle());
  CmsResource res=cms.readResource(entry.getResourceId());
  xmlSitemap.getValue(CmsXmlUtils.concatXpath(entryValue.getPath(),CmsXmlSitemap.XmlNode.VFSFILE.getName()),locale,0).setStringValue(cms,cms.getSitePath(res));
  int j=0;
  for (  Map.Entry<String,String> property : entry.getProperties().entrySet()) {
    if (!propertiesConf.containsKey(property.getKey())) {
      continue;
    }
    I_CmsXmlContentValue propValue=xmlSitemap.addValue(cms,CmsXmlUtils.concatXpath(entryValue.getPath(),CmsXmlContainerPage.XmlNode.PROPERTIES.getName()),locale,j);
    xmlSitemap.getValue(CmsXmlUtils.concatXpath(propValue.getPath(),CmsXmlContainerPage.XmlNode.NAME.getName()),locale,0).setStringValue(cms,property.getKey());
    I_CmsXmlContentValue valValue=xmlSitemap.addValue(cms,CmsXmlUtils.concatXpath(propValue.getPath(),CmsXmlContainerPage.XmlNode.VALUE.getName()),locale,0);
    if (propertiesConf.get(property.getKey()).getPropertyType().equals(CmsXmlContentProperty.T_VFSLIST)) {
      I_CmsXmlContentValue filelistValue=xmlSitemap.addValue(cms,CmsXmlUtils.concatXpath(valValue.getPath(),CmsXmlContainerPage.XmlNode.FILELIST.getName()),locale,0);
      int index=0;
      for (      String strId : CmsStringUtil.splitAsList(property.getValue(),CmsXmlContainerPage.IDS_SEPARATOR)) {
        try {
          CmsResource fileRes=cms.readResource(new CmsUUID(strId));
          I_CmsXmlContentValue fileValue=xmlSitemap.getValue(CmsXmlUtils.concatXpath(filelistValue.getPath(),CmsXmlContainerPage.XmlNode.URI.getName()),locale,index);
          if (fileValue == null) {
            fileValue=xmlSitemap.addValue(cms,CmsXmlUtils.concatXpath(filelistValue.getPath(),CmsXmlContainerPage.XmlNode.URI.getName()),locale,index);
          }
          fileValue.setStringValue(cms,cms.getSitePath(fileRes));
          index++;
        }
 catch (        CmsException e) {
          LOG.error(e.getLocalizedMessage(),e);
        }
      }
    }
 else {
      xmlSitemap.addValue(cms,CmsXmlUtils.concatXpath(valValue.getPath(),CmsXmlContainerPage.XmlNode.STRING.getName()),locale,0).setStringValue(cms,property.getValue());
    }
    j++;
  }
  int subentryCount=0;
  for (  CmsSiteEntryBean subentry : entry.getSubEntries()) {
    saveEntry(cms,locale,entryValue.getPath(),xmlSitemap,subentry,subentryCount,propertiesConf);
    subentryCount++;
  }
}
