{
  JSONObject result=new JSONObject();
  HttpServletRequest request=getRequest();
  CmsObject cms=getCmsObject();
  if (!checkParameters(request,result,ReqParam.ACTION.getName(),ReqParam.LOCALE.getName(),ReqParam.SITEMAP.getName())) {
    return result;
  }
  String actionParam=request.getParameter(ReqParam.ACTION.getName());
  Action action=Action.valueOf(actionParam.toUpperCase());
  String localeParam=request.getParameter(ReqParam.LOCALE.getName());
  cms.getRequestContext().setLocale(CmsLocaleManager.getLocale(localeParam));
  JSONObject data=new JSONObject();
  if (checkParameters(request,null,ReqParam.DATA.getName())) {
    String dataParam=request.getParameter(ReqParam.DATA.getName());
    data=new JSONObject(dataParam);
  }
  String sitemapParam=request.getParameter(ReqParam.SITEMAP.getName());
  if (action.equals(Action.ALL)) {
    CmsResource sitemapRes=CmsHistoryResourceHandler.getResourceWithHistory(cms,sitemapParam);
    CmsXmlSitemap xmlSitemap=CmsXmlSitemapFactory.unmarshal(cms,sitemapRes,request);
    result=getSitemap(sitemapRes,xmlSitemap);
    CmsSitemapManager manager=OpenCms.getSitemapManager();
    List<CmsResource> creatableElements=manager.getCreatableElements(cms,sitemapParam,request);
    JSONArray creatableTypes=new JSONArray();
    JSONArray models=new JSONArray();
    for (    CmsResource resource : creatableElements) {
      String typeName=OpenCms.getResourceManager().getResourceType(resource.getTypeId()).getTypeName();
      creatableTypes.put(typeName);
      CmsSiteEntryBean siteEntryData=resourceToSiteEntryBean(cms,resource);
      if (typeName.equals(CmsResourceTypeXmlContainerPage.getStaticTypeName())) {
        models.put(jsonifyEntry(siteEntryData));
      }
    }
    addContents(models);
    result.put(JsonResponse.TYPES.getName(),creatableTypes);
    result.put(JsonResponse.MODELS.getName(),models);
    result.put("templates",getTemplates());
  }
 else   if (action.equals(Action.GET)) {
    if (checkParameters(data,null,JsonRequest.FAV.getName())) {
      result.put(JsonResponse.FAVORITES.getName(),getFavoriteList());
    }
 else     if (checkParameters(data,result,JsonRequest.REC.getName())) {
      result.put(JsonResponse.RECENT.getName(),addContents(m_sessionCache.getRecentList()));
    }
 else {
      return result;
    }
  }
 else   if (action.equals(Action.SET)) {
    if (checkParameters(data,null,JsonRequest.FAV.getName())) {
      JSONArray list=data.optJSONArray(JsonRequest.FAV.getName());
      saveFavoriteList(cms,list);
    }
 else     if (checkParameters(data,result,JsonRequest.REC.getName())) {
      JSONArray list=data.optJSONArray(JsonRequest.REC.getName());
      m_sessionCache.setRecentList(list);
    }
 else {
      return result;
    }
  }
 else   if (action.equals(Action.VALIDATE)) {
    if (!checkParameters(data,result,JsonRequest.NAME.getName())) {
      return result;
    }
    String name=data.optString(JsonRequest.NAME.getName());
    result.put(JsonResponse.NAME.getName(),cms.getRequestContext().getFileTranslator().translateResource(name));
  }
 else   if (action.equals(Action.PROPS)) {
    CmsResource sitemapRes=cms.readResource(sitemapParam);
    result.put(JsonResponse.PROPERTIES.getName(),getPropertyInfo(sitemapRes));
  }
 else   if (action.equals(Action.SAVE)) {
    CmsResource sitemapRes=cms.readResource(sitemapParam);
    saveSitemap(sitemapRes,data);
  }
 else   if (action.equals(Action.STARTEDIT)) {
    try {
      cms.lockResourceTemporary(sitemapParam);
    }
 catch (    CmsException e) {
      error(result,e.getLocalizedMessage(getWorkplaceLocale()));
    }
  }
 else   if (action.equals(Action.STOPEDIT)) {
    try {
      cms.unlockResource(sitemapParam);
    }
 catch (    CmsException e) {
      error(result,e.getLocalizedMessage(getWorkplaceLocale()));
    }
  }
 else   if (action.equals(Action.CONTENT)) {
    JSONArray entries=data.getJSONArray(JsonResponse.ENTRIES.getName().toLowerCase());
    addContents(entries);
    result.put(JsonResponse.ENTRIES.getName().toLowerCase(),entries);
  }
 else   if (action.equals(Action.NEW_ENTRY)) {
    CmsSitemapManager manager=OpenCms.getSitemapManager();
    String type=data.getString(JsonRequest.TYPE.getName());
    CmsResource newResource=manager.createNewElement(cms,sitemapParam,request,type);
    CmsProperty titleProp=cms.readPropertyObject(newResource,CmsPropertyDefinition.PROPERTY_TITLE,false);
    String title=titleProp.getValue();
    String name=newResource.getName();
    String extension="";
    int dotPos=name.lastIndexOf('.');
    if (dotPos != -1) {
      name=name.substring(0,dotPos);
    }
    CmsSiteEntryBean entryBean=new CmsSiteEntryBean(new CmsUUID(),newResource.getStructureId(),extension,title,new HashMap<String,String>(),new ArrayList<CmsSiteEntryBean>());
    JSONObject jsonEntry=jsonifyEntry(entryBean);
    JSONArray entries=new JSONArray();
    entries.put(jsonEntry);
    addContents(entries);
    result.put(JsonResponse.ENTRY.getName(),jsonEntry);
  }
 else   if (action.equals(Action.NEW_SITEMAP)) {
    CmsSitemapManager manager=OpenCms.getSitemapManager();
    CmsResource newSitemapRes=manager.createSitemap(cms,data.getString(JsonRequest.TITLE.getName()),sitemapParam,request);
    saveSitemap(newSitemapRes,data);
    String sitemapId=newSitemapRes.getStructureId().toString();
    result.put(JsonResponse.ID.getName(),sitemapId);
  }
 else {
    error(result,Messages.get().getBundle(getWorkplaceLocale()).key(Messages.ERR_JSON_WRONG_PARAMETER_VALUE_2,ReqParam.ACTION.getName(),actionParam));
  }
  return result;
}
