{
  CmsObject cms=jsp.getCmsObject();
  List fieldValues=content.getValues(NODE_INPUTFIELD,locale);
  int fieldValueSize=fieldValues.size();
  List fields=new ArrayList(fieldValueSize);
  CmsFieldFactory fieldFactory=CmsFieldFactory.getSharedInstance();
  for (int i=0; i < fieldValueSize; i++) {
    I_CmsXmlContentValue inputField=(I_CmsXmlContentValue)fieldValues.get(i);
    String inputFieldPath=inputField.getPath() + "/";
    A_CmsField field=null;
    String stringValue=content.getStringValue(cms,inputFieldPath + NODE_FIELDTYPE,locale);
    field=fieldFactory.getField(stringValue);
    field.setName(inputFieldPath.substring(0,inputFieldPath.length() - 1));
    stringValue=content.getStringValue(cms,inputFieldPath + NODE_FIELDLABEL,locale);
    field.setLabel(getConfigurationValue(stringValue,""));
    stringValue=content.getStringValue(cms,inputFieldPath + NODE_FIELDERRORMESSAGE,locale);
    field.setErrorMessage(stringValue);
    if (initial) {
      String fieldValue=content.getStringValue(cms,inputFieldPath + NODE_FIELDDEFAULTVALUE,locale);
      if (CmsStringUtil.isNotEmpty(fieldValue)) {
        CmsMacroResolver resolver=CmsMacroResolver.newInstance().setCmsObject(cms).setJspPageContext(jsp.getJspContext());
        field.setValue(resolver.resolveMacros(fieldValue));
      }
    }
 else {
      if (!field.getType().equals(CmsCheckboxField.getStaticType())) {
        String fieldValue=jsp.getRequest().getParameter(field.getName());
        if (fieldValue == null) {
          fieldValue="";
        }
        field.setValue(fieldValue);
      }
    }
    if (!CmsHiddenField.getStaticType().equals(field.getType())) {
      stringValue=content.getStringValue(cms,inputFieldPath + NODE_FIELDVALIDATION,locale);
      if (CmsEmailField.getStaticType().equals(field.getType()) && CmsStringUtil.isEmpty(stringValue)) {
        field.setValidationExpression(CmsEmailField.VALIDATION_REGEX);
      }
 else {
        field.setValidationExpression(getConfigurationValue(stringValue,""));
      }
      stringValue=content.getStringValue(cms,inputFieldPath + NODE_FIELDMANDATORY,locale);
      boolean isMandatory=Boolean.valueOf(stringValue).booleanValue();
      field.setMandatory(isMandatory);
      if (isMandatory) {
        setHasMandatoryFields(true);
      }
      if (field.needsItems()) {
        String fieldValue=content.getStringValue(cms,inputFieldPath + NODE_FIELDDEFAULTVALUE,locale);
        if (CmsStringUtil.isNotEmpty(fieldValue)) {
          StringTokenizer T=new StringTokenizer(fieldValue,"|");
          List items=new ArrayList(T.countTokens());
          while (T.hasMoreTokens()) {
            String part=T.nextToken();
            boolean isPreselected=part.indexOf('*') != -1;
            String value="";
            String label="";
            String selected="";
            int delimPos=part.indexOf(':');
            if (delimPos != -1) {
              value=part.substring(0,delimPos);
              label=part.substring(delimPos + 1);
            }
 else {
              value=part;
              label=value;
            }
            if (isPreselected) {
              value=CmsStringUtil.substitute(value,"*","");
              label=CmsStringUtil.substitute(label,"*","");
            }
            if (initial) {
              if (isPreselected) {
                selected="true";
              }
            }
 else {
              selected=readSelectedFromRequest(jsp.getRequest(),field.getType(),field.getName(),value);
            }
            items.add(new CmsFieldItem(value,label,Boolean.valueOf(selected).booleanValue()));
          }
          field.setItems(items);
        }
 else {
          throw new CmsConfigurationException(Messages.get().container(Messages.ERR_INIT_INPUT_FIELD_MISSING_ITEM_2,field.getName(),field.getType()));
        }
      }
    }
    fields.add(field);
  }
  setFields(fields);
  validateFormConfiguration(messages);
  if (isConfirmationMailEnabled() && isConfirmationMailOptional()) {
    getFields().add(createConfirmationMailCheckbox(jsp,messages,initial));
  }
}
