{
  if (OpenCms.getRunLevel() > OpenCms.RUNLEVEL_1_CORE_OBJECT) {
    if ((cms == null) || !cms.isAdmin()) {
      throw new CmsRoleViolationException(org.opencms.security.Messages.get().container(org.opencms.security.Messages.ERR_REQUIRED_ROLE_NOT_AVAILABLE_1,OpenCms.getDefaultUsers().getGroupAdministrators()));
    }
  }
  if ((jobInfo == null) || (jobInfo.getClassName() == null)) {
    CmsMessageContainer message=Messages.get().container(Messages.ERR_INVALID_JOB_CONFIGURATION_0);
    LOG.error(message.key());
    throw new CmsSchedulerException(message);
  }
  if (m_scheduler == null) {
    CmsMessageContainer message=Messages.get().container(Messages.ERR_NO_SCHEDULER_1,jobInfo.getJobName());
    LOG.error(message.key());
    throw new CmsSchedulerException(message);
  }
  String jobId=jobInfo.getId();
  if (jobId == null) {
    CmsUUID jobUUID=new CmsUUID();
    jobId="OpenCmsJob_".concat(jobUUID.toString());
    jobInfo.setId(jobId);
  }
 else {
    boolean foundJob=unscheduleJob(cms,jobId);
    if (!foundJob) {
      CmsMessageContainer message=Messages.get().container(Messages.ERR_JOB_WITH_ID_DOES_NOT_EXIST_1,jobId);
      LOG.warn(message.key());
      throw new CmsSchedulerException(message);
    }
    jobInfo.setFrozen(false);
  }
  try {
    Class.forName(jobInfo.getClassName());
  }
 catch (  ClassNotFoundException e) {
    CmsMessageContainer message=Messages.get().container(Messages.ERR_JOB_CLASS_NOT_FOUND_1,jobInfo.getClassName());
    LOG.error(message.key());
    throw new CmsSchedulerException(message);
  }
  CronTrigger trigger=new CronTrigger(jobId,Scheduler.DEFAULT_GROUP);
  try {
    trigger.setCronExpression(jobInfo.getCronExpression());
  }
 catch (  ParseException e) {
    CmsMessageContainer message=Messages.get().container(Messages.ERR_BAD_CRON_EXPRESSION_2,jobInfo.getJobName(),jobInfo.getCronExpression());
    LOG.error(message.key());
    throw new CmsSchedulerException(message);
  }
  if (jobInfo.isActive()) {
    JobDetail jobDetail=new JobDetail(jobId,Scheduler.DEFAULT_GROUP,CmsScheduleManager.class);
    jobInfo.setTrigger(trigger);
    JobDataMap jobData=new JobDataMap();
    jobData.put(CmsScheduleManager.C_SCHEDULER_JOB_INFO,jobInfo);
    jobDetail.setJobDataMap(jobData);
    try {
      m_scheduler.scheduleJob(jobDetail,trigger);
    }
 catch (    SchedulerException e) {
      CmsMessageContainer message=Messages.get().container(Messages.ERR_COULD_NOT_SCHEDULE_JOB_2,jobInfo.getJobName(),jobInfo.getClassName());
      LOG.error(message.key());
      throw new CmsSchedulerException(message);
    }
  }
  jobInfo.initConfiguration();
  m_jobs.add(jobInfo);
  if (LOG.isInfoEnabled()) {
    LOG.info(Messages.get().key(Messages.LOG_JOB_SCHEDULED_4,new Object[]{new Integer(m_jobs.size()),jobInfo.getJobName(),jobInfo.getClassName(),jobInfo.getContextInfo().getUserName()}));
    Date nextExecution=jobInfo.getExecutionTimeNext();
    if (nextExecution != null) {
      LOG.info(Messages.get().key(Messages.LOG_JOB_NEXT_EXECUTION_2,jobInfo.getJobName(),nextExecution));
    }
  }
}
