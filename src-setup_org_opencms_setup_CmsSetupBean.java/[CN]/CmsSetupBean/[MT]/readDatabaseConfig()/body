{
  m_databaseKeys=new ArrayList<String>();
  m_databaseProperties=new HashMap<String,Properties>();
  FileInputStream input=null;
  File childResource=null;
  List<String> databaseKeys=new ArrayList<String>();
  Map<String,Properties> databaseProperties=new HashMap<String,Properties>();
  try {
    File databaseSetupFolder=new File(m_webAppRfsPath + FOLDER_SETUP + FOLDER_DATABASE);
    File[] childResources=databaseSetupFolder.listFiles();
    if (childResources != null) {
      for (int i=0; i < childResources.length; i++) {
        childResource=childResources[i];
        if (childResource.exists() && childResource.isDirectory() && childResource.canRead()) {
          databaseKeys.add(childResource.getName().trim());
        }
      }
    }
    if (databaseSetupFolder.exists()) {
      for (      String key : databaseKeys) {
        String configPath=m_webAppRfsPath + "setup" + File.separatorChar+ "database"+ File.separatorChar+ key+ File.separatorChar+ "database.properties";
        try {
          input=new FileInputStream(new File(configPath));
          Properties databaseProps=new Properties();
          databaseProps.load(input);
          databaseProperties.put(key,databaseProps);
        }
 catch (        Exception e) {
          System.err.println(e.toString());
          e.printStackTrace(System.err);
          continue;
        }
      }
    }
    if (childResources != null) {
      for (int i=0; i < childResources.length; i++) {
        childResource=childResources[i];
        if (childResource.exists() && childResource.isDirectory() && childResource.canRead()) {
          String dataBasekey=childResource.getName().trim();
          Properties props=databaseProperties.get(dataBasekey);
          boolean supportsJPA=Boolean.valueOf(props.getProperty(dataBasekey + "." + PROPKEY_JPA_SUPPORTED)).booleanValue();
          boolean supportsSQL=Boolean.valueOf(props.getProperty(dataBasekey + "." + PROPKEY_SQL_SUPPORTED)).booleanValue();
          boolean isAS400orDB2=dataBasekey.equalsIgnoreCase(AS400_PROVIDER) || dataBasekey.equalsIgnoreCase(DB2_PROVIDER);
          if (isAS400orDB2) {
            if (checkFilesExists(REQUIRED_DB2_DB_SETUP_FILES,childResource)) {
              m_databaseKeys.add(childResource.getName().trim());
              m_databaseProperties.put(dataBasekey,props);
            }
          }
 else           if (supportsSQL) {
            if (checkFilesExists(REQUIRED_SQL_DB_SETUP_FILES,childResource)) {
              m_databaseKeys.add(childResource.getName().trim());
              m_databaseProperties.put(dataBasekey,props);
            }
          }
 else           if (supportsJPA && !supportsSQL) {
            if (checkFilesExists(REQUIRED_JPA_DB_SETUP_FILES,childResource)) {
              m_databaseKeys.add(childResource.getName().trim());
              m_databaseProperties.put(dataBasekey,props);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    System.err.println(e.toString());
    e.printStackTrace(System.err);
  }
 finally {
    try {
      if (input != null) {
        input.close();
      }
    }
 catch (    Exception e) {
    }
  }
}
