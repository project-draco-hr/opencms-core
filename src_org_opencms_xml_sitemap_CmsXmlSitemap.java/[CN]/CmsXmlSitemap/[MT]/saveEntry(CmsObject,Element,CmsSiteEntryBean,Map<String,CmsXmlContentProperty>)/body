{
  Element entryElement=parent.addElement(XmlNode.SITEENTRY.getName());
  entryElement.addElement(XmlNode.ID.getName()).addCDATA(entry.getId().toString());
  entryElement.addElement(XmlNode.NAME.getName()).addCDATA(entry.getName());
  entryElement.addElement(XmlNode.TITLE.getName()).addCDATA(entry.getTitle());
  Element vfsFile=entryElement.addElement(XmlNode.VFSFILE.getName());
  fillResource(cms,vfsFile,entry.getResourceId());
  Element propElement=null;
  for (  Map.Entry<String,String> property : entry.getProperties().entrySet()) {
    boolean isSitemapProperty=CmsSitemapManager.PROPERTY_SITEMAP.equals(property.getKey());
    if (!propertiesConf.containsKey(property.getKey()) && !isSitemapProperty) {
      continue;
    }
    if (propElement == null) {
      propElement=entryElement.addElement(XmlNode.PROPERTIES.getName());
    }
    propElement.addElement(XmlNode.NAME.getName()).addCDATA(property.getKey());
    Element valueElement=propElement.addElement(XmlNode.VALUE.getName());
    if (isSitemapProperty || propertiesConf.get(property.getKey()).getPropertyType().equals(CmsXmlContentProperty.T_VFSLIST)) {
      Element filelistElem=valueElement.addElement(XmlNode.FILELIST.getName());
      for (      String strId : CmsStringUtil.splitAsList(property.getValue(),CmsXmlSitemap.IDS_SEPARATOR)) {
        try {
          Element fileValueElem=filelistElem.addElement(XmlNode.URI.getName());
          fillResource(cms,fileValueElem,new CmsUUID(strId));
        }
 catch (        CmsException e) {
          LOG.error(e.getLocalizedMessage(),e);
        }
      }
    }
 else {
      valueElement.addElement(XmlNode.STRING.getName()).addCDATA(property.getValue());
    }
  }
  int subentryCount=0;
  for (  CmsSiteEntryBean subentry : entry.getSubEntries()) {
    saveEntry(cms,entryElement,subentry,propertiesConf);
    subentryCount++;
  }
}
